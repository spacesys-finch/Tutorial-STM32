
UART_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000597c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dfc  08005dfc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e04  08005e04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200001e0  08005fec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005fec  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d89e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea8  00000000  00000000  0002daae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  000303b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c90  00000000  00000000  00030d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098e7  00000000  00000000  000569b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8c84  00000000  00000000  00060297  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  00148f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b44 	.word	0x08005b44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08005b44 	.word	0x08005b44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fb4f 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f82f 	bl	800062c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fafe 	bl	8000bd0 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d8:	f000 f890 	bl	80006fc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x54>)
 80005de:	f003 fd09 	bl	8003ff4 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <main+0x58>)
 80005e4:	f003 fd06 	bl	8003ff4 <iprintf>

  char str[20];

  setvbuf(stdin, NULL, _IONBF, 0);
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x5c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6858      	ldr	r0, [r3, #4]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2202      	movs	r2, #2
 80005f2:	2100      	movs	r1, #0
 80005f4:	f003 fd2e 	bl	8004054 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("\n\r Enter your name:\n\r");
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x60>)
 80005fa:	f003 fcfb 	bl	8003ff4 <iprintf>

	scanf("%s",str);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x64>)
 8000604:	f003 fd0e 	bl	8004024 <iscanf>

	printf("\n\r Your name is: %s \n\r",str);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x68>)
 800060e:	f003 fcf1 	bl	8003ff4 <iprintf>
	printf("\n\r Enter your name:\n\r");
 8000612:	e7f1      	b.n	80005f8 <main+0x38>
 8000614:	08005b5c 	.word	0x08005b5c
 8000618:	08005bac 	.word	0x08005bac
 800061c:	20000010 	.word	0x20000010
 8000620:	08005bd4 	.word	0x08005bd4
 8000624:	08005bec 	.word	0x08005bec
 8000628:	08005bf0 	.word	0x08005bf0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0a8      	sub	sp, #160	; 0xa0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fcd2 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2254      	movs	r2, #84	; 0x54
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fcc4 	bl	8003fe4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fe7d 	bl	800135c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000682:	2355      	movs	r3, #85	; 0x55
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff00 	bl	80014a4 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006aa:	f000 f901 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80006c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c6:	2108      	movs	r1, #8
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa03 	bl	8001ad4 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006d4:	f000 f8ec 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006d8:	2320      	movs	r3, #32
 80006da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fc12 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f8df 	bl	80008b0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	37a0      	adds	r7, #160	; 0xa0
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_LPUART1_UART_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800073a:	f001 fe33 	bl	80023a4 <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8b4 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800074c:	f003 fb3b 	bl	8003dc6 <HAL_UARTEx_SetTxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 f8ab 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800075e:	f003 fb70 	bl	8003e42 <HAL_UARTEx_SetRxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f8a2 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_LPUART1_UART_Init+0x84>)
 800076e:	f003 faf1 	bl	8003d54 <HAL_UARTEx_DisableFifoMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000778:	f000 f89a 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000208 	.word	0x20000208
 8000784:	40008000 	.word	0x40008000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a2e      	ldr	r2, [pc, #184]	; (800085c <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a28      	ldr	r2, [pc, #160]	; (800085c <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f000 fd53 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_GPIO_Init+0xd8>)
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_GPIO_Init+0xdc>)
 8000820:	f000 fbc4 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000824:	2320      	movs	r3, #32
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 fbb5 	bl	8000fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2028      	movs	r0, #40	; 0x28
 8000848:	f000 fb7b 	bl	8000f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fb92 	bl	8000f76 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	10110000 	.word	0x10110000
 8000864:	48000800 	.word	0x48000800

08000868 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000870:	1d39      	adds	r1, r7, #4
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	2201      	movs	r2, #1
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <__io_putchar+0x20>)
 800087a:	f001 fde3 	bl	8002444 <HAL_UART_Transmit>

  return ch;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000208 	.word	0x20000208

0800088c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&hlpuart1, &ch, 1, 0xFFFF);
 8000892:	1df9      	adds	r1, r7, #7
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	2201      	movs	r2, #1
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <__io_getchar+0x20>)
 800089c:	f001 fe68 	bl	8002570 <HAL_UART_Receive>

	return ch;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000208 	.word	0x20000208

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
    /* Toggle LED2 for error */
    BSP_LED_Toggle(LED2);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f9c1 	bl	8000c3c <BSP_LED_Toggle>
    HAL_Delay(500);
 80008ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008be:	f000 fa43 	bl	8000d48 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 80008c2:	e7f7      	b.n	80008b4 <Error_Handler+0x4>

080008c4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6093      	str	r3, [r2, #8]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40007000 	.word	0x40007000

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800091a:	f7ff ffd3 	bl	80008c4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	65d3      	str	r3, [r2, #92]	; 0x5c
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x80>)
 800095c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800098e:	230c      	movs	r3, #12
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fb06 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40008000 	.word	0x40008000
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f982 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a14:	f000 fc7e 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e00a      	b.n	8000a44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2e:	f7ff ff2d 	bl	800088c <__io_getchar>
 8000a32:	4601      	mov	r1, r0
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	b2ca      	uxtb	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf0      	blt.n	8000a2e <_read+0x12>
	}

return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e009      	b.n	8000a7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fef9 	bl	8000868 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf1      	blt.n	8000a68 <_write+0x12>
	}
	return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_close>:

int _close(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return -1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_isatty>:

int _isatty(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x16>
		heap_end = &end;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <_sbrk+0x50>)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <_sbrk+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <_sbrk+0x50>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <_sbrk+0x50>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	466a      	mov	r2, sp
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d907      	bls.n	8000b32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b22:	f003 fa35 	bl	8003f90 <__errno>
 8000b26:	4602      	mov	r2, r0
 8000b28:	230c      	movs	r3, #12
 8000b2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e006      	b.n	8000b40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <_sbrk+0x50>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <_sbrk+0x50>)
 8000b3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200001fc 	.word	0x200001fc
 8000b4c:	200002a0 	.word	0x200002a0

08000b50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SystemInit+0x28>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <SystemInit+0x28>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SystemInit+0x28>)
 8000b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ffd3 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 f9f7 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fd07 	bl	80005c0 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000bc0:	08005e0c 	.word	0x08005e0c
  ldr r2, =_sbss
 8000bc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000bc8:	2000029c 	.word	0x2000029c

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <BSP_LED_Init+0x64>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <BSP_LED_Init+0x64>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <BSP_LED_Init+0x64>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <BSP_LED_Init+0x68>)
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	f107 020c 	add.w	r2, r7, #12
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f9cb 	bl	8000fac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <BSP_LED_Init+0x68>)
 8000c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1e:	2120      	movs	r1, #32
 8000c20:	2200      	movs	r2, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fb44 	bl	80012b0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	20000004 	.word	0x20000004

08000c3c <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <BSP_LED_Toggle+0x28>)
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	2220      	movs	r2, #32
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fb44 	bl	80012e0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 f95a 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 f80d 	bl	8000c98 <HAL_InitTick>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	e001      	b.n	8000c8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8a:	f7ff fe2b 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]

}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_InitTick+0x68>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d022      	beq.n	8000cf2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_InitTick+0x6c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_InitTick+0x68>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f966 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10f      	bne.n	8000cec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d809      	bhi.n	8000ce6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cda:	f000 f932 	bl	8000f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_InitTick+0x70>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e004      	b.n	8000cf6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e001      	b.n	8000cf6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000000c 	.word	0x2000000c
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x20>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000294 	.word	0x20000294
 8000d2c:	2000000c 	.word	0x2000000c

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000294 	.word	0x20000294

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d004      	beq.n	8000d6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_Delay+0x40>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6c:	bf00      	nop
 8000d6e:	f7ff ffdf 	bl	8000d30 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d8f7      	bhi.n	8000d6e <HAL_Delay+0x26>
  {
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff40 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff90 	bl	8000e80 <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5f 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff33 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa4 	bl	8000ee8 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fba:	e15a      	b.n	8001272 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 814c 	beq.w	800126c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d00b      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b12      	cmp	r3, #18
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0xea>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b12      	cmp	r3, #18
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80a6 	beq.w	800126c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a5a      	ldr	r2, [pc, #360]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001138:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d01f      	beq.n	80011a4 <HAL_GPIO_Init+0x1f8>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d019      	beq.n	80011a0 <HAL_GPIO_Init+0x1f4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_Init+0x1f0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1e4>
 800118c:	2305      	movs	r3, #5
 800118e:	e00a      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 8001190:	2306      	movs	r3, #6
 8001192:	e008      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 8001194:	2304      	movs	r3, #4
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 8001198:	2303      	movs	r3, #3
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1fa>
 80011a4:	2300      	movs	r3, #0
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b6:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_GPIO_Init+0x300>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a30      	ldr	r2, [pc, #192]	; (80012ac <HAL_GPIO_Init+0x300>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x300>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_GPIO_Init+0x300>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_GPIO_Init+0x300>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	f47f ae9d 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48001400 	.word	0x48001400
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f806 	bl	8001344 <HAL_GPIO_EXTI_Callback>
  }
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d141      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d131      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137e:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001390:	4a41      	ldr	r2, [pc, #260]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2232      	movs	r2, #50	; 0x32
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ae:	e002      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c2:	d102      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f2      	bne.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d158      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e057      	b.n	800148c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013ec:	e04d      	b.n	800148a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f4:	d141      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d131      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140a:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141c:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2232      	movs	r2, #50	; 0x32
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9b      	lsrs	r3, r3, #18
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143a:	e002      	b.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3b01      	subs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d102      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f2      	bne.n	800143c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d112      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e011      	b.n	800148c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001478:	e007      	b.n	800148a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40007000 	.word	0x40007000
 800149c:	20000000 	.word	0x20000000
 80014a0:	431bde83 	.word	0x431bde83

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e308      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c2:	4ba3      	ldr	r3, [pc, #652]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014cc:	4ba0      	ldr	r3, [pc, #640]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d102      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3e>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b99      	ldr	r3, [pc, #612]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2e3      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b91      	ldr	r3, [pc, #580]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a90      	ldr	r2, [pc, #576]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a8a      	ldr	r2, [pc, #552]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b84      	ldr	r3, [pc, #528]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a80      	ldr	r2, [pc, #512]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fbe8 	bl	8000d30 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fbe4 	bl	8000d30 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e2a8      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fbd4 	bl	8000d30 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fbd0 	bl	8000d30 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e294      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	4b6c      	ldr	r3, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4b62      	ldr	r3, [pc, #392]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d102      	bne.n	80015da <HAL_RCC_OscConfig+0x136>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_OscConfig+0x13c>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d11f      	bne.n	8001620 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x154>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e267      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b55      	ldr	r3, [pc, #340]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	4952      	ldr	r1, [pc, #328]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800160c:	4b51      	ldr	r3, [pc, #324]	; (8001754 <HAL_RCC_OscConfig+0x2b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb41 	bl	8000c98 <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d043      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e253      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb7c 	bl	8000d30 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fb78 	bl	8000d30 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e23c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4939      	ldr	r1, [pc, #228]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e01a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a36      	ldr	r2, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb58 	bl	8000d30 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fb54 	bl	8000d30 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e218      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03c      	beq.n	800172c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb31 	bl	8000d30 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb2d 	bl	8000d30 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1f1      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ef      	beq.n	80016d2 <HAL_RCC_OscConfig+0x22e>
 80016f2:	e01b      	b.n	800172c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fb14 	bl	8000d30 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fb10 	bl	8000d30 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1d4      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ef      	bne.n	800170c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80ab 	beq.w	8001890 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x2b4>
 800174a:	2301      	movs	r3, #1
 800174c:	e005      	b.n	800175a <HAL_RCC_OscConfig+0x2b6>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	20000008 	.word	0x20000008
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4baf      	ldr	r3, [pc, #700]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	4aae      	ldr	r2, [pc, #696]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	; 0x58
 800176a:	4bac      	ldr	r3, [pc, #688]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4ba9      	ldr	r3, [pc, #676]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001786:	4ba6      	ldr	r3, [pc, #664]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4aa5      	ldr	r2, [pc, #660]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff facd 	bl	8000d30 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fac9 	bl	8000d30 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e18d      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_RCC_OscConfig+0x32e>
 80017c0:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	4a95      	ldr	r2, [pc, #596]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d0:	e024      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d110      	bne.n	80017fc <HAL_RCC_OscConfig+0x358>
 80017da:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e0:	4a8e      	ldr	r2, [pc, #568]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ea:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f0:	4a8a      	ldr	r2, [pc, #552]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fa:	e00f      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017fc:	4b87      	ldr	r3, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	4a86      	ldr	r2, [pc, #536]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a82      	ldr	r2, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa84 	bl	8000d30 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fa80 	bl	8000d30 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e142      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x388>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa6d 	bl	8000d30 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa69 	bl	8000d30 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e12b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a64      	ldr	r2, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018aa:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa3c 	bl	8000d30 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fa38 	bl	8000d30 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0fc      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x418>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa1f 	bl	8000d30 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f6:	f7ff fa1b 	bl	8000d30 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0df      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80d3 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001920:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f000 808d 	beq.w	8001a48 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d15a      	bne.n	80019ec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f9f5 	bl	8000d30 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f9f1 	bl	8000d30 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0b5      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x580>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6a11      	ldr	r1, [r2, #32]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001978:	3a01      	subs	r2, #1
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	3a01      	subs	r2, #1
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001996:	0852      	lsrs	r2, r2, #1
 8001998:	3a01      	subs	r2, #1
 800199a:	0652      	lsls	r2, r2, #25
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019a2:	06d2      	lsls	r2, r2, #27
 80019a4:	430a      	orrs	r2, r1
 80019a6:	491d      	ldr	r1, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f9b4 	bl	8000d30 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f9b0 	bl	8000d30 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e074      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x528>
 80019ea:	e06c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001a0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f98c 	bl	8000d30 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1a:	e00e      	b.n	8001a3a <HAL_RCC_OscConfig+0x596>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f982 	bl	8000d30 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e046      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_OscConfig+0x62c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x584>
 8001a46:	e03e      	b.n	8001ac6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e039      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_OscConfig+0x62c>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d12c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	3b01      	subs	r3, #1
 8001a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d123      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d113      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e11e      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	498c      	ldr	r1, [pc, #560]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e106      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d073      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d129      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0f4      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b40:	f000 f99e 	bl	8001e80 <RCC_GetSysClockFreqFromPLLSource>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d93f      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d033      	beq.n	8001bce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d12f      	bne.n	8001bce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b76:	4a70      	ldr	r2, [pc, #448]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e024      	b.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0c6      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0be      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bac:	f000 f8ce 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4a61      	ldr	r2, [pc, #388]	; (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d909      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc2:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4957      	ldr	r1, [pc, #348]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be0:	f7ff f8a6 	bl	8000d30 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f8a2 	bl	8000d30 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e095      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c48:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d21d      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 020f 	bic.w	r2, r3, #15
 8001c8c:	4929      	ldr	r1, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f84c 	bl	8000d30 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f848 	bl	8000d30 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e03b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ed      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4917      	ldr	r1, [pc, #92]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490f      	ldr	r1, [pc, #60]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfe:	f000 f825 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d02:	4601      	mov	r1, r0
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <HAL_RCC_ClockConfig+0x26c>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	fa21 f303 	lsr.w	r3, r1, r3
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_RCC_ClockConfig+0x270>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ffb8 	bl	8000c98 <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	04c4b400 	.word	0x04c4b400
 8001d40:	08005c24 	.word	0x08005c24
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e047      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e03e      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d136      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	68d2      	ldr	r2, [r2, #12]
 8001dac:	0a12      	lsrs	r2, r2, #8
 8001dae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	0a12      	lsrs	r2, r2, #8
 8001dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
      break;
 8001dd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0e5b      	lsrs	r3, r3, #25
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e001      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	016e3600 	.word	0x016e3600

08001e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4601      	mov	r1, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08005c34 	.word	0x08005c34

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e58:	f7ff ffda 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08005c34 	.word	0x08005c34

08001e80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d10c      	bne.n	8001ebe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eae:	68d2      	ldr	r2, [r2, #12]
 8001eb0:	0a12      	lsrs	r2, r2, #8
 8001eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
    break;
 8001ebc:	e00c      	b.n	8001ed8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec8:	68d2      	ldr	r2, [r2, #12]
 8001eca:	0a12      	lsrs	r2, r2, #8
 8001ecc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    break;
 8001ed6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0e5b      	lsrs	r3, r3, #25
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	016e3600 	.word	0x016e3600
 8001f08:	00f42400 	.word	0x00f42400

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f14:	2300      	movs	r3, #0
 8001f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8098 	beq.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fee5 	bl	8000d30 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f68:	e009      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7fe fee1 	bl	8000d30 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d902      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7c:	e005      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ef      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d159      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01e      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fea1 	bl	8000d30 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	e00b      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fe9d 	bl	8000d30 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d902      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	74fb      	strb	r3, [r7, #19]
            break;
 8002008:	e006      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ec      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002034:	e008      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	74bb      	strb	r3, [r7, #18]
 800203a:	e005      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002048:	7c7b      	ldrb	r3, [r7, #17]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4baf      	ldr	r3, [pc, #700]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4aae      	ldr	r2, [pc, #696]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4ba9      	ldr	r3, [pc, #676]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0203 	bic.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	49a5      	ldr	r1, [pc, #660]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002088:	4ba0      	ldr	r3, [pc, #640]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 020c 	bic.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	499d      	ldr	r1, [pc, #628]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020aa:	4b98      	ldr	r3, [pc, #608]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4994      	ldr	r1, [pc, #592]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	498c      	ldr	r1, [pc, #560]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ee:	4b87      	ldr	r3, [pc, #540]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4983      	ldr	r1, [pc, #524]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002110:	4b7e      	ldr	r3, [pc, #504]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	497b      	ldr	r1, [pc, #492]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4972      	ldr	r1, [pc, #456]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	496a      	ldr	r1, [pc, #424]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	4961      	ldr	r1, [pc, #388]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002198:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800219a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	4959      	ldr	r1, [pc, #356]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ba:	4b54      	ldr	r3, [pc, #336]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	4950      	ldr	r1, [pc, #320]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4948      	ldr	r1, [pc, #288]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a42      	ldr	r2, [pc, #264]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	493a      	ldr	r1, [pc, #232]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	492c      	ldr	r1, [pc, #176]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002276:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	491e      	ldr	r1, [pc, #120]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d018      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4902      	ldr	r1, [pc, #8]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800230a:	e001      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800230c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	4917      	ldr	r1, [pc, #92]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d105      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800236c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4909      	ldr	r1, [pc, #36]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002394:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002396:	7cbb      	ldrb	r3, [r7, #18]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7fe faaf 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2224      	movs	r2, #36	; 0x24
 80023d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f992 	bl	8002710 <UART_SetConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f001 fb74 	bl	8003aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f001 fbfb 	bl	8003c30 <UART_CheckIdleState>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245a:	2b20      	cmp	r3, #32
 800245c:	f040 8083 	bne.w	8002566 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_UART_Transmit+0x28>
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e07b      	b.n	8002568 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_UART_Transmit+0x3a>
 800247a:	2302      	movs	r3, #2
 800247c:	e074      	b.n	8002568 <HAL_UART_Transmit+0x124>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2221      	movs	r2, #33	; 0x21
 8002492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002496:	f7fe fc4b 	bl	8000d30 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b4:	d108      	bne.n	80024c8 <HAL_UART_Transmit+0x84>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e003      	b.n	80024d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024d0:	e02c      	b.n	800252c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f001 fbef 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03d      	b.n	8002568 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3302      	adds	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e007      	b.n	800251a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1cc      	bne.n	80024d2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2200      	movs	r2, #0
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 fbbc 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e00a      	b.n	8002568 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80bd 	bne.w	8002706 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_UART_Receive+0x28>
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b5      	b.n	8002708 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Receive+0x3a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0ae      	b.n	8002708 <HAL_UART_Receive+0x198>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2222      	movs	r2, #34	; 0x22
 80025be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025c2:	f7fe fbb5 	bl	8000d30 <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	88fa      	ldrh	r2, [r7, #6]
 80025d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d10e      	bne.n	8002600 <HAL_UART_Receive+0x90>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_UART_Receive+0x86>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80025f4:	e02d      	b.n	8002652 <HAL_UART_Receive+0xe2>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80025fe:	e028      	b.n	8002652 <HAL_UART_Receive+0xe2>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_UART_Receive+0xb4>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <HAL_UART_Receive+0xaa>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	22ff      	movs	r2, #255	; 0xff
 8002614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002618:	e01b      	b.n	8002652 <HAL_UART_Receive+0xe2>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	227f      	movs	r2, #127	; 0x7f
 800261e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002622:	e016      	b.n	8002652 <HAL_UART_Receive+0xe2>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262c:	d10d      	bne.n	800264a <HAL_UART_Receive+0xda>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_UART_Receive+0xd0>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	227f      	movs	r2, #127	; 0x7f
 800263a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800263e:	e008      	b.n	8002652 <HAL_UART_Receive+0xe2>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	223f      	movs	r2, #63	; 0x3f
 8002644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002648:	e003      	b.n	8002652 <HAL_UART_Receive+0xe2>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002658:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002662:	d108      	bne.n	8002676 <HAL_UART_Receive+0x106>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e003      	b.n	800267e <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800267e:	e032      	b.n	80026e6 <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f001 fb18 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e036      	b.n	8002708 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10c      	bne.n	80026ba <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	4013      	ands	r3, r2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3302      	adds	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e00c      	b.n	80026d4 <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	8a7b      	ldrh	r3, [r7, #18]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4013      	ands	r3, r2
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1c6      	bne.n	8002680 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002714:	b08a      	sub	sp, #40	; 0x28
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4313      	orrs	r3, r2
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	4313      	orrs	r3, r2
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4baa      	ldr	r3, [pc, #680]	; (80029f8 <UART_SetConfig+0x2e8>)
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a9f      	ldr	r2, [pc, #636]	; (80029fc <UART_SetConfig+0x2ec>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	4313      	orrs	r3, r2
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002796:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f023 010f 	bic.w	r1, r3, #15
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a90      	ldr	r2, [pc, #576]	; (8002a00 <UART_SetConfig+0x2f0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d126      	bne.n	8002812 <UART_SetConfig+0x102>
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <UART_SetConfig+0x2f4>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d81a      	bhi.n	8002808 <UART_SetConfig+0xf8>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <UART_SetConfig+0xc8>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027f9 	.word	0x080027f9
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002801 	.word	0x08002801
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ee:	e116      	b.n	8002a1e <UART_SetConfig+0x30e>
 80027f0:	2302      	movs	r3, #2
 80027f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f6:	e112      	b.n	8002a1e <UART_SetConfig+0x30e>
 80027f8:	2304      	movs	r3, #4
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fe:	e10e      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002800:	2308      	movs	r3, #8
 8002802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002806:	e10a      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002808:	2310      	movs	r3, #16
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280e:	bf00      	nop
 8002810:	e105      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7c      	ldr	r2, [pc, #496]	; (8002a08 <UART_SetConfig+0x2f8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d138      	bne.n	800288e <UART_SetConfig+0x17e>
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <UART_SetConfig+0x2f4>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d82c      	bhi.n	8002884 <UART_SetConfig+0x174>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <UART_SetConfig+0x120>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002865 	.word	0x08002865
 8002834:	08002885 	.word	0x08002885
 8002838:	08002885 	.word	0x08002885
 800283c:	08002885 	.word	0x08002885
 8002840:	08002875 	.word	0x08002875
 8002844:	08002885 	.word	0x08002885
 8002848:	08002885 	.word	0x08002885
 800284c:	08002885 	.word	0x08002885
 8002850:	0800286d 	.word	0x0800286d
 8002854:	08002885 	.word	0x08002885
 8002858:	08002885 	.word	0x08002885
 800285c:	08002885 	.word	0x08002885
 8002860:	0800287d 	.word	0x0800287d
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286a:	e0d8      	b.n	8002a1e <UART_SetConfig+0x30e>
 800286c:	2302      	movs	r3, #2
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e0d4      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002874:	2304      	movs	r3, #4
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287a:	e0d0      	b.n	8002a1e <UART_SetConfig+0x30e>
 800287c:	2308      	movs	r3, #8
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	e0cc      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002884:	2310      	movs	r3, #16
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288a:	bf00      	nop
 800288c:	e0c7      	b.n	8002a1e <UART_SetConfig+0x30e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <UART_SetConfig+0x2fc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d125      	bne.n	80028e4 <UART_SetConfig+0x1d4>
 8002898:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <UART_SetConfig+0x2f4>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d011      	beq.n	80028ca <UART_SetConfig+0x1ba>
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d802      	bhi.n	80028b0 <UART_SetConfig+0x1a0>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <UART_SetConfig+0x1aa>
 80028ae:	e014      	b.n	80028da <UART_SetConfig+0x1ca>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d006      	beq.n	80028c2 <UART_SetConfig+0x1b2>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d00c      	beq.n	80028d2 <UART_SetConfig+0x1c2>
 80028b8:	e00f      	b.n	80028da <UART_SetConfig+0x1ca>
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c0:	e0ad      	b.n	8002a1e <UART_SetConfig+0x30e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c8:	e0a9      	b.n	8002a1e <UART_SetConfig+0x30e>
 80028ca:	2304      	movs	r3, #4
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d0:	e0a5      	b.n	8002a1e <UART_SetConfig+0x30e>
 80028d2:	2308      	movs	r3, #8
 80028d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d8:	e0a1      	b.n	8002a1e <UART_SetConfig+0x30e>
 80028da:	2310      	movs	r3, #16
 80028dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e0:	bf00      	nop
 80028e2:	e09c      	b.n	8002a1e <UART_SetConfig+0x30e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a49      	ldr	r2, [pc, #292]	; (8002a10 <UART_SetConfig+0x300>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d125      	bne.n	800293a <UART_SetConfig+0x22a>
 80028ee:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <UART_SetConfig+0x2f4>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d011      	beq.n	8002920 <UART_SetConfig+0x210>
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d802      	bhi.n	8002906 <UART_SetConfig+0x1f6>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <UART_SetConfig+0x200>
 8002904:	e014      	b.n	8002930 <UART_SetConfig+0x220>
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d006      	beq.n	8002918 <UART_SetConfig+0x208>
 800290a:	2bc0      	cmp	r3, #192	; 0xc0
 800290c:	d00c      	beq.n	8002928 <UART_SetConfig+0x218>
 800290e:	e00f      	b.n	8002930 <UART_SetConfig+0x220>
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002916:	e082      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002918:	2302      	movs	r3, #2
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e07e      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002920:	2304      	movs	r3, #4
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e07a      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002928:	2308      	movs	r3, #8
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	e076      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002930:	2310      	movs	r3, #16
 8002932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002936:	bf00      	nop
 8002938:	e071      	b.n	8002a1e <UART_SetConfig+0x30e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <UART_SetConfig+0x304>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d129      	bne.n	8002998 <UART_SetConfig+0x288>
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <UART_SetConfig+0x2f4>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002952:	d014      	beq.n	800297e <UART_SetConfig+0x26e>
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	d802      	bhi.n	8002960 <UART_SetConfig+0x250>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <UART_SetConfig+0x25e>
 800295e:	e016      	b.n	800298e <UART_SetConfig+0x27e>
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d007      	beq.n	8002976 <UART_SetConfig+0x266>
 8002966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800296a:	d00c      	beq.n	8002986 <UART_SetConfig+0x276>
 800296c:	e00f      	b.n	800298e <UART_SetConfig+0x27e>
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002974:	e053      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002976:	2302      	movs	r3, #2
 8002978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297c:	e04f      	b.n	8002a1e <UART_SetConfig+0x30e>
 800297e:	2304      	movs	r3, #4
 8002980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002984:	e04b      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002986:	2308      	movs	r3, #8
 8002988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298c:	e047      	b.n	8002a1e <UART_SetConfig+0x30e>
 800298e:	2310      	movs	r3, #16
 8002990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002994:	bf00      	nop
 8002996:	e042      	b.n	8002a1e <UART_SetConfig+0x30e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a17      	ldr	r2, [pc, #92]	; (80029fc <UART_SetConfig+0x2ec>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d13a      	bne.n	8002a18 <UART_SetConfig+0x308>
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <UART_SetConfig+0x2f4>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d014      	beq.n	80029dc <UART_SetConfig+0x2cc>
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d802      	bhi.n	80029be <UART_SetConfig+0x2ae>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <UART_SetConfig+0x2bc>
 80029bc:	e016      	b.n	80029ec <UART_SetConfig+0x2dc>
 80029be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c2:	d007      	beq.n	80029d4 <UART_SetConfig+0x2c4>
 80029c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c8:	d00c      	beq.n	80029e4 <UART_SetConfig+0x2d4>
 80029ca:	e00f      	b.n	80029ec <UART_SetConfig+0x2dc>
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029d2:	e024      	b.n	8002a1e <UART_SetConfig+0x30e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029da:	e020      	b.n	8002a1e <UART_SetConfig+0x30e>
 80029dc:	2304      	movs	r3, #4
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e2:	e01c      	b.n	8002a1e <UART_SetConfig+0x30e>
 80029e4:	2308      	movs	r3, #8
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e018      	b.n	8002a1e <UART_SetConfig+0x30e>
 80029ec:	2310      	movs	r3, #16
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	bf00      	nop
 80029f4:	e013      	b.n	8002a1e <UART_SetConfig+0x30e>
 80029f6:	bf00      	nop
 80029f8:	cfff69f3 	.word	0xcfff69f3
 80029fc:	40008000 	.word	0x40008000
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40004800 	.word	0x40004800
 8002a10:	40004c00 	.word	0x40004c00
 8002a14:	40005000 	.word	0x40005000
 8002a18:	2310      	movs	r3, #16
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a86      	ldr	r2, [pc, #536]	; (8002c3c <UART_SetConfig+0x52c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f040 8422 	bne.w	800326e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	f200 8173 	bhi.w	8002d1a <UART_SetConfig+0x60a>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <UART_SetConfig+0x32c>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002d1b 	.word	0x08002d1b
 8002a44:	08002b03 	.word	0x08002b03
 8002a48:	08002d1b 	.word	0x08002d1b
 8002a4c:	08002b9b 	.word	0x08002b9b
 8002a50:	08002d1b 	.word	0x08002d1b
 8002a54:	08002d1b 	.word	0x08002d1b
 8002a58:	08002d1b 	.word	0x08002d1b
 8002a5c:	08002c6d 	.word	0x08002c6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a60:	f7ff f9e2 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d044      	beq.n	8002af8 <UART_SetConfig+0x3e8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d03e      	beq.n	8002af4 <UART_SetConfig+0x3e4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d038      	beq.n	8002af0 <UART_SetConfig+0x3e0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d032      	beq.n	8002aec <UART_SetConfig+0x3dc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d02c      	beq.n	8002ae8 <UART_SetConfig+0x3d8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d026      	beq.n	8002ae4 <UART_SetConfig+0x3d4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d020      	beq.n	8002ae0 <UART_SetConfig+0x3d0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d01a      	beq.n	8002adc <UART_SetConfig+0x3cc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d014      	beq.n	8002ad8 <UART_SetConfig+0x3c8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	d00e      	beq.n	8002ad4 <UART_SetConfig+0x3c4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b0a      	cmp	r3, #10
 8002abc:	d008      	beq.n	8002ad0 <UART_SetConfig+0x3c0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b0b      	cmp	r3, #11
 8002ac4:	d102      	bne.n	8002acc <UART_SetConfig+0x3bc>
 8002ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aca:	e016      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e014      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	e012      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	e010      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e00e      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002adc:	2310      	movs	r3, #16
 8002ade:	e00c      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	e00a      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	e008      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002ae8:	2308      	movs	r3, #8
 8002aea:	e006      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002aec:	2306      	movs	r3, #6
 8002aee:	e004      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e002      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e000      	b.n	8002afa <UART_SetConfig+0x3ea>
 8002af8:	2301      	movs	r3, #1
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
        break;
 8002b00:	e10e      	b.n	8002d20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d044      	beq.n	8002b94 <UART_SetConfig+0x484>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d03e      	beq.n	8002b90 <UART_SetConfig+0x480>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d038      	beq.n	8002b8c <UART_SetConfig+0x47c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d032      	beq.n	8002b88 <UART_SetConfig+0x478>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d02c      	beq.n	8002b84 <UART_SetConfig+0x474>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d026      	beq.n	8002b80 <UART_SetConfig+0x470>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d020      	beq.n	8002b7c <UART_SetConfig+0x46c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b07      	cmp	r3, #7
 8002b40:	d01a      	beq.n	8002b78 <UART_SetConfig+0x468>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d014      	beq.n	8002b74 <UART_SetConfig+0x464>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b09      	cmp	r3, #9
 8002b50:	d00e      	beq.n	8002b70 <UART_SetConfig+0x460>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d008      	beq.n	8002b6c <UART_SetConfig+0x45c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b0b      	cmp	r3, #11
 8002b60:	d102      	bne.n	8002b68 <UART_SetConfig+0x458>
 8002b62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b66:	e016      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <UART_SetConfig+0x530>)
 8002b6a:	e014      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <UART_SetConfig+0x534>)
 8002b6e:	e012      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <UART_SetConfig+0x538>)
 8002b72:	e010      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b74:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <UART_SetConfig+0x53c>)
 8002b76:	e00e      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <UART_SetConfig+0x540>)
 8002b7a:	e00c      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <UART_SetConfig+0x544>)
 8002b7e:	e00a      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <UART_SetConfig+0x548>)
 8002b82:	e008      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <UART_SetConfig+0x54c>)
 8002b86:	e006      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <UART_SetConfig+0x550>)
 8002b8a:	e004      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <UART_SetConfig+0x554>)
 8002b8e:	e002      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <UART_SetConfig+0x558>)
 8002b92:	e000      	b.n	8002b96 <UART_SetConfig+0x486>
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <UART_SetConfig+0x530>)
 8002b96:	617b      	str	r3, [r7, #20]
        break;
 8002b98:	e0c2      	b.n	8002d20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b9a:	f7ff f8d7 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d044      	beq.n	8002c32 <UART_SetConfig+0x522>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d03e      	beq.n	8002c2e <UART_SetConfig+0x51e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d038      	beq.n	8002c2a <UART_SetConfig+0x51a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d032      	beq.n	8002c26 <UART_SetConfig+0x516>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d02c      	beq.n	8002c22 <UART_SetConfig+0x512>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d026      	beq.n	8002c1e <UART_SetConfig+0x50e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d020      	beq.n	8002c1a <UART_SetConfig+0x50a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d01a      	beq.n	8002c16 <UART_SetConfig+0x506>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d014      	beq.n	8002c12 <UART_SetConfig+0x502>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	d00e      	beq.n	8002c0e <UART_SetConfig+0x4fe>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d008      	beq.n	8002c0a <UART_SetConfig+0x4fa>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b0b      	cmp	r3, #11
 8002bfe:	d102      	bne.n	8002c06 <UART_SetConfig+0x4f6>
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	e016      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e014      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	e012      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c0e:	2340      	movs	r3, #64	; 0x40
 8002c10:	e010      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c12:	2320      	movs	r3, #32
 8002c14:	e00e      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c16:	2310      	movs	r3, #16
 8002c18:	e00c      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	e00a      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c1e:	230a      	movs	r3, #10
 8002c20:	e008      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e006      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e004      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e002      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e000      	b.n	8002c34 <UART_SetConfig+0x524>
 8002c32:	2301      	movs	r3, #1
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
        break;
 8002c3a:	e071      	b.n	8002d20 <UART_SetConfig+0x610>
 8002c3c:	40008000 	.word	0x40008000
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	0001e848 	.word	0x0001e848
 8002c48:	0003d090 	.word	0x0003d090
 8002c4c:	0007a120 	.word	0x0007a120
 8002c50:	000f4240 	.word	0x000f4240
 8002c54:	00145855 	.word	0x00145855
 8002c58:	00186a00 	.word	0x00186a00
 8002c5c:	001e8480 	.word	0x001e8480
 8002c60:	0028b0aa 	.word	0x0028b0aa
 8002c64:	003d0900 	.word	0x003d0900
 8002c68:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d04e      	beq.n	8002d12 <UART_SetConfig+0x602>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d047      	beq.n	8002d0c <UART_SetConfig+0x5fc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d040      	beq.n	8002d06 <UART_SetConfig+0x5f6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d039      	beq.n	8002d00 <UART_SetConfig+0x5f0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d032      	beq.n	8002cfa <UART_SetConfig+0x5ea>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d02b      	beq.n	8002cf4 <UART_SetConfig+0x5e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d024      	beq.n	8002cee <UART_SetConfig+0x5de>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	d01d      	beq.n	8002ce8 <UART_SetConfig+0x5d8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d016      	beq.n	8002ce2 <UART_SetConfig+0x5d2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	d00f      	beq.n	8002cdc <UART_SetConfig+0x5cc>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b0a      	cmp	r3, #10
 8002cc2:	d008      	beq.n	8002cd6 <UART_SetConfig+0x5c6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b0b      	cmp	r3, #11
 8002cca:	d101      	bne.n	8002cd0 <UART_SetConfig+0x5c0>
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	e022      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd4:	e01f      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cda:	e01c      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	e019      	b.n	8002d16 <UART_SetConfig+0x606>
 8002ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce6:	e016      	b.n	8002d16 <UART_SetConfig+0x606>
 8002ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cec:	e013      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002cf2:	e010      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cf4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002cf8:	e00d      	b.n	8002d16 <UART_SetConfig+0x606>
 8002cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfe:	e00a      	b.n	8002d16 <UART_SetConfig+0x606>
 8002d00:	f241 5355 	movw	r3, #5461	; 0x1555
 8002d04:	e007      	b.n	8002d16 <UART_SetConfig+0x606>
 8002d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0a:	e004      	b.n	8002d16 <UART_SetConfig+0x606>
 8002d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d10:	e001      	b.n	8002d16 <UART_SetConfig+0x606>
 8002d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d16:	617b      	str	r3, [r7, #20]
        break;
 8002d18:	e002      	b.n	8002d20 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	76fb      	strb	r3, [r7, #27]
        break;
 8002d1e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 86b7 	beq.w	8003a96 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d305      	bcc.n	8002d44 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d903      	bls.n	8002d4c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	76fb      	strb	r3, [r7, #27]
 8002d48:	f000 bea5 	b.w	8003a96 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8002d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 8277 	bhi.w	8003244 <UART_SetConfig+0xb34>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0x64c>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08003245 	.word	0x08003245
 8002d64:	08002ebf 	.word	0x08002ebf
 8002d68:	08003245 	.word	0x08003245
 8002d6c:	08002fb5 	.word	0x08002fb5
 8002d70:	08003245 	.word	0x08003245
 8002d74:	08003245 	.word	0x08003245
 8002d78:	08003245 	.word	0x08003245
 8002d7c:	080030f3 	.word	0x080030f3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7ff f852 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002d84:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d067      	beq.n	8002e66 <UART_SetConfig+0x756>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d05e      	beq.n	8002e5c <UART_SetConfig+0x74c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d055      	beq.n	8002e52 <UART_SetConfig+0x742>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d04c      	beq.n	8002e48 <UART_SetConfig+0x738>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d043      	beq.n	8002e3e <UART_SetConfig+0x72e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d03a      	beq.n	8002e34 <UART_SetConfig+0x724>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d031      	beq.n	8002e2a <UART_SetConfig+0x71a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d028      	beq.n	8002e20 <UART_SetConfig+0x710>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d01f      	beq.n	8002e16 <UART_SetConfig+0x706>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d016      	beq.n	8002e0c <UART_SetConfig+0x6fc>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b0a      	cmp	r3, #10
 8002de4:	d00d      	beq.n	8002e02 <UART_SetConfig+0x6f2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b0b      	cmp	r3, #11
 8002dec:	d104      	bne.n	8002df8 <UART_SetConfig+0x6e8>
 8002dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	e03a      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002df8:	f04f 0301 	mov.w	r3, #1
 8002dfc:	f04f 0400 	mov.w	r4, #0
 8002e00:	e035      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e02:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	e030      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	e02b      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e16:	f04f 0320 	mov.w	r3, #32
 8002e1a:	f04f 0400 	mov.w	r4, #0
 8002e1e:	e026      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e20:	f04f 0310 	mov.w	r3, #16
 8002e24:	f04f 0400 	mov.w	r4, #0
 8002e28:	e021      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e2a:	f04f 030c 	mov.w	r3, #12
 8002e2e:	f04f 0400 	mov.w	r4, #0
 8002e32:	e01c      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e34:	f04f 030a 	mov.w	r3, #10
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	e017      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e3e:	f04f 0308 	mov.w	r3, #8
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	e012      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e48:	f04f 0306 	mov.w	r3, #6
 8002e4c:	f04f 0400 	mov.w	r4, #0
 8002e50:	e00d      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e52:	f04f 0304 	mov.w	r3, #4
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	e008      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e5c:	f04f 0302 	mov.w	r3, #2
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	e003      	b.n	8002e6e <UART_SetConfig+0x75e>
 8002e66:	f04f 0301 	mov.w	r3, #1
 8002e6a:	f04f 0400 	mov.w	r4, #0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4623      	mov	r3, r4
 8002e72:	f7fd fa25 	bl	80002c0 <__aeabi_uldivmod>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f04f 0400 	mov.w	r4, #0
 8002e86:	0214      	lsls	r4, r2, #8
 8002e88:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e8c:	020b      	lsls	r3, r1, #8
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6852      	ldr	r2, [r2, #4]
 8002e92:	0852      	lsrs	r2, r2, #1
 8002e94:	4611      	mov	r1, r2
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	eb13 0b01 	adds.w	fp, r3, r1
 8002e9e:	eb44 0c02 	adc.w	ip, r4, r2
 8002ea2:	4658      	mov	r0, fp
 8002ea4:	4661      	mov	r1, ip
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f04f 0400 	mov.w	r4, #0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	f7fd fa05 	bl	80002c0 <__aeabi_uldivmod>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	61fb      	str	r3, [r7, #28]
            break;
 8002ebc:	e1c5      	b.n	800324a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05b      	beq.n	8002f7e <UART_SetConfig+0x86e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d053      	beq.n	8002f76 <UART_SetConfig+0x866>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d04b      	beq.n	8002f6e <UART_SetConfig+0x85e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d043      	beq.n	8002f66 <UART_SetConfig+0x856>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d03b      	beq.n	8002f5e <UART_SetConfig+0x84e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d033      	beq.n	8002f56 <UART_SetConfig+0x846>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d02b      	beq.n	8002f4e <UART_SetConfig+0x83e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d023      	beq.n	8002f46 <UART_SetConfig+0x836>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d01b      	beq.n	8002f3e <UART_SetConfig+0x82e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b09      	cmp	r3, #9
 8002f0c:	d013      	beq.n	8002f36 <UART_SetConfig+0x826>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b0a      	cmp	r3, #10
 8002f14:	d00b      	beq.n	8002f2e <UART_SetConfig+0x81e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d103      	bne.n	8002f26 <UART_SetConfig+0x816>
 8002f1e:	4bae      	ldr	r3, [pc, #696]	; (80031d8 <UART_SetConfig+0xac8>)
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	e02e      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f26:	4bad      	ldr	r3, [pc, #692]	; (80031dc <UART_SetConfig+0xacc>)
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	e02a      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f2e:	4bac      	ldr	r3, [pc, #688]	; (80031e0 <UART_SetConfig+0xad0>)
 8002f30:	f04f 0400 	mov.w	r4, #0
 8002f34:	e026      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f36:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <UART_SetConfig+0xad4>)
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	e022      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f3e:	4baa      	ldr	r3, [pc, #680]	; (80031e8 <UART_SetConfig+0xad8>)
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	e01e      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f46:	4ba9      	ldr	r3, [pc, #676]	; (80031ec <UART_SetConfig+0xadc>)
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	e01a      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f4e:	a49e      	add	r4, pc, #632	; (adr r4, 80031c8 <UART_SetConfig+0xab8>)
 8002f50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f54:	e016      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f56:	4ba6      	ldr	r3, [pc, #664]	; (80031f0 <UART_SetConfig+0xae0>)
 8002f58:	f04f 0400 	mov.w	r4, #0
 8002f5c:	e012      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f5e:	4ba5      	ldr	r3, [pc, #660]	; (80031f4 <UART_SetConfig+0xae4>)
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	e00e      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f66:	a49a      	add	r4, pc, #616	; (adr r4, 80031d0 <UART_SetConfig+0xac0>)
 8002f68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f6c:	e00a      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f6e:	4ba2      	ldr	r3, [pc, #648]	; (80031f8 <UART_SetConfig+0xae8>)
 8002f70:	f04f 0400 	mov.w	r4, #0
 8002f74:	e006      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f76:	4ba1      	ldr	r3, [pc, #644]	; (80031fc <UART_SetConfig+0xaec>)
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	e002      	b.n	8002f84 <UART_SetConfig+0x874>
 8002f7e:	4b97      	ldr	r3, [pc, #604]	; (80031dc <UART_SetConfig+0xacc>)
 8002f80:	f04f 0400 	mov.w	r4, #0
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	0852      	lsrs	r2, r2, #1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	eb13 0b01 	adds.w	fp, r3, r1
 8002f94:	eb44 0c02 	adc.w	ip, r4, r2
 8002f98:	4658      	mov	r0, fp
 8002f9a:	4661      	mov	r1, ip
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	f7fd f98a 	bl	80002c0 <__aeabi_uldivmod>
 8002fac:	4603      	mov	r3, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	61fb      	str	r3, [r7, #28]
            break;
 8002fb2:	e14a      	b.n	800324a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002fb4:	f7fe feca 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8002fb8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d067      	beq.n	800309a <UART_SetConfig+0x98a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d05e      	beq.n	8003090 <UART_SetConfig+0x980>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d055      	beq.n	8003086 <UART_SetConfig+0x976>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d04c      	beq.n	800307c <UART_SetConfig+0x96c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d043      	beq.n	8003072 <UART_SetConfig+0x962>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d03a      	beq.n	8003068 <UART_SetConfig+0x958>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d031      	beq.n	800305e <UART_SetConfig+0x94e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b07      	cmp	r3, #7
 8003000:	d028      	beq.n	8003054 <UART_SetConfig+0x944>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b08      	cmp	r3, #8
 8003008:	d01f      	beq.n	800304a <UART_SetConfig+0x93a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b09      	cmp	r3, #9
 8003010:	d016      	beq.n	8003040 <UART_SetConfig+0x930>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b0a      	cmp	r3, #10
 8003018:	d00d      	beq.n	8003036 <UART_SetConfig+0x926>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b0b      	cmp	r3, #11
 8003020:	d104      	bne.n	800302c <UART_SetConfig+0x91c>
 8003022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003026:	f04f 0400 	mov.w	r4, #0
 800302a:	e03a      	b.n	80030a2 <UART_SetConfig+0x992>
 800302c:	f04f 0301 	mov.w	r3, #1
 8003030:	f04f 0400 	mov.w	r4, #0
 8003034:	e035      	b.n	80030a2 <UART_SetConfig+0x992>
 8003036:	f04f 0380 	mov.w	r3, #128	; 0x80
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	e030      	b.n	80030a2 <UART_SetConfig+0x992>
 8003040:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003044:	f04f 0400 	mov.w	r4, #0
 8003048:	e02b      	b.n	80030a2 <UART_SetConfig+0x992>
 800304a:	f04f 0320 	mov.w	r3, #32
 800304e:	f04f 0400 	mov.w	r4, #0
 8003052:	e026      	b.n	80030a2 <UART_SetConfig+0x992>
 8003054:	f04f 0310 	mov.w	r3, #16
 8003058:	f04f 0400 	mov.w	r4, #0
 800305c:	e021      	b.n	80030a2 <UART_SetConfig+0x992>
 800305e:	f04f 030c 	mov.w	r3, #12
 8003062:	f04f 0400 	mov.w	r4, #0
 8003066:	e01c      	b.n	80030a2 <UART_SetConfig+0x992>
 8003068:	f04f 030a 	mov.w	r3, #10
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	e017      	b.n	80030a2 <UART_SetConfig+0x992>
 8003072:	f04f 0308 	mov.w	r3, #8
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	e012      	b.n	80030a2 <UART_SetConfig+0x992>
 800307c:	f04f 0306 	mov.w	r3, #6
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	e00d      	b.n	80030a2 <UART_SetConfig+0x992>
 8003086:	f04f 0304 	mov.w	r3, #4
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	e008      	b.n	80030a2 <UART_SetConfig+0x992>
 8003090:	f04f 0302 	mov.w	r3, #2
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0x992>
 800309a:	f04f 0301 	mov.w	r3, #1
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4623      	mov	r3, r4
 80030a6:	f7fd f90b 	bl	80002c0 <__aeabi_uldivmod>
 80030aa:	4603      	mov	r3, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	4619      	mov	r1, r3
 80030b0:	4622      	mov	r2, r4
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f04f 0400 	mov.w	r4, #0
 80030ba:	0214      	lsls	r4, r2, #8
 80030bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80030c0:	020b      	lsls	r3, r1, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	4611      	mov	r1, r2
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	eb13 0b01 	adds.w	fp, r3, r1
 80030d2:	eb44 0c02 	adc.w	ip, r4, r2
 80030d6:	4658      	mov	r0, fp
 80030d8:	4661      	mov	r1, ip
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	f7fd f8eb 	bl	80002c0 <__aeabi_uldivmod>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	61fb      	str	r3, [r7, #28]
            break;
 80030f0:	e0ab      	b.n	800324a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8088 	beq.w	800320c <UART_SetConfig+0xafc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b01      	cmp	r3, #1
 8003102:	d05b      	beq.n	80031bc <UART_SetConfig+0xaac>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b02      	cmp	r3, #2
 800310a:	d052      	beq.n	80031b2 <UART_SetConfig+0xaa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2b03      	cmp	r3, #3
 8003112:	d04a      	beq.n	80031aa <UART_SetConfig+0xa9a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2b04      	cmp	r3, #4
 800311a:	d041      	beq.n	80031a0 <UART_SetConfig+0xa90>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b05      	cmp	r3, #5
 8003122:	d039      	beq.n	8003198 <UART_SetConfig+0xa88>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b06      	cmp	r3, #6
 800312a:	d031      	beq.n	8003190 <UART_SetConfig+0xa80>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b07      	cmp	r3, #7
 8003132:	d028      	beq.n	8003186 <UART_SetConfig+0xa76>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b08      	cmp	r3, #8
 800313a:	d01f      	beq.n	800317c <UART_SetConfig+0xa6c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b09      	cmp	r3, #9
 8003142:	d016      	beq.n	8003172 <UART_SetConfig+0xa62>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b0a      	cmp	r3, #10
 800314a:	d00d      	beq.n	8003168 <UART_SetConfig+0xa58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b0b      	cmp	r3, #11
 8003152:	d104      	bne.n	800315e <UART_SetConfig+0xa4e>
 8003154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	e05a      	b.n	8003214 <UART_SetConfig+0xb04>
 800315e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	e055      	b.n	8003214 <UART_SetConfig+0xb04>
 8003168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316c:	f04f 0400 	mov.w	r4, #0
 8003170:	e050      	b.n	8003214 <UART_SetConfig+0xb04>
 8003172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	e04b      	b.n	8003214 <UART_SetConfig+0xb04>
 800317c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	e046      	b.n	8003214 <UART_SetConfig+0xb04>
 8003186:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800318a:	f04f 0400 	mov.w	r4, #0
 800318e:	e041      	b.n	8003214 <UART_SetConfig+0xb04>
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <UART_SetConfig+0xaf0>)
 8003192:	f04f 0400 	mov.w	r4, #0
 8003196:	e03d      	b.n	8003214 <UART_SetConfig+0xb04>
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <UART_SetConfig+0xaf4>)
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	e039      	b.n	8003214 <UART_SetConfig+0xb04>
 80031a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	e034      	b.n	8003214 <UART_SetConfig+0xb04>
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <UART_SetConfig+0xaf8>)
 80031ac:	f04f 0400 	mov.w	r4, #0
 80031b0:	e030      	b.n	8003214 <UART_SetConfig+0xb04>
 80031b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031b6:	f04f 0400 	mov.w	r4, #0
 80031ba:	e02b      	b.n	8003214 <UART_SetConfig+0xb04>
 80031bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	e026      	b.n	8003214 <UART_SetConfig+0xb04>
 80031c6:	bf00      	nop
 80031c8:	14585500 	.word	0x14585500
 80031cc:	00000000 	.word	0x00000000
 80031d0:	28b0aa00 	.word	0x28b0aa00
 80031d4:	00000000 	.word	0x00000000
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	f4240000 	.word	0xf4240000
 80031e0:	01e84800 	.word	0x01e84800
 80031e4:	03d09000 	.word	0x03d09000
 80031e8:	07a12000 	.word	0x07a12000
 80031ec:	0f424000 	.word	0x0f424000
 80031f0:	186a0000 	.word	0x186a0000
 80031f4:	1e848000 	.word	0x1e848000
 80031f8:	3d090000 	.word	0x3d090000
 80031fc:	7a120000 	.word	0x7a120000
 8003200:	000aaa00 	.word	0x000aaa00
 8003204:	000ccc00 	.word	0x000ccc00
 8003208:	00155500 	.word	0x00155500
 800320c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003210:	f04f 0400 	mov.w	r4, #0
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6852      	ldr	r2, [r2, #4]
 8003218:	0852      	lsrs	r2, r2, #1
 800321a:	4611      	mov	r1, r2
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	eb13 0b01 	adds.w	fp, r3, r1
 8003224:	eb44 0c02 	adc.w	ip, r4, r2
 8003228:	4658      	mov	r0, fp
 800322a:	4661      	mov	r1, ip
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	f7fd f842 	bl	80002c0 <__aeabi_uldivmod>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	61fb      	str	r3, [r7, #28]
            break;
 8003242:	e002      	b.n	800324a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	76fb      	strb	r3, [r7, #27]
            break;
 8003248:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003250:	d309      	bcc.n	8003266 <UART_SetConfig+0xb56>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003258:	d205      	bcs.n	8003266 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	f000 bc18 	b.w	8003a96 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	76fb      	strb	r3, [r7, #27]
 800326a:	f000 bc14 	b.w	8003a96 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	f040 8204 	bne.w	8003682 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 800327a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327e:	2b08      	cmp	r3, #8
 8003280:	f200 81df 	bhi.w	8003642 <UART_SetConfig+0xf32>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <UART_SetConfig+0xb7c>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032b1 	.word	0x080032b1
 8003290:	08003369 	.word	0x08003369
 8003294:	08003421 	.word	0x08003421
 8003298:	08003643 	.word	0x08003643
 800329c:	080034c9 	.word	0x080034c9
 80032a0:	08003643 	.word	0x08003643
 80032a4:	08003643 	.word	0x08003643
 80032a8:	08003643 	.word	0x08003643
 80032ac:	08003581 	.word	0x08003581
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7fe fdba 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80032b4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d044      	beq.n	8003348 <UART_SetConfig+0xc38>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d03e      	beq.n	8003344 <UART_SetConfig+0xc34>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d038      	beq.n	8003340 <UART_SetConfig+0xc30>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d032      	beq.n	800333c <UART_SetConfig+0xc2c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d02c      	beq.n	8003338 <UART_SetConfig+0xc28>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d026      	beq.n	8003334 <UART_SetConfig+0xc24>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d020      	beq.n	8003330 <UART_SetConfig+0xc20>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d01a      	beq.n	800332c <UART_SetConfig+0xc1c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d014      	beq.n	8003328 <UART_SetConfig+0xc18>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b09      	cmp	r3, #9
 8003304:	d00e      	beq.n	8003324 <UART_SetConfig+0xc14>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d008      	beq.n	8003320 <UART_SetConfig+0xc10>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d102      	bne.n	800331c <UART_SetConfig+0xc0c>
 8003316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331a:	e016      	b.n	800334a <UART_SetConfig+0xc3a>
 800331c:	2301      	movs	r3, #1
 800331e:	e014      	b.n	800334a <UART_SetConfig+0xc3a>
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	e012      	b.n	800334a <UART_SetConfig+0xc3a>
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	e010      	b.n	800334a <UART_SetConfig+0xc3a>
 8003328:	2320      	movs	r3, #32
 800332a:	e00e      	b.n	800334a <UART_SetConfig+0xc3a>
 800332c:	2310      	movs	r3, #16
 800332e:	e00c      	b.n	800334a <UART_SetConfig+0xc3a>
 8003330:	230c      	movs	r3, #12
 8003332:	e00a      	b.n	800334a <UART_SetConfig+0xc3a>
 8003334:	230a      	movs	r3, #10
 8003336:	e008      	b.n	800334a <UART_SetConfig+0xc3a>
 8003338:	2308      	movs	r3, #8
 800333a:	e006      	b.n	800334a <UART_SetConfig+0xc3a>
 800333c:	2306      	movs	r3, #6
 800333e:	e004      	b.n	800334a <UART_SetConfig+0xc3a>
 8003340:	2304      	movs	r3, #4
 8003342:	e002      	b.n	800334a <UART_SetConfig+0xc3a>
 8003344:	2302      	movs	r3, #2
 8003346:	e000      	b.n	800334a <UART_SetConfig+0xc3a>
 8003348:	2301      	movs	r3, #1
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	005a      	lsls	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	61fb      	str	r3, [r7, #28]
        break;
 8003366:	e16f      	b.n	8003648 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7fe fd74 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800336c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d044      	beq.n	8003400 <UART_SetConfig+0xcf0>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b01      	cmp	r3, #1
 800337c:	d03e      	beq.n	80033fc <UART_SetConfig+0xcec>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b02      	cmp	r3, #2
 8003384:	d038      	beq.n	80033f8 <UART_SetConfig+0xce8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b03      	cmp	r3, #3
 800338c:	d032      	beq.n	80033f4 <UART_SetConfig+0xce4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b04      	cmp	r3, #4
 8003394:	d02c      	beq.n	80033f0 <UART_SetConfig+0xce0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b05      	cmp	r3, #5
 800339c:	d026      	beq.n	80033ec <UART_SetConfig+0xcdc>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d020      	beq.n	80033e8 <UART_SetConfig+0xcd8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b07      	cmp	r3, #7
 80033ac:	d01a      	beq.n	80033e4 <UART_SetConfig+0xcd4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d014      	beq.n	80033e0 <UART_SetConfig+0xcd0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d00e      	beq.n	80033dc <UART_SetConfig+0xccc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d008      	beq.n	80033d8 <UART_SetConfig+0xcc8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b0b      	cmp	r3, #11
 80033cc:	d102      	bne.n	80033d4 <UART_SetConfig+0xcc4>
 80033ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d2:	e016      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e014      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	e012      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	e010      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033e0:	2320      	movs	r3, #32
 80033e2:	e00e      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033e4:	2310      	movs	r3, #16
 80033e6:	e00c      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033e8:	230c      	movs	r3, #12
 80033ea:	e00a      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033ec:	230a      	movs	r3, #10
 80033ee:	e008      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033f0:	2308      	movs	r3, #8
 80033f2:	e006      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033f4:	2306      	movs	r3, #6
 80033f6:	e004      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e002      	b.n	8003402 <UART_SetConfig+0xcf2>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e000      	b.n	8003402 <UART_SetConfig+0xcf2>
 8003400:	2301      	movs	r3, #1
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	005a      	lsls	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	61fb      	str	r3, [r7, #28]
        break;
 800341e:	e113      	b.n	8003648 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d043      	beq.n	80034b0 <UART_SetConfig+0xda0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b01      	cmp	r3, #1
 800342e:	d03d      	beq.n	80034ac <UART_SetConfig+0xd9c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b02      	cmp	r3, #2
 8003436:	d037      	beq.n	80034a8 <UART_SetConfig+0xd98>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b03      	cmp	r3, #3
 800343e:	d031      	beq.n	80034a4 <UART_SetConfig+0xd94>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b04      	cmp	r3, #4
 8003446:	d02b      	beq.n	80034a0 <UART_SetConfig+0xd90>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b05      	cmp	r3, #5
 800344e:	d025      	beq.n	800349c <UART_SetConfig+0xd8c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b06      	cmp	r3, #6
 8003456:	d01f      	beq.n	8003498 <UART_SetConfig+0xd88>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b07      	cmp	r3, #7
 800345e:	d019      	beq.n	8003494 <UART_SetConfig+0xd84>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b08      	cmp	r3, #8
 8003466:	d013      	beq.n	8003490 <UART_SetConfig+0xd80>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b09      	cmp	r3, #9
 800346e:	d00d      	beq.n	800348c <UART_SetConfig+0xd7c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b0a      	cmp	r3, #10
 8003476:	d007      	beq.n	8003488 <UART_SetConfig+0xd78>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d101      	bne.n	8003484 <UART_SetConfig+0xd74>
 8003480:	4b8d      	ldr	r3, [pc, #564]	; (80036b8 <UART_SetConfig+0xfa8>)
 8003482:	e016      	b.n	80034b2 <UART_SetConfig+0xda2>
 8003484:	4b8d      	ldr	r3, [pc, #564]	; (80036bc <UART_SetConfig+0xfac>)
 8003486:	e014      	b.n	80034b2 <UART_SetConfig+0xda2>
 8003488:	4b8d      	ldr	r3, [pc, #564]	; (80036c0 <UART_SetConfig+0xfb0>)
 800348a:	e012      	b.n	80034b2 <UART_SetConfig+0xda2>
 800348c:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <UART_SetConfig+0xfb4>)
 800348e:	e010      	b.n	80034b2 <UART_SetConfig+0xda2>
 8003490:	4b8d      	ldr	r3, [pc, #564]	; (80036c8 <UART_SetConfig+0xfb8>)
 8003492:	e00e      	b.n	80034b2 <UART_SetConfig+0xda2>
 8003494:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <UART_SetConfig+0xfbc>)
 8003496:	e00c      	b.n	80034b2 <UART_SetConfig+0xda2>
 8003498:	4b8d      	ldr	r3, [pc, #564]	; (80036d0 <UART_SetConfig+0xfc0>)
 800349a:	e00a      	b.n	80034b2 <UART_SetConfig+0xda2>
 800349c:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <UART_SetConfig+0xfc4>)
 800349e:	e008      	b.n	80034b2 <UART_SetConfig+0xda2>
 80034a0:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <UART_SetConfig+0xfc8>)
 80034a2:	e006      	b.n	80034b2 <UART_SetConfig+0xda2>
 80034a4:	4b8d      	ldr	r3, [pc, #564]	; (80036dc <UART_SetConfig+0xfcc>)
 80034a6:	e004      	b.n	80034b2 <UART_SetConfig+0xda2>
 80034a8:	4b8d      	ldr	r3, [pc, #564]	; (80036e0 <UART_SetConfig+0xfd0>)
 80034aa:	e002      	b.n	80034b2 <UART_SetConfig+0xda2>
 80034ac:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <UART_SetConfig+0xfd4>)
 80034ae:	e000      	b.n	80034b2 <UART_SetConfig+0xda2>
 80034b0:	4b82      	ldr	r3, [pc, #520]	; (80036bc <UART_SetConfig+0xfac>)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	61fb      	str	r3, [r7, #28]
        break;
 80034c6:	e0bf      	b.n	8003648 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c8:	f7fe fc40 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 80034cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <UART_SetConfig+0xe50>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d03e      	beq.n	800355c <UART_SetConfig+0xe4c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d038      	beq.n	8003558 <UART_SetConfig+0xe48>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d032      	beq.n	8003554 <UART_SetConfig+0xe44>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d02c      	beq.n	8003550 <UART_SetConfig+0xe40>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d026      	beq.n	800354c <UART_SetConfig+0xe3c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b06      	cmp	r3, #6
 8003504:	d020      	beq.n	8003548 <UART_SetConfig+0xe38>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b07      	cmp	r3, #7
 800350c:	d01a      	beq.n	8003544 <UART_SetConfig+0xe34>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b08      	cmp	r3, #8
 8003514:	d014      	beq.n	8003540 <UART_SetConfig+0xe30>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b09      	cmp	r3, #9
 800351c:	d00e      	beq.n	800353c <UART_SetConfig+0xe2c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d008      	beq.n	8003538 <UART_SetConfig+0xe28>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b0b      	cmp	r3, #11
 800352c:	d102      	bne.n	8003534 <UART_SetConfig+0xe24>
 800352e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003532:	e016      	b.n	8003562 <UART_SetConfig+0xe52>
 8003534:	2301      	movs	r3, #1
 8003536:	e014      	b.n	8003562 <UART_SetConfig+0xe52>
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	e012      	b.n	8003562 <UART_SetConfig+0xe52>
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	e010      	b.n	8003562 <UART_SetConfig+0xe52>
 8003540:	2320      	movs	r3, #32
 8003542:	e00e      	b.n	8003562 <UART_SetConfig+0xe52>
 8003544:	2310      	movs	r3, #16
 8003546:	e00c      	b.n	8003562 <UART_SetConfig+0xe52>
 8003548:	230c      	movs	r3, #12
 800354a:	e00a      	b.n	8003562 <UART_SetConfig+0xe52>
 800354c:	230a      	movs	r3, #10
 800354e:	e008      	b.n	8003562 <UART_SetConfig+0xe52>
 8003550:	2308      	movs	r3, #8
 8003552:	e006      	b.n	8003562 <UART_SetConfig+0xe52>
 8003554:	2306      	movs	r3, #6
 8003556:	e004      	b.n	8003562 <UART_SetConfig+0xe52>
 8003558:	2304      	movs	r3, #4
 800355a:	e002      	b.n	8003562 <UART_SetConfig+0xe52>
 800355c:	2302      	movs	r3, #2
 800355e:	e000      	b.n	8003562 <UART_SetConfig+0xe52>
 8003560:	2301      	movs	r3, #1
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	005a      	lsls	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	b29b      	uxth	r3, r3
 800357c:	61fb      	str	r3, [r7, #28]
        break;
 800357e:	e063      	b.n	8003648 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d04f      	beq.n	8003628 <UART_SetConfig+0xf18>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b01      	cmp	r3, #1
 800358e:	d048      	beq.n	8003622 <UART_SetConfig+0xf12>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b02      	cmp	r3, #2
 8003596:	d041      	beq.n	800361c <UART_SetConfig+0xf0c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b03      	cmp	r3, #3
 800359e:	d03a      	beq.n	8003616 <UART_SetConfig+0xf06>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d033      	beq.n	8003610 <UART_SetConfig+0xf00>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d02c      	beq.n	800360a <UART_SetConfig+0xefa>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d025      	beq.n	8003604 <UART_SetConfig+0xef4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d01e      	beq.n	80035fe <UART_SetConfig+0xeee>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d017      	beq.n	80035f8 <UART_SetConfig+0xee8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	d010      	beq.n	80035f2 <UART_SetConfig+0xee2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b0a      	cmp	r3, #10
 80035d6:	d009      	beq.n	80035ec <UART_SetConfig+0xedc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b0b      	cmp	r3, #11
 80035de:	d102      	bne.n	80035e6 <UART_SetConfig+0xed6>
 80035e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e4:	e022      	b.n	800362c <UART_SetConfig+0xf1c>
 80035e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ea:	e01f      	b.n	800362c <UART_SetConfig+0xf1c>
 80035ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f0:	e01c      	b.n	800362c <UART_SetConfig+0xf1c>
 80035f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f6:	e019      	b.n	800362c <UART_SetConfig+0xf1c>
 80035f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035fc:	e016      	b.n	800362c <UART_SetConfig+0xf1c>
 80035fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003602:	e013      	b.n	800362c <UART_SetConfig+0xf1c>
 8003604:	f241 5354 	movw	r3, #5460	; 0x1554
 8003608:	e010      	b.n	800362c <UART_SetConfig+0xf1c>
 800360a:	f641 1398 	movw	r3, #6552	; 0x1998
 800360e:	e00d      	b.n	800362c <UART_SetConfig+0xf1c>
 8003610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003614:	e00a      	b.n	800362c <UART_SetConfig+0xf1c>
 8003616:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800361a:	e007      	b.n	800362c <UART_SetConfig+0xf1c>
 800361c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003620:	e004      	b.n	800362c <UART_SetConfig+0xf1c>
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	e001      	b.n	800362c <UART_SetConfig+0xf1c>
 8003628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	441a      	add	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	b29b      	uxth	r3, r3
 800363e:	61fb      	str	r3, [r7, #28]
        break;
 8003640:	e002      	b.n	8003648 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	76fb      	strb	r3, [r7, #27]
        break;
 8003646:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d916      	bls.n	800367c <UART_SetConfig+0xf6c>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d212      	bcs.n	800367c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f023 030f 	bic.w	r3, r3, #15
 800365e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	b29a      	uxth	r2, r3
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	4313      	orrs	r3, r2
 8003670:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	89fa      	ldrh	r2, [r7, #14]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	e20c      	b.n	8003a96 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e209      	b.n	8003a96 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8003682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003686:	2b08      	cmp	r3, #8
 8003688:	f200 81f4 	bhi.w	8003a74 <UART_SetConfig+0x1364>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <UART_SetConfig+0xf84>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036e9 	.word	0x080036e9
 8003698:	0800379f 	.word	0x0800379f
 800369c:	08003855 	.word	0x08003855
 80036a0:	08003a75 	.word	0x08003a75
 80036a4:	080038ff 	.word	0x080038ff
 80036a8:	08003a75 	.word	0x08003a75
 80036ac:	08003a75 	.word	0x08003a75
 80036b0:	08003a75 	.word	0x08003a75
 80036b4:	080039b5 	.word	0x080039b5
 80036b8:	0001e848 	.word	0x0001e848
 80036bc:	01e84800 	.word	0x01e84800
 80036c0:	0003d090 	.word	0x0003d090
 80036c4:	0007a120 	.word	0x0007a120
 80036c8:	000f4240 	.word	0x000f4240
 80036cc:	001e8480 	.word	0x001e8480
 80036d0:	0028b0aa 	.word	0x0028b0aa
 80036d4:	0030d400 	.word	0x0030d400
 80036d8:	003d0900 	.word	0x003d0900
 80036dc:	00516154 	.word	0x00516154
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7fe fb9e 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80036ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d044      	beq.n	8003780 <UART_SetConfig+0x1070>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d03e      	beq.n	800377c <UART_SetConfig+0x106c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b02      	cmp	r3, #2
 8003704:	d038      	beq.n	8003778 <UART_SetConfig+0x1068>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b03      	cmp	r3, #3
 800370c:	d032      	beq.n	8003774 <UART_SetConfig+0x1064>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b04      	cmp	r3, #4
 8003714:	d02c      	beq.n	8003770 <UART_SetConfig+0x1060>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b05      	cmp	r3, #5
 800371c:	d026      	beq.n	800376c <UART_SetConfig+0x105c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2b06      	cmp	r3, #6
 8003724:	d020      	beq.n	8003768 <UART_SetConfig+0x1058>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b07      	cmp	r3, #7
 800372c:	d01a      	beq.n	8003764 <UART_SetConfig+0x1054>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b08      	cmp	r3, #8
 8003734:	d014      	beq.n	8003760 <UART_SetConfig+0x1050>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b09      	cmp	r3, #9
 800373c:	d00e      	beq.n	800375c <UART_SetConfig+0x104c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b0a      	cmp	r3, #10
 8003744:	d008      	beq.n	8003758 <UART_SetConfig+0x1048>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b0b      	cmp	r3, #11
 800374c:	d102      	bne.n	8003754 <UART_SetConfig+0x1044>
 800374e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003752:	e016      	b.n	8003782 <UART_SetConfig+0x1072>
 8003754:	2301      	movs	r3, #1
 8003756:	e014      	b.n	8003782 <UART_SetConfig+0x1072>
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	e012      	b.n	8003782 <UART_SetConfig+0x1072>
 800375c:	2340      	movs	r3, #64	; 0x40
 800375e:	e010      	b.n	8003782 <UART_SetConfig+0x1072>
 8003760:	2320      	movs	r3, #32
 8003762:	e00e      	b.n	8003782 <UART_SetConfig+0x1072>
 8003764:	2310      	movs	r3, #16
 8003766:	e00c      	b.n	8003782 <UART_SetConfig+0x1072>
 8003768:	230c      	movs	r3, #12
 800376a:	e00a      	b.n	8003782 <UART_SetConfig+0x1072>
 800376c:	230a      	movs	r3, #10
 800376e:	e008      	b.n	8003782 <UART_SetConfig+0x1072>
 8003770:	2308      	movs	r3, #8
 8003772:	e006      	b.n	8003782 <UART_SetConfig+0x1072>
 8003774:	2306      	movs	r3, #6
 8003776:	e004      	b.n	8003782 <UART_SetConfig+0x1072>
 8003778:	2304      	movs	r3, #4
 800377a:	e002      	b.n	8003782 <UART_SetConfig+0x1072>
 800377c:	2302      	movs	r3, #2
 800377e:	e000      	b.n	8003782 <UART_SetConfig+0x1072>
 8003780:	2301      	movs	r3, #1
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	441a      	add	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e16d      	b.n	8003a7a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379e:	f7fe fb59 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80037a2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d044      	beq.n	8003836 <UART_SetConfig+0x1126>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d03e      	beq.n	8003832 <UART_SetConfig+0x1122>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d038      	beq.n	800382e <UART_SetConfig+0x111e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d032      	beq.n	800382a <UART_SetConfig+0x111a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d02c      	beq.n	8003826 <UART_SetConfig+0x1116>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d026      	beq.n	8003822 <UART_SetConfig+0x1112>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d020      	beq.n	800381e <UART_SetConfig+0x110e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b07      	cmp	r3, #7
 80037e2:	d01a      	beq.n	800381a <UART_SetConfig+0x110a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d014      	beq.n	8003816 <UART_SetConfig+0x1106>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d00e      	beq.n	8003812 <UART_SetConfig+0x1102>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b0a      	cmp	r3, #10
 80037fa:	d008      	beq.n	800380e <UART_SetConfig+0x10fe>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2b0b      	cmp	r3, #11
 8003802:	d102      	bne.n	800380a <UART_SetConfig+0x10fa>
 8003804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003808:	e016      	b.n	8003838 <UART_SetConfig+0x1128>
 800380a:	2301      	movs	r3, #1
 800380c:	e014      	b.n	8003838 <UART_SetConfig+0x1128>
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	e012      	b.n	8003838 <UART_SetConfig+0x1128>
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	e010      	b.n	8003838 <UART_SetConfig+0x1128>
 8003816:	2320      	movs	r3, #32
 8003818:	e00e      	b.n	8003838 <UART_SetConfig+0x1128>
 800381a:	2310      	movs	r3, #16
 800381c:	e00c      	b.n	8003838 <UART_SetConfig+0x1128>
 800381e:	230c      	movs	r3, #12
 8003820:	e00a      	b.n	8003838 <UART_SetConfig+0x1128>
 8003822:	230a      	movs	r3, #10
 8003824:	e008      	b.n	8003838 <UART_SetConfig+0x1128>
 8003826:	2308      	movs	r3, #8
 8003828:	e006      	b.n	8003838 <UART_SetConfig+0x1128>
 800382a:	2306      	movs	r3, #6
 800382c:	e004      	b.n	8003838 <UART_SetConfig+0x1128>
 800382e:	2304      	movs	r3, #4
 8003830:	e002      	b.n	8003838 <UART_SetConfig+0x1128>
 8003832:	2302      	movs	r3, #2
 8003834:	e000      	b.n	8003838 <UART_SetConfig+0x1128>
 8003836:	2301      	movs	r3, #1
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	fbb2 f2f3 	udiv	r2, r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	61fb      	str	r3, [r7, #28]
        break;
 8003852:	e112      	b.n	8003a7a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d044      	beq.n	80038e6 <UART_SetConfig+0x11d6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b01      	cmp	r3, #1
 8003862:	d03e      	beq.n	80038e2 <UART_SetConfig+0x11d2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2b02      	cmp	r3, #2
 800386a:	d038      	beq.n	80038de <UART_SetConfig+0x11ce>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b03      	cmp	r3, #3
 8003872:	d032      	beq.n	80038da <UART_SetConfig+0x11ca>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d02c      	beq.n	80038d6 <UART_SetConfig+0x11c6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b05      	cmp	r3, #5
 8003882:	d026      	beq.n	80038d2 <UART_SetConfig+0x11c2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b06      	cmp	r3, #6
 800388a:	d020      	beq.n	80038ce <UART_SetConfig+0x11be>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b07      	cmp	r3, #7
 8003892:	d01a      	beq.n	80038ca <UART_SetConfig+0x11ba>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b08      	cmp	r3, #8
 800389a:	d014      	beq.n	80038c6 <UART_SetConfig+0x11b6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d00e      	beq.n	80038c2 <UART_SetConfig+0x11b2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b0a      	cmp	r3, #10
 80038aa:	d008      	beq.n	80038be <UART_SetConfig+0x11ae>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b0b      	cmp	r3, #11
 80038b2:	d102      	bne.n	80038ba <UART_SetConfig+0x11aa>
 80038b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038b8:	e016      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038ba:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <UART_SetConfig+0x13b0>)
 80038bc:	e014      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <UART_SetConfig+0x13b4>)
 80038c0:	e012      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038c2:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <UART_SetConfig+0x13b8>)
 80038c4:	e010      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038c6:	4b81      	ldr	r3, [pc, #516]	; (8003acc <UART_SetConfig+0x13bc>)
 80038c8:	e00e      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038ca:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <UART_SetConfig+0x13c0>)
 80038cc:	e00c      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038ce:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <UART_SetConfig+0x13c4>)
 80038d0:	e00a      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038d2:	4b81      	ldr	r3, [pc, #516]	; (8003ad8 <UART_SetConfig+0x13c8>)
 80038d4:	e008      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038d6:	4b81      	ldr	r3, [pc, #516]	; (8003adc <UART_SetConfig+0x13cc>)
 80038d8:	e006      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038da:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <UART_SetConfig+0x13d0>)
 80038dc:	e004      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038de:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <UART_SetConfig+0x13d4>)
 80038e0:	e002      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <UART_SetConfig+0x13d8>)
 80038e4:	e000      	b.n	80038e8 <UART_SetConfig+0x11d8>
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <UART_SetConfig+0x13b0>)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	0852      	lsrs	r2, r2, #1
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	61fb      	str	r3, [r7, #28]
        break;
 80038fc:	e0bd      	b.n	8003a7a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7fe fa25 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8003902:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d044      	beq.n	8003996 <UART_SetConfig+0x1286>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d03e      	beq.n	8003992 <UART_SetConfig+0x1282>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b02      	cmp	r3, #2
 800391a:	d038      	beq.n	800398e <UART_SetConfig+0x127e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b03      	cmp	r3, #3
 8003922:	d032      	beq.n	800398a <UART_SetConfig+0x127a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2b04      	cmp	r3, #4
 800392a:	d02c      	beq.n	8003986 <UART_SetConfig+0x1276>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b05      	cmp	r3, #5
 8003932:	d026      	beq.n	8003982 <UART_SetConfig+0x1272>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2b06      	cmp	r3, #6
 800393a:	d020      	beq.n	800397e <UART_SetConfig+0x126e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b07      	cmp	r3, #7
 8003942:	d01a      	beq.n	800397a <UART_SetConfig+0x126a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	2b08      	cmp	r3, #8
 800394a:	d014      	beq.n	8003976 <UART_SetConfig+0x1266>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b09      	cmp	r3, #9
 8003952:	d00e      	beq.n	8003972 <UART_SetConfig+0x1262>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b0a      	cmp	r3, #10
 800395a:	d008      	beq.n	800396e <UART_SetConfig+0x125e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b0b      	cmp	r3, #11
 8003962:	d102      	bne.n	800396a <UART_SetConfig+0x125a>
 8003964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003968:	e016      	b.n	8003998 <UART_SetConfig+0x1288>
 800396a:	2301      	movs	r3, #1
 800396c:	e014      	b.n	8003998 <UART_SetConfig+0x1288>
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	e012      	b.n	8003998 <UART_SetConfig+0x1288>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	e010      	b.n	8003998 <UART_SetConfig+0x1288>
 8003976:	2320      	movs	r3, #32
 8003978:	e00e      	b.n	8003998 <UART_SetConfig+0x1288>
 800397a:	2310      	movs	r3, #16
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x1288>
 800397e:	230c      	movs	r3, #12
 8003980:	e00a      	b.n	8003998 <UART_SetConfig+0x1288>
 8003982:	230a      	movs	r3, #10
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x1288>
 8003986:	2308      	movs	r3, #8
 8003988:	e006      	b.n	8003998 <UART_SetConfig+0x1288>
 800398a:	2306      	movs	r3, #6
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x1288>
 800398e:	2304      	movs	r3, #4
 8003990:	e002      	b.n	8003998 <UART_SetConfig+0x1288>
 8003992:	2302      	movs	r3, #2
 8003994:	e000      	b.n	8003998 <UART_SetConfig+0x1288>
 8003996:	2301      	movs	r3, #1
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	fbb2 f2f3 	udiv	r2, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	61fb      	str	r3, [r7, #28]
        break;
 80039b2:	e062      	b.n	8003a7a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04e      	beq.n	8003a5a <UART_SetConfig+0x134a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d047      	beq.n	8003a54 <UART_SetConfig+0x1344>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d040      	beq.n	8003a4e <UART_SetConfig+0x133e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d039      	beq.n	8003a48 <UART_SetConfig+0x1338>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d032      	beq.n	8003a42 <UART_SetConfig+0x1332>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d02b      	beq.n	8003a3c <UART_SetConfig+0x132c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d024      	beq.n	8003a36 <UART_SetConfig+0x1326>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2b07      	cmp	r3, #7
 80039f2:	d01d      	beq.n	8003a30 <UART_SetConfig+0x1320>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d016      	beq.n	8003a2a <UART_SetConfig+0x131a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b09      	cmp	r3, #9
 8003a02:	d00f      	beq.n	8003a24 <UART_SetConfig+0x1314>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2b0a      	cmp	r3, #10
 8003a0a:	d008      	beq.n	8003a1e <UART_SetConfig+0x130e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2b0b      	cmp	r3, #11
 8003a12:	d101      	bne.n	8003a18 <UART_SetConfig+0x1308>
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	e022      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1c:	e01f      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a22:	e01c      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a28:	e019      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2e:	e016      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a34:	e013      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a36:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003a3a:	e010      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a3c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003a40:	e00d      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a46:	e00a      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a48:	f241 5355 	movw	r3, #5461	; 0x1555
 8003a4c:	e007      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a52:	e004      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a58:	e001      	b.n	8003a5e <UART_SetConfig+0x134e>
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6852      	ldr	r2, [r2, #4]
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	61fb      	str	r3, [r7, #28]
        break;
 8003a72:	e002      	b.n	8003a7a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	76fb      	strb	r3, [r7, #27]
        break;
 8003a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d908      	bls.n	8003a92 <UART_SetConfig+0x1382>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d204      	bcs.n	8003a92 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	e001      	b.n	8003a96 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003ab2:	7efb      	ldrb	r3, [r7, #27]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3728      	adds	r7, #40	; 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003abe:	bf00      	nop
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	0001e848 	.word	0x0001e848
 8003ac8:	0003d090 	.word	0x0003d090
 8003acc:	0007a120 	.word	0x0007a120
 8003ad0:	000f4240 	.word	0x000f4240
 8003ad4:	00145855 	.word	0x00145855
 8003ad8:	00186a00 	.word	0x00186a00
 8003adc:	001e8480 	.word	0x001e8480
 8003ae0:	0028b0aa 	.word	0x0028b0aa
 8003ae4:	003d0900 	.word	0x003d0900
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01a      	beq.n	8003c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bea:	d10a      	bne.n	8003c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c40:	f7fd f876 	bl	8000d30 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d10e      	bne.n	8003c72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f82c 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e022      	b.n	8003cb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d10e      	bne.n	8003c9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f816 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e00c      	b.n	8003cb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd0:	e02c      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d028      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fd f829 	bl	8000d30 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11d      	bne.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cfe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e00f      	b.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d0c3      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UARTEx_DisableFifoMode+0x16>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e027      	b.n	8003dba <HAL_UARTEx_DisableFifoMode+0x66>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2224      	movs	r2, #36	; 0x24
 8003d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e02d      	b.n	8003e3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2224      	movs	r2, #36	; 0x24
 8003dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f850 	bl	8003ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e02d      	b.n	8003eb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f812 	bl	8003ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003ec8:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <UARTEx_SetNbDataToProcess+0xc8>)
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <UARTEx_SetNbDataToProcess+0xcc>)
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003efc:	e03d      	b.n	8003f7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003efe:	2308      	movs	r3, #8
 8003f00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f02:	2308      	movs	r3, #8
 8003f04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	0e5b      	lsrs	r3, r3, #25
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	0f5b      	lsrs	r3, r3, #29
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003f26:	7fbb      	ldrb	r3, [r7, #30]
 8003f28:	7f3a      	ldrb	r2, [r7, #28]
 8003f2a:	f107 0120 	add.w	r1, r7, #32
 8003f2e:	440a      	add	r2, r1
 8003f30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	7f3a      	ldrb	r2, [r7, #28]
 8003f3a:	f107 0120 	add.w	r1, r7, #32
 8003f3e:	440a      	add	r2, r1
 8003f40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	7f7a      	ldrb	r2, [r7, #29]
 8003f54:	f107 0120 	add.w	r1, r7, #32
 8003f58:	440a      	add	r2, r1
 8003f5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	7f7a      	ldrb	r2, [r7, #29]
 8003f64:	f107 0120 	add.w	r1, r7, #32
 8003f68:	440a      	add	r2, r1
 8003f6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f7a:	bf00      	nop
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	08005c08 	.word	0x08005c08
 8003f8c:	08005c10 	.word	0x08005c10

08003f90 <__errno>:
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <__errno+0x8>)
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000010 	.word	0x20000010

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4e0d      	ldr	r6, [pc, #52]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1ba4      	subs	r4, r4, r6
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2500      	movs	r5, #0
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4e0b      	ldr	r6, [pc, #44]	; (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f001 fdc8 	bl	8005b44 <_init>
 8003fb4:	1ba4      	subs	r4, r4, r6
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2500      	movs	r5, #0
 8003fba:	42a5      	cmp	r5, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fc4:	4798      	blx	r3
 8003fc6:	3501      	adds	r5, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fce:	4798      	blx	r3
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08005e04 	.word	0x08005e04
 8003fd8:	08005e04 	.word	0x08005e04
 8003fdc:	08005e04 	.word	0x08005e04
 8003fe0:	08005e08 	.word	0x08005e08

08003fe4 <memset>:
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <iprintf>:
 8003ff4:	b40f      	push	{r0, r1, r2, r3}
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <iprintf+0x2c>)
 8003ff8:	b513      	push	{r0, r1, r4, lr}
 8003ffa:	681c      	ldr	r4, [r3, #0]
 8003ffc:	b124      	cbz	r4, 8004008 <iprintf+0x14>
 8003ffe:	69a3      	ldr	r3, [r4, #24]
 8004000:	b913      	cbnz	r3, 8004008 <iprintf+0x14>
 8004002:	4620      	mov	r0, r4
 8004004:	f000 f9d6 	bl	80043b4 <__sinit>
 8004008:	ab05      	add	r3, sp, #20
 800400a:	9a04      	ldr	r2, [sp, #16]
 800400c:	68a1      	ldr	r1, [r4, #8]
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	4620      	mov	r0, r4
 8004012:	f000 fbb3 	bl	800477c <_vfiprintf_r>
 8004016:	b002      	add	sp, #8
 8004018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800401c:	b004      	add	sp, #16
 800401e:	4770      	bx	lr
 8004020:	20000010 	.word	0x20000010

08004024 <iscanf>:
 8004024:	b40f      	push	{r0, r1, r2, r3}
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <iscanf+0x2c>)
 8004028:	b513      	push	{r0, r1, r4, lr}
 800402a:	681c      	ldr	r4, [r3, #0]
 800402c:	b124      	cbz	r4, 8004038 <iscanf+0x14>
 800402e:	69a3      	ldr	r3, [r4, #24]
 8004030:	b913      	cbnz	r3, 8004038 <iscanf+0x14>
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f9be 	bl	80043b4 <__sinit>
 8004038:	ab05      	add	r3, sp, #20
 800403a:	9a04      	ldr	r2, [sp, #16]
 800403c:	6861      	ldr	r1, [r4, #4]
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	4620      	mov	r0, r4
 8004042:	f000 ff89 	bl	8004f58 <_vfiscanf_r>
 8004046:	b002      	add	sp, #8
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404c:	b004      	add	sp, #16
 800404e:	4770      	bx	lr
 8004050:	20000010 	.word	0x20000010

08004054 <setvbuf>:
 8004054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004058:	461d      	mov	r5, r3
 800405a:	4b51      	ldr	r3, [pc, #324]	; (80041a0 <setvbuf+0x14c>)
 800405c:	681e      	ldr	r6, [r3, #0]
 800405e:	4604      	mov	r4, r0
 8004060:	460f      	mov	r7, r1
 8004062:	4690      	mov	r8, r2
 8004064:	b126      	cbz	r6, 8004070 <setvbuf+0x1c>
 8004066:	69b3      	ldr	r3, [r6, #24]
 8004068:	b913      	cbnz	r3, 8004070 <setvbuf+0x1c>
 800406a:	4630      	mov	r0, r6
 800406c:	f000 f9a2 	bl	80043b4 <__sinit>
 8004070:	4b4c      	ldr	r3, [pc, #304]	; (80041a4 <setvbuf+0x150>)
 8004072:	429c      	cmp	r4, r3
 8004074:	d152      	bne.n	800411c <setvbuf+0xc8>
 8004076:	6874      	ldr	r4, [r6, #4]
 8004078:	f1b8 0f02 	cmp.w	r8, #2
 800407c:	d006      	beq.n	800408c <setvbuf+0x38>
 800407e:	f1b8 0f01 	cmp.w	r8, #1
 8004082:	f200 8089 	bhi.w	8004198 <setvbuf+0x144>
 8004086:	2d00      	cmp	r5, #0
 8004088:	f2c0 8086 	blt.w	8004198 <setvbuf+0x144>
 800408c:	4621      	mov	r1, r4
 800408e:	4630      	mov	r0, r6
 8004090:	f000 f914 	bl	80042bc <_fflush_r>
 8004094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004096:	b141      	cbz	r1, 80040aa <setvbuf+0x56>
 8004098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800409c:	4299      	cmp	r1, r3
 800409e:	d002      	beq.n	80040a6 <setvbuf+0x52>
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 fa99 	bl	80045d8 <_free_r>
 80040a6:	2300      	movs	r3, #0
 80040a8:	6363      	str	r3, [r4, #52]	; 0x34
 80040aa:	2300      	movs	r3, #0
 80040ac:	61a3      	str	r3, [r4, #24]
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	d503      	bpl.n	80040be <setvbuf+0x6a>
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	4630      	mov	r0, r6
 80040ba:	f000 fa8d 	bl	80045d8 <_free_r>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80040c4:	f023 0303 	bic.w	r3, r3, #3
 80040c8:	f1b8 0f02 	cmp.w	r8, #2
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	d05d      	beq.n	800418c <setvbuf+0x138>
 80040d0:	ab01      	add	r3, sp, #4
 80040d2:	466a      	mov	r2, sp
 80040d4:	4621      	mov	r1, r4
 80040d6:	4630      	mov	r0, r6
 80040d8:	f000 fa12 	bl	8004500 <__swhatbuf_r>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	4318      	orrs	r0, r3
 80040e0:	81a0      	strh	r0, [r4, #12]
 80040e2:	bb2d      	cbnz	r5, 8004130 <setvbuf+0xdc>
 80040e4:	9d00      	ldr	r5, [sp, #0]
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fa6e 	bl	80045c8 <malloc>
 80040ec:	4607      	mov	r7, r0
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d14e      	bne.n	8004190 <setvbuf+0x13c>
 80040f2:	f8dd 9000 	ldr.w	r9, [sp]
 80040f6:	45a9      	cmp	r9, r5
 80040f8:	d13c      	bne.n	8004174 <setvbuf+0x120>
 80040fa:	f04f 30ff 	mov.w	r0, #4294967295
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	2300      	movs	r3, #0
 8004108:	60a3      	str	r3, [r4, #8]
 800410a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	2301      	movs	r3, #1
 8004114:	6163      	str	r3, [r4, #20]
 8004116:	b003      	add	sp, #12
 8004118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <setvbuf+0x154>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d101      	bne.n	8004126 <setvbuf+0xd2>
 8004122:	68b4      	ldr	r4, [r6, #8]
 8004124:	e7a8      	b.n	8004078 <setvbuf+0x24>
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <setvbuf+0x158>)
 8004128:	429c      	cmp	r4, r3
 800412a:	bf08      	it	eq
 800412c:	68f4      	ldreq	r4, [r6, #12]
 800412e:	e7a3      	b.n	8004078 <setvbuf+0x24>
 8004130:	2f00      	cmp	r7, #0
 8004132:	d0d8      	beq.n	80040e6 <setvbuf+0x92>
 8004134:	69b3      	ldr	r3, [r6, #24]
 8004136:	b913      	cbnz	r3, 800413e <setvbuf+0xea>
 8004138:	4630      	mov	r0, r6
 800413a:	f000 f93b 	bl	80043b4 <__sinit>
 800413e:	f1b8 0f01 	cmp.w	r8, #1
 8004142:	bf08      	it	eq
 8004144:	89a3      	ldrheq	r3, [r4, #12]
 8004146:	6027      	str	r7, [r4, #0]
 8004148:	bf04      	itt	eq
 800414a:	f043 0301 	orreq.w	r3, r3, #1
 800414e:	81a3      	strheq	r3, [r4, #12]
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f013 0008 	ands.w	r0, r3, #8
 8004156:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800415a:	d01b      	beq.n	8004194 <setvbuf+0x140>
 800415c:	f013 0001 	ands.w	r0, r3, #1
 8004160:	bf18      	it	ne
 8004162:	426d      	negne	r5, r5
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	bf1d      	ittte	ne
 800416a:	60a3      	strne	r3, [r4, #8]
 800416c:	61a5      	strne	r5, [r4, #24]
 800416e:	4618      	movne	r0, r3
 8004170:	60a5      	streq	r5, [r4, #8]
 8004172:	e7d0      	b.n	8004116 <setvbuf+0xc2>
 8004174:	4648      	mov	r0, r9
 8004176:	f000 fa27 	bl	80045c8 <malloc>
 800417a:	4607      	mov	r7, r0
 800417c:	2800      	cmp	r0, #0
 800417e:	d0bc      	beq.n	80040fa <setvbuf+0xa6>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	464d      	mov	r5, r9
 800418a:	e7d3      	b.n	8004134 <setvbuf+0xe0>
 800418c:	2000      	movs	r0, #0
 800418e:	e7b6      	b.n	80040fe <setvbuf+0xaa>
 8004190:	46a9      	mov	r9, r5
 8004192:	e7f5      	b.n	8004180 <setvbuf+0x12c>
 8004194:	60a0      	str	r0, [r4, #8]
 8004196:	e7be      	b.n	8004116 <setvbuf+0xc2>
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	e7bb      	b.n	8004116 <setvbuf+0xc2>
 800419e:	bf00      	nop
 80041a0:	20000010 	.word	0x20000010
 80041a4:	08005c60 	.word	0x08005c60
 80041a8:	08005c80 	.word	0x08005c80
 80041ac:	08005c40 	.word	0x08005c40

080041b0 <__sflush_r>:
 80041b0:	898a      	ldrh	r2, [r1, #12]
 80041b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	0710      	lsls	r0, r2, #28
 80041ba:	460c      	mov	r4, r1
 80041bc:	d458      	bmi.n	8004270 <__sflush_r+0xc0>
 80041be:	684b      	ldr	r3, [r1, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dc05      	bgt.n	80041d0 <__sflush_r+0x20>
 80041c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	dc02      	bgt.n	80041d0 <__sflush_r+0x20>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d0f9      	beq.n	80041ca <__sflush_r+0x1a>
 80041d6:	2300      	movs	r3, #0
 80041d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041dc:	682f      	ldr	r7, [r5, #0]
 80041de:	6a21      	ldr	r1, [r4, #32]
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	d032      	beq.n	800424a <__sflush_r+0x9a>
 80041e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	075a      	lsls	r2, r3, #29
 80041ea:	d505      	bpl.n	80041f8 <__sflush_r+0x48>
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	1ac0      	subs	r0, r0, r3
 80041f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041f2:	b10b      	cbz	r3, 80041f8 <__sflush_r+0x48>
 80041f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f6:	1ac0      	subs	r0, r0, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	4602      	mov	r2, r0
 80041fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041fe:	6a21      	ldr	r1, [r4, #32]
 8004200:	4628      	mov	r0, r5
 8004202:	47b0      	blx	r6
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	d106      	bne.n	8004218 <__sflush_r+0x68>
 800420a:	6829      	ldr	r1, [r5, #0]
 800420c:	291d      	cmp	r1, #29
 800420e:	d848      	bhi.n	80042a2 <__sflush_r+0xf2>
 8004210:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <__sflush_r+0x108>)
 8004212:	40ca      	lsrs	r2, r1
 8004214:	07d6      	lsls	r6, r2, #31
 8004216:	d544      	bpl.n	80042a2 <__sflush_r+0xf2>
 8004218:	2200      	movs	r2, #0
 800421a:	6062      	str	r2, [r4, #4]
 800421c:	04d9      	lsls	r1, r3, #19
 800421e:	6922      	ldr	r2, [r4, #16]
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	d504      	bpl.n	800422e <__sflush_r+0x7e>
 8004224:	1c42      	adds	r2, r0, #1
 8004226:	d101      	bne.n	800422c <__sflush_r+0x7c>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b903      	cbnz	r3, 800422e <__sflush_r+0x7e>
 800422c:	6560      	str	r0, [r4, #84]	; 0x54
 800422e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004230:	602f      	str	r7, [r5, #0]
 8004232:	2900      	cmp	r1, #0
 8004234:	d0c9      	beq.n	80041ca <__sflush_r+0x1a>
 8004236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800423a:	4299      	cmp	r1, r3
 800423c:	d002      	beq.n	8004244 <__sflush_r+0x94>
 800423e:	4628      	mov	r0, r5
 8004240:	f000 f9ca 	bl	80045d8 <_free_r>
 8004244:	2000      	movs	r0, #0
 8004246:	6360      	str	r0, [r4, #52]	; 0x34
 8004248:	e7c0      	b.n	80041cc <__sflush_r+0x1c>
 800424a:	2301      	movs	r3, #1
 800424c:	4628      	mov	r0, r5
 800424e:	47b0      	blx	r6
 8004250:	1c41      	adds	r1, r0, #1
 8004252:	d1c8      	bne.n	80041e6 <__sflush_r+0x36>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0c5      	beq.n	80041e6 <__sflush_r+0x36>
 800425a:	2b1d      	cmp	r3, #29
 800425c:	d001      	beq.n	8004262 <__sflush_r+0xb2>
 800425e:	2b16      	cmp	r3, #22
 8004260:	d101      	bne.n	8004266 <__sflush_r+0xb6>
 8004262:	602f      	str	r7, [r5, #0]
 8004264:	e7b1      	b.n	80041ca <__sflush_r+0x1a>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	e7ad      	b.n	80041cc <__sflush_r+0x1c>
 8004270:	690f      	ldr	r7, [r1, #16]
 8004272:	2f00      	cmp	r7, #0
 8004274:	d0a9      	beq.n	80041ca <__sflush_r+0x1a>
 8004276:	0793      	lsls	r3, r2, #30
 8004278:	680e      	ldr	r6, [r1, #0]
 800427a:	bf08      	it	eq
 800427c:	694b      	ldreq	r3, [r1, #20]
 800427e:	600f      	str	r7, [r1, #0]
 8004280:	bf18      	it	ne
 8004282:	2300      	movne	r3, #0
 8004284:	eba6 0807 	sub.w	r8, r6, r7
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	f1b8 0f00 	cmp.w	r8, #0
 800428e:	dd9c      	ble.n	80041ca <__sflush_r+0x1a>
 8004290:	4643      	mov	r3, r8
 8004292:	463a      	mov	r2, r7
 8004294:	6a21      	ldr	r1, [r4, #32]
 8004296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004298:	4628      	mov	r0, r5
 800429a:	47b0      	blx	r6
 800429c:	2800      	cmp	r0, #0
 800429e:	dc06      	bgt.n	80042ae <__sflush_r+0xfe>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	e78e      	b.n	80041cc <__sflush_r+0x1c>
 80042ae:	4407      	add	r7, r0
 80042b0:	eba8 0800 	sub.w	r8, r8, r0
 80042b4:	e7e9      	b.n	800428a <__sflush_r+0xda>
 80042b6:	bf00      	nop
 80042b8:	20400001 	.word	0x20400001

080042bc <_fflush_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	4605      	mov	r5, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	b1db      	cbz	r3, 80042fe <_fflush_r+0x42>
 80042c6:	b118      	cbz	r0, 80042d0 <_fflush_r+0x14>
 80042c8:	6983      	ldr	r3, [r0, #24]
 80042ca:	b90b      	cbnz	r3, 80042d0 <_fflush_r+0x14>
 80042cc:	f000 f872 	bl	80043b4 <__sinit>
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <_fflush_r+0x48>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d109      	bne.n	80042ea <_fflush_r+0x2e>
 80042d6:	686c      	ldr	r4, [r5, #4]
 80042d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042dc:	b17b      	cbz	r3, 80042fe <_fflush_r+0x42>
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e6:	f7ff bf63 	b.w	80041b0 <__sflush_r>
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <_fflush_r+0x4c>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d101      	bne.n	80042f4 <_fflush_r+0x38>
 80042f0:	68ac      	ldr	r4, [r5, #8]
 80042f2:	e7f1      	b.n	80042d8 <_fflush_r+0x1c>
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <_fflush_r+0x50>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	bf08      	it	eq
 80042fa:	68ec      	ldreq	r4, [r5, #12]
 80042fc:	e7ec      	b.n	80042d8 <_fflush_r+0x1c>
 80042fe:	2000      	movs	r0, #0
 8004300:	bd38      	pop	{r3, r4, r5, pc}
 8004302:	bf00      	nop
 8004304:	08005c60 	.word	0x08005c60
 8004308:	08005c80 	.word	0x08005c80
 800430c:	08005c40 	.word	0x08005c40

08004310 <fflush>:
 8004310:	4601      	mov	r1, r0
 8004312:	b920      	cbnz	r0, 800431e <fflush+0xe>
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <fflush+0x18>)
 8004316:	4905      	ldr	r1, [pc, #20]	; (800432c <fflush+0x1c>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f000 b8d3 	b.w	80044c4 <_fwalk_reent>
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <fflush+0x20>)
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	f7ff bfcb 	b.w	80042bc <_fflush_r>
 8004326:	bf00      	nop
 8004328:	08005c3c 	.word	0x08005c3c
 800432c:	080042bd 	.word	0x080042bd
 8004330:	20000010 	.word	0x20000010

08004334 <std>:
 8004334:	2300      	movs	r3, #0
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	e9c0 3300 	strd	r3, r3, [r0]
 800433e:	6083      	str	r3, [r0, #8]
 8004340:	8181      	strh	r1, [r0, #12]
 8004342:	6643      	str	r3, [r0, #100]	; 0x64
 8004344:	81c2      	strh	r2, [r0, #14]
 8004346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434a:	6183      	str	r3, [r0, #24]
 800434c:	4619      	mov	r1, r3
 800434e:	2208      	movs	r2, #8
 8004350:	305c      	adds	r0, #92	; 0x5c
 8004352:	f7ff fe47 	bl	8003fe4 <memset>
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <std+0x38>)
 8004358:	6263      	str	r3, [r4, #36]	; 0x24
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <std+0x3c>)
 800435c:	62a3      	str	r3, [r4, #40]	; 0x28
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x40>)
 8004360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x44>)
 8004364:	6224      	str	r4, [r4, #32]
 8004366:	6323      	str	r3, [r4, #48]	; 0x30
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	08005409 	.word	0x08005409
 8004370:	0800542b 	.word	0x0800542b
 8004374:	08005463 	.word	0x08005463
 8004378:	08005487 	.word	0x08005487

0800437c <_cleanup_r>:
 800437c:	4901      	ldr	r1, [pc, #4]	; (8004384 <_cleanup_r+0x8>)
 800437e:	f000 b8a1 	b.w	80044c4 <_fwalk_reent>
 8004382:	bf00      	nop
 8004384:	080042bd 	.word	0x080042bd

08004388 <__sfmoreglue>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	1e4a      	subs	r2, r1, #1
 800438c:	2568      	movs	r5, #104	; 0x68
 800438e:	4355      	muls	r5, r2
 8004390:	460e      	mov	r6, r1
 8004392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004396:	f000 f96d 	bl	8004674 <_malloc_r>
 800439a:	4604      	mov	r4, r0
 800439c:	b140      	cbz	r0, 80043b0 <__sfmoreglue+0x28>
 800439e:	2100      	movs	r1, #0
 80043a0:	e9c0 1600 	strd	r1, r6, [r0]
 80043a4:	300c      	adds	r0, #12
 80043a6:	60a0      	str	r0, [r4, #8]
 80043a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043ac:	f7ff fe1a 	bl	8003fe4 <memset>
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}

080043b4 <__sinit>:
 80043b4:	6983      	ldr	r3, [r0, #24]
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	bb33      	cbnz	r3, 800440a <__sinit+0x56>
 80043bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043c0:	6503      	str	r3, [r0, #80]	; 0x50
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <__sinit+0x58>)
 80043c4:	4a12      	ldr	r2, [pc, #72]	; (8004410 <__sinit+0x5c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6282      	str	r2, [r0, #40]	; 0x28
 80043ca:	4298      	cmp	r0, r3
 80043cc:	bf04      	itt	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	6183      	streq	r3, [r0, #24]
 80043d2:	f000 f81f 	bl	8004414 <__sfp>
 80043d6:	6060      	str	r0, [r4, #4]
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 f81b 	bl	8004414 <__sfp>
 80043de:	60a0      	str	r0, [r4, #8]
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 f817 	bl	8004414 <__sfp>
 80043e6:	2200      	movs	r2, #0
 80043e8:	60e0      	str	r0, [r4, #12]
 80043ea:	2104      	movs	r1, #4
 80043ec:	6860      	ldr	r0, [r4, #4]
 80043ee:	f7ff ffa1 	bl	8004334 <std>
 80043f2:	2201      	movs	r2, #1
 80043f4:	2109      	movs	r1, #9
 80043f6:	68a0      	ldr	r0, [r4, #8]
 80043f8:	f7ff ff9c 	bl	8004334 <std>
 80043fc:	2202      	movs	r2, #2
 80043fe:	2112      	movs	r1, #18
 8004400:	68e0      	ldr	r0, [r4, #12]
 8004402:	f7ff ff97 	bl	8004334 <std>
 8004406:	2301      	movs	r3, #1
 8004408:	61a3      	str	r3, [r4, #24]
 800440a:	bd10      	pop	{r4, pc}
 800440c:	08005c3c 	.word	0x08005c3c
 8004410:	0800437d 	.word	0x0800437d

08004414 <__sfp>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <__sfp+0x70>)
 8004418:	681e      	ldr	r6, [r3, #0]
 800441a:	69b3      	ldr	r3, [r6, #24]
 800441c:	4607      	mov	r7, r0
 800441e:	b913      	cbnz	r3, 8004426 <__sfp+0x12>
 8004420:	4630      	mov	r0, r6
 8004422:	f7ff ffc7 	bl	80043b4 <__sinit>
 8004426:	3648      	adds	r6, #72	; 0x48
 8004428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800442c:	3b01      	subs	r3, #1
 800442e:	d503      	bpl.n	8004438 <__sfp+0x24>
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	b133      	cbz	r3, 8004442 <__sfp+0x2e>
 8004434:	6836      	ldr	r6, [r6, #0]
 8004436:	e7f7      	b.n	8004428 <__sfp+0x14>
 8004438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800443c:	b16d      	cbz	r5, 800445a <__sfp+0x46>
 800443e:	3468      	adds	r4, #104	; 0x68
 8004440:	e7f4      	b.n	800442c <__sfp+0x18>
 8004442:	2104      	movs	r1, #4
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff ff9f 	bl	8004388 <__sfmoreglue>
 800444a:	6030      	str	r0, [r6, #0]
 800444c:	2800      	cmp	r0, #0
 800444e:	d1f1      	bne.n	8004434 <__sfp+0x20>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4604      	mov	r4, r0
 8004456:	4620      	mov	r0, r4
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <__sfp+0x74>)
 800445c:	6665      	str	r5, [r4, #100]	; 0x64
 800445e:	e9c4 5500 	strd	r5, r5, [r4]
 8004462:	60a5      	str	r5, [r4, #8]
 8004464:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004468:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800446c:	2208      	movs	r2, #8
 800446e:	4629      	mov	r1, r5
 8004470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004474:	f7ff fdb6 	bl	8003fe4 <memset>
 8004478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800447c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004480:	e7e9      	b.n	8004456 <__sfp+0x42>
 8004482:	bf00      	nop
 8004484:	08005c3c 	.word	0x08005c3c
 8004488:	ffff0001 	.word	0xffff0001

0800448c <_fwalk>:
 800448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4688      	mov	r8, r1
 8004492:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004496:	2600      	movs	r6, #0
 8004498:	b914      	cbnz	r4, 80044a0 <_fwalk+0x14>
 800449a:	4630      	mov	r0, r6
 800449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044a4:	3f01      	subs	r7, #1
 80044a6:	d501      	bpl.n	80044ac <_fwalk+0x20>
 80044a8:	6824      	ldr	r4, [r4, #0]
 80044aa:	e7f5      	b.n	8004498 <_fwalk+0xc>
 80044ac:	89ab      	ldrh	r3, [r5, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d906      	bls.n	80044c0 <_fwalk+0x34>
 80044b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044b6:	3301      	adds	r3, #1
 80044b8:	d002      	beq.n	80044c0 <_fwalk+0x34>
 80044ba:	4628      	mov	r0, r5
 80044bc:	47c0      	blx	r8
 80044be:	4306      	orrs	r6, r0
 80044c0:	3568      	adds	r5, #104	; 0x68
 80044c2:	e7ef      	b.n	80044a4 <_fwalk+0x18>

080044c4 <_fwalk_reent>:
 80044c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c8:	4680      	mov	r8, r0
 80044ca:	4689      	mov	r9, r1
 80044cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044d0:	2600      	movs	r6, #0
 80044d2:	b914      	cbnz	r4, 80044da <_fwalk_reent+0x16>
 80044d4:	4630      	mov	r0, r6
 80044d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044de:	3f01      	subs	r7, #1
 80044e0:	d501      	bpl.n	80044e6 <_fwalk_reent+0x22>
 80044e2:	6824      	ldr	r4, [r4, #0]
 80044e4:	e7f5      	b.n	80044d2 <_fwalk_reent+0xe>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d907      	bls.n	80044fc <_fwalk_reent+0x38>
 80044ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044f0:	3301      	adds	r3, #1
 80044f2:	d003      	beq.n	80044fc <_fwalk_reent+0x38>
 80044f4:	4629      	mov	r1, r5
 80044f6:	4640      	mov	r0, r8
 80044f8:	47c8      	blx	r9
 80044fa:	4306      	orrs	r6, r0
 80044fc:	3568      	adds	r5, #104	; 0x68
 80044fe:	e7ee      	b.n	80044de <_fwalk_reent+0x1a>

08004500 <__swhatbuf_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460e      	mov	r6, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	2900      	cmp	r1, #0
 800450a:	b096      	sub	sp, #88	; 0x58
 800450c:	4614      	mov	r4, r2
 800450e:	461d      	mov	r5, r3
 8004510:	da07      	bge.n	8004522 <__swhatbuf_r+0x22>
 8004512:	2300      	movs	r3, #0
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	89b3      	ldrh	r3, [r6, #12]
 8004518:	061a      	lsls	r2, r3, #24
 800451a:	d410      	bmi.n	800453e <__swhatbuf_r+0x3e>
 800451c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004520:	e00e      	b.n	8004540 <__swhatbuf_r+0x40>
 8004522:	466a      	mov	r2, sp
 8004524:	f001 fa5a 	bl	80059dc <_fstat_r>
 8004528:	2800      	cmp	r0, #0
 800452a:	dbf2      	blt.n	8004512 <__swhatbuf_r+0x12>
 800452c:	9a01      	ldr	r2, [sp, #4]
 800452e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004536:	425a      	negs	r2, r3
 8004538:	415a      	adcs	r2, r3
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	e7ee      	b.n	800451c <__swhatbuf_r+0x1c>
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	2000      	movs	r0, #0
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	b016      	add	sp, #88	; 0x58
 8004546:	bd70      	pop	{r4, r5, r6, pc}

08004548 <__smakebuf_r>:
 8004548:	898b      	ldrh	r3, [r1, #12]
 800454a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800454c:	079d      	lsls	r5, r3, #30
 800454e:	4606      	mov	r6, r0
 8004550:	460c      	mov	r4, r1
 8004552:	d507      	bpl.n	8004564 <__smakebuf_r+0x1c>
 8004554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	6123      	str	r3, [r4, #16]
 800455c:	2301      	movs	r3, #1
 800455e:	6163      	str	r3, [r4, #20]
 8004560:	b002      	add	sp, #8
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	ab01      	add	r3, sp, #4
 8004566:	466a      	mov	r2, sp
 8004568:	f7ff ffca 	bl	8004500 <__swhatbuf_r>
 800456c:	9900      	ldr	r1, [sp, #0]
 800456e:	4605      	mov	r5, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f000 f87f 	bl	8004674 <_malloc_r>
 8004576:	b948      	cbnz	r0, 800458c <__smakebuf_r+0x44>
 8004578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d4ef      	bmi.n	8004560 <__smakebuf_r+0x18>
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	e7e3      	b.n	8004554 <__smakebuf_r+0xc>
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <__smakebuf_r+0x7c>)
 800458e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	6020      	str	r0, [r4, #0]
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	81a3      	strh	r3, [r4, #12]
 800459a:	9b00      	ldr	r3, [sp, #0]
 800459c:	6163      	str	r3, [r4, #20]
 800459e:	9b01      	ldr	r3, [sp, #4]
 80045a0:	6120      	str	r0, [r4, #16]
 80045a2:	b15b      	cbz	r3, 80045bc <__smakebuf_r+0x74>
 80045a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a8:	4630      	mov	r0, r6
 80045aa:	f001 fa29 	bl	8005a00 <_isatty_r>
 80045ae:	b128      	cbz	r0, 80045bc <__smakebuf_r+0x74>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	431d      	orrs	r5, r3
 80045c0:	81a5      	strh	r5, [r4, #12]
 80045c2:	e7cd      	b.n	8004560 <__smakebuf_r+0x18>
 80045c4:	0800437d 	.word	0x0800437d

080045c8 <malloc>:
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <malloc+0xc>)
 80045ca:	4601      	mov	r1, r0
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f000 b851 	b.w	8004674 <_malloc_r>
 80045d2:	bf00      	nop
 80045d4:	20000010 	.word	0x20000010

080045d8 <_free_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4605      	mov	r5, r0
 80045dc:	2900      	cmp	r1, #0
 80045de:	d045      	beq.n	800466c <_free_r+0x94>
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f0c      	subs	r4, r1, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfb8      	it	lt
 80045ea:	18e4      	addlt	r4, r4, r3
 80045ec:	f001 fa59 	bl	8005aa2 <__malloc_lock>
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <_free_r+0x98>)
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	4610      	mov	r0, r2
 80045f6:	b933      	cbnz	r3, 8004606 <_free_r+0x2e>
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	6014      	str	r4, [r2, #0]
 80045fc:	4628      	mov	r0, r5
 80045fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004602:	f001 ba4f 	b.w	8005aa4 <__malloc_unlock>
 8004606:	42a3      	cmp	r3, r4
 8004608:	d90c      	bls.n	8004624 <_free_r+0x4c>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	1862      	adds	r2, r4, r1
 800460e:	4293      	cmp	r3, r2
 8004610:	bf04      	itt	eq
 8004612:	681a      	ldreq	r2, [r3, #0]
 8004614:	685b      	ldreq	r3, [r3, #4]
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	bf04      	itt	eq
 800461a:	1852      	addeq	r2, r2, r1
 800461c:	6022      	streq	r2, [r4, #0]
 800461e:	6004      	str	r4, [r0, #0]
 8004620:	e7ec      	b.n	80045fc <_free_r+0x24>
 8004622:	4613      	mov	r3, r2
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	b10a      	cbz	r2, 800462c <_free_r+0x54>
 8004628:	42a2      	cmp	r2, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x4a>
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	1858      	adds	r0, r3, r1
 8004630:	42a0      	cmp	r0, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x74>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	4401      	add	r1, r0
 8004638:	1858      	adds	r0, r3, r1
 800463a:	4282      	cmp	r2, r0
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	d1dd      	bne.n	80045fc <_free_r+0x24>
 8004640:	6810      	ldr	r0, [r2, #0]
 8004642:	6852      	ldr	r2, [r2, #4]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	4401      	add	r1, r0
 8004648:	6019      	str	r1, [r3, #0]
 800464a:	e7d7      	b.n	80045fc <_free_r+0x24>
 800464c:	d902      	bls.n	8004654 <_free_r+0x7c>
 800464e:	230c      	movs	r3, #12
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	e7d3      	b.n	80045fc <_free_r+0x24>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	1821      	adds	r1, r4, r0
 8004658:	428a      	cmp	r2, r1
 800465a:	bf04      	itt	eq
 800465c:	6811      	ldreq	r1, [r2, #0]
 800465e:	6852      	ldreq	r2, [r2, #4]
 8004660:	6062      	str	r2, [r4, #4]
 8004662:	bf04      	itt	eq
 8004664:	1809      	addeq	r1, r1, r0
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	605c      	str	r4, [r3, #4]
 800466a:	e7c7      	b.n	80045fc <_free_r+0x24>
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	bf00      	nop
 8004670:	20000200 	.word	0x20000200

08004674 <_malloc_r>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	1ccd      	adds	r5, r1, #3
 8004678:	f025 0503 	bic.w	r5, r5, #3
 800467c:	3508      	adds	r5, #8
 800467e:	2d0c      	cmp	r5, #12
 8004680:	bf38      	it	cc
 8004682:	250c      	movcc	r5, #12
 8004684:	2d00      	cmp	r5, #0
 8004686:	4606      	mov	r6, r0
 8004688:	db01      	blt.n	800468e <_malloc_r+0x1a>
 800468a:	42a9      	cmp	r1, r5
 800468c:	d903      	bls.n	8004696 <_malloc_r+0x22>
 800468e:	230c      	movs	r3, #12
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	2000      	movs	r0, #0
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	f001 fa04 	bl	8005aa2 <__malloc_lock>
 800469a:	4a21      	ldr	r2, [pc, #132]	; (8004720 <_malloc_r+0xac>)
 800469c:	6814      	ldr	r4, [r2, #0]
 800469e:	4621      	mov	r1, r4
 80046a0:	b991      	cbnz	r1, 80046c8 <_malloc_r+0x54>
 80046a2:	4c20      	ldr	r4, [pc, #128]	; (8004724 <_malloc_r+0xb0>)
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	b91b      	cbnz	r3, 80046b0 <_malloc_r+0x3c>
 80046a8:	4630      	mov	r0, r6
 80046aa:	f000 fe6b 	bl	8005384 <_sbrk_r>
 80046ae:	6020      	str	r0, [r4, #0]
 80046b0:	4629      	mov	r1, r5
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 fe66 	bl	8005384 <_sbrk_r>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d124      	bne.n	8004706 <_malloc_r+0x92>
 80046bc:	230c      	movs	r3, #12
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	4630      	mov	r0, r6
 80046c2:	f001 f9ef 	bl	8005aa4 <__malloc_unlock>
 80046c6:	e7e4      	b.n	8004692 <_malloc_r+0x1e>
 80046c8:	680b      	ldr	r3, [r1, #0]
 80046ca:	1b5b      	subs	r3, r3, r5
 80046cc:	d418      	bmi.n	8004700 <_malloc_r+0x8c>
 80046ce:	2b0b      	cmp	r3, #11
 80046d0:	d90f      	bls.n	80046f2 <_malloc_r+0x7e>
 80046d2:	600b      	str	r3, [r1, #0]
 80046d4:	50cd      	str	r5, [r1, r3]
 80046d6:	18cc      	adds	r4, r1, r3
 80046d8:	4630      	mov	r0, r6
 80046da:	f001 f9e3 	bl	8005aa4 <__malloc_unlock>
 80046de:	f104 000b 	add.w	r0, r4, #11
 80046e2:	1d23      	adds	r3, r4, #4
 80046e4:	f020 0007 	bic.w	r0, r0, #7
 80046e8:	1ac3      	subs	r3, r0, r3
 80046ea:	d0d3      	beq.n	8004694 <_malloc_r+0x20>
 80046ec:	425a      	negs	r2, r3
 80046ee:	50e2      	str	r2, [r4, r3]
 80046f0:	e7d0      	b.n	8004694 <_malloc_r+0x20>
 80046f2:	428c      	cmp	r4, r1
 80046f4:	684b      	ldr	r3, [r1, #4]
 80046f6:	bf16      	itet	ne
 80046f8:	6063      	strne	r3, [r4, #4]
 80046fa:	6013      	streq	r3, [r2, #0]
 80046fc:	460c      	movne	r4, r1
 80046fe:	e7eb      	b.n	80046d8 <_malloc_r+0x64>
 8004700:	460c      	mov	r4, r1
 8004702:	6849      	ldr	r1, [r1, #4]
 8004704:	e7cc      	b.n	80046a0 <_malloc_r+0x2c>
 8004706:	1cc4      	adds	r4, r0, #3
 8004708:	f024 0403 	bic.w	r4, r4, #3
 800470c:	42a0      	cmp	r0, r4
 800470e:	d005      	beq.n	800471c <_malloc_r+0xa8>
 8004710:	1a21      	subs	r1, r4, r0
 8004712:	4630      	mov	r0, r6
 8004714:	f000 fe36 	bl	8005384 <_sbrk_r>
 8004718:	3001      	adds	r0, #1
 800471a:	d0cf      	beq.n	80046bc <_malloc_r+0x48>
 800471c:	6025      	str	r5, [r4, #0]
 800471e:	e7db      	b.n	80046d8 <_malloc_r+0x64>
 8004720:	20000200 	.word	0x20000200
 8004724:	20000204 	.word	0x20000204

08004728 <__sfputc_r>:
 8004728:	6893      	ldr	r3, [r2, #8]
 800472a:	3b01      	subs	r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	b410      	push	{r4}
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	da08      	bge.n	8004746 <__sfputc_r+0x1e>
 8004734:	6994      	ldr	r4, [r2, #24]
 8004736:	42a3      	cmp	r3, r4
 8004738:	db01      	blt.n	800473e <__sfputc_r+0x16>
 800473a:	290a      	cmp	r1, #10
 800473c:	d103      	bne.n	8004746 <__sfputc_r+0x1e>
 800473e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004742:	f001 b869 	b.w	8005818 <__swbuf_r>
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	1c58      	adds	r0, r3, #1
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	7019      	strb	r1, [r3, #0]
 800474e:	4608      	mov	r0, r1
 8004750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004754:	4770      	bx	lr

08004756 <__sfputs_r>:
 8004756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004758:	4606      	mov	r6, r0
 800475a:	460f      	mov	r7, r1
 800475c:	4614      	mov	r4, r2
 800475e:	18d5      	adds	r5, r2, r3
 8004760:	42ac      	cmp	r4, r5
 8004762:	d101      	bne.n	8004768 <__sfputs_r+0x12>
 8004764:	2000      	movs	r0, #0
 8004766:	e007      	b.n	8004778 <__sfputs_r+0x22>
 8004768:	463a      	mov	r2, r7
 800476a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff ffda 	bl	8004728 <__sfputc_r>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d1f3      	bne.n	8004760 <__sfputs_r+0xa>
 8004778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800477c <_vfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	460c      	mov	r4, r1
 8004782:	b09d      	sub	sp, #116	; 0x74
 8004784:	4617      	mov	r7, r2
 8004786:	461d      	mov	r5, r3
 8004788:	4606      	mov	r6, r0
 800478a:	b118      	cbz	r0, 8004794 <_vfiprintf_r+0x18>
 800478c:	6983      	ldr	r3, [r0, #24]
 800478e:	b90b      	cbnz	r3, 8004794 <_vfiprintf_r+0x18>
 8004790:	f7ff fe10 	bl	80043b4 <__sinit>
 8004794:	4b7c      	ldr	r3, [pc, #496]	; (8004988 <_vfiprintf_r+0x20c>)
 8004796:	429c      	cmp	r4, r3
 8004798:	d158      	bne.n	800484c <_vfiprintf_r+0xd0>
 800479a:	6874      	ldr	r4, [r6, #4]
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	0718      	lsls	r0, r3, #28
 80047a0:	d55e      	bpl.n	8004860 <_vfiprintf_r+0xe4>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <_vfiprintf_r+0xe4>
 80047a8:	2300      	movs	r3, #0
 80047aa:	9309      	str	r3, [sp, #36]	; 0x24
 80047ac:	2320      	movs	r3, #32
 80047ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047b2:	2330      	movs	r3, #48	; 0x30
 80047b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b8:	9503      	str	r5, [sp, #12]
 80047ba:	f04f 0b01 	mov.w	fp, #1
 80047be:	46b8      	mov	r8, r7
 80047c0:	4645      	mov	r5, r8
 80047c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047c6:	b10b      	cbz	r3, 80047cc <_vfiprintf_r+0x50>
 80047c8:	2b25      	cmp	r3, #37	; 0x25
 80047ca:	d154      	bne.n	8004876 <_vfiprintf_r+0xfa>
 80047cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80047d0:	d00b      	beq.n	80047ea <_vfiprintf_r+0x6e>
 80047d2:	4653      	mov	r3, sl
 80047d4:	463a      	mov	r2, r7
 80047d6:	4621      	mov	r1, r4
 80047d8:	4630      	mov	r0, r6
 80047da:	f7ff ffbc 	bl	8004756 <__sfputs_r>
 80047de:	3001      	adds	r0, #1
 80047e0:	f000 80c2 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	4453      	add	r3, sl
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ea:	f898 3000 	ldrb.w	r3, [r8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ba 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295
 80047fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004806:	931a      	str	r3, [sp, #104]	; 0x68
 8004808:	46a8      	mov	r8, r5
 800480a:	2205      	movs	r2, #5
 800480c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004810:	485e      	ldr	r0, [pc, #376]	; (800498c <_vfiprintf_r+0x210>)
 8004812:	f7fb fd05 	bl	8000220 <memchr>
 8004816:	9b04      	ldr	r3, [sp, #16]
 8004818:	bb78      	cbnz	r0, 800487a <_vfiprintf_r+0xfe>
 800481a:	06d9      	lsls	r1, r3, #27
 800481c:	bf44      	itt	mi
 800481e:	2220      	movmi	r2, #32
 8004820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004824:	071a      	lsls	r2, r3, #28
 8004826:	bf44      	itt	mi
 8004828:	222b      	movmi	r2, #43	; 0x2b
 800482a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800482e:	782a      	ldrb	r2, [r5, #0]
 8004830:	2a2a      	cmp	r2, #42	; 0x2a
 8004832:	d02a      	beq.n	800488a <_vfiprintf_r+0x10e>
 8004834:	9a07      	ldr	r2, [sp, #28]
 8004836:	46a8      	mov	r8, r5
 8004838:	2000      	movs	r0, #0
 800483a:	250a      	movs	r5, #10
 800483c:	4641      	mov	r1, r8
 800483e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004842:	3b30      	subs	r3, #48	; 0x30
 8004844:	2b09      	cmp	r3, #9
 8004846:	d969      	bls.n	800491c <_vfiprintf_r+0x1a0>
 8004848:	b360      	cbz	r0, 80048a4 <_vfiprintf_r+0x128>
 800484a:	e024      	b.n	8004896 <_vfiprintf_r+0x11a>
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <_vfiprintf_r+0x214>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <_vfiprintf_r+0xda>
 8004852:	68b4      	ldr	r4, [r6, #8]
 8004854:	e7a2      	b.n	800479c <_vfiprintf_r+0x20>
 8004856:	4b4f      	ldr	r3, [pc, #316]	; (8004994 <_vfiprintf_r+0x218>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68f4      	ldreq	r4, [r6, #12]
 800485e:	e79d      	b.n	800479c <_vfiprintf_r+0x20>
 8004860:	4621      	mov	r1, r4
 8004862:	4630      	mov	r0, r6
 8004864:	f001 f83c 	bl	80058e0 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d09d      	beq.n	80047a8 <_vfiprintf_r+0x2c>
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	b01d      	add	sp, #116	; 0x74
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	46a8      	mov	r8, r5
 8004878:	e7a2      	b.n	80047c0 <_vfiprintf_r+0x44>
 800487a:	4a44      	ldr	r2, [pc, #272]	; (800498c <_vfiprintf_r+0x210>)
 800487c:	1a80      	subs	r0, r0, r2
 800487e:	fa0b f000 	lsl.w	r0, fp, r0
 8004882:	4318      	orrs	r0, r3
 8004884:	9004      	str	r0, [sp, #16]
 8004886:	4645      	mov	r5, r8
 8004888:	e7be      	b.n	8004808 <_vfiprintf_r+0x8c>
 800488a:	9a03      	ldr	r2, [sp, #12]
 800488c:	1d11      	adds	r1, r2, #4
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	9103      	str	r1, [sp, #12]
 8004892:	2a00      	cmp	r2, #0
 8004894:	db01      	blt.n	800489a <_vfiprintf_r+0x11e>
 8004896:	9207      	str	r2, [sp, #28]
 8004898:	e004      	b.n	80048a4 <_vfiprintf_r+0x128>
 800489a:	4252      	negs	r2, r2
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	9207      	str	r2, [sp, #28]
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	f898 3000 	ldrb.w	r3, [r8]
 80048a8:	2b2e      	cmp	r3, #46	; 0x2e
 80048aa:	d10e      	bne.n	80048ca <_vfiprintf_r+0x14e>
 80048ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80048b0:	2b2a      	cmp	r3, #42	; 0x2a
 80048b2:	d138      	bne.n	8004926 <_vfiprintf_r+0x1aa>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfb8      	it	lt
 80048c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c4:	f108 0802 	add.w	r8, r8, #2
 80048c8:	9305      	str	r3, [sp, #20]
 80048ca:	4d33      	ldr	r5, [pc, #204]	; (8004998 <_vfiprintf_r+0x21c>)
 80048cc:	f898 1000 	ldrb.w	r1, [r8]
 80048d0:	2203      	movs	r2, #3
 80048d2:	4628      	mov	r0, r5
 80048d4:	f7fb fca4 	bl	8000220 <memchr>
 80048d8:	b140      	cbz	r0, 80048ec <_vfiprintf_r+0x170>
 80048da:	2340      	movs	r3, #64	; 0x40
 80048dc:	1b40      	subs	r0, r0, r5
 80048de:	fa03 f000 	lsl.w	r0, r3, r0
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	4303      	orrs	r3, r0
 80048e6:	f108 0801 	add.w	r8, r8, #1
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	f898 1000 	ldrb.w	r1, [r8]
 80048f0:	482a      	ldr	r0, [pc, #168]	; (800499c <_vfiprintf_r+0x220>)
 80048f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048f6:	2206      	movs	r2, #6
 80048f8:	f108 0701 	add.w	r7, r8, #1
 80048fc:	f7fb fc90 	bl	8000220 <memchr>
 8004900:	2800      	cmp	r0, #0
 8004902:	d037      	beq.n	8004974 <_vfiprintf_r+0x1f8>
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <_vfiprintf_r+0x224>)
 8004906:	bb1b      	cbnz	r3, 8004950 <_vfiprintf_r+0x1d4>
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	3308      	adds	r3, #8
 8004912:	9303      	str	r3, [sp, #12]
 8004914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004916:	444b      	add	r3, r9
 8004918:	9309      	str	r3, [sp, #36]	; 0x24
 800491a:	e750      	b.n	80047be <_vfiprintf_r+0x42>
 800491c:	fb05 3202 	mla	r2, r5, r2, r3
 8004920:	2001      	movs	r0, #1
 8004922:	4688      	mov	r8, r1
 8004924:	e78a      	b.n	800483c <_vfiprintf_r+0xc0>
 8004926:	2300      	movs	r3, #0
 8004928:	f108 0801 	add.w	r8, r8, #1
 800492c:	9305      	str	r3, [sp, #20]
 800492e:	4619      	mov	r1, r3
 8004930:	250a      	movs	r5, #10
 8004932:	4640      	mov	r0, r8
 8004934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004938:	3a30      	subs	r2, #48	; 0x30
 800493a:	2a09      	cmp	r2, #9
 800493c:	d903      	bls.n	8004946 <_vfiprintf_r+0x1ca>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c3      	beq.n	80048ca <_vfiprintf_r+0x14e>
 8004942:	9105      	str	r1, [sp, #20]
 8004944:	e7c1      	b.n	80048ca <_vfiprintf_r+0x14e>
 8004946:	fb05 2101 	mla	r1, r5, r1, r2
 800494a:	2301      	movs	r3, #1
 800494c:	4680      	mov	r8, r0
 800494e:	e7f0      	b.n	8004932 <_vfiprintf_r+0x1b6>
 8004950:	ab03      	add	r3, sp, #12
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4622      	mov	r2, r4
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_vfiprintf_r+0x228>)
 8004958:	a904      	add	r1, sp, #16
 800495a:	4630      	mov	r0, r6
 800495c:	f3af 8000 	nop.w
 8004960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004964:	4681      	mov	r9, r0
 8004966:	d1d5      	bne.n	8004914 <_vfiprintf_r+0x198>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	065b      	lsls	r3, r3, #25
 800496c:	f53f af7e 	bmi.w	800486c <_vfiprintf_r+0xf0>
 8004970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004972:	e77d      	b.n	8004870 <_vfiprintf_r+0xf4>
 8004974:	ab03      	add	r3, sp, #12
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4622      	mov	r2, r4
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <_vfiprintf_r+0x228>)
 800497c:	a904      	add	r1, sp, #16
 800497e:	4630      	mov	r0, r6
 8004980:	f000 f888 	bl	8004a94 <_printf_i>
 8004984:	e7ec      	b.n	8004960 <_vfiprintf_r+0x1e4>
 8004986:	bf00      	nop
 8004988:	08005c60 	.word	0x08005c60
 800498c:	08005ca0 	.word	0x08005ca0
 8004990:	08005c80 	.word	0x08005c80
 8004994:	08005c40 	.word	0x08005c40
 8004998:	08005ca6 	.word	0x08005ca6
 800499c:	08005caa 	.word	0x08005caa
 80049a0:	00000000 	.word	0x00000000
 80049a4:	08004757 	.word	0x08004757

080049a8 <_printf_common>:
 80049a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	4691      	mov	r9, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	688a      	ldr	r2, [r1, #8]
 80049b2:	690b      	ldr	r3, [r1, #16]
 80049b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bfb8      	it	lt
 80049bc:	4613      	movlt	r3, r2
 80049be:	f8c9 3000 	str.w	r3, [r9]
 80049c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c6:	4606      	mov	r6, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	b112      	cbz	r2, 80049d2 <_printf_common+0x2a>
 80049cc:	3301      	adds	r3, #1
 80049ce:	f8c9 3000 	str.w	r3, [r9]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049dc:	3302      	addmi	r3, #2
 80049de:	f8c9 3000 	strmi.w	r3, [r9]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d107      	bne.n	80049fa <_printf_common+0x52>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	f8d9 2000 	ldr.w	r2, [r9]
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	42ab      	cmp	r3, r5
 80049f8:	dc28      	bgt.n	8004a4c <_printf_common+0xa4>
 80049fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	3300      	adds	r3, #0
 8004a02:	bf18      	it	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	0692      	lsls	r2, r2, #26
 8004a08:	d42d      	bmi.n	8004a66 <_printf_common+0xbe>
 8004a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4630      	mov	r0, r6
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d020      	beq.n	8004a5a <_printf_common+0xb2>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	68e5      	ldr	r5, [r4, #12]
 8004a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a20:	f003 0306 	and.w	r3, r3, #6
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	bf08      	it	eq
 8004a28:	1aad      	subeq	r5, r5, r2
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	bf0c      	ite	eq
 8004a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a34:	2500      	movne	r5, #0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bfc4      	itt	gt
 8004a3a:	1a9b      	subgt	r3, r3, r2
 8004a3c:	18ed      	addgt	r5, r5, r3
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	341a      	adds	r4, #26
 8004a44:	454d      	cmp	r5, r9
 8004a46:	d11a      	bne.n	8004a7e <_printf_common+0xd6>
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e008      	b.n	8004a5e <_printf_common+0xb6>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4652      	mov	r2, sl
 8004a50:	4639      	mov	r1, r7
 8004a52:	4630      	mov	r0, r6
 8004a54:	47c0      	blx	r8
 8004a56:	3001      	adds	r0, #1
 8004a58:	d103      	bne.n	8004a62 <_printf_common+0xba>
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a62:	3501      	adds	r5, #1
 8004a64:	e7c3      	b.n	80049ee <_printf_common+0x46>
 8004a66:	18e1      	adds	r1, r4, r3
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	2030      	movs	r0, #48	; 0x30
 8004a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a70:	4422      	add	r2, r4
 8004a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	e7c5      	b.n	8004a0a <_printf_common+0x62>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4622      	mov	r2, r4
 8004a82:	4639      	mov	r1, r7
 8004a84:	4630      	mov	r0, r6
 8004a86:	47c0      	blx	r8
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d0e6      	beq.n	8004a5a <_printf_common+0xb2>
 8004a8c:	f109 0901 	add.w	r9, r9, #1
 8004a90:	e7d8      	b.n	8004a44 <_printf_common+0x9c>
	...

08004a94 <_printf_i>:
 8004a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	7e09      	ldrb	r1, [r1, #24]
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	296e      	cmp	r1, #110	; 0x6e
 8004aa4:	4617      	mov	r7, r2
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	4698      	mov	r8, r3
 8004aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aac:	f000 80b3 	beq.w	8004c16 <_printf_i+0x182>
 8004ab0:	d822      	bhi.n	8004af8 <_printf_i+0x64>
 8004ab2:	2963      	cmp	r1, #99	; 0x63
 8004ab4:	d036      	beq.n	8004b24 <_printf_i+0x90>
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x3a>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	f000 80b9 	beq.w	8004c30 <_printf_i+0x19c>
 8004abe:	2958      	cmp	r1, #88	; 0x58
 8004ac0:	f000 8083 	beq.w	8004bca <_printf_i+0x136>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004acc:	e032      	b.n	8004b34 <_printf_i+0xa0>
 8004ace:	2964      	cmp	r1, #100	; 0x64
 8004ad0:	d001      	beq.n	8004ad6 <_printf_i+0x42>
 8004ad2:	2969      	cmp	r1, #105	; 0x69
 8004ad4:	d1f6      	bne.n	8004ac4 <_printf_i+0x30>
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	6813      	ldr	r3, [r2, #0]
 8004ada:	0605      	lsls	r5, r0, #24
 8004adc:	f103 0104 	add.w	r1, r3, #4
 8004ae0:	d52a      	bpl.n	8004b38 <_printf_i+0xa4>
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da03      	bge.n	8004af2 <_printf_i+0x5e>
 8004aea:	222d      	movs	r2, #45	; 0x2d
 8004aec:	425b      	negs	r3, r3
 8004aee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004af2:	486f      	ldr	r0, [pc, #444]	; (8004cb0 <_printf_i+0x21c>)
 8004af4:	220a      	movs	r2, #10
 8004af6:	e039      	b.n	8004b6c <_printf_i+0xd8>
 8004af8:	2973      	cmp	r1, #115	; 0x73
 8004afa:	f000 809d 	beq.w	8004c38 <_printf_i+0x1a4>
 8004afe:	d808      	bhi.n	8004b12 <_printf_i+0x7e>
 8004b00:	296f      	cmp	r1, #111	; 0x6f
 8004b02:	d020      	beq.n	8004b46 <_printf_i+0xb2>
 8004b04:	2970      	cmp	r1, #112	; 0x70
 8004b06:	d1dd      	bne.n	8004ac4 <_printf_i+0x30>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	f043 0320 	orr.w	r3, r3, #32
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	e003      	b.n	8004b1a <_printf_i+0x86>
 8004b12:	2975      	cmp	r1, #117	; 0x75
 8004b14:	d017      	beq.n	8004b46 <_printf_i+0xb2>
 8004b16:	2978      	cmp	r1, #120	; 0x78
 8004b18:	d1d4      	bne.n	8004ac4 <_printf_i+0x30>
 8004b1a:	2378      	movs	r3, #120	; 0x78
 8004b1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b20:	4864      	ldr	r0, [pc, #400]	; (8004cb4 <_printf_i+0x220>)
 8004b22:	e055      	b.n	8004bd0 <_printf_i+0x13c>
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	1d19      	adds	r1, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6011      	str	r1, [r2, #0]
 8004b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e08c      	b.n	8004c52 <_printf_i+0x1be>
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6011      	str	r1, [r2, #0]
 8004b3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b40:	bf18      	it	ne
 8004b42:	b21b      	sxthne	r3, r3
 8004b44:	e7cf      	b.n	8004ae6 <_printf_i+0x52>
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	6825      	ldr	r5, [r4, #0]
 8004b4a:	1d18      	adds	r0, r3, #4
 8004b4c:	6010      	str	r0, [r2, #0]
 8004b4e:	0628      	lsls	r0, r5, #24
 8004b50:	d501      	bpl.n	8004b56 <_printf_i+0xc2>
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	e002      	b.n	8004b5c <_printf_i+0xc8>
 8004b56:	0668      	lsls	r0, r5, #25
 8004b58:	d5fb      	bpl.n	8004b52 <_printf_i+0xbe>
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	4854      	ldr	r0, [pc, #336]	; (8004cb0 <_printf_i+0x21c>)
 8004b5e:	296f      	cmp	r1, #111	; 0x6f
 8004b60:	bf14      	ite	ne
 8004b62:	220a      	movne	r2, #10
 8004b64:	2208      	moveq	r2, #8
 8004b66:	2100      	movs	r1, #0
 8004b68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b6c:	6865      	ldr	r5, [r4, #4]
 8004b6e:	60a5      	str	r5, [r4, #8]
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	f2c0 8095 	blt.w	8004ca0 <_printf_i+0x20c>
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	f021 0104 	bic.w	r1, r1, #4
 8004b7c:	6021      	str	r1, [r4, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <_printf_i+0x16a>
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	f040 808e 	bne.w	8004ca4 <_printf_i+0x210>
 8004b88:	4665      	mov	r5, ip
 8004b8a:	2a08      	cmp	r2, #8
 8004b8c:	d10b      	bne.n	8004ba6 <_printf_i+0x112>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	07db      	lsls	r3, r3, #31
 8004b92:	d508      	bpl.n	8004ba6 <_printf_i+0x112>
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	bfde      	ittt	le
 8004b9c:	2330      	movle	r3, #48	; 0x30
 8004b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ba6:	ebac 0305 	sub.w	r3, ip, r5
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	f8cd 8000 	str.w	r8, [sp]
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff fef6 	bl	80049a8 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14d      	bne.n	8004c5c <_printf_i+0x1c8>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	b005      	add	sp, #20
 8004bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bca:	4839      	ldr	r0, [pc, #228]	; (8004cb0 <_printf_i+0x21c>)
 8004bcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004bd0:	6813      	ldr	r3, [r2, #0]
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	1d1d      	adds	r5, r3, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6015      	str	r5, [r2, #0]
 8004bda:	060a      	lsls	r2, r1, #24
 8004bdc:	d50b      	bpl.n	8004bf6 <_printf_i+0x162>
 8004bde:	07ca      	lsls	r2, r1, #31
 8004be0:	bf44      	itt	mi
 8004be2:	f041 0120 	orrmi.w	r1, r1, #32
 8004be6:	6021      	strmi	r1, [r4, #0]
 8004be8:	b91b      	cbnz	r3, 8004bf2 <_printf_i+0x15e>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	f022 0220 	bic.w	r2, r2, #32
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	e7b7      	b.n	8004b66 <_printf_i+0xd2>
 8004bf6:	064d      	lsls	r5, r1, #25
 8004bf8:	bf48      	it	mi
 8004bfa:	b29b      	uxthmi	r3, r3
 8004bfc:	e7ef      	b.n	8004bde <_printf_i+0x14a>
 8004bfe:	4665      	mov	r5, ip
 8004c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c04:	fb02 3311 	mls	r3, r2, r1, r3
 8004c08:	5cc3      	ldrb	r3, [r0, r3]
 8004c0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c0e:	460b      	mov	r3, r1
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d1f5      	bne.n	8004c00 <_printf_i+0x16c>
 8004c14:	e7b9      	b.n	8004b8a <_printf_i+0xf6>
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	6961      	ldr	r1, [r4, #20]
 8004c1c:	1d18      	adds	r0, r3, #4
 8004c1e:	6010      	str	r0, [r2, #0]
 8004c20:	0628      	lsls	r0, r5, #24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	d501      	bpl.n	8004c2a <_printf_i+0x196>
 8004c26:	6019      	str	r1, [r3, #0]
 8004c28:	e002      	b.n	8004c30 <_printf_i+0x19c>
 8004c2a:	066a      	lsls	r2, r5, #25
 8004c2c:	d5fb      	bpl.n	8004c26 <_printf_i+0x192>
 8004c2e:	8019      	strh	r1, [r3, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	4665      	mov	r5, ip
 8004c36:	e7b9      	b.n	8004bac <_printf_i+0x118>
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	1d19      	adds	r1, r3, #4
 8004c3c:	6011      	str	r1, [r2, #0]
 8004c3e:	681d      	ldr	r5, [r3, #0]
 8004c40:	6862      	ldr	r2, [r4, #4]
 8004c42:	2100      	movs	r1, #0
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7fb faeb 	bl	8000220 <memchr>
 8004c4a:	b108      	cbz	r0, 8004c50 <_printf_i+0x1bc>
 8004c4c:	1b40      	subs	r0, r0, r5
 8004c4e:	6060      	str	r0, [r4, #4]
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5a:	e7a7      	b.n	8004bac <_printf_i+0x118>
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	462a      	mov	r2, r5
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0aa      	beq.n	8004bc0 <_printf_i+0x12c>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d413      	bmi.n	8004c98 <_printf_i+0x204>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e7a3      	b.n	8004bc4 <_printf_i+0x130>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	464a      	mov	r2, r9
 8004c80:	4639      	mov	r1, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	47c0      	blx	r8
 8004c86:	3001      	adds	r0, #1
 8004c88:	d09a      	beq.n	8004bc0 <_printf_i+0x12c>
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	68e3      	ldr	r3, [r4, #12]
 8004c8e:	9a03      	ldr	r2, [sp, #12]
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	42ab      	cmp	r3, r5
 8004c94:	dcf2      	bgt.n	8004c7c <_printf_i+0x1e8>
 8004c96:	e7eb      	b.n	8004c70 <_printf_i+0x1dc>
 8004c98:	2500      	movs	r5, #0
 8004c9a:	f104 0919 	add.w	r9, r4, #25
 8004c9e:	e7f5      	b.n	8004c8c <_printf_i+0x1f8>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ac      	bne.n	8004bfe <_printf_i+0x16a>
 8004ca4:	7803      	ldrb	r3, [r0, #0]
 8004ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004caa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cae:	e76c      	b.n	8004b8a <_printf_i+0xf6>
 8004cb0:	08005cb1 	.word	0x08005cb1
 8004cb4:	08005cc2 	.word	0x08005cc2

08004cb8 <__svfiscanf_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	9144      	str	r1, [sp, #272]	; 0x110
 8004cc6:	9145      	str	r1, [sp, #276]	; 0x114
 8004cc8:	499f      	ldr	r1, [pc, #636]	; (8004f48 <__svfiscanf_r+0x290>)
 8004cca:	91a0      	str	r1, [sp, #640]	; 0x280
 8004ccc:	f10d 0804 	add.w	r8, sp, #4
 8004cd0:	499e      	ldr	r1, [pc, #632]	; (8004f4c <__svfiscanf_r+0x294>)
 8004cd2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004f50 <__svfiscanf_r+0x298>
 8004cd6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004cda:	4606      	mov	r6, r0
 8004cdc:	4692      	mov	sl, r2
 8004cde:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	270a      	movs	r7, #10
 8004ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 812a 	beq.w	8004f42 <__svfiscanf_r+0x28a>
 8004cee:	4655      	mov	r5, sl
 8004cf0:	f000 fe9a 	bl	8005a28 <__locale_ctype_ptr>
 8004cf4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004cf8:	4458      	add	r0, fp
 8004cfa:	7843      	ldrb	r3, [r0, #1]
 8004cfc:	f013 0308 	ands.w	r3, r3, #8
 8004d00:	d01c      	beq.n	8004d3c <__svfiscanf_r+0x84>
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dd12      	ble.n	8004d2e <__svfiscanf_r+0x76>
 8004d08:	f000 fe8e 	bl	8005a28 <__locale_ctype_ptr>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	4410      	add	r0, r2
 8004d12:	7842      	ldrb	r2, [r0, #1]
 8004d14:	0712      	lsls	r2, r2, #28
 8004d16:	d401      	bmi.n	8004d1c <__svfiscanf_r+0x64>
 8004d18:	46aa      	mov	sl, r5
 8004d1a:	e7e3      	b.n	8004ce4 <__svfiscanf_r+0x2c>
 8004d1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004d1e:	3201      	adds	r2, #1
 8004d20:	9245      	str	r2, [sp, #276]	; 0x114
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	3301      	adds	r3, #1
 8004d26:	3a01      	subs	r2, #1
 8004d28:	6062      	str	r2, [r4, #4]
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	e7e9      	b.n	8004d02 <__svfiscanf_r+0x4a>
 8004d2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004d30:	4621      	mov	r1, r4
 8004d32:	4630      	mov	r0, r6
 8004d34:	4798      	blx	r3
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0e6      	beq.n	8004d08 <__svfiscanf_r+0x50>
 8004d3a:	e7ed      	b.n	8004d18 <__svfiscanf_r+0x60>
 8004d3c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004d40:	f040 8082 	bne.w	8004e48 <__svfiscanf_r+0x190>
 8004d44:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d46:	9341      	str	r3, [sp, #260]	; 0x104
 8004d48:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4e:	d103      	bne.n	8004d58 <__svfiscanf_r+0xa0>
 8004d50:	2310      	movs	r3, #16
 8004d52:	9341      	str	r3, [sp, #260]	; 0x104
 8004d54:	f10a 0502 	add.w	r5, sl, #2
 8004d58:	46aa      	mov	sl, r5
 8004d5a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004d5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004d62:	2a09      	cmp	r2, #9
 8004d64:	d922      	bls.n	8004dac <__svfiscanf_r+0xf4>
 8004d66:	2203      	movs	r2, #3
 8004d68:	4879      	ldr	r0, [pc, #484]	; (8004f50 <__svfiscanf_r+0x298>)
 8004d6a:	f7fb fa59 	bl	8000220 <memchr>
 8004d6e:	b138      	cbz	r0, 8004d80 <__svfiscanf_r+0xc8>
 8004d70:	eba0 0309 	sub.w	r3, r0, r9
 8004d74:	2001      	movs	r0, #1
 8004d76:	4098      	lsls	r0, r3
 8004d78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d7a:	4318      	orrs	r0, r3
 8004d7c:	9041      	str	r0, [sp, #260]	; 0x104
 8004d7e:	46aa      	mov	sl, r5
 8004d80:	f89a 3000 	ldrb.w	r3, [sl]
 8004d84:	2b67      	cmp	r3, #103	; 0x67
 8004d86:	f10a 0501 	add.w	r5, sl, #1
 8004d8a:	d82b      	bhi.n	8004de4 <__svfiscanf_r+0x12c>
 8004d8c:	2b65      	cmp	r3, #101	; 0x65
 8004d8e:	f080 809f 	bcs.w	8004ed0 <__svfiscanf_r+0x218>
 8004d92:	2b47      	cmp	r3, #71	; 0x47
 8004d94:	d810      	bhi.n	8004db8 <__svfiscanf_r+0x100>
 8004d96:	2b45      	cmp	r3, #69	; 0x45
 8004d98:	f080 809a 	bcs.w	8004ed0 <__svfiscanf_r+0x218>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d06c      	beq.n	8004e7a <__svfiscanf_r+0x1c2>
 8004da0:	2b25      	cmp	r3, #37	; 0x25
 8004da2:	d051      	beq.n	8004e48 <__svfiscanf_r+0x190>
 8004da4:	2303      	movs	r3, #3
 8004da6:	9347      	str	r3, [sp, #284]	; 0x11c
 8004da8:	9742      	str	r7, [sp, #264]	; 0x108
 8004daa:	e027      	b.n	8004dfc <__svfiscanf_r+0x144>
 8004dac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004dae:	fb07 1303 	mla	r3, r7, r3, r1
 8004db2:	3b30      	subs	r3, #48	; 0x30
 8004db4:	9343      	str	r3, [sp, #268]	; 0x10c
 8004db6:	e7cf      	b.n	8004d58 <__svfiscanf_r+0xa0>
 8004db8:	2b5b      	cmp	r3, #91	; 0x5b
 8004dba:	d06a      	beq.n	8004e92 <__svfiscanf_r+0x1da>
 8004dbc:	d80c      	bhi.n	8004dd8 <__svfiscanf_r+0x120>
 8004dbe:	2b58      	cmp	r3, #88	; 0x58
 8004dc0:	d1f0      	bne.n	8004da4 <__svfiscanf_r+0xec>
 8004dc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc8:	9241      	str	r2, [sp, #260]	; 0x104
 8004dca:	2210      	movs	r2, #16
 8004dcc:	9242      	str	r2, [sp, #264]	; 0x108
 8004dce:	2b6e      	cmp	r3, #110	; 0x6e
 8004dd0:	bf8c      	ite	hi
 8004dd2:	2304      	movhi	r3, #4
 8004dd4:	2303      	movls	r3, #3
 8004dd6:	e010      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004dd8:	2b63      	cmp	r3, #99	; 0x63
 8004dda:	d065      	beq.n	8004ea8 <__svfiscanf_r+0x1f0>
 8004ddc:	2b64      	cmp	r3, #100	; 0x64
 8004dde:	d1e1      	bne.n	8004da4 <__svfiscanf_r+0xec>
 8004de0:	9742      	str	r7, [sp, #264]	; 0x108
 8004de2:	e7f4      	b.n	8004dce <__svfiscanf_r+0x116>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d04b      	beq.n	8004e80 <__svfiscanf_r+0x1c8>
 8004de8:	d826      	bhi.n	8004e38 <__svfiscanf_r+0x180>
 8004dea:	2b6e      	cmp	r3, #110	; 0x6e
 8004dec:	d062      	beq.n	8004eb4 <__svfiscanf_r+0x1fc>
 8004dee:	d84c      	bhi.n	8004e8a <__svfiscanf_r+0x1d2>
 8004df0:	2b69      	cmp	r3, #105	; 0x69
 8004df2:	d1d7      	bne.n	8004da4 <__svfiscanf_r+0xec>
 8004df4:	2300      	movs	r3, #0
 8004df6:	9342      	str	r3, [sp, #264]	; 0x108
 8004df8:	2303      	movs	r3, #3
 8004dfa:	9347      	str	r3, [sp, #284]	; 0x11c
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dd68      	ble.n	8004ed4 <__svfiscanf_r+0x21c>
 8004e02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e04:	0659      	lsls	r1, r3, #25
 8004e06:	d407      	bmi.n	8004e18 <__svfiscanf_r+0x160>
 8004e08:	f000 fe0e 	bl	8005a28 <__locale_ctype_ptr>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	4410      	add	r0, r2
 8004e12:	7842      	ldrb	r2, [r0, #1]
 8004e14:	0712      	lsls	r2, r2, #28
 8004e16:	d464      	bmi.n	8004ee2 <__svfiscanf_r+0x22a>
 8004e18:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	dc73      	bgt.n	8004f06 <__svfiscanf_r+0x24e>
 8004e1e:	466b      	mov	r3, sp
 8004e20:	4622      	mov	r2, r4
 8004e22:	a941      	add	r1, sp, #260	; 0x104
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f8bf 	bl	8004fa8 <_scanf_chars>
 8004e2a:	2801      	cmp	r0, #1
 8004e2c:	f000 8089 	beq.w	8004f42 <__svfiscanf_r+0x28a>
 8004e30:	2802      	cmp	r0, #2
 8004e32:	f47f af71 	bne.w	8004d18 <__svfiscanf_r+0x60>
 8004e36:	e01d      	b.n	8004e74 <__svfiscanf_r+0x1bc>
 8004e38:	2b75      	cmp	r3, #117	; 0x75
 8004e3a:	d0d1      	beq.n	8004de0 <__svfiscanf_r+0x128>
 8004e3c:	2b78      	cmp	r3, #120	; 0x78
 8004e3e:	d0c0      	beq.n	8004dc2 <__svfiscanf_r+0x10a>
 8004e40:	2b73      	cmp	r3, #115	; 0x73
 8004e42:	d1af      	bne.n	8004da4 <__svfiscanf_r+0xec>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e7d8      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dd0c      	ble.n	8004e68 <__svfiscanf_r+0x1b0>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	455a      	cmp	r2, fp
 8004e54:	d175      	bne.n	8004f42 <__svfiscanf_r+0x28a>
 8004e56:	3301      	adds	r3, #1
 8004e58:	6862      	ldr	r2, [r4, #4]
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	3301      	adds	r3, #1
 8004e62:	6062      	str	r2, [r4, #4]
 8004e64:	9345      	str	r3, [sp, #276]	; 0x114
 8004e66:	e757      	b.n	8004d18 <__svfiscanf_r+0x60>
 8004e68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4798      	blx	r3
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d0ec      	beq.n	8004e4e <__svfiscanf_r+0x196>
 8004e74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d159      	bne.n	8004f2e <__svfiscanf_r+0x276>
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	e05c      	b.n	8004f3a <__svfiscanf_r+0x282>
 8004e80:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e82:	f042 0220 	orr.w	r2, r2, #32
 8004e86:	9241      	str	r2, [sp, #260]	; 0x104
 8004e88:	e79b      	b.n	8004dc2 <__svfiscanf_r+0x10a>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	9342      	str	r3, [sp, #264]	; 0x108
 8004e8e:	2304      	movs	r3, #4
 8004e90:	e7b3      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4640      	mov	r0, r8
 8004e96:	f000 fa85 	bl	80053a4 <__sccl>
 8004e9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea0:	9341      	str	r3, [sp, #260]	; 0x104
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e7a8      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004ea8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eae:	9341      	str	r3, [sp, #260]	; 0x104
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e7a2      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004eb4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004eb6:	06c3      	lsls	r3, r0, #27
 8004eb8:	f53f af2e 	bmi.w	8004d18 <__svfiscanf_r+0x60>
 8004ebc:	9b00      	ldr	r3, [sp, #0]
 8004ebe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	9100      	str	r1, [sp, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	07c0      	lsls	r0, r0, #31
 8004ec8:	bf4c      	ite	mi
 8004eca:	801a      	strhmi	r2, [r3, #0]
 8004ecc:	601a      	strpl	r2, [r3, #0]
 8004ece:	e723      	b.n	8004d18 <__svfiscanf_r+0x60>
 8004ed0:	2305      	movs	r3, #5
 8004ed2:	e792      	b.n	8004dfa <__svfiscanf_r+0x142>
 8004ed4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4798      	blx	r3
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d090      	beq.n	8004e02 <__svfiscanf_r+0x14a>
 8004ee0:	e7c8      	b.n	8004e74 <__svfiscanf_r+0x1bc>
 8004ee2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ee4:	3201      	adds	r2, #1
 8004ee6:	9245      	str	r2, [sp, #276]	; 0x114
 8004ee8:	6862      	ldr	r2, [r4, #4]
 8004eea:	3a01      	subs	r2, #1
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	6062      	str	r2, [r4, #4]
 8004ef0:	dd02      	ble.n	8004ef8 <__svfiscanf_r+0x240>
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	e787      	b.n	8004e08 <__svfiscanf_r+0x150>
 8004ef8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004efa:	4621      	mov	r1, r4
 8004efc:	4630      	mov	r0, r6
 8004efe:	4798      	blx	r3
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d081      	beq.n	8004e08 <__svfiscanf_r+0x150>
 8004f04:	e7b6      	b.n	8004e74 <__svfiscanf_r+0x1bc>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	dc06      	bgt.n	8004f18 <__svfiscanf_r+0x260>
 8004f0a:	466b      	mov	r3, sp
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	a941      	add	r1, sp, #260	; 0x104
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 f8ad 	bl	8005070 <_scanf_i>
 8004f16:	e788      	b.n	8004e2a <__svfiscanf_r+0x172>
 8004f18:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <__svfiscanf_r+0x29c>)
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f aefc 	beq.w	8004d18 <__svfiscanf_r+0x60>
 8004f20:	466b      	mov	r3, sp
 8004f22:	4622      	mov	r2, r4
 8004f24:	a941      	add	r1, sp, #260	; 0x104
 8004f26:	4630      	mov	r0, r6
 8004f28:	f3af 8000 	nop.w
 8004f2c:	e77d      	b.n	8004e2a <__svfiscanf_r+0x172>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f34:	bf18      	it	ne
 8004f36:	f04f 30ff 	movne.w	r0, #4294967295
 8004f3a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f44:	e7f9      	b.n	8004f3a <__svfiscanf_r+0x282>
 8004f46:	bf00      	nop
 8004f48:	08005735 	.word	0x08005735
 8004f4c:	0800526d 	.word	0x0800526d
 8004f50:	08005ca6 	.word	0x08005ca6
 8004f54:	00000000 	.word	0x00000000

08004f58 <_vfiscanf_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	4616      	mov	r6, r2
 8004f60:	461f      	mov	r7, r3
 8004f62:	4605      	mov	r5, r0
 8004f64:	b118      	cbz	r0, 8004f6e <_vfiscanf_r+0x16>
 8004f66:	6983      	ldr	r3, [r0, #24]
 8004f68:	b90b      	cbnz	r3, 8004f6e <_vfiscanf_r+0x16>
 8004f6a:	f7ff fa23 	bl	80043b4 <__sinit>
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <_vfiscanf_r+0x44>)
 8004f70:	429c      	cmp	r4, r3
 8004f72:	d108      	bne.n	8004f86 <_vfiscanf_r+0x2e>
 8004f74:	686c      	ldr	r4, [r5, #4]
 8004f76:	463b      	mov	r3, r7
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	f7ff be99 	b.w	8004cb8 <__svfiscanf_r>
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <_vfiscanf_r+0x48>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d101      	bne.n	8004f90 <_vfiscanf_r+0x38>
 8004f8c:	68ac      	ldr	r4, [r5, #8]
 8004f8e:	e7f2      	b.n	8004f76 <_vfiscanf_r+0x1e>
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <_vfiscanf_r+0x4c>)
 8004f92:	429c      	cmp	r4, r3
 8004f94:	bf08      	it	eq
 8004f96:	68ec      	ldreq	r4, [r5, #12]
 8004f98:	e7ed      	b.n	8004f76 <_vfiscanf_r+0x1e>
 8004f9a:	bf00      	nop
 8004f9c:	08005c60 	.word	0x08005c60
 8004fa0:	08005c80 	.word	0x08005c80
 8004fa4:	08005c40 	.word	0x08005c40

08004fa8 <_scanf_chars>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	4615      	mov	r5, r2
 8004fae:	688a      	ldr	r2, [r1, #8]
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	b932      	cbnz	r2, 8004fc4 <_scanf_chars+0x1c>
 8004fb6:	698a      	ldr	r2, [r1, #24]
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	bf14      	ite	ne
 8004fbc:	f04f 32ff 	movne.w	r2, #4294967295
 8004fc0:	2201      	moveq	r2, #1
 8004fc2:	608a      	str	r2, [r1, #8]
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	06d1      	lsls	r1, r2, #27
 8004fc8:	bf5f      	itttt	pl
 8004fca:	681a      	ldrpl	r2, [r3, #0]
 8004fcc:	1d11      	addpl	r1, r2, #4
 8004fce:	6019      	strpl	r1, [r3, #0]
 8004fd0:	6817      	ldrpl	r7, [r2, #0]
 8004fd2:	2600      	movs	r6, #0
 8004fd4:	69a3      	ldr	r3, [r4, #24]
 8004fd6:	b1db      	cbz	r3, 8005010 <_scanf_chars+0x68>
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <_scanf_chars+0x44>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	6962      	ldr	r2, [r4, #20]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	b9a3      	cbnz	r3, 8005010 <_scanf_chars+0x68>
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d132      	bne.n	8005050 <_scanf_chars+0xa8>
 8004fea:	e006      	b.n	8004ffa <_scanf_chars+0x52>
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d007      	beq.n	8005000 <_scanf_chars+0x58>
 8004ff0:	2e00      	cmp	r6, #0
 8004ff2:	d12d      	bne.n	8005050 <_scanf_chars+0xa8>
 8004ff4:	69a3      	ldr	r3, [r4, #24]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d12a      	bne.n	8005050 <_scanf_chars+0xa8>
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005000:	f000 fd12 	bl	8005a28 <__locale_ctype_ptr>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4418      	add	r0, r3
 800500a:	7843      	ldrb	r3, [r0, #1]
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	d4ef      	bmi.n	8004ff0 <_scanf_chars+0x48>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	06da      	lsls	r2, r3, #27
 8005014:	bf5e      	ittt	pl
 8005016:	682b      	ldrpl	r3, [r5, #0]
 8005018:	781b      	ldrbpl	r3, [r3, #0]
 800501a:	703b      	strbpl	r3, [r7, #0]
 800501c:	682a      	ldr	r2, [r5, #0]
 800501e:	686b      	ldr	r3, [r5, #4]
 8005020:	f102 0201 	add.w	r2, r2, #1
 8005024:	602a      	str	r2, [r5, #0]
 8005026:	68a2      	ldr	r2, [r4, #8]
 8005028:	f103 33ff 	add.w	r3, r3, #4294967295
 800502c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005030:	606b      	str	r3, [r5, #4]
 8005032:	f106 0601 	add.w	r6, r6, #1
 8005036:	bf58      	it	pl
 8005038:	3701      	addpl	r7, #1
 800503a:	60a2      	str	r2, [r4, #8]
 800503c:	b142      	cbz	r2, 8005050 <_scanf_chars+0xa8>
 800503e:	2b00      	cmp	r3, #0
 8005040:	dcc8      	bgt.n	8004fd4 <_scanf_chars+0x2c>
 8005042:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005046:	4629      	mov	r1, r5
 8005048:	4640      	mov	r0, r8
 800504a:	4798      	blx	r3
 800504c:	2800      	cmp	r0, #0
 800504e:	d0c1      	beq.n	8004fd4 <_scanf_chars+0x2c>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	f013 0310 	ands.w	r3, r3, #16
 8005056:	d105      	bne.n	8005064 <_scanf_chars+0xbc>
 8005058:	68e2      	ldr	r2, [r4, #12]
 800505a:	3201      	adds	r2, #1
 800505c:	60e2      	str	r2, [r4, #12]
 800505e:	69a2      	ldr	r2, [r4, #24]
 8005060:	b102      	cbz	r2, 8005064 <_scanf_chars+0xbc>
 8005062:	703b      	strb	r3, [r7, #0]
 8005064:	6923      	ldr	r3, [r4, #16]
 8005066:	441e      	add	r6, r3
 8005068:	6126      	str	r6, [r4, #16]
 800506a:	2000      	movs	r0, #0
 800506c:	e7c6      	b.n	8004ffc <_scanf_chars+0x54>
	...

08005070 <_scanf_i>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	469a      	mov	sl, r3
 8005076:	4b74      	ldr	r3, [pc, #464]	; (8005248 <_scanf_i+0x1d8>)
 8005078:	460c      	mov	r4, r1
 800507a:	4683      	mov	fp, r0
 800507c:	4616      	mov	r6, r2
 800507e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005082:	b087      	sub	sp, #28
 8005084:	ab03      	add	r3, sp, #12
 8005086:	68a7      	ldr	r7, [r4, #8]
 8005088:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <_scanf_i+0x1dc>)
 800508e:	69a1      	ldr	r1, [r4, #24]
 8005090:	4a6f      	ldr	r2, [pc, #444]	; (8005250 <_scanf_i+0x1e0>)
 8005092:	2903      	cmp	r1, #3
 8005094:	bf08      	it	eq
 8005096:	461a      	moveq	r2, r3
 8005098:	1e7b      	subs	r3, r7, #1
 800509a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800509e:	bf84      	itt	hi
 80050a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050a4:	60a3      	strhi	r3, [r4, #8]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	9200      	str	r2, [sp, #0]
 80050aa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80050ae:	bf88      	it	hi
 80050b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050b4:	f104 091c 	add.w	r9, r4, #28
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bf8c      	ite	hi
 80050bc:	197f      	addhi	r7, r7, r5
 80050be:	2700      	movls	r7, #0
 80050c0:	464b      	mov	r3, r9
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6831      	ldr	r1, [r6, #0]
 80050ca:	ab03      	add	r3, sp, #12
 80050cc:	2202      	movs	r2, #2
 80050ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80050d2:	7809      	ldrb	r1, [r1, #0]
 80050d4:	f7fb f8a4 	bl	8000220 <memchr>
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	b330      	cbz	r0, 800512a <_scanf_i+0xba>
 80050dc:	f1b8 0f01 	cmp.w	r8, #1
 80050e0:	d15a      	bne.n	8005198 <_scanf_i+0x128>
 80050e2:	6862      	ldr	r2, [r4, #4]
 80050e4:	b92a      	cbnz	r2, 80050f2 <_scanf_i+0x82>
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	2108      	movs	r1, #8
 80050ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ee:	6061      	str	r1, [r4, #4]
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	68a2      	ldr	r2, [r4, #8]
 80050fc:	1e51      	subs	r1, r2, #1
 80050fe:	60a1      	str	r1, [r4, #8]
 8005100:	b19a      	cbz	r2, 800512a <_scanf_i+0xba>
 8005102:	6832      	ldr	r2, [r6, #0]
 8005104:	1c51      	adds	r1, r2, #1
 8005106:	6031      	str	r1, [r6, #0]
 8005108:	7812      	ldrb	r2, [r2, #0]
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	1c5d      	adds	r5, r3, #1
 800510e:	6873      	ldr	r3, [r6, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	6073      	str	r3, [r6, #4]
 8005116:	dc07      	bgt.n	8005128 <_scanf_i+0xb8>
 8005118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800511c:	4631      	mov	r1, r6
 800511e:	4658      	mov	r0, fp
 8005120:	4798      	blx	r3
 8005122:	2800      	cmp	r0, #0
 8005124:	f040 8086 	bne.w	8005234 <_scanf_i+0x1c4>
 8005128:	462b      	mov	r3, r5
 800512a:	f108 0801 	add.w	r8, r8, #1
 800512e:	f1b8 0f03 	cmp.w	r8, #3
 8005132:	d1c8      	bne.n	80050c6 <_scanf_i+0x56>
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	b90a      	cbnz	r2, 800513c <_scanf_i+0xcc>
 8005138:	220a      	movs	r2, #10
 800513a:	6062      	str	r2, [r4, #4]
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	4945      	ldr	r1, [pc, #276]	; (8005254 <_scanf_i+0x1e4>)
 8005140:	6960      	ldr	r0, [r4, #20]
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	1a89      	subs	r1, r1, r2
 8005146:	f000 f92d 	bl	80053a4 <__sccl>
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	f04f 0800 	mov.w	r8, #0
 8005150:	461d      	mov	r5, r3
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03a      	beq.n	80051d0 <_scanf_i+0x160>
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	6960      	ldr	r0, [r4, #20]
 800515e:	f891 c000 	ldrb.w	ip, [r1]
 8005162:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005166:	2800      	cmp	r0, #0
 8005168:	d032      	beq.n	80051d0 <_scanf_i+0x160>
 800516a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800516e:	d121      	bne.n	80051b4 <_scanf_i+0x144>
 8005170:	0510      	lsls	r0, r2, #20
 8005172:	d51f      	bpl.n	80051b4 <_scanf_i+0x144>
 8005174:	f108 0801 	add.w	r8, r8, #1
 8005178:	b117      	cbz	r7, 8005180 <_scanf_i+0x110>
 800517a:	3301      	adds	r3, #1
 800517c:	3f01      	subs	r7, #1
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6873      	ldr	r3, [r6, #4]
 8005182:	3b01      	subs	r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	6073      	str	r3, [r6, #4]
 8005188:	dd1b      	ble.n	80051c2 <_scanf_i+0x152>
 800518a:	6833      	ldr	r3, [r6, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	68a3      	ldr	r3, [r4, #8]
 8005192:	3b01      	subs	r3, #1
 8005194:	60a3      	str	r3, [r4, #8]
 8005196:	e7dc      	b.n	8005152 <_scanf_i+0xe2>
 8005198:	f1b8 0f02 	cmp.w	r8, #2
 800519c:	d1ad      	bne.n	80050fa <_scanf_i+0x8a>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80051a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80051a8:	d1bf      	bne.n	800512a <_scanf_i+0xba>
 80051aa:	2110      	movs	r1, #16
 80051ac:	6061      	str	r1, [r4, #4]
 80051ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b2:	e7a1      	b.n	80050f8 <_scanf_i+0x88>
 80051b4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	780b      	ldrb	r3, [r1, #0]
 80051bc:	702b      	strb	r3, [r5, #0]
 80051be:	3501      	adds	r5, #1
 80051c0:	e7de      	b.n	8005180 <_scanf_i+0x110>
 80051c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051c6:	4631      	mov	r1, r6
 80051c8:	4658      	mov	r0, fp
 80051ca:	4798      	blx	r3
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d0df      	beq.n	8005190 <_scanf_i+0x120>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	05d9      	lsls	r1, r3, #23
 80051d4:	d50c      	bpl.n	80051f0 <_scanf_i+0x180>
 80051d6:	454d      	cmp	r5, r9
 80051d8:	d908      	bls.n	80051ec <_scanf_i+0x17c>
 80051da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80051de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051e2:	4632      	mov	r2, r6
 80051e4:	4658      	mov	r0, fp
 80051e6:	4798      	blx	r3
 80051e8:	1e6f      	subs	r7, r5, #1
 80051ea:	463d      	mov	r5, r7
 80051ec:	454d      	cmp	r5, r9
 80051ee:	d029      	beq.n	8005244 <_scanf_i+0x1d4>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	f012 0210 	ands.w	r2, r2, #16
 80051f6:	d113      	bne.n	8005220 <_scanf_i+0x1b0>
 80051f8:	702a      	strb	r2, [r5, #0]
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	9e00      	ldr	r6, [sp, #0]
 80051fe:	4649      	mov	r1, r9
 8005200:	4658      	mov	r0, fp
 8005202:	47b0      	blx	r6
 8005204:	f8da 3000 	ldr.w	r3, [sl]
 8005208:	6821      	ldr	r1, [r4, #0]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	f8ca 2000 	str.w	r2, [sl]
 8005210:	f011 0f20 	tst.w	r1, #32
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	d010      	beq.n	800523a <_scanf_i+0x1ca>
 8005218:	6018      	str	r0, [r3, #0]
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60e3      	str	r3, [r4, #12]
 8005220:	eba5 0509 	sub.w	r5, r5, r9
 8005224:	44a8      	add	r8, r5
 8005226:	6925      	ldr	r5, [r4, #16]
 8005228:	4445      	add	r5, r8
 800522a:	6125      	str	r5, [r4, #16]
 800522c:	2000      	movs	r0, #0
 800522e:	b007      	add	sp, #28
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	f04f 0800 	mov.w	r8, #0
 8005238:	e7ca      	b.n	80051d0 <_scanf_i+0x160>
 800523a:	07ca      	lsls	r2, r1, #31
 800523c:	bf4c      	ite	mi
 800523e:	8018      	strhmi	r0, [r3, #0]
 8005240:	6018      	strpl	r0, [r3, #0]
 8005242:	e7ea      	b.n	800521a <_scanf_i+0x1aa>
 8005244:	2001      	movs	r0, #1
 8005246:	e7f2      	b.n	800522e <_scanf_i+0x1be>
 8005248:	08005c18 	.word	0x08005c18
 800524c:	08005585 	.word	0x08005585
 8005250:	0800569d 	.word	0x0800569d
 8005254:	08005ce3 	.word	0x08005ce3

08005258 <lflush>:
 8005258:	8983      	ldrh	r3, [r0, #12]
 800525a:	f003 0309 	and.w	r3, r3, #9
 800525e:	2b09      	cmp	r3, #9
 8005260:	d101      	bne.n	8005266 <lflush+0xe>
 8005262:	f7ff b855 	b.w	8004310 <fflush>
 8005266:	2000      	movs	r0, #0
 8005268:	4770      	bx	lr
	...

0800526c <__srefill_r>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	460c      	mov	r4, r1
 8005270:	4605      	mov	r5, r0
 8005272:	b118      	cbz	r0, 800527c <__srefill_r+0x10>
 8005274:	6983      	ldr	r3, [r0, #24]
 8005276:	b90b      	cbnz	r3, 800527c <__srefill_r+0x10>
 8005278:	f7ff f89c 	bl	80043b4 <__sinit>
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <__srefill_r+0x104>)
 800527e:	429c      	cmp	r4, r3
 8005280:	d10a      	bne.n	8005298 <__srefill_r+0x2c>
 8005282:	686c      	ldr	r4, [r5, #4]
 8005284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005288:	2300      	movs	r3, #0
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	b293      	uxth	r3, r2
 800528e:	069e      	lsls	r6, r3, #26
 8005290:	d50c      	bpl.n	80052ac <__srefill_r+0x40>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	e067      	b.n	8005368 <__srefill_r+0xfc>
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <__srefill_r+0x108>)
 800529a:	429c      	cmp	r4, r3
 800529c:	d101      	bne.n	80052a2 <__srefill_r+0x36>
 800529e:	68ac      	ldr	r4, [r5, #8]
 80052a0:	e7f0      	b.n	8005284 <__srefill_r+0x18>
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <__srefill_r+0x10c>)
 80052a4:	429c      	cmp	r4, r3
 80052a6:	bf08      	it	eq
 80052a8:	68ec      	ldreq	r4, [r5, #12]
 80052aa:	e7eb      	b.n	8005284 <__srefill_r+0x18>
 80052ac:	0758      	lsls	r0, r3, #29
 80052ae:	d449      	bmi.n	8005344 <__srefill_r+0xd8>
 80052b0:	06d9      	lsls	r1, r3, #27
 80052b2:	d405      	bmi.n	80052c0 <__srefill_r+0x54>
 80052b4:	2309      	movs	r3, #9
 80052b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	81a2      	strh	r2, [r4, #12]
 80052be:	e7e8      	b.n	8005292 <__srefill_r+0x26>
 80052c0:	071a      	lsls	r2, r3, #28
 80052c2:	d50b      	bpl.n	80052dc <__srefill_r+0x70>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f7fe fff8 	bl	80042bc <_fflush_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d1e0      	bne.n	8005292 <__srefill_r+0x26>
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	60a0      	str	r0, [r4, #8]
 80052d4:	f023 0308 	bic.w	r3, r3, #8
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	61a0      	str	r0, [r4, #24]
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f043 0304 	orr.w	r3, r3, #4
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	b91b      	cbnz	r3, 80052f0 <__srefill_r+0x84>
 80052e8:	4621      	mov	r1, r4
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7ff f92c 	bl	8004548 <__smakebuf_r>
 80052f0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80052f4:	b2be      	uxth	r6, r7
 80052f6:	07b3      	lsls	r3, r6, #30
 80052f8:	d00f      	beq.n	800531a <__srefill_r+0xae>
 80052fa:	2301      	movs	r3, #1
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <__srefill_r+0x110>)
 8005300:	491f      	ldr	r1, [pc, #124]	; (8005380 <__srefill_r+0x114>)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	f006 0609 	and.w	r6, r6, #9
 8005308:	f7ff f8c0 	bl	800448c <_fwalk>
 800530c:	2e09      	cmp	r6, #9
 800530e:	81a7      	strh	r7, [r4, #12]
 8005310:	d103      	bne.n	800531a <__srefill_r+0xae>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f7fe ff4b 	bl	80041b0 <__sflush_r>
 800531a:	6922      	ldr	r2, [r4, #16]
 800531c:	6022      	str	r2, [r4, #0]
 800531e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005320:	6963      	ldr	r3, [r4, #20]
 8005322:	6a21      	ldr	r1, [r4, #32]
 8005324:	4628      	mov	r0, r5
 8005326:	47b0      	blx	r6
 8005328:	2800      	cmp	r0, #0
 800532a:	6060      	str	r0, [r4, #4]
 800532c:	dc1d      	bgt.n	800536a <__srefill_r+0xfe>
 800532e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005332:	bf17      	itett	ne
 8005334:	2200      	movne	r2, #0
 8005336:	f043 0320 	orreq.w	r3, r3, #32
 800533a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800533e:	6062      	strne	r2, [r4, #4]
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	e7a6      	b.n	8005292 <__srefill_r+0x26>
 8005344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005346:	2900      	cmp	r1, #0
 8005348:	d0cc      	beq.n	80052e4 <__srefill_r+0x78>
 800534a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800534e:	4299      	cmp	r1, r3
 8005350:	d002      	beq.n	8005358 <__srefill_r+0xec>
 8005352:	4628      	mov	r0, r5
 8005354:	f7ff f940 	bl	80045d8 <_free_r>
 8005358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800535a:	6063      	str	r3, [r4, #4]
 800535c:	2000      	movs	r0, #0
 800535e:	6360      	str	r0, [r4, #52]	; 0x34
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0bf      	beq.n	80052e4 <__srefill_r+0x78>
 8005364:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536a:	2000      	movs	r0, #0
 800536c:	e7fc      	b.n	8005368 <__srefill_r+0xfc>
 800536e:	bf00      	nop
 8005370:	08005c60 	.word	0x08005c60
 8005374:	08005c80 	.word	0x08005c80
 8005378:	08005c40 	.word	0x08005c40
 800537c:	08005c3c 	.word	0x08005c3c
 8005380:	08005259 	.word	0x08005259

08005384 <_sbrk_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4c06      	ldr	r4, [pc, #24]	; (80053a0 <_sbrk_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4605      	mov	r5, r0
 800538c:	4608      	mov	r0, r1
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	f7fb fbb2 	bl	8000af8 <_sbrk>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_sbrk_r+0x1a>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	b103      	cbz	r3, 800539e <_sbrk_r+0x1a>
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20000298 	.word	0x20000298

080053a4 <__sccl>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	780b      	ldrb	r3, [r1, #0]
 80053a8:	2b5e      	cmp	r3, #94	; 0x5e
 80053aa:	bf13      	iteet	ne
 80053ac:	1c4a      	addne	r2, r1, #1
 80053ae:	1c8a      	addeq	r2, r1, #2
 80053b0:	784b      	ldrbeq	r3, [r1, #1]
 80053b2:	2100      	movne	r1, #0
 80053b4:	bf08      	it	eq
 80053b6:	2101      	moveq	r1, #1
 80053b8:	1e44      	subs	r4, r0, #1
 80053ba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80053be:	f804 1f01 	strb.w	r1, [r4, #1]!
 80053c2:	42ac      	cmp	r4, r5
 80053c4:	d1fb      	bne.n	80053be <__sccl+0x1a>
 80053c6:	b913      	cbnz	r3, 80053ce <__sccl+0x2a>
 80053c8:	3a01      	subs	r2, #1
 80053ca:	4610      	mov	r0, r2
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	f081 0401 	eor.w	r4, r1, #1
 80053d2:	54c4      	strb	r4, [r0, r3]
 80053d4:	1c51      	adds	r1, r2, #1
 80053d6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80053da:	2d2d      	cmp	r5, #45	; 0x2d
 80053dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80053e0:	460a      	mov	r2, r1
 80053e2:	d006      	beq.n	80053f2 <__sccl+0x4e>
 80053e4:	2d5d      	cmp	r5, #93	; 0x5d
 80053e6:	d0f0      	beq.n	80053ca <__sccl+0x26>
 80053e8:	b90d      	cbnz	r5, 80053ee <__sccl+0x4a>
 80053ea:	4632      	mov	r2, r6
 80053ec:	e7ed      	b.n	80053ca <__sccl+0x26>
 80053ee:	462b      	mov	r3, r5
 80053f0:	e7ef      	b.n	80053d2 <__sccl+0x2e>
 80053f2:	780e      	ldrb	r6, [r1, #0]
 80053f4:	2e5d      	cmp	r6, #93	; 0x5d
 80053f6:	d0fa      	beq.n	80053ee <__sccl+0x4a>
 80053f8:	42b3      	cmp	r3, r6
 80053fa:	dcf8      	bgt.n	80053ee <__sccl+0x4a>
 80053fc:	3301      	adds	r3, #1
 80053fe:	429e      	cmp	r6, r3
 8005400:	54c4      	strb	r4, [r0, r3]
 8005402:	dcfb      	bgt.n	80053fc <__sccl+0x58>
 8005404:	3102      	adds	r1, #2
 8005406:	e7e6      	b.n	80053d6 <__sccl+0x32>

08005408 <__sread>:
 8005408:	b510      	push	{r4, lr}
 800540a:	460c      	mov	r4, r1
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	f000 fb70 	bl	8005af4 <_read_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	bfab      	itete	ge
 8005418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800541a:	89a3      	ldrhlt	r3, [r4, #12]
 800541c:	181b      	addge	r3, r3, r0
 800541e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005422:	bfac      	ite	ge
 8005424:	6563      	strge	r3, [r4, #84]	; 0x54
 8005426:	81a3      	strhlt	r3, [r4, #12]
 8005428:	bd10      	pop	{r4, pc}

0800542a <__swrite>:
 800542a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	461f      	mov	r7, r3
 8005430:	898b      	ldrh	r3, [r1, #12]
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	4616      	mov	r6, r2
 800543a:	d505      	bpl.n	8005448 <__swrite+0x1e>
 800543c:	2302      	movs	r3, #2
 800543e:	2200      	movs	r2, #0
 8005440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005444:	f000 fafe 	bl	8005a44 <_lseek_r>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	4632      	mov	r2, r6
 8005456:	463b      	mov	r3, r7
 8005458:	4628      	mov	r0, r5
 800545a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	f000 ba2d 	b.w	80058bc <_write_r>

08005462 <__sseek>:
 8005462:	b510      	push	{r4, lr}
 8005464:	460c      	mov	r4, r1
 8005466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546a:	f000 faeb 	bl	8005a44 <_lseek_r>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	bf15      	itete	ne
 8005474:	6560      	strne	r0, [r4, #84]	; 0x54
 8005476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800547a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800547e:	81a3      	strheq	r3, [r4, #12]
 8005480:	bf18      	it	ne
 8005482:	81a3      	strhne	r3, [r4, #12]
 8005484:	bd10      	pop	{r4, pc}

08005486 <__sclose>:
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 ba97 	b.w	80059bc <_close_r>

0800548e <_strtol_l.isra.0>:
 800548e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005492:	4680      	mov	r8, r0
 8005494:	4689      	mov	r9, r1
 8005496:	4692      	mov	sl, r2
 8005498:	461e      	mov	r6, r3
 800549a:	460f      	mov	r7, r1
 800549c:	463d      	mov	r5, r7
 800549e:	9808      	ldr	r0, [sp, #32]
 80054a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054a4:	f000 fabc 	bl	8005a20 <__locale_ctype_ptr_l>
 80054a8:	4420      	add	r0, r4
 80054aa:	7843      	ldrb	r3, [r0, #1]
 80054ac:	f013 0308 	ands.w	r3, r3, #8
 80054b0:	d132      	bne.n	8005518 <_strtol_l.isra.0+0x8a>
 80054b2:	2c2d      	cmp	r4, #45	; 0x2d
 80054b4:	d132      	bne.n	800551c <_strtol_l.isra.0+0x8e>
 80054b6:	787c      	ldrb	r4, [r7, #1]
 80054b8:	1cbd      	adds	r5, r7, #2
 80054ba:	2201      	movs	r2, #1
 80054bc:	2e00      	cmp	r6, #0
 80054be:	d05d      	beq.n	800557c <_strtol_l.isra.0+0xee>
 80054c0:	2e10      	cmp	r6, #16
 80054c2:	d109      	bne.n	80054d8 <_strtol_l.isra.0+0x4a>
 80054c4:	2c30      	cmp	r4, #48	; 0x30
 80054c6:	d107      	bne.n	80054d8 <_strtol_l.isra.0+0x4a>
 80054c8:	782b      	ldrb	r3, [r5, #0]
 80054ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80054ce:	2b58      	cmp	r3, #88	; 0x58
 80054d0:	d14f      	bne.n	8005572 <_strtol_l.isra.0+0xe4>
 80054d2:	786c      	ldrb	r4, [r5, #1]
 80054d4:	2610      	movs	r6, #16
 80054d6:	3502      	adds	r5, #2
 80054d8:	2a00      	cmp	r2, #0
 80054da:	bf14      	ite	ne
 80054dc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80054e0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80054e4:	2700      	movs	r7, #0
 80054e6:	fbb1 fcf6 	udiv	ip, r1, r6
 80054ea:	4638      	mov	r0, r7
 80054ec:	fb06 1e1c 	mls	lr, r6, ip, r1
 80054f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d817      	bhi.n	8005528 <_strtol_l.isra.0+0x9a>
 80054f8:	461c      	mov	r4, r3
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	dd23      	ble.n	8005546 <_strtol_l.isra.0+0xb8>
 80054fe:	1c7b      	adds	r3, r7, #1
 8005500:	d007      	beq.n	8005512 <_strtol_l.isra.0+0x84>
 8005502:	4584      	cmp	ip, r0
 8005504:	d31c      	bcc.n	8005540 <_strtol_l.isra.0+0xb2>
 8005506:	d101      	bne.n	800550c <_strtol_l.isra.0+0x7e>
 8005508:	45a6      	cmp	lr, r4
 800550a:	db19      	blt.n	8005540 <_strtol_l.isra.0+0xb2>
 800550c:	fb00 4006 	mla	r0, r0, r6, r4
 8005510:	2701      	movs	r7, #1
 8005512:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005516:	e7eb      	b.n	80054f0 <_strtol_l.isra.0+0x62>
 8005518:	462f      	mov	r7, r5
 800551a:	e7bf      	b.n	800549c <_strtol_l.isra.0+0xe>
 800551c:	2c2b      	cmp	r4, #43	; 0x2b
 800551e:	bf04      	itt	eq
 8005520:	1cbd      	addeq	r5, r7, #2
 8005522:	787c      	ldrbeq	r4, [r7, #1]
 8005524:	461a      	mov	r2, r3
 8005526:	e7c9      	b.n	80054bc <_strtol_l.isra.0+0x2e>
 8005528:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800552c:	2b19      	cmp	r3, #25
 800552e:	d801      	bhi.n	8005534 <_strtol_l.isra.0+0xa6>
 8005530:	3c37      	subs	r4, #55	; 0x37
 8005532:	e7e2      	b.n	80054fa <_strtol_l.isra.0+0x6c>
 8005534:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005538:	2b19      	cmp	r3, #25
 800553a:	d804      	bhi.n	8005546 <_strtol_l.isra.0+0xb8>
 800553c:	3c57      	subs	r4, #87	; 0x57
 800553e:	e7dc      	b.n	80054fa <_strtol_l.isra.0+0x6c>
 8005540:	f04f 37ff 	mov.w	r7, #4294967295
 8005544:	e7e5      	b.n	8005512 <_strtol_l.isra.0+0x84>
 8005546:	1c7b      	adds	r3, r7, #1
 8005548:	d108      	bne.n	800555c <_strtol_l.isra.0+0xce>
 800554a:	2322      	movs	r3, #34	; 0x22
 800554c:	f8c8 3000 	str.w	r3, [r8]
 8005550:	4608      	mov	r0, r1
 8005552:	f1ba 0f00 	cmp.w	sl, #0
 8005556:	d107      	bne.n	8005568 <_strtol_l.isra.0+0xda>
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	b102      	cbz	r2, 8005560 <_strtol_l.isra.0+0xd2>
 800555e:	4240      	negs	r0, r0
 8005560:	f1ba 0f00 	cmp.w	sl, #0
 8005564:	d0f8      	beq.n	8005558 <_strtol_l.isra.0+0xca>
 8005566:	b10f      	cbz	r7, 800556c <_strtol_l.isra.0+0xde>
 8005568:	f105 39ff 	add.w	r9, r5, #4294967295
 800556c:	f8ca 9000 	str.w	r9, [sl]
 8005570:	e7f2      	b.n	8005558 <_strtol_l.isra.0+0xca>
 8005572:	2430      	movs	r4, #48	; 0x30
 8005574:	2e00      	cmp	r6, #0
 8005576:	d1af      	bne.n	80054d8 <_strtol_l.isra.0+0x4a>
 8005578:	2608      	movs	r6, #8
 800557a:	e7ad      	b.n	80054d8 <_strtol_l.isra.0+0x4a>
 800557c:	2c30      	cmp	r4, #48	; 0x30
 800557e:	d0a3      	beq.n	80054c8 <_strtol_l.isra.0+0x3a>
 8005580:	260a      	movs	r6, #10
 8005582:	e7a9      	b.n	80054d8 <_strtol_l.isra.0+0x4a>

08005584 <_strtol_r>:
 8005584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005586:	4c06      	ldr	r4, [pc, #24]	; (80055a0 <_strtol_r+0x1c>)
 8005588:	4d06      	ldr	r5, [pc, #24]	; (80055a4 <_strtol_r+0x20>)
 800558a:	6824      	ldr	r4, [r4, #0]
 800558c:	6a24      	ldr	r4, [r4, #32]
 800558e:	2c00      	cmp	r4, #0
 8005590:	bf08      	it	eq
 8005592:	462c      	moveq	r4, r5
 8005594:	9400      	str	r4, [sp, #0]
 8005596:	f7ff ff7a 	bl	800548e <_strtol_l.isra.0>
 800559a:	b003      	add	sp, #12
 800559c:	bd30      	pop	{r4, r5, pc}
 800559e:	bf00      	nop
 80055a0:	20000010 	.word	0x20000010
 80055a4:	20000074 	.word	0x20000074

080055a8 <_strtoul_l.isra.0>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
 80055b0:	4692      	mov	sl, r2
 80055b2:	461e      	mov	r6, r3
 80055b4:	460f      	mov	r7, r1
 80055b6:	463d      	mov	r5, r7
 80055b8:	9808      	ldr	r0, [sp, #32]
 80055ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055be:	f000 fa2f 	bl	8005a20 <__locale_ctype_ptr_l>
 80055c2:	4420      	add	r0, r4
 80055c4:	7843      	ldrb	r3, [r0, #1]
 80055c6:	f013 0308 	ands.w	r3, r3, #8
 80055ca:	d130      	bne.n	800562e <_strtoul_l.isra.0+0x86>
 80055cc:	2c2d      	cmp	r4, #45	; 0x2d
 80055ce:	d130      	bne.n	8005632 <_strtoul_l.isra.0+0x8a>
 80055d0:	787c      	ldrb	r4, [r7, #1]
 80055d2:	1cbd      	adds	r5, r7, #2
 80055d4:	2101      	movs	r1, #1
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d05c      	beq.n	8005694 <_strtoul_l.isra.0+0xec>
 80055da:	2e10      	cmp	r6, #16
 80055dc:	d109      	bne.n	80055f2 <_strtoul_l.isra.0+0x4a>
 80055de:	2c30      	cmp	r4, #48	; 0x30
 80055e0:	d107      	bne.n	80055f2 <_strtoul_l.isra.0+0x4a>
 80055e2:	782b      	ldrb	r3, [r5, #0]
 80055e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055e8:	2b58      	cmp	r3, #88	; 0x58
 80055ea:	d14e      	bne.n	800568a <_strtoul_l.isra.0+0xe2>
 80055ec:	786c      	ldrb	r4, [r5, #1]
 80055ee:	2610      	movs	r6, #16
 80055f0:	3502      	adds	r5, #2
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	2300      	movs	r3, #0
 80055f8:	fbb2 f2f6 	udiv	r2, r2, r6
 80055fc:	fb06 fc02 	mul.w	ip, r6, r2
 8005600:	ea6f 0c0c 	mvn.w	ip, ip
 8005604:	4618      	mov	r0, r3
 8005606:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800560a:	2f09      	cmp	r7, #9
 800560c:	d817      	bhi.n	800563e <_strtoul_l.isra.0+0x96>
 800560e:	463c      	mov	r4, r7
 8005610:	42a6      	cmp	r6, r4
 8005612:	dd23      	ble.n	800565c <_strtoul_l.isra.0+0xb4>
 8005614:	2b00      	cmp	r3, #0
 8005616:	db1e      	blt.n	8005656 <_strtoul_l.isra.0+0xae>
 8005618:	4282      	cmp	r2, r0
 800561a:	d31c      	bcc.n	8005656 <_strtoul_l.isra.0+0xae>
 800561c:	d101      	bne.n	8005622 <_strtoul_l.isra.0+0x7a>
 800561e:	45a4      	cmp	ip, r4
 8005620:	db19      	blt.n	8005656 <_strtoul_l.isra.0+0xae>
 8005622:	fb00 4006 	mla	r0, r0, r6, r4
 8005626:	2301      	movs	r3, #1
 8005628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800562c:	e7eb      	b.n	8005606 <_strtoul_l.isra.0+0x5e>
 800562e:	462f      	mov	r7, r5
 8005630:	e7c1      	b.n	80055b6 <_strtoul_l.isra.0+0xe>
 8005632:	2c2b      	cmp	r4, #43	; 0x2b
 8005634:	bf04      	itt	eq
 8005636:	1cbd      	addeq	r5, r7, #2
 8005638:	787c      	ldrbeq	r4, [r7, #1]
 800563a:	4619      	mov	r1, r3
 800563c:	e7cb      	b.n	80055d6 <_strtoul_l.isra.0+0x2e>
 800563e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005642:	2f19      	cmp	r7, #25
 8005644:	d801      	bhi.n	800564a <_strtoul_l.isra.0+0xa2>
 8005646:	3c37      	subs	r4, #55	; 0x37
 8005648:	e7e2      	b.n	8005610 <_strtoul_l.isra.0+0x68>
 800564a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800564e:	2f19      	cmp	r7, #25
 8005650:	d804      	bhi.n	800565c <_strtoul_l.isra.0+0xb4>
 8005652:	3c57      	subs	r4, #87	; 0x57
 8005654:	e7dc      	b.n	8005610 <_strtoul_l.isra.0+0x68>
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e7e5      	b.n	8005628 <_strtoul_l.isra.0+0x80>
 800565c:	2b00      	cmp	r3, #0
 800565e:	da09      	bge.n	8005674 <_strtoul_l.isra.0+0xcc>
 8005660:	2322      	movs	r3, #34	; 0x22
 8005662:	f8c8 3000 	str.w	r3, [r8]
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
 800566a:	f1ba 0f00 	cmp.w	sl, #0
 800566e:	d107      	bne.n	8005680 <_strtoul_l.isra.0+0xd8>
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	b101      	cbz	r1, 8005678 <_strtoul_l.isra.0+0xd0>
 8005676:	4240      	negs	r0, r0
 8005678:	f1ba 0f00 	cmp.w	sl, #0
 800567c:	d0f8      	beq.n	8005670 <_strtoul_l.isra.0+0xc8>
 800567e:	b10b      	cbz	r3, 8005684 <_strtoul_l.isra.0+0xdc>
 8005680:	f105 39ff 	add.w	r9, r5, #4294967295
 8005684:	f8ca 9000 	str.w	r9, [sl]
 8005688:	e7f2      	b.n	8005670 <_strtoul_l.isra.0+0xc8>
 800568a:	2430      	movs	r4, #48	; 0x30
 800568c:	2e00      	cmp	r6, #0
 800568e:	d1b0      	bne.n	80055f2 <_strtoul_l.isra.0+0x4a>
 8005690:	2608      	movs	r6, #8
 8005692:	e7ae      	b.n	80055f2 <_strtoul_l.isra.0+0x4a>
 8005694:	2c30      	cmp	r4, #48	; 0x30
 8005696:	d0a4      	beq.n	80055e2 <_strtoul_l.isra.0+0x3a>
 8005698:	260a      	movs	r6, #10
 800569a:	e7aa      	b.n	80055f2 <_strtoul_l.isra.0+0x4a>

0800569c <_strtoul_r>:
 800569c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800569e:	4c06      	ldr	r4, [pc, #24]	; (80056b8 <_strtoul_r+0x1c>)
 80056a0:	4d06      	ldr	r5, [pc, #24]	; (80056bc <_strtoul_r+0x20>)
 80056a2:	6824      	ldr	r4, [r4, #0]
 80056a4:	6a24      	ldr	r4, [r4, #32]
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	bf08      	it	eq
 80056aa:	462c      	moveq	r4, r5
 80056ac:	9400      	str	r4, [sp, #0]
 80056ae:	f7ff ff7b 	bl	80055a8 <_strtoul_l.isra.0>
 80056b2:	b003      	add	sp, #12
 80056b4:	bd30      	pop	{r4, r5, pc}
 80056b6:	bf00      	nop
 80056b8:	20000010 	.word	0x20000010
 80056bc:	20000074 	.word	0x20000074

080056c0 <__submore>:
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	460c      	mov	r4, r1
 80056c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80056c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056cc:	4299      	cmp	r1, r3
 80056ce:	d11d      	bne.n	800570c <__submore+0x4c>
 80056d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056d4:	f7fe ffce 	bl	8004674 <_malloc_r>
 80056d8:	b918      	cbnz	r0, 80056e2 <__submore+0x22>
 80056da:	f04f 30ff 	mov.w	r0, #4294967295
 80056de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80056e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80056ec:	6360      	str	r0, [r4, #52]	; 0x34
 80056ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80056f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80056f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80056fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80056fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005702:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	2000      	movs	r0, #0
 800570a:	e7e8      	b.n	80056de <__submore+0x1e>
 800570c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800570e:	0077      	lsls	r7, r6, #1
 8005710:	463a      	mov	r2, r7
 8005712:	f000 f9c8 	bl	8005aa6 <_realloc_r>
 8005716:	4605      	mov	r5, r0
 8005718:	2800      	cmp	r0, #0
 800571a:	d0de      	beq.n	80056da <__submore+0x1a>
 800571c:	eb00 0806 	add.w	r8, r0, r6
 8005720:	4601      	mov	r1, r0
 8005722:	4632      	mov	r2, r6
 8005724:	4640      	mov	r0, r8
 8005726:	f000 f9b1 	bl	8005a8c <memcpy>
 800572a:	f8c4 8000 	str.w	r8, [r4]
 800572e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005732:	e7e9      	b.n	8005708 <__submore+0x48>

08005734 <_ungetc_r>:
 8005734:	1c4b      	adds	r3, r1, #1
 8005736:	b570      	push	{r4, r5, r6, lr}
 8005738:	4606      	mov	r6, r0
 800573a:	460d      	mov	r5, r1
 800573c:	4614      	mov	r4, r2
 800573e:	d103      	bne.n	8005748 <_ungetc_r+0x14>
 8005740:	f04f 35ff 	mov.w	r5, #4294967295
 8005744:	4628      	mov	r0, r5
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	b118      	cbz	r0, 8005752 <_ungetc_r+0x1e>
 800574a:	6983      	ldr	r3, [r0, #24]
 800574c:	b90b      	cbnz	r3, 8005752 <_ungetc_r+0x1e>
 800574e:	f7fe fe31 	bl	80043b4 <__sinit>
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <_ungetc_r+0xd8>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d12c      	bne.n	80057b2 <_ungetc_r+0x7e>
 8005758:	6874      	ldr	r4, [r6, #4]
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	f023 0320 	bic.w	r3, r3, #32
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	b29b      	uxth	r3, r3
 8005766:	0759      	lsls	r1, r3, #29
 8005768:	d413      	bmi.n	8005792 <_ungetc_r+0x5e>
 800576a:	06da      	lsls	r2, r3, #27
 800576c:	d5e8      	bpl.n	8005740 <_ungetc_r+0xc>
 800576e:	071b      	lsls	r3, r3, #28
 8005770:	d50b      	bpl.n	800578a <_ungetc_r+0x56>
 8005772:	4621      	mov	r1, r4
 8005774:	4630      	mov	r0, r6
 8005776:	f7fe fda1 	bl	80042bc <_fflush_r>
 800577a:	2800      	cmp	r0, #0
 800577c:	d1e0      	bne.n	8005740 <_ungetc_r+0xc>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	60a0      	str	r0, [r4, #8]
 8005782:	f023 0308 	bic.w	r3, r3, #8
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	61a0      	str	r0, [r4, #24]
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f043 0304 	orr.w	r3, r3, #4
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005794:	6862      	ldr	r2, [r4, #4]
 8005796:	b2ed      	uxtb	r5, r5
 8005798:	b1e3      	cbz	r3, 80057d4 <_ungetc_r+0xa0>
 800579a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800579c:	4293      	cmp	r3, r2
 800579e:	dd12      	ble.n	80057c6 <_ungetc_r+0x92>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	1e5a      	subs	r2, r3, #1
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	f803 5c01 	strb.w	r5, [r3, #-1]
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	3301      	adds	r3, #1
 80057ae:	6063      	str	r3, [r4, #4]
 80057b0:	e7c8      	b.n	8005744 <_ungetc_r+0x10>
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <_ungetc_r+0xdc>)
 80057b4:	429c      	cmp	r4, r3
 80057b6:	d101      	bne.n	80057bc <_ungetc_r+0x88>
 80057b8:	68b4      	ldr	r4, [r6, #8]
 80057ba:	e7ce      	b.n	800575a <_ungetc_r+0x26>
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <_ungetc_r+0xe0>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	bf08      	it	eq
 80057c2:	68f4      	ldreq	r4, [r6, #12]
 80057c4:	e7c9      	b.n	800575a <_ungetc_r+0x26>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff ff79 	bl	80056c0 <__submore>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d0e6      	beq.n	80057a0 <_ungetc_r+0x6c>
 80057d2:	e7b5      	b.n	8005740 <_ungetc_r+0xc>
 80057d4:	6921      	ldr	r1, [r4, #16]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	b151      	cbz	r1, 80057f0 <_ungetc_r+0xbc>
 80057da:	4299      	cmp	r1, r3
 80057dc:	d208      	bcs.n	80057f0 <_ungetc_r+0xbc>
 80057de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80057e2:	42a9      	cmp	r1, r5
 80057e4:	d104      	bne.n	80057f0 <_ungetc_r+0xbc>
 80057e6:	3b01      	subs	r3, #1
 80057e8:	3201      	adds	r2, #1
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	6062      	str	r2, [r4, #4]
 80057ee:	e7a9      	b.n	8005744 <_ungetc_r+0x10>
 80057f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80057f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f8:	6363      	str	r3, [r4, #52]	; 0x34
 80057fa:	2303      	movs	r3, #3
 80057fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80057fe:	4623      	mov	r3, r4
 8005800:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	2301      	movs	r3, #1
 8005808:	e7d1      	b.n	80057ae <_ungetc_r+0x7a>
 800580a:	bf00      	nop
 800580c:	08005c60 	.word	0x08005c60
 8005810:	08005c80 	.word	0x08005c80
 8005814:	08005c40 	.word	0x08005c40

08005818 <__swbuf_r>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	460e      	mov	r6, r1
 800581c:	4614      	mov	r4, r2
 800581e:	4605      	mov	r5, r0
 8005820:	b118      	cbz	r0, 800582a <__swbuf_r+0x12>
 8005822:	6983      	ldr	r3, [r0, #24]
 8005824:	b90b      	cbnz	r3, 800582a <__swbuf_r+0x12>
 8005826:	f7fe fdc5 	bl	80043b4 <__sinit>
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <__swbuf_r+0x98>)
 800582c:	429c      	cmp	r4, r3
 800582e:	d12a      	bne.n	8005886 <__swbuf_r+0x6e>
 8005830:	686c      	ldr	r4, [r5, #4]
 8005832:	69a3      	ldr	r3, [r4, #24]
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	071a      	lsls	r2, r3, #28
 800583a:	d52e      	bpl.n	800589a <__swbuf_r+0x82>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	b363      	cbz	r3, 800589a <__swbuf_r+0x82>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1ac0      	subs	r0, r0, r3
 8005846:	6963      	ldr	r3, [r4, #20]
 8005848:	b2f6      	uxtb	r6, r6
 800584a:	4283      	cmp	r3, r0
 800584c:	4637      	mov	r7, r6
 800584e:	dc04      	bgt.n	800585a <__swbuf_r+0x42>
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f7fe fd32 	bl	80042bc <_fflush_r>
 8005858:	bb28      	cbnz	r0, 80058a6 <__swbuf_r+0x8e>
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	3b01      	subs	r3, #1
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	6022      	str	r2, [r4, #0]
 8005866:	701e      	strb	r6, [r3, #0]
 8005868:	6963      	ldr	r3, [r4, #20]
 800586a:	3001      	adds	r0, #1
 800586c:	4283      	cmp	r3, r0
 800586e:	d004      	beq.n	800587a <__swbuf_r+0x62>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	07db      	lsls	r3, r3, #31
 8005874:	d519      	bpl.n	80058aa <__swbuf_r+0x92>
 8005876:	2e0a      	cmp	r6, #10
 8005878:	d117      	bne.n	80058aa <__swbuf_r+0x92>
 800587a:	4621      	mov	r1, r4
 800587c:	4628      	mov	r0, r5
 800587e:	f7fe fd1d 	bl	80042bc <_fflush_r>
 8005882:	b190      	cbz	r0, 80058aa <__swbuf_r+0x92>
 8005884:	e00f      	b.n	80058a6 <__swbuf_r+0x8e>
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <__swbuf_r+0x9c>)
 8005888:	429c      	cmp	r4, r3
 800588a:	d101      	bne.n	8005890 <__swbuf_r+0x78>
 800588c:	68ac      	ldr	r4, [r5, #8]
 800588e:	e7d0      	b.n	8005832 <__swbuf_r+0x1a>
 8005890:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <__swbuf_r+0xa0>)
 8005892:	429c      	cmp	r4, r3
 8005894:	bf08      	it	eq
 8005896:	68ec      	ldreq	r4, [r5, #12]
 8005898:	e7cb      	b.n	8005832 <__swbuf_r+0x1a>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 f81f 	bl	80058e0 <__swsetup_r>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d0cc      	beq.n	8005840 <__swbuf_r+0x28>
 80058a6:	f04f 37ff 	mov.w	r7, #4294967295
 80058aa:	4638      	mov	r0, r7
 80058ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ae:	bf00      	nop
 80058b0:	08005c60 	.word	0x08005c60
 80058b4:	08005c80 	.word	0x08005c80
 80058b8:	08005c40 	.word	0x08005c40

080058bc <_write_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4c07      	ldr	r4, [pc, #28]	; (80058dc <_write_r+0x20>)
 80058c0:	4605      	mov	r5, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb f8c3 	bl	8000a56 <_write>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_write_r+0x1e>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	b103      	cbz	r3, 80058da <_write_r+0x1e>
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000298 	.word	0x20000298

080058e0 <__swsetup_r>:
 80058e0:	4b32      	ldr	r3, [pc, #200]	; (80059ac <__swsetup_r+0xcc>)
 80058e2:	b570      	push	{r4, r5, r6, lr}
 80058e4:	681d      	ldr	r5, [r3, #0]
 80058e6:	4606      	mov	r6, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	b125      	cbz	r5, 80058f6 <__swsetup_r+0x16>
 80058ec:	69ab      	ldr	r3, [r5, #24]
 80058ee:	b913      	cbnz	r3, 80058f6 <__swsetup_r+0x16>
 80058f0:	4628      	mov	r0, r5
 80058f2:	f7fe fd5f 	bl	80043b4 <__sinit>
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <__swsetup_r+0xd0>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d10f      	bne.n	800591c <__swsetup_r+0x3c>
 80058fc:	686c      	ldr	r4, [r5, #4]
 80058fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005902:	b29a      	uxth	r2, r3
 8005904:	0715      	lsls	r5, r2, #28
 8005906:	d42c      	bmi.n	8005962 <__swsetup_r+0x82>
 8005908:	06d0      	lsls	r0, r2, #27
 800590a:	d411      	bmi.n	8005930 <__swsetup_r+0x50>
 800590c:	2209      	movs	r2, #9
 800590e:	6032      	str	r2, [r6, #0]
 8005910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	f04f 30ff 	mov.w	r0, #4294967295
 800591a:	e03e      	b.n	800599a <__swsetup_r+0xba>
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <__swsetup_r+0xd4>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d101      	bne.n	8005926 <__swsetup_r+0x46>
 8005922:	68ac      	ldr	r4, [r5, #8]
 8005924:	e7eb      	b.n	80058fe <__swsetup_r+0x1e>
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <__swsetup_r+0xd8>)
 8005928:	429c      	cmp	r4, r3
 800592a:	bf08      	it	eq
 800592c:	68ec      	ldreq	r4, [r5, #12]
 800592e:	e7e6      	b.n	80058fe <__swsetup_r+0x1e>
 8005930:	0751      	lsls	r1, r2, #29
 8005932:	d512      	bpl.n	800595a <__swsetup_r+0x7a>
 8005934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005936:	b141      	cbz	r1, 800594a <__swsetup_r+0x6a>
 8005938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800593c:	4299      	cmp	r1, r3
 800593e:	d002      	beq.n	8005946 <__swsetup_r+0x66>
 8005940:	4630      	mov	r0, r6
 8005942:	f7fe fe49 	bl	80045d8 <_free_r>
 8005946:	2300      	movs	r3, #0
 8005948:	6363      	str	r3, [r4, #52]	; 0x34
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	2300      	movs	r3, #0
 8005954:	6063      	str	r3, [r4, #4]
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f043 0308 	orr.w	r3, r3, #8
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	b94b      	cbnz	r3, 800597a <__swsetup_r+0x9a>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800596c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005970:	d003      	beq.n	800597a <__swsetup_r+0x9a>
 8005972:	4621      	mov	r1, r4
 8005974:	4630      	mov	r0, r6
 8005976:	f7fe fde7 	bl	8004548 <__smakebuf_r>
 800597a:	89a2      	ldrh	r2, [r4, #12]
 800597c:	f012 0301 	ands.w	r3, r2, #1
 8005980:	d00c      	beq.n	800599c <__swsetup_r+0xbc>
 8005982:	2300      	movs	r3, #0
 8005984:	60a3      	str	r3, [r4, #8]
 8005986:	6963      	ldr	r3, [r4, #20]
 8005988:	425b      	negs	r3, r3
 800598a:	61a3      	str	r3, [r4, #24]
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	b953      	cbnz	r3, 80059a6 <__swsetup_r+0xc6>
 8005990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005994:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005998:	d1ba      	bne.n	8005910 <__swsetup_r+0x30>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	0792      	lsls	r2, r2, #30
 800599e:	bf58      	it	pl
 80059a0:	6963      	ldrpl	r3, [r4, #20]
 80059a2:	60a3      	str	r3, [r4, #8]
 80059a4:	e7f2      	b.n	800598c <__swsetup_r+0xac>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e7f7      	b.n	800599a <__swsetup_r+0xba>
 80059aa:	bf00      	nop
 80059ac:	20000010 	.word	0x20000010
 80059b0:	08005c60 	.word	0x08005c60
 80059b4:	08005c80 	.word	0x08005c80
 80059b8:	08005c40 	.word	0x08005c40

080059bc <_close_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4c06      	ldr	r4, [pc, #24]	; (80059d8 <_close_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4605      	mov	r5, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	f7fb f861 	bl	8000a8e <_close>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_close_r+0x1a>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_close_r+0x1a>
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	20000298 	.word	0x20000298

080059dc <_fstat_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4c07      	ldr	r4, [pc, #28]	; (80059fc <_fstat_r+0x20>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4605      	mov	r5, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	f7fb f85c 	bl	8000aa6 <_fstat>
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	d102      	bne.n	80059f8 <_fstat_r+0x1c>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	b103      	cbz	r3, 80059f8 <_fstat_r+0x1c>
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	bd38      	pop	{r3, r4, r5, pc}
 80059fa:	bf00      	nop
 80059fc:	20000298 	.word	0x20000298

08005a00 <_isatty_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4c06      	ldr	r4, [pc, #24]	; (8005a1c <_isatty_r+0x1c>)
 8005a04:	2300      	movs	r3, #0
 8005a06:	4605      	mov	r5, r0
 8005a08:	4608      	mov	r0, r1
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	f7fb f85b 	bl	8000ac6 <_isatty>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_isatty_r+0x1a>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_isatty_r+0x1a>
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	20000298 	.word	0x20000298

08005a20 <__locale_ctype_ptr_l>:
 8005a20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005a24:	4770      	bx	lr
	...

08005a28 <__locale_ctype_ptr>:
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <__locale_ctype_ptr+0x14>)
 8005a2a:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <__locale_ctype_ptr+0x18>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf08      	it	eq
 8005a34:	4613      	moveq	r3, r2
 8005a36:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005a3a:	4770      	bx	lr
 8005a3c:	20000010 	.word	0x20000010
 8005a40:	20000074 	.word	0x20000074

08005a44 <_lseek_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4c07      	ldr	r4, [pc, #28]	; (8005a64 <_lseek_r+0x20>)
 8005a48:	4605      	mov	r5, r0
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6022      	str	r2, [r4, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f7fb f842 	bl	8000adc <_lseek>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_lseek_r+0x1e>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_lseek_r+0x1e>
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20000298 	.word	0x20000298

08005a68 <__ascii_mbtowc>:
 8005a68:	b082      	sub	sp, #8
 8005a6a:	b901      	cbnz	r1, 8005a6e <__ascii_mbtowc+0x6>
 8005a6c:	a901      	add	r1, sp, #4
 8005a6e:	b142      	cbz	r2, 8005a82 <__ascii_mbtowc+0x1a>
 8005a70:	b14b      	cbz	r3, 8005a86 <__ascii_mbtowc+0x1e>
 8005a72:	7813      	ldrb	r3, [r2, #0]
 8005a74:	600b      	str	r3, [r1, #0]
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	1c10      	adds	r0, r2, #0
 8005a7a:	bf18      	it	ne
 8005a7c:	2001      	movne	r0, #1
 8005a7e:	b002      	add	sp, #8
 8005a80:	4770      	bx	lr
 8005a82:	4610      	mov	r0, r2
 8005a84:	e7fb      	b.n	8005a7e <__ascii_mbtowc+0x16>
 8005a86:	f06f 0001 	mvn.w	r0, #1
 8005a8a:	e7f8      	b.n	8005a7e <__ascii_mbtowc+0x16>

08005a8c <memcpy>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	1e43      	subs	r3, r0, #1
 8005a90:	440a      	add	r2, r1
 8005a92:	4291      	cmp	r1, r2
 8005a94:	d100      	bne.n	8005a98 <memcpy+0xc>
 8005a96:	bd10      	pop	{r4, pc}
 8005a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa0:	e7f7      	b.n	8005a92 <memcpy+0x6>

08005aa2 <__malloc_lock>:
 8005aa2:	4770      	bx	lr

08005aa4 <__malloc_unlock>:
 8005aa4:	4770      	bx	lr

08005aa6 <_realloc_r>:
 8005aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	4614      	mov	r4, r2
 8005aac:	460e      	mov	r6, r1
 8005aae:	b921      	cbnz	r1, 8005aba <_realloc_r+0x14>
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ab6:	f7fe bddd 	b.w	8004674 <_malloc_r>
 8005aba:	b922      	cbnz	r2, 8005ac6 <_realloc_r+0x20>
 8005abc:	f7fe fd8c 	bl	80045d8 <_free_r>
 8005ac0:	4625      	mov	r5, r4
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac6:	f000 f834 	bl	8005b32 <_malloc_usable_size_r>
 8005aca:	42a0      	cmp	r0, r4
 8005acc:	d20f      	bcs.n	8005aee <_realloc_r+0x48>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7fe fdcf 	bl	8004674 <_malloc_r>
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0f2      	beq.n	8005ac2 <_realloc_r+0x1c>
 8005adc:	4631      	mov	r1, r6
 8005ade:	4622      	mov	r2, r4
 8005ae0:	f7ff ffd4 	bl	8005a8c <memcpy>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f7fe fd76 	bl	80045d8 <_free_r>
 8005aec:	e7e9      	b.n	8005ac2 <_realloc_r+0x1c>
 8005aee:	4635      	mov	r5, r6
 8005af0:	e7e7      	b.n	8005ac2 <_realloc_r+0x1c>
	...

08005af4 <_read_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4c07      	ldr	r4, [pc, #28]	; (8005b14 <_read_r+0x20>)
 8005af8:	4605      	mov	r5, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fa ff8a 	bl	8000a1c <_read>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_read_r+0x1e>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_read_r+0x1e>
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000298 	.word	0x20000298

08005b18 <__ascii_wctomb>:
 8005b18:	b149      	cbz	r1, 8005b2e <__ascii_wctomb+0x16>
 8005b1a:	2aff      	cmp	r2, #255	; 0xff
 8005b1c:	bf85      	ittet	hi
 8005b1e:	238a      	movhi	r3, #138	; 0x8a
 8005b20:	6003      	strhi	r3, [r0, #0]
 8005b22:	700a      	strbls	r2, [r1, #0]
 8005b24:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b28:	bf98      	it	ls
 8005b2a:	2001      	movls	r0, #1
 8005b2c:	4770      	bx	lr
 8005b2e:	4608      	mov	r0, r1
 8005b30:	4770      	bx	lr

08005b32 <_malloc_usable_size_r>:
 8005b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b36:	1f18      	subs	r0, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfbc      	itt	lt
 8005b3c:	580b      	ldrlt	r3, [r1, r0]
 8005b3e:	18c0      	addlt	r0, r0, r3
 8005b40:	4770      	bx	lr
	...

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
