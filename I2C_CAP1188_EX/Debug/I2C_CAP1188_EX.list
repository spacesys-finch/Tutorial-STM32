
I2C_CAP1188_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a0  080055a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a8  080055a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080055b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000001c  080055cc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080055cc  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f042  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f2b  00000000  00000000  0002f08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247ac  00000000  00000000  00032928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b557  00000000  00000000  000570d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6b9a  00000000  00000000  0006262b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  001491c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000361c  00000000  00000000  00149244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005560 	.word	0x08005560

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08005560 	.word	0x08005560

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051c:	f000 fb52 	bl	8000bc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000520:	f000 f826 	bl	8000570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000524:	f000 f914 	bl	8000750 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000528:	f000 f88c 	bl	8000644 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 800052c:	f000 f8ca 	bl	80006c4 <MX_LPUART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	/* Wait for User push-button press before starting the Communication */
	while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET) {
 8000530:	bf00      	nop
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb30 	bl	8000b98 <BSP_PB_GetState>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1f9      	bne.n	8000532 <main+0x1a>
	}

	/* Delay to avoid that possible signal rebound is taken as button release */
	HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fbb0 	bl	8000ca4 <HAL_Delay>

	/* Wait for User push-button release before starting the Communication */
	while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000544:	bf00      	nop
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb26 	bl	8000b98 <BSP_PB_GetState>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f9      	bne.n	8000546 <main+0x2e>
	}

	/* The board sends the message and expects to receive it back */

	/*##- Enable LED linking and multitouch #####################################*/
	i2c_cap1188_write((uint16_t) I2C_CAP_1188_ADDR, setMultiTouch,
 8000552:	2202      	movs	r2, #2
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <main+0x50>)
 8000556:	2052      	movs	r0, #82	; 0x52
 8000558:	f000 f984 	bl	8000864 <i2c_cap1188_write>
			(uint16_t) TXBUFFERSIZE);
	i2c_cap1188_write((uint16_t) I2C_CAP_1188_ADDR, setLedLink,
 800055c:	2202      	movs	r2, #2
 800055e:	4903      	ldr	r1, [pc, #12]	; (800056c <main+0x54>)
 8000560:	2052      	movs	r0, #82	; 0x52
 8000562:	f000 f97f 	bl	8000864 <i2c_cap1188_write>
			(uint16_t) TXBUFFERSIZE);

	while (1) {
 8000566:	e7fe      	b.n	8000566 <main+0x4e>
 8000568:	20000000 	.word	0x20000000
 800056c:	20000004 	.word	0x20000004

08000570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b0a8      	sub	sp, #160	; 0xa0
 8000574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000576:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800057a:	2238      	movs	r2, #56	; 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 ffe6 	bl	8005550 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000584:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000594:	463b      	mov	r3, r7
 8000596:	2254      	movs	r2, #84	; 0x54
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 ffd8 	bl	8005550 <memset>

	/** Configure the main internal regulator output voltage 
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f002 fafd 	bl	8002ba0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ae:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2340      	movs	r3, #64	; 0x40
 80005b2:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80005c6:	2355      	movs	r3, #85	; 0x55
 80005c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fb80 	bl	8002ce8 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x82>
		Error_Handler();
 80005ee:	f000 f95f 	bl	80008b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK) {
 8000606:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060a:	2108      	movs	r1, #8
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fe83 	bl	8003318 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xac>
		Error_Handler();
 8000618:	f000 f94a 	bl	80008b0 <Error_Handler>
	}
	/** Initializes the peripherals clocks 
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f890 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xca>
		Error_Handler();
 8000636:	f000 f93b 	bl	80008b0 <Error_Handler>
	}
}
 800063a:	bf00      	nop
 800063c:	37a0      	adds	r7, #160	; 0xa0
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_I2C1_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_I2C1_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20701F64;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <MX_I2C1_Init+0x7c>)
 8000652:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000656:	f240 320f 	movw	r2, #783	; 0x30f
 800065a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_I2C1_Init+0x74>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000682:	f000 fea4 	bl	80013ce <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800068c:	f000 f910 	bl	80008b0 <Error_Handler>
	}
	/** Configure Analogue filter 
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000690:	2100      	movs	r1, #0
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x74>)
 8000694:	f002 f9ec 	bl	8002a70 <HAL_I2CEx_ConfigAnalogFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800069e:	f000 f907 	bl	80008b0 <Error_Handler>
	}
	/** Configure Digital filter 
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x74>)
 80006a6:	f002 fa2e 	bl	8002b06 <HAL_I2CEx_ConfigDigitalFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x70>
		Error_Handler();
 80006b0:	f000 f8fe 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000038 	.word	0x20000038
 80006bc:	40005400 	.word	0x40005400
 80006c0:	20701f64 	.word	0x20701f64

080006c4 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_LPUART1_UART_Init+0x88>)
 80006cc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 8000702:	f003 fa71 	bl	8003be8 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 800070c:	f000 f8d0 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 8000714:	f004 fe13 	bl	800533e <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800071e:	f000 f8c7 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 8000726:	f004 fe48 	bl	80053ba <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_LPUART1_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000730:	f000 f8be 	bl	80008b0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_LPUART1_UART_Init+0x84>)
 8000736:	f004 fdc9 	bl	80052cc <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_LPUART1_UART_Init+0x80>
		Error_Handler();
 8000740:	f000 f8b6 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000084 	.word	0x20000084
 800074c:	40008000 	.word	0x40008000

08000750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_GPIO_Init+0xbc>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <MX_GPIO_Init+0xbc>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xbc>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xbc>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <MX_GPIO_Init+0xbc>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xbc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0xbc>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_GPIO_Init+0xbc>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_GPIO_Init+0xbc>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fdb5 	bl	8001324 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_GPIO_Init+0xc0>)
 80007c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_GPIO_Init+0xc4>)
 80007d0:	f000 fc0e 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d4:	2320      	movs	r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fbff 	bl	8000ff0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f000 fb51 	bl	8000e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f000 fb68 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	10110000 	.word	0x10110000
 8000814:	48000800 	.word	0x48000800

08000818 <HAL_I2C_SlaveTxCpltCallback>:
{
  /* Toggle LED2: Transfer in transmission process is correct */
  BSP_LED_Toggle(LED2);
}
#else
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	/* Toggle LED2: Transfer in transmission process is correct */
	BSP_LED_Toggle(LED2);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f9a3 	bl	8000b6c <BSP_LED_Toggle>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_I2C_SlaveRxCpltCallback>:
{
  /* Toggle LED2: Transfer in reception process is correct */
  BSP_LED_Toggle(LED2);
}
#else
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	/* Toggle LED2: Transfer in reception process is correct */
	BSP_LED_Toggle(LED2);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f998 	bl	8000b6c <BSP_LED_Toggle>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_I2C_ErrorCallback>:
 * @param  I2cHandle: I2C handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	/** Error_Handler() function is called when error occurs.
	 * 1- When Slave doesn't acknowledge its address, Master restarts communication.
	 * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
	 */
	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 ff90 	bl	8001772 <HAL_I2C_GetError>
 8000852:	4603      	mov	r3, r0
 8000854:	2b04      	cmp	r3, #4
 8000856:	d001      	beq.n	800085c <HAL_I2C_ErrorCallback+0x18>
		Error_Handler();
 8000858:	f000 f82a 	bl	80008b0 <Error_Handler>
	}
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <i2c_cap1188_write>:

void i2c_cap1188_write(uint16_t i2c_addr, uint8_t *transmit_data,
		uint16_t transmit_size) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	4613      	mov	r3, r2
 8000872:	80bb      	strh	r3, [r7, #4]
	do {
		if (HAL_I2C_Master_Transmit_IT(&hi2c1, i2c_addr, transmit_data,
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	88f9      	ldrh	r1, [r7, #6]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <i2c_cap1188_write+0x48>)
 800087c:	f000 fe36 	bl	80014ec <HAL_I2C_Master_Transmit_IT>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <i2c_cap1188_write+0x26>
				transmit_size) != HAL_OK) {
			/* Error_Handler() function is called when error occurs. */
			Error_Handler();
 8000886:	f000 f813 	bl	80008b0 <Error_Handler>
		 state of the peripheral; if it�s busy you need to wait for the end of current
		 transfer before starting a new one.
		 For simplicity reasons, this example is just waiting till the end of the
		 transfer, but application may perform other tasks while transfer operation
		 is ongoing. */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800088a:	bf00      	nop
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <i2c_cap1188_write+0x48>)
 800088e:	f000 ff62 	bl	8001756 <HAL_I2C_GetState>
 8000892:	4603      	mov	r3, r0
 8000894:	2b20      	cmp	r3, #32
 8000896:	d1f9      	bne.n	800088c <i2c_cap1188_write+0x28>
		}

		/* When Acknowledge failure occurs (Slave don't acknowledge it's address)
		 Master restarts communication */
	} while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <i2c_cap1188_write+0x48>)
 800089a:	f000 ff6a 	bl	8001772 <HAL_I2C_GetError>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d0e7      	beq.n	8000874 <i2c_cap1188_write+0x10>

}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000038 	.word	0x20000038

080008b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* Error if LED2 is slowly blinking (1 sec. period) */
	while (1) {
		BSP_LED_Toggle(LED2);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f959 	bl	8000b6c <BSP_LED_Toggle>
		HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008be:	f000 f9f1 	bl	8000ca4 <HAL_Delay>
		BSP_LED_Toggle(LED2);
 80008c2:	e7f7      	b.n	80008b4 <Error_Handler+0x4>

080008c4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6093      	str	r3, [r2, #8]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40007000 	.word	0x40007000

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800091a:	f7ff ffd3 	bl	80008c4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <HAL_I2C_MspInit+0x9c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d138      	bne.n	80009c0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096c:	2312      	movs	r3, #18
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000978:	2304      	movs	r3, #4
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <HAL_I2C_MspInit+0xa4>)
 8000984:	f000 fb34 	bl	8000ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 800098e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000992:	6593      	str	r3, [r2, #88]	; 0x58
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_I2C_MspInit+0xa0>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	201f      	movs	r0, #31
 80009a6:	f000 fa7a 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009aa:	201f      	movs	r0, #31
 80009ac:	f000 fa91 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2020      	movs	r0, #32
 80009b6:	f000 fa72 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009ba:	2020      	movs	r0, #32
 80009bc:	f000 fa89 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d128      	bne.n	8000a48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x80>)
 80009f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <HAL_UART_MspInit+0x80>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a36:	230c      	movs	r3, #12
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 fad4 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40008000 	.word	0x40008000
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f8dc 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <I2C1_EV_IRQHandler+0x10>)
 8000aba:	f000 fd87 	bl	80015cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000038 	.word	0x20000038

08000ac8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <I2C1_ER_IRQHandler+0x10>)
 8000ace:	f000 fd97 	bl	8001600 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000038 	.word	0x20000038

08000adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae4:	f000 fc50 	bl	8001388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <SystemInit+0x28>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <SystemInit+0x28>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SystemInit+0x28>)
 8000b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b06:	609a      	str	r2, [r3, #8]
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b42:	f7ff ffd3 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f004 fcdf 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fce5 	bl	8000518 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b5c:	080055b0 	.word	0x080055b0
  ldr r2, =_sbss
 8000b60:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b64:	20000118 	.word	0x20000118

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <BSP_LED_Toggle+0x28>)
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	2220      	movs	r2, #32
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fbe6 	bl	8001354 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <BSP_PB_GetState+0x28>)
 8000ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fb9f 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000010 	.word	0x20000010

08000bc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f95a 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f80d 	bl	8000bf4 <HAL_InitTick>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff fe7d 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	79fb      	ldrb	r3, [r7, #7]

}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d022      	beq.n	8000c4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f966 	bl	8000eee <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295
 8000c36:	f000 f932 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000018 	.word	0x20000018
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000014 	.word	0x20000014

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000114 	.word	0x20000114
 8000c88:	20000018 	.word	0x20000018

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000114 	.word	0x20000114

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d004      	beq.n	8000cc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_Delay+0x40>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc8:	bf00      	nop
 8000cca:	f7ff ffdf 	bl	8000c8c <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d8f7      	bhi.n	8000cca <HAL_Delay+0x26>
  {
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000018 	.word	0x20000018

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff40 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa4 	bl	8000e44 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2204      	movs	r2, #4
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e047      	b.n	8000fca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 020e 	bic.w	r2, r2, #14
 8000f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f003 021f 	and.w	r2, r3, #31
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00c      	beq.n	8000faa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fa8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	4798      	blx	r3
    }
  }
  return status;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fe2:	b2db      	uxtb	r3, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ffe:	e15a      	b.n	80012b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 814c 	beq.w	80012b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00b      	beq.n	8001038 <HAL_GPIO_Init+0x48>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102c:	2b11      	cmp	r3, #17
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b12      	cmp	r3, #18
 8001036:	d130      	bne.n	800109a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106e:	2201      	movs	r2, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	f003 0201 	and.w	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0xea>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d123      	bne.n	8001122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0203 	and.w	r2, r3, #3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 80a6 	beq.w	80012b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <HAL_GPIO_Init+0x2e4>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <HAL_GPIO_Init+0x2e4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6613      	str	r3, [r2, #96]	; 0x60
 8001170:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_GPIO_Init+0x2e4>)
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117c:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a6:	d01f      	beq.n	80011e8 <HAL_GPIO_Init+0x1f8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d019      	beq.n	80011e4 <HAL_GPIO_Init+0x1f4>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x2f0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x2f4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1ec>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x2f8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1e8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2fc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1e4>
 80011d0:	2305      	movs	r3, #5
 80011d2:	e00a      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011d4:	2306      	movs	r3, #6
 80011d6:	e008      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011d8:	2304      	movs	r3, #4
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011dc:	2303      	movs	r3, #3
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011e8:	2300      	movs	r3, #0
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fa:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_GPIO_Init+0x300>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122c:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x300>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x300>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x300>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x300>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x300>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_GPIO_Init+0x300>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_GPIO_Init+0x300>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f47f ae9d 	bne.w	8001000 <HAL_GPIO_Init+0x10>
  }
}
 80012c6:	bf00      	nop
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000c00 	.word	0x48000c00
 80012e8:	48001000 	.word	0x48001000
 80012ec:	48001400 	.word	0x48001400
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001372:	e002      	b.n	800137a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f806 	bl	80013b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e081      	b.n	80014e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d106      	bne.n	80013fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fa99 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2224      	movs	r2, #36	; 0x24
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800141e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e006      	b.n	8001456 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d104      	bne.n	8001468 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	ea42 0103 	orr.w	r1, r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	021a      	lsls	r2, r3, #8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69d9      	ldr	r1, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	817b      	strh	r3, [r7, #10]
 80014fc:	4613      	mov	r3, r2
 80014fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b20      	cmp	r3, #32
 800150a:	d153      	bne.n	80015b4 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800151a:	d101      	bne.n	8001520 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	e04a      	b.n	80015b6 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_I2C_Master_Transmit_IT+0x42>
 800152a:	2302      	movs	r3, #2
 800152c:	e043      	b.n	80015b6 <HAL_I2C_Master_Transmit_IT+0xca>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2221      	movs	r2, #33	; 0x21
 800153a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2210      	movs	r2, #16
 8001542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	893a      	ldrh	r2, [r7, #8]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8001562:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d906      	bls.n	800157c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e007      	b.n	800158c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	b2da      	uxtb	r2, r3
 8001592:	8979      	ldrh	r1, [r7, #10]
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f001 f978 	bl	8002890 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80015a8:	2101      	movs	r1, #1
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f001 f99e 	bl	80028ec <I2C_Enable_IRQ>

    return HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e000      	b.n	80015b6 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80015b4:	2302      	movs	r3, #2
  }
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	ffff0000 	.word	0xffff0000
 80015c4:	0800178b 	.word	0x0800178b
 80015c8:	80002000 	.word	0x80002000

080015cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
  }
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d010      	beq.n	8001646 <HAL_I2C_ER_IRQHandler+0x46>
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	09db      	lsrs	r3, r3, #7
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00a      	beq.n	8001646 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	0a9b      	lsrs	r3, r3, #10
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d010      	beq.n	8001674 <HAL_I2C_ER_IRQHandler+0x74>
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	09db      	lsrs	r3, r3, #7
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f043 0208 	orr.w	r2, r3, #8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001672:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	0a5b      	lsrs	r3, r3, #9
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d010      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0xa2>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	09db      	lsrs	r3, r3, #7
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f043 0202 	orr.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 030b 	and.w	r3, r3, #11
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 ffb1 	bl	800261c <I2C_ITError>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70fb      	strb	r3, [r7, #3]
 80016f6:	4613      	mov	r3, r2
 80016f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b088      	sub	sp, #32
 800178e:	af02      	add	r7, sp, #8
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <I2C_Master_ISR_IT+0x1e>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e115      	b.n	80019d4 <I2C_Master_ISR_IT+0x24a>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <I2C_Master_ISR_IT+0x5a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2210      	movs	r2, #16
 80017ce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0204 	orr.w	r2, r3, #4
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f001 f814 	bl	800280a <I2C_Flush_TXDR>
 80017e2:	e0e2      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <I2C_Master_ISR_IT+0xae>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01d      	beq.n	8001838 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f023 0304 	bic.w	r3, r3, #4
 8001802:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001836:	e0b8      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01e      	beq.n	8001882 <I2C_Master_ISR_IT+0xf8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d018      	beq.n	8001882 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001880:	e093      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	09db      	lsrs	r3, r3, #7
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d05e      	beq.n	800194c <I2C_Master_ISR_IT+0x1c2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d058      	beq.n	800194c <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d041      	beq.n	8001928 <I2C_Master_ISR_IT+0x19e>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d13d      	bne.n	8001928 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018b8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d90e      	bls.n	80018e2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	22ff      	movs	r2, #255	; 0xff
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	8a79      	ldrh	r1, [r7, #18]
 80018d2:	2300      	movs	r3, #0
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 ffd8 	bl	8002890 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e0:	e033      	b.n	800194a <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f4:	d00c      	beq.n	8001910 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001900:	8a79      	ldrh	r1, [r7, #18]
 8001902:	2300      	movs	r3, #0
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4603      	mov	r3, r0
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 ffc1 	bl	8002890 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190e:	e01c      	b.n	800194a <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	b2da      	uxtb	r2, r3
 8001916:	8a79      	ldrh	r1, [r7, #18]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 ffb5 	bl	8002890 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001926:	e010      	b.n	800194a <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001936:	d003      	beq.n	8001940 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fba9 	bl	8002090 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800193e:	e034      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fe6a 	bl	800261c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001948:	e02f      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
 800194a:	e02e      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d028      	beq.n	80019aa <I2C_Master_ISR_IT+0x220>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d022      	beq.n	80019aa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800197c:	d015      	beq.n	80019aa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001986:	d108      	bne.n	800199a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	e007      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fb78 	bl	8002090 <I2C_ITMasterSeqCplt>
 80019a0:	e003      	b.n	80019aa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019a2:	2140      	movs	r1, #64	; 0x40
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fe39 	bl	800261c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <I2C_Master_ISR_IT+0x240>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80019c2:	6979      	ldr	r1, [r7, #20]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fbff 	bl	80021c8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <I2C_Slave_ISR_IT+0x24>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0ec      	b.n	8001bda <I2C_Slave_ISR_IT+0x1fe>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <I2C_Slave_ISR_IT+0x4c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fc9a 	bl	800235c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d04d      	beq.n	8001ad0 <I2C_Slave_ISR_IT+0xf4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d047      	beq.n	8001ad0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d128      	bne.n	8001a9c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b28      	cmp	r3, #40	; 0x28
 8001a54:	d108      	bne.n	8001a68 <I2C_Slave_ISR_IT+0x8c>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5c:	d104      	bne.n	8001a68 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a5e:	6939      	ldr	r1, [r7, #16]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fd85 	bl	8002570 <I2C_ITListenCplt>
 8001a66:	e032      	b.n	8001ace <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b29      	cmp	r3, #41	; 0x29
 8001a72:	d10e      	bne.n	8001a92 <I2C_Slave_ISR_IT+0xb6>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a7a:	d00a      	beq.n	8001a92 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2210      	movs	r2, #16
 8001a82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 fec0 	bl	800280a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fb3d 	bl	800210a <I2C_ITSlaveSeqCplt>
 8001a90:	e01d      	b.n	8001ace <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2210      	movs	r2, #16
 8001a98:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a9a:	e096      	b.n	8001bca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0204 	orr.w	r2, r3, #4
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <I2C_Slave_ISR_IT+0xe4>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	f040 8085 	bne.w	8001bca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fda8 	bl	800261c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001acc:	e07d      	b.n	8001bca <I2C_Slave_ISR_IT+0x1ee>
 8001ace:	e07c      	b.n	8001bca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d030      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x162>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02a      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d14f      	bne.n	8001bce <I2C_Slave_ISR_IT+0x1f2>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b34:	d04b      	beq.n	8001bce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fae7 	bl	800210a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b3c:	e047      	b.n	8001bce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <I2C_Slave_ISR_IT+0x184>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fa15 	bl	8001f88 <I2C_ITAddrCplt>
 8001b5e:	e037      	b.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d031      	beq.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02b      	beq.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d018      	beq.n	8001bb4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bb2:	e00d      	b.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bba:	d002      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0x1e6>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 faa1 	bl	800210a <I2C_ITSlaveSeqCplt>
 8001bc8:	e002      	b.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001bce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b088      	sub	sp, #32
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <I2C_Master_ISR_DMA+0x1a>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0e1      	b.n	8001dc0 <I2C_Master_ISR_DMA+0x1de>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d017      	beq.n	8001c40 <I2C_Master_ISR_DMA+0x5e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d011      	beq.n	8001c40 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c30:	2120      	movs	r1, #32
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fe5a 	bl	80028ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fde6 	bl	800280a <I2C_Flush_TXDR>
 8001c3e:	e0ba      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	09db      	lsrs	r3, r3, #7
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d072      	beq.n	8001d32 <I2C_Master_ISR_DMA+0x150>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d06c      	beq.n	8001d32 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c66:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d04e      	beq.n	8001d10 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2bff      	cmp	r3, #255	; 0xff
 8001c88:	d906      	bls.n	8001c98 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	22ff      	movs	r2, #255	; 0xff
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e010      	b.n	8001cba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001caa:	d003      	beq.n	8001cb4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e002      	b.n	8001cba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	8a79      	ldrh	r1, [r7, #18]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fde1 	bl	8002890 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b22      	cmp	r3, #34	; 0x22
 8001cea:	d108      	bne.n	8001cfe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001cfc:	e05b      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d0e:	e052      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d1e:	d003      	beq.n	8001d28 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f9b5 	bl	8002090 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d26:	e046      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d28:	2140      	movs	r1, #64	; 0x40
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fc76 	bl	800261c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d30:	e041      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d029      	beq.n	8001d92 <I2C_Master_ISR_DMA+0x1b0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d023      	beq.n	8001d92 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d119      	bne.n	8001d88 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d62:	d027      	beq.n	8001db4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d6c:	d108      	bne.n	8001d80 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d7c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001d7e:	e019      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f985 	bl	8002090 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001d86:	e015      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d88:	2140      	movs	r1, #64	; 0x40
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fc46 	bl	800261c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d90:	e010      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fa0b 	bl	80021c8 <I2C_ITMasterCplt>
 8001db2:	e000      	b.n	8001db6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001db4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <I2C_Slave_ISR_DMA+0x24>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0c9      	b.n	8001f80 <I2C_Slave_ISR_DMA+0x1b8>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <I2C_Slave_ISR_DMA+0x4c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 faa4 	bl	800235c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 809a 	beq.w	8001f56 <I2C_Slave_ISR_DMA+0x18e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8093 	beq.w	8001f56 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0b9b      	lsrs	r3, r3, #14
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0bdb      	lsrs	r3, r3, #15
 8001e40:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07f      	beq.n	8001f48 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00d      	beq.n	8001e6c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0bdb      	lsrs	r3, r3, #15
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0b9b      	lsrs	r3, r3, #14
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d128      	bne.n	8001ee8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b28      	cmp	r3, #40	; 0x28
 8001ea0:	d108      	bne.n	8001eb4 <I2C_Slave_ISR_DMA+0xec>
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea8:	d104      	bne.n	8001eb4 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fb5f 	bl	8002570 <I2C_ITListenCplt>
 8001eb2:	e048      	b.n	8001f46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b29      	cmp	r3, #41	; 0x29
 8001ebe:	d10e      	bne.n	8001ede <I2C_Slave_ISR_DMA+0x116>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ec6:	d00a      	beq.n	8001ede <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fc9a 	bl	800280a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f917 	bl	800210a <I2C_ITSlaveSeqCplt>
 8001edc:	e033      	b.n	8001f46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ee6:	e034      	b.n	8001f52 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2210      	movs	r2, #16
 8001eee:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f02:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <I2C_Slave_ISR_DMA+0x14a>
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d11f      	bne.n	8001f52 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b21      	cmp	r3, #33	; 0x21
 8001f16:	d002      	beq.n	8001f1e <I2C_Slave_ISR_DMA+0x156>
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b29      	cmp	r3, #41	; 0x29
 8001f1c:	d103      	bne.n	8001f26 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
 8001f24:	e008      	b.n	8001f38 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b22      	cmp	r3, #34	; 0x22
 8001f2a:	d002      	beq.n	8001f32 <I2C_Slave_ISR_DMA+0x16a>
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f30:	d102      	bne.n	8001f38 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2222      	movs	r2, #34	; 0x22
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fb6c 	bl	800261c <I2C_ITError>
      if (treatdmanack == 1U)
 8001f44:	e005      	b.n	8001f52 <I2C_Slave_ISR_DMA+0x18a>
 8001f46:	e004      	b.n	8001f52 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f50:	e011      	b.n	8001f76 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001f52:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f54:	e00f      	b.n	8001f76 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <I2C_Slave_ISR_DMA+0x1ae>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f809 	bl	8001f88 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f9e:	2b28      	cmp	r3, #40	; 0x28
 8001fa0:	d16a      	bne.n	8002078 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001fc0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001fdc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d138      	bne.n	8002058 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	09db      	lsrs	r3, r3, #7
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	89bb      	ldrh	r3, [r7, #12]
 8001fee:	4053      	eors	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f003 0306 	and.w	r3, r3, #6
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11c      	bne.n	8002034 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ffa:	897b      	ldrh	r3, [r7, #10]
 8001ffc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b02      	cmp	r3, #2
 800200e:	d13b      	bne.n	8002088 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2208      	movs	r2, #8
 800201c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002026:	89ba      	ldrh	r2, [r7, #12]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fb5c 	bl	80016ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002032:	e029      	b.n	8002088 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002034:	893b      	ldrh	r3, [r7, #8]
 8002036:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fcb9 	bl	80029b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800204a:	89ba      	ldrh	r2, [r7, #12]
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fb4a 	bl	80016ea <HAL_I2C_AddrCallback>
}
 8002056:	e017      	b.n	8002088 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fca9 	bl	80029b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800206a:	89ba      	ldrh	r2, [r7, #12]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fb3a 	bl	80016ea <HAL_I2C_AddrCallback>
}
 8002076:	e007      	b.n	8002088 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b21      	cmp	r3, #33	; 0x21
 80020aa:	d115      	bne.n	80020d8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2211      	movs	r2, #17
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020c0:	2101      	movs	r1, #1
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fc76 	bl	80029b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff faf6 	bl	80016c2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020d6:	e014      	b.n	8002102 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2212      	movs	r2, #18
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020ec:	2102      	movs	r1, #2
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fc60 	bl	80029b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff faea 	bl	80016d6 <HAL_I2C_MasterRxCpltCallback>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0b9b      	lsrs	r3, r3, #14
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e00d      	b.n	800215c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	0bdb      	lsrs	r3, r3, #15
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b29      	cmp	r3, #41	; 0x29
 8002166:	d112      	bne.n	800218e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2228      	movs	r2, #40	; 0x28
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002176:	2101      	movs	r1, #1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fc1b 	bl	80029b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fb46 	bl	8000818 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800218c:	e017      	b.n	80021be <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b2a      	cmp	r3, #42	; 0x2a
 8002198:	d111      	bne.n	80021be <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2228      	movs	r2, #40	; 0x28
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2222      	movs	r2, #34	; 0x22
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021a8:	2102      	movs	r1, #2
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fc02 	bl	80029b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe fb38 	bl	800082e <HAL_I2C_SlaveRxCpltCallback>
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2220      	movs	r2, #32
 80021dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b21      	cmp	r3, #33	; 0x21
 80021e8:	d107      	bne.n	80021fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021ea:	2101      	movs	r1, #1
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fbe1 	bl	80029b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2211      	movs	r2, #17
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e00c      	b.n	8002214 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b22      	cmp	r3, #34	; 0x22
 8002204:	d106      	bne.n	8002214 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002206:	2102      	movs	r1, #2
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fbd3 	bl	80029b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2212      	movs	r2, #18
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <I2C_ITMasterCplt+0x18c>)
 8002220:	400b      	ands	r3, r1
 8002222:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <I2C_ITMasterCplt+0x190>)
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d10b      	bne.n	8002274 <I2C_ITMasterCplt+0xac>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	b2db      	uxtb	r3, r3
 8002270:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002272:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fac8 	bl	800280a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b60      	cmp	r3, #96	; 0x60
 800228a:	d002      	beq.n	8002292 <I2C_ITMasterCplt+0xca>
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f9bf 	bl	800261c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800229e:	e054      	b.n	800234a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b21      	cmp	r3, #33	; 0x21
 80022aa:	d124      	bne.n	80022f6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d10b      	bne.n	80022de <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fa1f 	bl	800171a <HAL_I2C_MemTxCpltCallback>
}
 80022dc:	e035      	b.n	800234a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff f9e7 	bl	80016c2 <HAL_I2C_MasterTxCpltCallback>
}
 80022f4:	e029      	b.n	800234a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b22      	cmp	r3, #34	; 0x22
 8002300:	d123      	bne.n	800234a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d10b      	bne.n	8002334 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff f9fe 	bl	800172e <HAL_I2C_MemRxCpltCallback>
}
 8002332:	e00a      	b.n	800234a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f9c6 	bl	80016d6 <HAL_I2C_MasterRxCpltCallback>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	fe00e800 	.word	0xfe00e800
 8002358:	ffff0000 	.word	0xffff0000

0800235c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002378:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2220      	movs	r2, #32
 8002380:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b21      	cmp	r3, #33	; 0x21
 8002386:	d002      	beq.n	800238e <I2C_ITSlaveCplt+0x32>
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b29      	cmp	r3, #41	; 0x29
 800238c:	d108      	bne.n	80023a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800238e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fb0e 	bl	80029b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2221      	movs	r2, #33	; 0x21
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
 800239e:	e00d      	b.n	80023bc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b22      	cmp	r3, #34	; 0x22
 80023a4:	d002      	beq.n	80023ac <I2C_ITSlaveCplt+0x50>
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b2a      	cmp	r3, #42	; 0x2a
 80023aa:	d107      	bne.n	80023bc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 faff 	bl	80029b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2222      	movs	r2, #34	; 0x22
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b64      	ldr	r3, [pc, #400]	; (8002568 <I2C_ITSlaveCplt+0x20c>)
 80023d8:	400b      	ands	r3, r1
 80023da:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fa14 	bl	800280a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	0b9b      	lsrs	r3, r3, #14
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d020      	beq.n	8002448 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002414:	e018      	b.n	8002448 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	0bdb      	lsrs	r3, r3, #15
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002430:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4619      	mov	r1, r3
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f8a7 	bl	800261c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b28      	cmp	r3, #40	; 0x28
 80024d8:	d141      	bne.n	800255e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80024da:	6979      	ldr	r1, [r7, #20]
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f847 	bl	8002570 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024e2:	e03c      	b.n	800255e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ec:	d014      	beq.n	8002518 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fe0b 	bl	800210a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <I2C_ITSlaveCplt+0x210>)
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff f8f8 	bl	8001706 <HAL_I2C_ListenCpltCallback>
}
 8002516:	e022      	b.n	800255e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b22      	cmp	r3, #34	; 0x22
 8002522:	d10e      	bne.n	8002542 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f977 	bl	800082e <HAL_I2C_SlaveRxCpltCallback>
}
 8002540:	e00d      	b.n	800255e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe f95d 	bl	8000818 <HAL_I2C_SlaveTxCpltCallback>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	fe00e800 	.word	0xfe00e800
 800256c:	ffff0000 	.word	0xffff0000

08002570 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <I2C_ITListenCplt+0xa8>)
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d022      	beq.n	80025ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025ee:	f248 0103 	movw	r1, #32771	; 0x8003
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9de 	bl	80029b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff f87c 	bl	8001706 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	ffff0000 	.word	0xffff0000

0800261c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a5d      	ldr	r2, [pc, #372]	; (80027b0 <I2C_ITError+0x194>)
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b28      	cmp	r3, #40	; 0x28
 8002652:	d005      	beq.n	8002660 <I2C_ITError+0x44>
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b29      	cmp	r3, #41	; 0x29
 8002658:	d002      	beq.n	8002660 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b2a      	cmp	r3, #42	; 0x2a
 800265e:	d10b      	bne.n	8002678 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002660:	2103      	movs	r1, #3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9a6 	bl	80029b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2228      	movs	r2, #40	; 0x28
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a50      	ldr	r2, [pc, #320]	; (80027b4 <I2C_ITError+0x198>)
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
 8002676:	e011      	b.n	800269c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002678:	f248 0103 	movw	r1, #32771	; 0x8003
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f999 	bl	80029b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b60      	cmp	r3, #96	; 0x60
 800268c:	d003      	beq.n	8002696 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d039      	beq.n	800271e <I2C_ITError+0x102>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b11      	cmp	r3, #17
 80026ae:	d002      	beq.n	80026b6 <I2C_ITError+0x9a>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b21      	cmp	r3, #33	; 0x21
 80026b4:	d133      	bne.n	800271e <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c4:	d107      	bne.n	80026d6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc7a 	bl	8000fd4 <HAL_DMA_GetState>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d017      	beq.n	8002716 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <I2C_ITError+0x19c>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fc03 	bl	8000f06 <HAL_DMA_Abort_IT>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04d      	beq.n	80027a2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002710:	4610      	mov	r0, r2
 8002712:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002714:	e045      	b.n	80027a2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f850 	bl	80027bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800271c:	e041      	b.n	80027a2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d039      	beq.n	800279a <I2C_ITError+0x17e>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b12      	cmp	r3, #18
 800272a:	d002      	beq.n	8002732 <I2C_ITError+0x116>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b22      	cmp	r3, #34	; 0x22
 8002730:	d133      	bne.n	800279a <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002740:	d107      	bne.n	8002752 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002750:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fc3c 	bl	8000fd4 <HAL_DMA_GetState>
 800275c:	4603      	mov	r3, r0
 800275e:	2b01      	cmp	r3, #1
 8002760:	d017      	beq.n	8002792 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <I2C_ITError+0x19c>)
 8002768:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fbc5 	bl	8000f06 <HAL_DMA_Abort_IT>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d011      	beq.n	80027a6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800278c:	4610      	mov	r0, r2
 800278e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002790:	e009      	b.n	80027a6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f812 	bl	80027bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002798:	e005      	b.n	80027a6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f80e 	bl	80027bc <I2C_TreatErrorCallback>
  }
}
 80027a0:	e002      	b.n	80027a8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a6:	bf00      	nop
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ffff0000 	.word	0xffff0000
 80027b4:	080019dd 	.word	0x080019dd
 80027b8:	08002853 	.word	0x08002853

080027bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d10e      	bne.n	80027ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe ffab 	bl	8001742 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027ec:	e009      	b.n	8002802 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe f821 	bl	8000844 <HAL_I2C_ErrorCallback>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d103      	bne.n	8002828 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	619a      	str	r2, [r3, #24]
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	2200      	movs	r2, #0
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2200      	movs	r2, #0
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ff9b 	bl	80027bc <I2C_TreatErrorCallback>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	817b      	strh	r3, [r7, #10]
 800289e:	4613      	mov	r3, r2
 80028a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	0d5b      	lsrs	r3, r3, #21
 80028ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <I2C_TransferConfig+0x58>)
 80028b2:	430b      	orrs	r3, r1
 80028b4:	43db      	mvns	r3, r3
 80028b6:	ea02 0103 	and.w	r1, r2, r3
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028c0:	7a7b      	ldrb	r3, [r7, #9]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	03ff63ff 	.word	0x03ff63ff

080028ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <I2C_Enable_IRQ+0xc0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <I2C_Enable_IRQ+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d11d      	bne.n	800294c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da03      	bge.n	8002920 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800291e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d103      	bne.n	800292e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800292c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	2b20      	cmp	r3, #32
 8002932:	d103      	bne.n	800293c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800293a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d125      	bne.n	800298e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002948:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800294a:	e020      	b.n	800298e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800294c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da03      	bge.n	800295c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800295a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800296c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800297e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	2b20      	cmp	r3, #32
 8002984:	d103      	bne.n	800298e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f043 0320 	orr.w	r3, r3, #32
 800298c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	08001be3 	.word	0x08001be3
 80029b0:	08001dc9 	.word	0x08001dc9

080029b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00f      	beq.n	80029ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80029d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029e2:	2b28      	cmp	r3, #40	; 0x28
 80029e4:	d003      	beq.n	80029ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80029ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00f      	beq.n	8002a18 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80029fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a0c:	2b28      	cmp	r3, #40	; 0x28
 8002a0e:	d003      	beq.n	8002a18 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a16:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da03      	bge.n	8002a28 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d103      	bne.n	8002a36 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d103      	bne.n	8002a44 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d103      	bne.n	8002a52 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d138      	bne.n	8002af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e032      	b.n	8002afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d139      	bne.n	8002b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e033      	b.n	8002b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d141      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bae:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d131      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bbc:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc2:	4a46      	ldr	r2, [pc, #280]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bcc:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd4:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bdc:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2232      	movs	r2, #50	; 0x32
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	4a3f      	ldr	r2, [pc, #252]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf2:	e002      	b.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d102      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d158      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e057      	b.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c20:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c26:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c30:	e04d      	b.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d141      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c3a:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	d131      	bne.n	8002cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c60:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2232      	movs	r2, #50	; 0x32
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	0c9b      	lsrs	r3, r3, #18
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7e:	e002      	b.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d102      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f2      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d112      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e011      	b.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cbc:	e007      	b.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	431bde83 	.word	0x431bde83

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e308      	b.n	800330c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d075      	beq.n	8002df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d06:	4ba3      	ldr	r3, [pc, #652]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d10:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d102      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3e>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_OscConfig+0x44>
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	4b99      	ldr	r3, [pc, #612]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05b      	beq.n	8002df0 <HAL_RCC_OscConfig+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d157      	bne.n	8002df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e2e3      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x74>
 8002d4e:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a90      	ldr	r2, [pc, #576]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a8a      	ldr	r2, [pc, #552]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a87      	ldr	r2, [pc, #540]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d80:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a83      	ldr	r2, [pc, #524]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fd ff74 	bl	8000c8c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fd ff70 	bl	8000c8c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e2a8      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fd ff60 	bl	8000c8c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fd ff5c 	bl	8000c8c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e294      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xe8>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d075      	beq.n	8002eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	4b62      	ldr	r3, [pc, #392]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_OscConfig+0x136>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_OscConfig+0x13c>
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11f      	bne.n	8002e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x154>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e267      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4952      	ldr	r1, [pc, #328]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e50:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_OscConfig+0x2b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fecd 	bl	8000bf4 <HAL_InitTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d043      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e253      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fd ff08 	bl	8000c8c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fd ff04 	bl	8000c8c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e23c      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	4939      	ldr	r1, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 8002eb2:	e01a      	b.n	8002eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a36      	ldr	r2, [pc, #216]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fee4 	bl	8000c8c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fd fee0 	bl	8000c8c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e218      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fd febd 	bl	8000c8c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fd feb9 	bl	8000c8c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1f1      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ef      	beq.n	8002f16 <HAL_RCC_OscConfig+0x22e>
 8002f36:	e01b      	b.n	8002f70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fd fea0 	bl	8000c8c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fd fe9c 	bl	8000c8c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1d4      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ef      	bne.n	8002f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80ab 	beq.w	80030d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2b4>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e005      	b.n	8002f9e <HAL_RCC_OscConfig+0x2b6>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	20000014 	.word	0x20000014
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4baf      	ldr	r3, [pc, #700]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4aae      	ldr	r2, [pc, #696]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4bac      	ldr	r3, [pc, #688]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbe:	4ba9      	ldr	r3, [pc, #676]	; (8003264 <HAL_RCC_OscConfig+0x57c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d118      	bne.n	8002ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fca:	4ba6      	ldr	r3, [pc, #664]	; (8003264 <HAL_RCC_OscConfig+0x57c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4aa5      	ldr	r2, [pc, #660]	; (8003264 <HAL_RCC_OscConfig+0x57c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fe59 	bl	8000c8c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fd fe55 	bl	8000c8c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e18d      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff0:	4b9c      	ldr	r3, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x57c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d108      	bne.n	8003016 <HAL_RCC_OscConfig+0x32e>
 8003004:	4b96      	ldr	r3, [pc, #600]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a95      	ldr	r2, [pc, #596]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003014:	e024      	b.n	8003060 <HAL_RCC_OscConfig+0x378>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d110      	bne.n	8003040 <HAL_RCC_OscConfig+0x358>
 800301e:	4b90      	ldr	r3, [pc, #576]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a8e      	ldr	r2, [pc, #568]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302e:	4b8c      	ldr	r3, [pc, #560]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	4a8a      	ldr	r2, [pc, #552]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x378>
 8003040:	4b87      	ldr	r3, [pc, #540]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	4a86      	ldr	r2, [pc, #536]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003050:	4b83      	ldr	r3, [pc, #524]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a82      	ldr	r2, [pc, #520]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d016      	beq.n	8003096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fd fe10 	bl	8000c8c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fd fe0c 	bl	8000c8c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e142      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ed      	beq.n	8003070 <HAL_RCC_OscConfig+0x388>
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fd fdf9 	bl	8000c8c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fd fdf5 	bl	8000c8c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e12b      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ed      	bne.n	800309e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c2:	7ffb      	ldrb	r3, [r7, #31]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b65      	ldr	r3, [pc, #404]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	4a64      	ldr	r2, [pc, #400]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d03c      	beq.n	800315a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01c      	beq.n	8003122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e8:	4b5d      	ldr	r3, [pc, #372]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80030ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ee:	4a5c      	ldr	r2, [pc, #368]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fd fdc8 	bl	8000c8c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003100:	f7fd fdc4 	bl	8000c8c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0fc      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003112:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003114:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <HAL_RCC_OscConfig+0x418>
 8003120:	e01b      	b.n	800315a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003122:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003128:	4a4d      	ldr	r2, [pc, #308]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fd fdab 	bl	8000c8c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313a:	f7fd fda7 	bl	8000c8c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0df      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800314c:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ef      	bne.n	800313a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80d3 	beq.w	800330a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003164:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b0c      	cmp	r3, #12
 800316e:	f000 808d 	beq.w	800328c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d15a      	bne.n	8003230 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a38      	ldr	r2, [pc, #224]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fd fd81 	bl	8000c8c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fd fd7d 	bl	8000c8c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0b5      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x580>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6a11      	ldr	r1, [r2, #32]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031bc:	3a01      	subs	r2, #1
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031c6:	0212      	lsls	r2, r2, #8
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ce:	0852      	lsrs	r2, r2, #1
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0552      	lsls	r2, r2, #21
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031da:	0852      	lsrs	r2, r2, #1
 80031dc:	3a01      	subs	r2, #1
 80031de:	0652      	lsls	r2, r2, #25
 80031e0:	4311      	orrs	r1, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031e6:	06d2      	lsls	r2, r2, #27
 80031e8:	430a      	orrs	r2, r1
 80031ea:	491d      	ldr	r1, [pc, #116]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a17      	ldr	r2, [pc, #92]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fd40 	bl	8000c8c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd fd3c 	bl	8000c8c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e074      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x528>
 800322e:	e06c      	b.n	800330a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_RCC_OscConfig+0x578>)
 800324e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd fd18 	bl	8000c8c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325e:	e00e      	b.n	800327e <HAL_RCC_OscConfig+0x596>
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
 8003268:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd fd0e 	bl	8000c8c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e046      	b.n	800330c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x62c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x584>
 800328a:	e03e      	b.n	800330a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e039      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x62c>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d12c      	bne.n	8003306 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d123      	bne.n	8003306 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11b      	bne.n	8003306 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d113      	bne.n	8003306 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d109      	bne.n	8003306 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	3b01      	subs	r3, #1
 8003300:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e11e      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d910      	bls.n	8003360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 020f 	bic.w	r2, r3, #15
 8003346:	498c      	ldr	r1, [pc, #560]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b8a      	ldr	r3, [pc, #552]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e106      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d073      	beq.n	8003454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d129      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0f4      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003384:	f000 f99e 	bl	80036c4 <RCC_GetSysClockFreqFromPLLSource>
 8003388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_RCC_ClockConfig+0x268>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d93f      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d033      	beq.n	8003412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12f      	bne.n	8003412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033b2:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ba:	4a70      	ldr	r2, [pc, #448]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e024      	b.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0c6      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0be      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033f0:	f000 f8ce 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4a61      	ldr	r2, [pc, #388]	; (8003580 <HAL_RCC_ClockConfig+0x268>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d909      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003406:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b5a      	ldr	r3, [pc, #360]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4957      	ldr	r1, [pc, #348]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fd fc32 	bl	8000c8c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd fc2e 	bl	8000c8c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e095      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a42      	ldr	r2, [pc, #264]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003484:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800348c:	4a3b      	ldr	r2, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800348e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4936      	ldr	r1, [pc, #216]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
 80034a6:	e008      	b.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d21d      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 020f 	bic.w	r2, r3, #15
 80034d0:	4929      	ldr	r1, [pc, #164]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d8:	f7fd fbd8 	bl	8000c8c <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd fbd4 	bl	8000c8c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e03b      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d1ed      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490f      	ldr	r1, [pc, #60]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003542:	f000 f825 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8003546:	4601      	mov	r1, r0
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_ClockConfig+0x26c>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x270>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fb44 	bl	8000bf4 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	04c4b400 	.word	0x04c4b400
 8003584:	08005588 	.word	0x08005588
 8003588:	20000008 	.word	0x20000008
 800358c:	20000014 	.word	0x20000014

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e047      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e03e      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d136      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ee:	68d2      	ldr	r2, [r2, #12]
 80035f0:	0a12      	lsrs	r2, r2, #8
 80035f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	0a12      	lsrs	r2, r2, #8
 800360c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0e5b      	lsrs	r3, r3, #25
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e001      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003638:	693b      	ldr	r3, [r7, #16]
}
 800363a:	4618      	mov	r0, r3
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	00f42400 	.word	0x00f42400
 8003650:	016e3600 	.word	0x016e3600

08003654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000008 	.word	0x20000008

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4601      	mov	r1, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	08005598 	.word	0x08005598

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800369c:	f7ff ffda 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 80036a0:	4601      	mov	r1, r0
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0adb      	lsrs	r3, r3, #11
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08005598 	.word	0x08005598

080036c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d10c      	bne.n	8003702 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e8:	4a17      	ldr	r2, [pc, #92]	; (8003748 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f2:	68d2      	ldr	r2, [r2, #12]
 80036f4:	0a12      	lsrs	r2, r2, #8
 80036f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
    break;
 8003700:	e00c      	b.n	800371c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	0a12      	lsrs	r2, r2, #8
 8003710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]
    break;
 800371a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0e5b      	lsrs	r3, r3, #25
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003736:	687b      	ldr	r3, [r7, #4]
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40021000 	.word	0x40021000
 8003748:	016e3600 	.word	0x016e3600
 800374c:	00f42400 	.word	0x00f42400

08003750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003758:	2300      	movs	r3, #0
 800375a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800375c:	2300      	movs	r3, #0
 800375e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8098 	beq.w	800389e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a3f      	ldr	r2, [pc, #252]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a39      	ldr	r2, [pc, #228]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a6:	f7fd fa71 	bl	8000c8c <HAL_GetTick>
 80037aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ac:	e009      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd fa6d 	bl	8000c8c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
        break;
 80037c0:	e005      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d159      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d019      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800380c:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fa2d 	bl	8000c8c <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003834:	e00b      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fd fa29 	bl	8000c8c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d902      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	74fb      	strb	r3, [r7, #19]
            break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ec      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	4903      	ldr	r1, [pc, #12]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	74bb      	strb	r3, [r7, #18]
 800387e:	e005      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388c:	7c7b      	ldrb	r3, [r7, #17]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4baf      	ldr	r3, [pc, #700]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4aae      	ldr	r2, [pc, #696]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038aa:	4ba9      	ldr	r3, [pc, #676]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f023 0203 	bic.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	49a5      	ldr	r1, [pc, #660]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038cc:	4ba0      	ldr	r3, [pc, #640]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 020c 	bic.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	499d      	ldr	r1, [pc, #628]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ee:	4b98      	ldr	r3, [pc, #608]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4994      	ldr	r1, [pc, #592]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	498c      	ldr	r1, [pc, #560]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003932:	4b87      	ldr	r3, [pc, #540]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4983      	ldr	r1, [pc, #524]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003954:	4b7e      	ldr	r3, [pc, #504]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	497b      	ldr	r1, [pc, #492]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4972      	ldr	r1, [pc, #456]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003998:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	496a      	ldr	r1, [pc, #424]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ba:	4b65      	ldr	r3, [pc, #404]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	4961      	ldr	r1, [pc, #388]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039dc:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	4959      	ldr	r1, [pc, #356]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fe:	4b54      	ldr	r3, [pc, #336]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4950      	ldr	r1, [pc, #320]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a20:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4948      	ldr	r1, [pc, #288]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	493a      	ldr	r1, [pc, #232]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a90:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	492c      	ldr	r1, [pc, #176]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aae:	d105      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	491e      	ldr	r1, [pc, #120]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4910      	ldr	r1, [pc, #64]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d018      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4902      	ldr	r1, [pc, #8]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b4e:	e001      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003b50:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b5c:	d105      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d015      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	4917      	ldr	r1, [pc, #92]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	4909      	ldr	r1, [pc, #36]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bcc:	d105      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fc fee1 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2224      	movs	r2, #36	; 0x24
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82c 	bl	8003c88 <UART_SetConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 fa0e 	bl	8005064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 fa95 	bl	80051a8 <UART_CheckIdleState>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c8c:	b08a      	sub	sp, #40	; 0x28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4baa      	ldr	r3, [pc, #680]	; (8003f70 <UART_SetConfig+0x2e8>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a9f      	ldr	r2, [pc, #636]	; (8003f74 <UART_SetConfig+0x2ec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	4313      	orrs	r3, r2
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f023 010f 	bic.w	r1, r3, #15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a90      	ldr	r2, [pc, #576]	; (8003f78 <UART_SetConfig+0x2f0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d126      	bne.n	8003d8a <UART_SetConfig+0x102>
 8003d3c:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d81a      	bhi.n	8003d80 <UART_SetConfig+0xf8>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0xc8>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e116      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e112      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e10e      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e10a      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	bf00      	nop
 8003d88:	e105      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7c      	ldr	r2, [pc, #496]	; (8003f80 <UART_SetConfig+0x2f8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d138      	bne.n	8003e06 <UART_SetConfig+0x17e>
 8003d94:	4b79      	ldr	r3, [pc, #484]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d82c      	bhi.n	8003dfc <UART_SetConfig+0x174>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x120>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003dfd 	.word	0x08003dfd
 8003db4:	08003dfd 	.word	0x08003dfd
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003dfd 	.word	0x08003dfd
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dfd 	.word	0x08003dfd
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003dfd 	.word	0x08003dfd
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e0d8      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e0d4      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e0d0      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e0cc      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	bf00      	nop
 8003e04:	e0c7      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5e      	ldr	r2, [pc, #376]	; (8003f84 <UART_SetConfig+0x2fc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d125      	bne.n	8003e5c <UART_SetConfig+0x1d4>
 8003e10:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d011      	beq.n	8003e42 <UART_SetConfig+0x1ba>
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d802      	bhi.n	8003e28 <UART_SetConfig+0x1a0>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <UART_SetConfig+0x1aa>
 8003e26:	e014      	b.n	8003e52 <UART_SetConfig+0x1ca>
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d006      	beq.n	8003e3a <UART_SetConfig+0x1b2>
 8003e2c:	2b30      	cmp	r3, #48	; 0x30
 8003e2e:	d00c      	beq.n	8003e4a <UART_SetConfig+0x1c2>
 8003e30:	e00f      	b.n	8003e52 <UART_SetConfig+0x1ca>
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e38:	e0ad      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e40:	e0a9      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e42:	2304      	movs	r3, #4
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e48:	e0a5      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e50:	e0a1      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e52:	2310      	movs	r3, #16
 8003e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e58:	bf00      	nop
 8003e5a:	e09c      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a49      	ldr	r2, [pc, #292]	; (8003f88 <UART_SetConfig+0x300>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d125      	bne.n	8003eb2 <UART_SetConfig+0x22a>
 8003e66:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d011      	beq.n	8003e98 <UART_SetConfig+0x210>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d802      	bhi.n	8003e7e <UART_SetConfig+0x1f6>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <UART_SetConfig+0x200>
 8003e7c:	e014      	b.n	8003ea8 <UART_SetConfig+0x220>
 8003e7e:	2b80      	cmp	r3, #128	; 0x80
 8003e80:	d006      	beq.n	8003e90 <UART_SetConfig+0x208>
 8003e82:	2bc0      	cmp	r3, #192	; 0xc0
 8003e84:	d00c      	beq.n	8003ea0 <UART_SetConfig+0x218>
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x220>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e082      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e90:	2302      	movs	r3, #2
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e07e      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e07a      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e076      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	bf00      	nop
 8003eb0:	e071      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <UART_SetConfig+0x304>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d129      	bne.n	8003f10 <UART_SetConfig+0x288>
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d014      	beq.n	8003ef6 <UART_SetConfig+0x26e>
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d802      	bhi.n	8003ed8 <UART_SetConfig+0x250>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <UART_SetConfig+0x25e>
 8003ed6:	e016      	b.n	8003f06 <UART_SetConfig+0x27e>
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d007      	beq.n	8003eee <UART_SetConfig+0x266>
 8003ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee2:	d00c      	beq.n	8003efe <UART_SetConfig+0x276>
 8003ee4:	e00f      	b.n	8003f06 <UART_SetConfig+0x27e>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eec:	e053      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef4:	e04f      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efc:	e04b      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003efe:	2308      	movs	r3, #8
 8003f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f04:	e047      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f06:	2310      	movs	r3, #16
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0c:	bf00      	nop
 8003f0e:	e042      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <UART_SetConfig+0x2ec>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d13a      	bne.n	8003f90 <UART_SetConfig+0x308>
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <UART_SetConfig+0x2f4>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f28:	d014      	beq.n	8003f54 <UART_SetConfig+0x2cc>
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d802      	bhi.n	8003f36 <UART_SetConfig+0x2ae>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <UART_SetConfig+0x2bc>
 8003f34:	e016      	b.n	8003f64 <UART_SetConfig+0x2dc>
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3a:	d007      	beq.n	8003f4c <UART_SetConfig+0x2c4>
 8003f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f40:	d00c      	beq.n	8003f5c <UART_SetConfig+0x2d4>
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x2dc>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e024      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e020      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e01c      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e018      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	bf00      	nop
 8003f6c:	e013      	b.n	8003f96 <UART_SetConfig+0x30e>
 8003f6e:	bf00      	nop
 8003f70:	cfff69f3 	.word	0xcfff69f3
 8003f74:	40008000 	.word	0x40008000
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40004400 	.word	0x40004400
 8003f84:	40004800 	.word	0x40004800
 8003f88:	40004c00 	.word	0x40004c00
 8003f8c:	40005000 	.word	0x40005000
 8003f90:	2310      	movs	r3, #16
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a86      	ldr	r2, [pc, #536]	; (80041b4 <UART_SetConfig+0x52c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f040 8422 	bne.w	80047e6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	f200 8173 	bhi.w	8004292 <UART_SetConfig+0x60a>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <UART_SetConfig+0x32c>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08004293 	.word	0x08004293
 8003fbc:	0800407b 	.word	0x0800407b
 8003fc0:	08004293 	.word	0x08004293
 8003fc4:	08004113 	.word	0x08004113
 8003fc8:	08004293 	.word	0x08004293
 8003fcc:	08004293 	.word	0x08004293
 8003fd0:	08004293 	.word	0x08004293
 8003fd4:	080041e5 	.word	0x080041e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fd8:	f7ff fb48 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <UART_SetConfig+0x3e8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d03e      	beq.n	800406c <UART_SetConfig+0x3e4>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d038      	beq.n	8004068 <UART_SetConfig+0x3e0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d032      	beq.n	8004064 <UART_SetConfig+0x3dc>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b04      	cmp	r3, #4
 8004004:	d02c      	beq.n	8004060 <UART_SetConfig+0x3d8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b05      	cmp	r3, #5
 800400c:	d026      	beq.n	800405c <UART_SetConfig+0x3d4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b06      	cmp	r3, #6
 8004014:	d020      	beq.n	8004058 <UART_SetConfig+0x3d0>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b07      	cmp	r3, #7
 800401c:	d01a      	beq.n	8004054 <UART_SetConfig+0x3cc>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b08      	cmp	r3, #8
 8004024:	d014      	beq.n	8004050 <UART_SetConfig+0x3c8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b09      	cmp	r3, #9
 800402c:	d00e      	beq.n	800404c <UART_SetConfig+0x3c4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b0a      	cmp	r3, #10
 8004034:	d008      	beq.n	8004048 <UART_SetConfig+0x3c0>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b0b      	cmp	r3, #11
 800403c:	d102      	bne.n	8004044 <UART_SetConfig+0x3bc>
 800403e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004042:	e016      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004044:	2301      	movs	r3, #1
 8004046:	e014      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	e012      	b.n	8004072 <UART_SetConfig+0x3ea>
 800404c:	2340      	movs	r3, #64	; 0x40
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004050:	2320      	movs	r3, #32
 8004052:	e00e      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004054:	2310      	movs	r3, #16
 8004056:	e00c      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004058:	230c      	movs	r3, #12
 800405a:	e00a      	b.n	8004072 <UART_SetConfig+0x3ea>
 800405c:	230a      	movs	r3, #10
 800405e:	e008      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004060:	2308      	movs	r3, #8
 8004062:	e006      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004064:	2306      	movs	r3, #6
 8004066:	e004      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004068:	2304      	movs	r3, #4
 800406a:	e002      	b.n	8004072 <UART_SetConfig+0x3ea>
 800406c:	2302      	movs	r3, #2
 800406e:	e000      	b.n	8004072 <UART_SetConfig+0x3ea>
 8004070:	2301      	movs	r3, #1
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	617b      	str	r3, [r7, #20]
        break;
 8004078:	e10e      	b.n	8004298 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <UART_SetConfig+0x484>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b01      	cmp	r3, #1
 8004088:	d03e      	beq.n	8004108 <UART_SetConfig+0x480>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b02      	cmp	r3, #2
 8004090:	d038      	beq.n	8004104 <UART_SetConfig+0x47c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b03      	cmp	r3, #3
 8004098:	d032      	beq.n	8004100 <UART_SetConfig+0x478>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d02c      	beq.n	80040fc <UART_SetConfig+0x474>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d026      	beq.n	80040f8 <UART_SetConfig+0x470>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d020      	beq.n	80040f4 <UART_SetConfig+0x46c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	d01a      	beq.n	80040f0 <UART_SetConfig+0x468>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d014      	beq.n	80040ec <UART_SetConfig+0x464>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b09      	cmp	r3, #9
 80040c8:	d00e      	beq.n	80040e8 <UART_SetConfig+0x460>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b0a      	cmp	r3, #10
 80040d0:	d008      	beq.n	80040e4 <UART_SetConfig+0x45c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b0b      	cmp	r3, #11
 80040d8:	d102      	bne.n	80040e0 <UART_SetConfig+0x458>
 80040da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040de:	e016      	b.n	800410e <UART_SetConfig+0x486>
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <UART_SetConfig+0x530>)
 80040e2:	e014      	b.n	800410e <UART_SetConfig+0x486>
 80040e4:	4b35      	ldr	r3, [pc, #212]	; (80041bc <UART_SetConfig+0x534>)
 80040e6:	e012      	b.n	800410e <UART_SetConfig+0x486>
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <UART_SetConfig+0x538>)
 80040ea:	e010      	b.n	800410e <UART_SetConfig+0x486>
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <UART_SetConfig+0x53c>)
 80040ee:	e00e      	b.n	800410e <UART_SetConfig+0x486>
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <UART_SetConfig+0x540>)
 80040f2:	e00c      	b.n	800410e <UART_SetConfig+0x486>
 80040f4:	4b35      	ldr	r3, [pc, #212]	; (80041cc <UART_SetConfig+0x544>)
 80040f6:	e00a      	b.n	800410e <UART_SetConfig+0x486>
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <UART_SetConfig+0x548>)
 80040fa:	e008      	b.n	800410e <UART_SetConfig+0x486>
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <UART_SetConfig+0x54c>)
 80040fe:	e006      	b.n	800410e <UART_SetConfig+0x486>
 8004100:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <UART_SetConfig+0x550>)
 8004102:	e004      	b.n	800410e <UART_SetConfig+0x486>
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <UART_SetConfig+0x554>)
 8004106:	e002      	b.n	800410e <UART_SetConfig+0x486>
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <UART_SetConfig+0x558>)
 800410a:	e000      	b.n	800410e <UART_SetConfig+0x486>
 800410c:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <UART_SetConfig+0x530>)
 800410e:	617b      	str	r3, [r7, #20]
        break;
 8004110:	e0c2      	b.n	8004298 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004112:	f7ff fa3d 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d044      	beq.n	80041aa <UART_SetConfig+0x522>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d03e      	beq.n	80041a6 <UART_SetConfig+0x51e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b02      	cmp	r3, #2
 800412e:	d038      	beq.n	80041a2 <UART_SetConfig+0x51a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b03      	cmp	r3, #3
 8004136:	d032      	beq.n	800419e <UART_SetConfig+0x516>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b04      	cmp	r3, #4
 800413e:	d02c      	beq.n	800419a <UART_SetConfig+0x512>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b05      	cmp	r3, #5
 8004146:	d026      	beq.n	8004196 <UART_SetConfig+0x50e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b06      	cmp	r3, #6
 800414e:	d020      	beq.n	8004192 <UART_SetConfig+0x50a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b07      	cmp	r3, #7
 8004156:	d01a      	beq.n	800418e <UART_SetConfig+0x506>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b08      	cmp	r3, #8
 800415e:	d014      	beq.n	800418a <UART_SetConfig+0x502>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b09      	cmp	r3, #9
 8004166:	d00e      	beq.n	8004186 <UART_SetConfig+0x4fe>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b0a      	cmp	r3, #10
 800416e:	d008      	beq.n	8004182 <UART_SetConfig+0x4fa>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b0b      	cmp	r3, #11
 8004176:	d102      	bne.n	800417e <UART_SetConfig+0x4f6>
 8004178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800417c:	e016      	b.n	80041ac <UART_SetConfig+0x524>
 800417e:	2301      	movs	r3, #1
 8004180:	e014      	b.n	80041ac <UART_SetConfig+0x524>
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	e012      	b.n	80041ac <UART_SetConfig+0x524>
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	e010      	b.n	80041ac <UART_SetConfig+0x524>
 800418a:	2320      	movs	r3, #32
 800418c:	e00e      	b.n	80041ac <UART_SetConfig+0x524>
 800418e:	2310      	movs	r3, #16
 8004190:	e00c      	b.n	80041ac <UART_SetConfig+0x524>
 8004192:	230c      	movs	r3, #12
 8004194:	e00a      	b.n	80041ac <UART_SetConfig+0x524>
 8004196:	230a      	movs	r3, #10
 8004198:	e008      	b.n	80041ac <UART_SetConfig+0x524>
 800419a:	2308      	movs	r3, #8
 800419c:	e006      	b.n	80041ac <UART_SetConfig+0x524>
 800419e:	2306      	movs	r3, #6
 80041a0:	e004      	b.n	80041ac <UART_SetConfig+0x524>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e002      	b.n	80041ac <UART_SetConfig+0x524>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e000      	b.n	80041ac <UART_SetConfig+0x524>
 80041aa:	2301      	movs	r3, #1
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
        break;
 80041b2:	e071      	b.n	8004298 <UART_SetConfig+0x610>
 80041b4:	40008000 	.word	0x40008000
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	0001e848 	.word	0x0001e848
 80041c0:	0003d090 	.word	0x0003d090
 80041c4:	0007a120 	.word	0x0007a120
 80041c8:	000f4240 	.word	0x000f4240
 80041cc:	00145855 	.word	0x00145855
 80041d0:	00186a00 	.word	0x00186a00
 80041d4:	001e8480 	.word	0x001e8480
 80041d8:	0028b0aa 	.word	0x0028b0aa
 80041dc:	003d0900 	.word	0x003d0900
 80041e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d04e      	beq.n	800428a <UART_SetConfig+0x602>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d047      	beq.n	8004284 <UART_SetConfig+0x5fc>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d040      	beq.n	800427e <UART_SetConfig+0x5f6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2b03      	cmp	r3, #3
 8004202:	d039      	beq.n	8004278 <UART_SetConfig+0x5f0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2b04      	cmp	r3, #4
 800420a:	d032      	beq.n	8004272 <UART_SetConfig+0x5ea>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2b05      	cmp	r3, #5
 8004212:	d02b      	beq.n	800426c <UART_SetConfig+0x5e4>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b06      	cmp	r3, #6
 800421a:	d024      	beq.n	8004266 <UART_SetConfig+0x5de>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	2b07      	cmp	r3, #7
 8004222:	d01d      	beq.n	8004260 <UART_SetConfig+0x5d8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b08      	cmp	r3, #8
 800422a:	d016      	beq.n	800425a <UART_SetConfig+0x5d2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b09      	cmp	r3, #9
 8004232:	d00f      	beq.n	8004254 <UART_SetConfig+0x5cc>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2b0a      	cmp	r3, #10
 800423a:	d008      	beq.n	800424e <UART_SetConfig+0x5c6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	2b0b      	cmp	r3, #11
 8004242:	d101      	bne.n	8004248 <UART_SetConfig+0x5c0>
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	e022      	b.n	800428e <UART_SetConfig+0x606>
 8004248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424c:	e01f      	b.n	800428e <UART_SetConfig+0x606>
 800424e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004252:	e01c      	b.n	800428e <UART_SetConfig+0x606>
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004258:	e019      	b.n	800428e <UART_SetConfig+0x606>
 800425a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800425e:	e016      	b.n	800428e <UART_SetConfig+0x606>
 8004260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004264:	e013      	b.n	800428e <UART_SetConfig+0x606>
 8004266:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800426a:	e010      	b.n	800428e <UART_SetConfig+0x606>
 800426c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004270:	e00d      	b.n	800428e <UART_SetConfig+0x606>
 8004272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004276:	e00a      	b.n	800428e <UART_SetConfig+0x606>
 8004278:	f241 5355 	movw	r3, #5461	; 0x1555
 800427c:	e007      	b.n	800428e <UART_SetConfig+0x606>
 800427e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004282:	e004      	b.n	800428e <UART_SetConfig+0x606>
 8004284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004288:	e001      	b.n	800428e <UART_SetConfig+0x606>
 800428a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428e:	617b      	str	r3, [r7, #20]
        break;
 8004290:	e002      	b.n	8004298 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	76fb      	strb	r3, [r7, #27]
        break;
 8004296:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 86b7 	beq.w	800500e <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d305      	bcc.n	80042bc <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	f000 bea5 	b.w	800500e <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80042c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f200 8277 	bhi.w	80047bc <UART_SetConfig+0xb34>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0x64c>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	080047bd 	.word	0x080047bd
 80042dc:	08004437 	.word	0x08004437
 80042e0:	080047bd 	.word	0x080047bd
 80042e4:	0800452d 	.word	0x0800452d
 80042e8:	080047bd 	.word	0x080047bd
 80042ec:	080047bd 	.word	0x080047bd
 80042f0:	080047bd 	.word	0x080047bd
 80042f4:	0800466b 	.word	0x0800466b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7ff f9b8 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 80042fc:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4618      	mov	r0, r3
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d067      	beq.n	80043de <UART_SetConfig+0x756>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b01      	cmp	r3, #1
 8004314:	d05e      	beq.n	80043d4 <UART_SetConfig+0x74c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b02      	cmp	r3, #2
 800431c:	d055      	beq.n	80043ca <UART_SetConfig+0x742>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b03      	cmp	r3, #3
 8004324:	d04c      	beq.n	80043c0 <UART_SetConfig+0x738>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b04      	cmp	r3, #4
 800432c:	d043      	beq.n	80043b6 <UART_SetConfig+0x72e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b05      	cmp	r3, #5
 8004334:	d03a      	beq.n	80043ac <UART_SetConfig+0x724>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b06      	cmp	r3, #6
 800433c:	d031      	beq.n	80043a2 <UART_SetConfig+0x71a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b07      	cmp	r3, #7
 8004344:	d028      	beq.n	8004398 <UART_SetConfig+0x710>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b08      	cmp	r3, #8
 800434c:	d01f      	beq.n	800438e <UART_SetConfig+0x706>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b09      	cmp	r3, #9
 8004354:	d016      	beq.n	8004384 <UART_SetConfig+0x6fc>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b0a      	cmp	r3, #10
 800435c:	d00d      	beq.n	800437a <UART_SetConfig+0x6f2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b0b      	cmp	r3, #11
 8004364:	d104      	bne.n	8004370 <UART_SetConfig+0x6e8>
 8004366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800436a:	f04f 0400 	mov.w	r4, #0
 800436e:	e03a      	b.n	80043e6 <UART_SetConfig+0x75e>
 8004370:	f04f 0301 	mov.w	r3, #1
 8004374:	f04f 0400 	mov.w	r4, #0
 8004378:	e035      	b.n	80043e6 <UART_SetConfig+0x75e>
 800437a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	e030      	b.n	80043e6 <UART_SetConfig+0x75e>
 8004384:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004388:	f04f 0400 	mov.w	r4, #0
 800438c:	e02b      	b.n	80043e6 <UART_SetConfig+0x75e>
 800438e:	f04f 0320 	mov.w	r3, #32
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	e026      	b.n	80043e6 <UART_SetConfig+0x75e>
 8004398:	f04f 0310 	mov.w	r3, #16
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	e021      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043a2:	f04f 030c 	mov.w	r3, #12
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	e01c      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043ac:	f04f 030a 	mov.w	r3, #10
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	e017      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043b6:	f04f 0308 	mov.w	r3, #8
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	e012      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043c0:	f04f 0306 	mov.w	r3, #6
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043ca:	f04f 0304 	mov.w	r3, #4
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	e008      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043d4:	f04f 0302 	mov.w	r3, #2
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	e003      	b.n	80043e6 <UART_SetConfig+0x75e>
 80043de:	f04f 0301 	mov.w	r3, #1
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	f7fb ff15 	bl	8000218 <__aeabi_uldivmod>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	4619      	mov	r1, r3
 80043f4:	4622      	mov	r2, r4
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	0214      	lsls	r4, r2, #8
 8004400:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004404:	020b      	lsls	r3, r1, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6852      	ldr	r2, [r2, #4]
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	4611      	mov	r1, r2
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	eb13 0b01 	adds.w	fp, r3, r1
 8004416:	eb44 0c02 	adc.w	ip, r4, r2
 800441a:	4658      	mov	r0, fp
 800441c:	4661      	mov	r1, ip
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f04f 0400 	mov.w	r4, #0
 8004426:	461a      	mov	r2, r3
 8004428:	4623      	mov	r3, r4
 800442a:	f7fb fef5 	bl	8000218 <__aeabi_uldivmod>
 800442e:	4603      	mov	r3, r0
 8004430:	460c      	mov	r4, r1
 8004432:	61fb      	str	r3, [r7, #28]
            break;
 8004434:	e1c5      	b.n	80047c2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d05b      	beq.n	80044f6 <UART_SetConfig+0x86e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b01      	cmp	r3, #1
 8004444:	d053      	beq.n	80044ee <UART_SetConfig+0x866>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b02      	cmp	r3, #2
 800444c:	d04b      	beq.n	80044e6 <UART_SetConfig+0x85e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b03      	cmp	r3, #3
 8004454:	d043      	beq.n	80044de <UART_SetConfig+0x856>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b04      	cmp	r3, #4
 800445c:	d03b      	beq.n	80044d6 <UART_SetConfig+0x84e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2b05      	cmp	r3, #5
 8004464:	d033      	beq.n	80044ce <UART_SetConfig+0x846>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b06      	cmp	r3, #6
 800446c:	d02b      	beq.n	80044c6 <UART_SetConfig+0x83e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b07      	cmp	r3, #7
 8004474:	d023      	beq.n	80044be <UART_SetConfig+0x836>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b08      	cmp	r3, #8
 800447c:	d01b      	beq.n	80044b6 <UART_SetConfig+0x82e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b09      	cmp	r3, #9
 8004484:	d013      	beq.n	80044ae <UART_SetConfig+0x826>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b0a      	cmp	r3, #10
 800448c:	d00b      	beq.n	80044a6 <UART_SetConfig+0x81e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b0b      	cmp	r3, #11
 8004494:	d103      	bne.n	800449e <UART_SetConfig+0x816>
 8004496:	4bae      	ldr	r3, [pc, #696]	; (8004750 <UART_SetConfig+0xac8>)
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	e02e      	b.n	80044fc <UART_SetConfig+0x874>
 800449e:	4bad      	ldr	r3, [pc, #692]	; (8004754 <UART_SetConfig+0xacc>)
 80044a0:	f04f 0400 	mov.w	r4, #0
 80044a4:	e02a      	b.n	80044fc <UART_SetConfig+0x874>
 80044a6:	4bac      	ldr	r3, [pc, #688]	; (8004758 <UART_SetConfig+0xad0>)
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	e026      	b.n	80044fc <UART_SetConfig+0x874>
 80044ae:	4bab      	ldr	r3, [pc, #684]	; (800475c <UART_SetConfig+0xad4>)
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	e022      	b.n	80044fc <UART_SetConfig+0x874>
 80044b6:	4baa      	ldr	r3, [pc, #680]	; (8004760 <UART_SetConfig+0xad8>)
 80044b8:	f04f 0400 	mov.w	r4, #0
 80044bc:	e01e      	b.n	80044fc <UART_SetConfig+0x874>
 80044be:	4ba9      	ldr	r3, [pc, #676]	; (8004764 <UART_SetConfig+0xadc>)
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	e01a      	b.n	80044fc <UART_SetConfig+0x874>
 80044c6:	a49e      	add	r4, pc, #632	; (adr r4, 8004740 <UART_SetConfig+0xab8>)
 80044c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044cc:	e016      	b.n	80044fc <UART_SetConfig+0x874>
 80044ce:	4ba6      	ldr	r3, [pc, #664]	; (8004768 <UART_SetConfig+0xae0>)
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	e012      	b.n	80044fc <UART_SetConfig+0x874>
 80044d6:	4ba5      	ldr	r3, [pc, #660]	; (800476c <UART_SetConfig+0xae4>)
 80044d8:	f04f 0400 	mov.w	r4, #0
 80044dc:	e00e      	b.n	80044fc <UART_SetConfig+0x874>
 80044de:	a49a      	add	r4, pc, #616	; (adr r4, 8004748 <UART_SetConfig+0xac0>)
 80044e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044e4:	e00a      	b.n	80044fc <UART_SetConfig+0x874>
 80044e6:	4ba2      	ldr	r3, [pc, #648]	; (8004770 <UART_SetConfig+0xae8>)
 80044e8:	f04f 0400 	mov.w	r4, #0
 80044ec:	e006      	b.n	80044fc <UART_SetConfig+0x874>
 80044ee:	4ba1      	ldr	r3, [pc, #644]	; (8004774 <UART_SetConfig+0xaec>)
 80044f0:	f04f 0400 	mov.w	r4, #0
 80044f4:	e002      	b.n	80044fc <UART_SetConfig+0x874>
 80044f6:	4b97      	ldr	r3, [pc, #604]	; (8004754 <UART_SetConfig+0xacc>)
 80044f8:	f04f 0400 	mov.w	r4, #0
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6852      	ldr	r2, [r2, #4]
 8004500:	0852      	lsrs	r2, r2, #1
 8004502:	4611      	mov	r1, r2
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	eb13 0b01 	adds.w	fp, r3, r1
 800450c:	eb44 0c02 	adc.w	ip, r4, r2
 8004510:	4658      	mov	r0, fp
 8004512:	4661      	mov	r1, ip
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f04f 0400 	mov.w	r4, #0
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	f7fb fe7a 	bl	8000218 <__aeabi_uldivmod>
 8004524:	4603      	mov	r3, r0
 8004526:	460c      	mov	r4, r1
 8004528:	61fb      	str	r3, [r7, #28]
            break;
 800452a:	e14a      	b.n	80047c2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800452c:	f7ff f830 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004530:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4618      	mov	r0, r3
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d067      	beq.n	8004612 <UART_SetConfig+0x98a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b01      	cmp	r3, #1
 8004548:	d05e      	beq.n	8004608 <UART_SetConfig+0x980>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b02      	cmp	r3, #2
 8004550:	d055      	beq.n	80045fe <UART_SetConfig+0x976>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b03      	cmp	r3, #3
 8004558:	d04c      	beq.n	80045f4 <UART_SetConfig+0x96c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b04      	cmp	r3, #4
 8004560:	d043      	beq.n	80045ea <UART_SetConfig+0x962>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b05      	cmp	r3, #5
 8004568:	d03a      	beq.n	80045e0 <UART_SetConfig+0x958>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b06      	cmp	r3, #6
 8004570:	d031      	beq.n	80045d6 <UART_SetConfig+0x94e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b07      	cmp	r3, #7
 8004578:	d028      	beq.n	80045cc <UART_SetConfig+0x944>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b08      	cmp	r3, #8
 8004580:	d01f      	beq.n	80045c2 <UART_SetConfig+0x93a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b09      	cmp	r3, #9
 8004588:	d016      	beq.n	80045b8 <UART_SetConfig+0x930>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b0a      	cmp	r3, #10
 8004590:	d00d      	beq.n	80045ae <UART_SetConfig+0x926>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d104      	bne.n	80045a4 <UART_SetConfig+0x91c>
 800459a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	e03a      	b.n	800461a <UART_SetConfig+0x992>
 80045a4:	f04f 0301 	mov.w	r3, #1
 80045a8:	f04f 0400 	mov.w	r4, #0
 80045ac:	e035      	b.n	800461a <UART_SetConfig+0x992>
 80045ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80045b2:	f04f 0400 	mov.w	r4, #0
 80045b6:	e030      	b.n	800461a <UART_SetConfig+0x992>
 80045b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045bc:	f04f 0400 	mov.w	r4, #0
 80045c0:	e02b      	b.n	800461a <UART_SetConfig+0x992>
 80045c2:	f04f 0320 	mov.w	r3, #32
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	e026      	b.n	800461a <UART_SetConfig+0x992>
 80045cc:	f04f 0310 	mov.w	r3, #16
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	e021      	b.n	800461a <UART_SetConfig+0x992>
 80045d6:	f04f 030c 	mov.w	r3, #12
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	e01c      	b.n	800461a <UART_SetConfig+0x992>
 80045e0:	f04f 030a 	mov.w	r3, #10
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	e017      	b.n	800461a <UART_SetConfig+0x992>
 80045ea:	f04f 0308 	mov.w	r3, #8
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	e012      	b.n	800461a <UART_SetConfig+0x992>
 80045f4:	f04f 0306 	mov.w	r3, #6
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x992>
 80045fe:	f04f 0304 	mov.w	r3, #4
 8004602:	f04f 0400 	mov.w	r4, #0
 8004606:	e008      	b.n	800461a <UART_SetConfig+0x992>
 8004608:	f04f 0302 	mov.w	r3, #2
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	e003      	b.n	800461a <UART_SetConfig+0x992>
 8004612:	f04f 0301 	mov.w	r3, #1
 8004616:	f04f 0400 	mov.w	r4, #0
 800461a:	461a      	mov	r2, r3
 800461c:	4623      	mov	r3, r4
 800461e:	f7fb fdfb 	bl	8000218 <__aeabi_uldivmod>
 8004622:	4603      	mov	r3, r0
 8004624:	460c      	mov	r4, r1
 8004626:	4619      	mov	r1, r3
 8004628:	4622      	mov	r2, r4
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	0214      	lsls	r4, r2, #8
 8004634:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004638:	020b      	lsls	r3, r1, #8
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6852      	ldr	r2, [r2, #4]
 800463e:	0852      	lsrs	r2, r2, #1
 8004640:	4611      	mov	r1, r2
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	eb13 0b01 	adds.w	fp, r3, r1
 800464a:	eb44 0c02 	adc.w	ip, r4, r2
 800464e:	4658      	mov	r0, fp
 8004650:	4661      	mov	r1, ip
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	461a      	mov	r2, r3
 800465c:	4623      	mov	r3, r4
 800465e:	f7fb fddb 	bl	8000218 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	61fb      	str	r3, [r7, #28]
            break;
 8004668:	e0ab      	b.n	80047c2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8088 	beq.w	8004784 <UART_SetConfig+0xafc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b01      	cmp	r3, #1
 800467a:	d05b      	beq.n	8004734 <UART_SetConfig+0xaac>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b02      	cmp	r3, #2
 8004682:	d052      	beq.n	800472a <UART_SetConfig+0xaa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b03      	cmp	r3, #3
 800468a:	d04a      	beq.n	8004722 <UART_SetConfig+0xa9a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b04      	cmp	r3, #4
 8004692:	d041      	beq.n	8004718 <UART_SetConfig+0xa90>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b05      	cmp	r3, #5
 800469a:	d039      	beq.n	8004710 <UART_SetConfig+0xa88>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d031      	beq.n	8004708 <UART_SetConfig+0xa80>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b07      	cmp	r3, #7
 80046aa:	d028      	beq.n	80046fe <UART_SetConfig+0xa76>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d01f      	beq.n	80046f4 <UART_SetConfig+0xa6c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d016      	beq.n	80046ea <UART_SetConfig+0xa62>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b0a      	cmp	r3, #10
 80046c2:	d00d      	beq.n	80046e0 <UART_SetConfig+0xa58>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b0b      	cmp	r3, #11
 80046ca:	d104      	bne.n	80046d6 <UART_SetConfig+0xa4e>
 80046cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d0:	f04f 0400 	mov.w	r4, #0
 80046d4:	e05a      	b.n	800478c <UART_SetConfig+0xb04>
 80046d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	e055      	b.n	800478c <UART_SetConfig+0xb04>
 80046e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e4:	f04f 0400 	mov.w	r4, #0
 80046e8:	e050      	b.n	800478c <UART_SetConfig+0xb04>
 80046ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	e04b      	b.n	800478c <UART_SetConfig+0xb04>
 80046f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	e046      	b.n	800478c <UART_SetConfig+0xb04>
 80046fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004702:	f04f 0400 	mov.w	r4, #0
 8004706:	e041      	b.n	800478c <UART_SetConfig+0xb04>
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <UART_SetConfig+0xaf0>)
 800470a:	f04f 0400 	mov.w	r4, #0
 800470e:	e03d      	b.n	800478c <UART_SetConfig+0xb04>
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <UART_SetConfig+0xaf4>)
 8004712:	f04f 0400 	mov.w	r4, #0
 8004716:	e039      	b.n	800478c <UART_SetConfig+0xb04>
 8004718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800471c:	f04f 0400 	mov.w	r4, #0
 8004720:	e034      	b.n	800478c <UART_SetConfig+0xb04>
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <UART_SetConfig+0xaf8>)
 8004724:	f04f 0400 	mov.w	r4, #0
 8004728:	e030      	b.n	800478c <UART_SetConfig+0xb04>
 800472a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	e02b      	b.n	800478c <UART_SetConfig+0xb04>
 8004734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	e026      	b.n	800478c <UART_SetConfig+0xb04>
 800473e:	bf00      	nop
 8004740:	14585500 	.word	0x14585500
 8004744:	00000000 	.word	0x00000000
 8004748:	28b0aa00 	.word	0x28b0aa00
 800474c:	00000000 	.word	0x00000000
 8004750:	00f42400 	.word	0x00f42400
 8004754:	f4240000 	.word	0xf4240000
 8004758:	01e84800 	.word	0x01e84800
 800475c:	03d09000 	.word	0x03d09000
 8004760:	07a12000 	.word	0x07a12000
 8004764:	0f424000 	.word	0x0f424000
 8004768:	186a0000 	.word	0x186a0000
 800476c:	1e848000 	.word	0x1e848000
 8004770:	3d090000 	.word	0x3d090000
 8004774:	7a120000 	.word	0x7a120000
 8004778:	000aaa00 	.word	0x000aaa00
 800477c:	000ccc00 	.word	0x000ccc00
 8004780:	00155500 	.word	0x00155500
 8004784:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004788:	f04f 0400 	mov.w	r4, #0
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	0852      	lsrs	r2, r2, #1
 8004792:	4611      	mov	r1, r2
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	eb13 0b01 	adds.w	fp, r3, r1
 800479c:	eb44 0c02 	adc.w	ip, r4, r2
 80047a0:	4658      	mov	r0, fp
 80047a2:	4661      	mov	r1, ip
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4623      	mov	r3, r4
 80047b0:	f7fb fd32 	bl	8000218 <__aeabi_uldivmod>
 80047b4:	4603      	mov	r3, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	61fb      	str	r3, [r7, #28]
            break;
 80047ba:	e002      	b.n	80047c2 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	76fb      	strb	r3, [r7, #27]
            break;
 80047c0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c8:	d309      	bcc.n	80047de <UART_SetConfig+0xb56>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d0:	d205      	bcs.n	80047de <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	f000 bc18 	b.w	800500e <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	76fb      	strb	r3, [r7, #27]
 80047e2:	f000 bc14 	b.w	800500e <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	f040 8204 	bne.w	8004bfa <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80047f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	f200 81df 	bhi.w	8004bba <UART_SetConfig+0xf32>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0xb7c>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004829 	.word	0x08004829
 8004808:	080048e1 	.word	0x080048e1
 800480c:	08004999 	.word	0x08004999
 8004810:	08004bbb 	.word	0x08004bbb
 8004814:	08004a41 	.word	0x08004a41
 8004818:	08004bbb 	.word	0x08004bbb
 800481c:	08004bbb 	.word	0x08004bbb
 8004820:	08004bbb 	.word	0x08004bbb
 8004824:	08004af9 	.word	0x08004af9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe ff20 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 800482c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b00      	cmp	r3, #0
 8004834:	d044      	beq.n	80048c0 <UART_SetConfig+0xc38>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b01      	cmp	r3, #1
 800483c:	d03e      	beq.n	80048bc <UART_SetConfig+0xc34>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b02      	cmp	r3, #2
 8004844:	d038      	beq.n	80048b8 <UART_SetConfig+0xc30>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b03      	cmp	r3, #3
 800484c:	d032      	beq.n	80048b4 <UART_SetConfig+0xc2c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b04      	cmp	r3, #4
 8004854:	d02c      	beq.n	80048b0 <UART_SetConfig+0xc28>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b05      	cmp	r3, #5
 800485c:	d026      	beq.n	80048ac <UART_SetConfig+0xc24>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b06      	cmp	r3, #6
 8004864:	d020      	beq.n	80048a8 <UART_SetConfig+0xc20>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b07      	cmp	r3, #7
 800486c:	d01a      	beq.n	80048a4 <UART_SetConfig+0xc1c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b08      	cmp	r3, #8
 8004874:	d014      	beq.n	80048a0 <UART_SetConfig+0xc18>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b09      	cmp	r3, #9
 800487c:	d00e      	beq.n	800489c <UART_SetConfig+0xc14>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b0a      	cmp	r3, #10
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0xc10>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b0b      	cmp	r3, #11
 800488c:	d102      	bne.n	8004894 <UART_SetConfig+0xc0c>
 800488e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004892:	e016      	b.n	80048c2 <UART_SetConfig+0xc3a>
 8004894:	2301      	movs	r3, #1
 8004896:	e014      	b.n	80048c2 <UART_SetConfig+0xc3a>
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	e012      	b.n	80048c2 <UART_SetConfig+0xc3a>
 800489c:	2340      	movs	r3, #64	; 0x40
 800489e:	e010      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048a0:	2320      	movs	r3, #32
 80048a2:	e00e      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048a4:	2310      	movs	r3, #16
 80048a6:	e00c      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048a8:	230c      	movs	r3, #12
 80048aa:	e00a      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048ac:	230a      	movs	r3, #10
 80048ae:	e008      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048b0:	2308      	movs	r3, #8
 80048b2:	e006      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048b4:	2306      	movs	r3, #6
 80048b6:	e004      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048b8:	2304      	movs	r3, #4
 80048ba:	e002      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048bc:	2302      	movs	r3, #2
 80048be:	e000      	b.n	80048c2 <UART_SetConfig+0xc3a>
 80048c0:	2301      	movs	r3, #1
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	005a      	lsls	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	61fb      	str	r3, [r7, #28]
        break;
 80048de:	e16f      	b.n	8004bc0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e0:	f7fe feda 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80048e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d044      	beq.n	8004978 <UART_SetConfig+0xcf0>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d03e      	beq.n	8004974 <UART_SetConfig+0xcec>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d038      	beq.n	8004970 <UART_SetConfig+0xce8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b03      	cmp	r3, #3
 8004904:	d032      	beq.n	800496c <UART_SetConfig+0xce4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b04      	cmp	r3, #4
 800490c:	d02c      	beq.n	8004968 <UART_SetConfig+0xce0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b05      	cmp	r3, #5
 8004914:	d026      	beq.n	8004964 <UART_SetConfig+0xcdc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b06      	cmp	r3, #6
 800491c:	d020      	beq.n	8004960 <UART_SetConfig+0xcd8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b07      	cmp	r3, #7
 8004924:	d01a      	beq.n	800495c <UART_SetConfig+0xcd4>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b08      	cmp	r3, #8
 800492c:	d014      	beq.n	8004958 <UART_SetConfig+0xcd0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b09      	cmp	r3, #9
 8004934:	d00e      	beq.n	8004954 <UART_SetConfig+0xccc>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b0a      	cmp	r3, #10
 800493c:	d008      	beq.n	8004950 <UART_SetConfig+0xcc8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b0b      	cmp	r3, #11
 8004944:	d102      	bne.n	800494c <UART_SetConfig+0xcc4>
 8004946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800494a:	e016      	b.n	800497a <UART_SetConfig+0xcf2>
 800494c:	2301      	movs	r3, #1
 800494e:	e014      	b.n	800497a <UART_SetConfig+0xcf2>
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	e012      	b.n	800497a <UART_SetConfig+0xcf2>
 8004954:	2340      	movs	r3, #64	; 0x40
 8004956:	e010      	b.n	800497a <UART_SetConfig+0xcf2>
 8004958:	2320      	movs	r3, #32
 800495a:	e00e      	b.n	800497a <UART_SetConfig+0xcf2>
 800495c:	2310      	movs	r3, #16
 800495e:	e00c      	b.n	800497a <UART_SetConfig+0xcf2>
 8004960:	230c      	movs	r3, #12
 8004962:	e00a      	b.n	800497a <UART_SetConfig+0xcf2>
 8004964:	230a      	movs	r3, #10
 8004966:	e008      	b.n	800497a <UART_SetConfig+0xcf2>
 8004968:	2308      	movs	r3, #8
 800496a:	e006      	b.n	800497a <UART_SetConfig+0xcf2>
 800496c:	2306      	movs	r3, #6
 800496e:	e004      	b.n	800497a <UART_SetConfig+0xcf2>
 8004970:	2304      	movs	r3, #4
 8004972:	e002      	b.n	800497a <UART_SetConfig+0xcf2>
 8004974:	2302      	movs	r3, #2
 8004976:	e000      	b.n	800497a <UART_SetConfig+0xcf2>
 8004978:	2301      	movs	r3, #1
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	005a      	lsls	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	61fb      	str	r3, [r7, #28]
        break;
 8004996:	e113      	b.n	8004bc0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d043      	beq.n	8004a28 <UART_SetConfig+0xda0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d03d      	beq.n	8004a24 <UART_SetConfig+0xd9c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d037      	beq.n	8004a20 <UART_SetConfig+0xd98>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d031      	beq.n	8004a1c <UART_SetConfig+0xd94>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d02b      	beq.n	8004a18 <UART_SetConfig+0xd90>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d025      	beq.n	8004a14 <UART_SetConfig+0xd8c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d01f      	beq.n	8004a10 <UART_SetConfig+0xd88>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b07      	cmp	r3, #7
 80049d6:	d019      	beq.n	8004a0c <UART_SetConfig+0xd84>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d013      	beq.n	8004a08 <UART_SetConfig+0xd80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d00d      	beq.n	8004a04 <UART_SetConfig+0xd7c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b0a      	cmp	r3, #10
 80049ee:	d007      	beq.n	8004a00 <UART_SetConfig+0xd78>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b0b      	cmp	r3, #11
 80049f6:	d101      	bne.n	80049fc <UART_SetConfig+0xd74>
 80049f8:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <UART_SetConfig+0xfa8>)
 80049fa:	e016      	b.n	8004a2a <UART_SetConfig+0xda2>
 80049fc:	4b8d      	ldr	r3, [pc, #564]	; (8004c34 <UART_SetConfig+0xfac>)
 80049fe:	e014      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a00:	4b8d      	ldr	r3, [pc, #564]	; (8004c38 <UART_SetConfig+0xfb0>)
 8004a02:	e012      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a04:	4b8d      	ldr	r3, [pc, #564]	; (8004c3c <UART_SetConfig+0xfb4>)
 8004a06:	e010      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a08:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <UART_SetConfig+0xfb8>)
 8004a0a:	e00e      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a0c:	4b8d      	ldr	r3, [pc, #564]	; (8004c44 <UART_SetConfig+0xfbc>)
 8004a0e:	e00c      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a10:	4b8d      	ldr	r3, [pc, #564]	; (8004c48 <UART_SetConfig+0xfc0>)
 8004a12:	e00a      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a14:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <UART_SetConfig+0xfc4>)
 8004a16:	e008      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a18:	4b8d      	ldr	r3, [pc, #564]	; (8004c50 <UART_SetConfig+0xfc8>)
 8004a1a:	e006      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a1c:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <UART_SetConfig+0xfcc>)
 8004a1e:	e004      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a20:	4b8d      	ldr	r3, [pc, #564]	; (8004c58 <UART_SetConfig+0xfd0>)
 8004a22:	e002      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a24:	4b8d      	ldr	r3, [pc, #564]	; (8004c5c <UART_SetConfig+0xfd4>)
 8004a26:	e000      	b.n	8004a2a <UART_SetConfig+0xda2>
 8004a28:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <UART_SetConfig+0xfac>)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6852      	ldr	r2, [r2, #4]
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	61fb      	str	r3, [r7, #28]
        break;
 8004a3e:	e0bf      	b.n	8004bc0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a40:	f7fe fda6 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004a44:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d044      	beq.n	8004ad8 <UART_SetConfig+0xe50>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d03e      	beq.n	8004ad4 <UART_SetConfig+0xe4c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d038      	beq.n	8004ad0 <UART_SetConfig+0xe48>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d032      	beq.n	8004acc <UART_SetConfig+0xe44>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d02c      	beq.n	8004ac8 <UART_SetConfig+0xe40>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d026      	beq.n	8004ac4 <UART_SetConfig+0xe3c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d020      	beq.n	8004ac0 <UART_SetConfig+0xe38>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b07      	cmp	r3, #7
 8004a84:	d01a      	beq.n	8004abc <UART_SetConfig+0xe34>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d014      	beq.n	8004ab8 <UART_SetConfig+0xe30>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d00e      	beq.n	8004ab4 <UART_SetConfig+0xe2c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b0a      	cmp	r3, #10
 8004a9c:	d008      	beq.n	8004ab0 <UART_SetConfig+0xe28>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b0b      	cmp	r3, #11
 8004aa4:	d102      	bne.n	8004aac <UART_SetConfig+0xe24>
 8004aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aaa:	e016      	b.n	8004ada <UART_SetConfig+0xe52>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e014      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	e012      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	e00e      	b.n	8004ada <UART_SetConfig+0xe52>
 8004abc:	2310      	movs	r3, #16
 8004abe:	e00c      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	e00a      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	e008      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	e006      	b.n	8004ada <UART_SetConfig+0xe52>
 8004acc:	2306      	movs	r3, #6
 8004ace:	e004      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	e002      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e000      	b.n	8004ada <UART_SetConfig+0xe52>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	005a      	lsls	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	61fb      	str	r3, [r7, #28]
        break;
 8004af6:	e063      	b.n	8004bc0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04f      	beq.n	8004ba0 <UART_SetConfig+0xf18>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d048      	beq.n	8004b9a <UART_SetConfig+0xf12>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d041      	beq.n	8004b94 <UART_SetConfig+0xf0c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d03a      	beq.n	8004b8e <UART_SetConfig+0xf06>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d033      	beq.n	8004b88 <UART_SetConfig+0xf00>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d02c      	beq.n	8004b82 <UART_SetConfig+0xefa>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d025      	beq.n	8004b7c <UART_SetConfig+0xef4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d01e      	beq.n	8004b76 <UART_SetConfig+0xeee>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d017      	beq.n	8004b70 <UART_SetConfig+0xee8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b09      	cmp	r3, #9
 8004b46:	d010      	beq.n	8004b6a <UART_SetConfig+0xee2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b0a      	cmp	r3, #10
 8004b4e:	d009      	beq.n	8004b64 <UART_SetConfig+0xedc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b0b      	cmp	r3, #11
 8004b56:	d102      	bne.n	8004b5e <UART_SetConfig+0xed6>
 8004b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5c:	e022      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b62:	e01f      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b68:	e01c      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6e:	e019      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b74:	e016      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b7a:	e013      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b7c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004b80:	e010      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b82:	f641 1398 	movw	r3, #6552	; 0x1998
 8004b86:	e00d      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b8c:	e00a      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b8e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004b92:	e007      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b98:	e004      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9e:	e001      	b.n	8004ba4 <UART_SetConfig+0xf1c>
 8004ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6852      	ldr	r2, [r2, #4]
 8004ba8:	0852      	lsrs	r2, r2, #1
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	61fb      	str	r3, [r7, #28]
        break;
 8004bb8:	e002      	b.n	8004bc0 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	76fb      	strb	r3, [r7, #27]
        break;
 8004bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	d916      	bls.n	8004bf4 <UART_SetConfig+0xf6c>
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d212      	bcs.n	8004bf4 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f023 030f 	bic.w	r3, r3, #15
 8004bd6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	89fb      	ldrh	r3, [r7, #14]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	89fa      	ldrh	r2, [r7, #14]
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	e20c      	b.n	800500e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	76fb      	strb	r3, [r7, #27]
 8004bf8:	e209      	b.n	800500e <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	f200 81f4 	bhi.w	8004fec <UART_SetConfig+0x1364>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0xf84>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004d17 	.word	0x08004d17
 8004c14:	08004dcd 	.word	0x08004dcd
 8004c18:	08004fed 	.word	0x08004fed
 8004c1c:	08004e77 	.word	0x08004e77
 8004c20:	08004fed 	.word	0x08004fed
 8004c24:	08004fed 	.word	0x08004fed
 8004c28:	08004fed 	.word	0x08004fed
 8004c2c:	08004f2d 	.word	0x08004f2d
 8004c30:	0001e848 	.word	0x0001e848
 8004c34:	01e84800 	.word	0x01e84800
 8004c38:	0003d090 	.word	0x0003d090
 8004c3c:	0007a120 	.word	0x0007a120
 8004c40:	000f4240 	.word	0x000f4240
 8004c44:	001e8480 	.word	0x001e8480
 8004c48:	0028b0aa 	.word	0x0028b0aa
 8004c4c:	0030d400 	.word	0x0030d400
 8004c50:	003d0900 	.word	0x003d0900
 8004c54:	00516154 	.word	0x00516154
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fd04 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004c64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d044      	beq.n	8004cf8 <UART_SetConfig+0x1070>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d03e      	beq.n	8004cf4 <UART_SetConfig+0x106c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d038      	beq.n	8004cf0 <UART_SetConfig+0x1068>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d032      	beq.n	8004cec <UART_SetConfig+0x1064>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d02c      	beq.n	8004ce8 <UART_SetConfig+0x1060>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d026      	beq.n	8004ce4 <UART_SetConfig+0x105c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d020      	beq.n	8004ce0 <UART_SetConfig+0x1058>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d01a      	beq.n	8004cdc <UART_SetConfig+0x1054>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d014      	beq.n	8004cd8 <UART_SetConfig+0x1050>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	d00e      	beq.n	8004cd4 <UART_SetConfig+0x104c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b0a      	cmp	r3, #10
 8004cbc:	d008      	beq.n	8004cd0 <UART_SetConfig+0x1048>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b0b      	cmp	r3, #11
 8004cc4:	d102      	bne.n	8004ccc <UART_SetConfig+0x1044>
 8004cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cca:	e016      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e014      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	e012      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cd4:	2340      	movs	r3, #64	; 0x40
 8004cd6:	e010      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cd8:	2320      	movs	r3, #32
 8004cda:	e00e      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	e00c      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	e00a      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004ce4:	230a      	movs	r3, #10
 8004ce6:	e008      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	e006      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cec:	2306      	movs	r3, #6
 8004cee:	e004      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	e002      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e000      	b.n	8004cfa <UART_SetConfig+0x1072>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	441a      	add	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	61fb      	str	r3, [r7, #28]
        break;
 8004d14:	e16d      	b.n	8004ff2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d16:	f7fe fcbf 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8004d1a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d044      	beq.n	8004dae <UART_SetConfig+0x1126>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d03e      	beq.n	8004daa <UART_SetConfig+0x1122>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d038      	beq.n	8004da6 <UART_SetConfig+0x111e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d032      	beq.n	8004da2 <UART_SetConfig+0x111a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d02c      	beq.n	8004d9e <UART_SetConfig+0x1116>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d026      	beq.n	8004d9a <UART_SetConfig+0x1112>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2b06      	cmp	r3, #6
 8004d52:	d020      	beq.n	8004d96 <UART_SetConfig+0x110e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	d01a      	beq.n	8004d92 <UART_SetConfig+0x110a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d014      	beq.n	8004d8e <UART_SetConfig+0x1106>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b09      	cmp	r3, #9
 8004d6a:	d00e      	beq.n	8004d8a <UART_SetConfig+0x1102>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b0a      	cmp	r3, #10
 8004d72:	d008      	beq.n	8004d86 <UART_SetConfig+0x10fe>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b0b      	cmp	r3, #11
 8004d7a:	d102      	bne.n	8004d82 <UART_SetConfig+0x10fa>
 8004d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d80:	e016      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e014      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	e012      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	e010      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d8e:	2320      	movs	r3, #32
 8004d90:	e00e      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d92:	2310      	movs	r3, #16
 8004d94:	e00c      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d96:	230c      	movs	r3, #12
 8004d98:	e00a      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	e008      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004d9e:	2308      	movs	r3, #8
 8004da0:	e006      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004da2:	2306      	movs	r3, #6
 8004da4:	e004      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004da6:	2304      	movs	r3, #4
 8004da8:	e002      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e000      	b.n	8004db0 <UART_SetConfig+0x1128>
 8004dae:	2301      	movs	r3, #1
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
        break;
 8004dca:	e112      	b.n	8004ff2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d044      	beq.n	8004e5e <UART_SetConfig+0x11d6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d03e      	beq.n	8004e5a <UART_SetConfig+0x11d2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d038      	beq.n	8004e56 <UART_SetConfig+0x11ce>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d032      	beq.n	8004e52 <UART_SetConfig+0x11ca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d02c      	beq.n	8004e4e <UART_SetConfig+0x11c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d026      	beq.n	8004e4a <UART_SetConfig+0x11c2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d020      	beq.n	8004e46 <UART_SetConfig+0x11be>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b07      	cmp	r3, #7
 8004e0a:	d01a      	beq.n	8004e42 <UART_SetConfig+0x11ba>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d014      	beq.n	8004e3e <UART_SetConfig+0x11b6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d00e      	beq.n	8004e3a <UART_SetConfig+0x11b2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	2b0a      	cmp	r3, #10
 8004e22:	d008      	beq.n	8004e36 <UART_SetConfig+0x11ae>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	2b0b      	cmp	r3, #11
 8004e2a:	d102      	bne.n	8004e32 <UART_SetConfig+0x11aa>
 8004e2c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e30:	e016      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <UART_SetConfig+0x13b0>)
 8004e34:	e014      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e36:	4b81      	ldr	r3, [pc, #516]	; (800503c <UART_SetConfig+0x13b4>)
 8004e38:	e012      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e3a:	4b81      	ldr	r3, [pc, #516]	; (8005040 <UART_SetConfig+0x13b8>)
 8004e3c:	e010      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e3e:	4b81      	ldr	r3, [pc, #516]	; (8005044 <UART_SetConfig+0x13bc>)
 8004e40:	e00e      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e42:	4b81      	ldr	r3, [pc, #516]	; (8005048 <UART_SetConfig+0x13c0>)
 8004e44:	e00c      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e46:	4b81      	ldr	r3, [pc, #516]	; (800504c <UART_SetConfig+0x13c4>)
 8004e48:	e00a      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e4a:	4b81      	ldr	r3, [pc, #516]	; (8005050 <UART_SetConfig+0x13c8>)
 8004e4c:	e008      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e4e:	4b81      	ldr	r3, [pc, #516]	; (8005054 <UART_SetConfig+0x13cc>)
 8004e50:	e006      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e52:	4b81      	ldr	r3, [pc, #516]	; (8005058 <UART_SetConfig+0x13d0>)
 8004e54:	e004      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e56:	4b81      	ldr	r3, [pc, #516]	; (800505c <UART_SetConfig+0x13d4>)
 8004e58:	e002      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e5a:	4b81      	ldr	r3, [pc, #516]	; (8005060 <UART_SetConfig+0x13d8>)
 8004e5c:	e000      	b.n	8004e60 <UART_SetConfig+0x11d8>
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <UART_SetConfig+0x13b0>)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	0852      	lsrs	r2, r2, #1
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	61fb      	str	r3, [r7, #28]
        break;
 8004e74:	e0bd      	b.n	8004ff2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e76:	f7fe fb8b 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004e7a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d044      	beq.n	8004f0e <UART_SetConfig+0x1286>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d03e      	beq.n	8004f0a <UART_SetConfig+0x1282>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d038      	beq.n	8004f06 <UART_SetConfig+0x127e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d032      	beq.n	8004f02 <UART_SetConfig+0x127a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d02c      	beq.n	8004efe <UART_SetConfig+0x1276>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d026      	beq.n	8004efa <UART_SetConfig+0x1272>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d020      	beq.n	8004ef6 <UART_SetConfig+0x126e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b07      	cmp	r3, #7
 8004eba:	d01a      	beq.n	8004ef2 <UART_SetConfig+0x126a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d014      	beq.n	8004eee <UART_SetConfig+0x1266>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d00e      	beq.n	8004eea <UART_SetConfig+0x1262>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b0a      	cmp	r3, #10
 8004ed2:	d008      	beq.n	8004ee6 <UART_SetConfig+0x125e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b0b      	cmp	r3, #11
 8004eda:	d102      	bne.n	8004ee2 <UART_SetConfig+0x125a>
 8004edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee0:	e016      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e014      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	e012      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	e010      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004eee:	2320      	movs	r3, #32
 8004ef0:	e00e      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	e00c      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	e00a      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004efa:	230a      	movs	r3, #10
 8004efc:	e008      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004efe:	2308      	movs	r3, #8
 8004f00:	e006      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004f02:	2306      	movs	r3, #6
 8004f04:	e004      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004f06:	2304      	movs	r3, #4
 8004f08:	e002      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e000      	b.n	8004f10 <UART_SetConfig+0x1288>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	61fb      	str	r3, [r7, #28]
        break;
 8004f2a:	e062      	b.n	8004ff2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d04e      	beq.n	8004fd2 <UART_SetConfig+0x134a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d047      	beq.n	8004fcc <UART_SetConfig+0x1344>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d040      	beq.n	8004fc6 <UART_SetConfig+0x133e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d039      	beq.n	8004fc0 <UART_SetConfig+0x1338>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d032      	beq.n	8004fba <UART_SetConfig+0x1332>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b05      	cmp	r3, #5
 8004f5a:	d02b      	beq.n	8004fb4 <UART_SetConfig+0x132c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b06      	cmp	r3, #6
 8004f62:	d024      	beq.n	8004fae <UART_SetConfig+0x1326>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d01d      	beq.n	8004fa8 <UART_SetConfig+0x1320>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d016      	beq.n	8004fa2 <UART_SetConfig+0x131a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d00f      	beq.n	8004f9c <UART_SetConfig+0x1314>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b0a      	cmp	r3, #10
 8004f82:	d008      	beq.n	8004f96 <UART_SetConfig+0x130e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b0b      	cmp	r3, #11
 8004f8a:	d101      	bne.n	8004f90 <UART_SetConfig+0x1308>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	e022      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f94:	e01f      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	e01c      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fa0:	e019      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	e016      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fac:	e013      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004fb2:	e010      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fb4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004fb8:	e00d      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fbe:	e00a      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fc0:	f241 5355 	movw	r3, #5461	; 0x1555
 8004fc4:	e007      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fca:	e004      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fd0:	e001      	b.n	8004fd6 <UART_SetConfig+0x134e>
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	0852      	lsrs	r2, r2, #1
 8004fdc:	441a      	add	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	61fb      	str	r3, [r7, #28]
        break;
 8004fea:	e002      	b.n	8004ff2 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	76fb      	strb	r3, [r7, #27]
        break;
 8004ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b0f      	cmp	r3, #15
 8004ff6:	d908      	bls.n	800500a <UART_SetConfig+0x1382>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffe:	d204      	bcs.n	800500a <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e001      	b.n	800500e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800502a:	7efb      	ldrb	r3, [r7, #27]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005036:	bf00      	nop
 8005038:	00f42400 	.word	0x00f42400
 800503c:	0001e848 	.word	0x0001e848
 8005040:	0003d090 	.word	0x0003d090
 8005044:	0007a120 	.word	0x0007a120
 8005048:	000f4240 	.word	0x000f4240
 800504c:	00145855 	.word	0x00145855
 8005050:	00186a00 	.word	0x00186a00
 8005054:	001e8480 	.word	0x001e8480
 8005058:	0028b0aa 	.word	0x0028b0aa
 800505c:	003d0900 	.word	0x003d0900
 8005060:	007a1200 	.word	0x007a1200

08005064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01a      	beq.n	800517a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d10a      	bne.n	800517a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051b8:	f7fb fd68 	bl	8000c8c <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10e      	bne.n	80051ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f82c 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e022      	b.n	8005230 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d10e      	bne.n	8005216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f816 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e00c      	b.n	8005230 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005248:	e02c      	b.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d028      	beq.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fb fd1b 	bl	8000c8c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <UART_WaitOnFlagUntilTimeout+0x30>
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11d      	bne.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005276:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e00f      	b.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d0c3      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80052de:	2302      	movs	r3, #2
 80052e0:	e027      	b.n	8005332 <HAL_UARTEx_DisableFifoMode+0x66>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2224      	movs	r2, #36	; 0x24
 80052ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005352:	2302      	movs	r3, #2
 8005354:	e02d      	b.n	80053b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2224      	movs	r2, #36	; 0x24
 8005362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f850 	bl	8005438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e02d      	b.n	800542e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2224      	movs	r2, #36	; 0x24
 80053de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f812 	bl	8005438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <UARTEx_SetNbDataToProcess+0xc8>)
 8005442:	f107 0314 	add.w	r3, r7, #20
 8005446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800544a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800544e:	4a2d      	ldr	r2, [pc, #180]	; (8005504 <UARTEx_SetNbDataToProcess+0xcc>)
 8005450:	f107 030c 	add.w	r3, r7, #12
 8005454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005458:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005474:	e03d      	b.n	80054f2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005476:	2308      	movs	r3, #8
 8005478:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800547a:	2308      	movs	r3, #8
 800547c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	0e5b      	lsrs	r3, r3, #25
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	0f5b      	lsrs	r3, r3, #29
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800549e:	7fbb      	ldrb	r3, [r7, #30]
 80054a0:	7f3a      	ldrb	r2, [r7, #28]
 80054a2:	f107 0120 	add.w	r1, r7, #32
 80054a6:	440a      	add	r2, r1
 80054a8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	7f3a      	ldrb	r2, [r7, #28]
 80054b2:	f107 0120 	add.w	r1, r7, #32
 80054b6:	440a      	add	r2, r1
 80054b8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80054bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
 80054ca:	7f7a      	ldrb	r2, [r7, #29]
 80054cc:	f107 0120 	add.w	r1, r7, #32
 80054d0:	440a      	add	r2, r1
 80054d2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	7f7a      	ldrb	r2, [r7, #29]
 80054dc:	f107 0120 	add.w	r1, r7, #32
 80054e0:	440a      	add	r2, r1
 80054e2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80054e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054f2:	bf00      	nop
 80054f4:	3724      	adds	r7, #36	; 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	08005578 	.word	0x08005578
 8005504:	08005580 	.word	0x08005580

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0d      	ldr	r6, [pc, #52]	; (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	; (8005544 <__libc_init_array+0x3c>)
 800550e:	1ba4      	subs	r4, r4, r6
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2500      	movs	r5, #0
 8005514:	42a5      	cmp	r5, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4e0b      	ldr	r6, [pc, #44]	; (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	; (800554c <__libc_init_array+0x44>)
 800551c:	f000 f820 	bl	8005560 <_init>
 8005520:	1ba4      	subs	r4, r4, r6
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2500      	movs	r5, #0
 8005526:	42a5      	cmp	r5, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005530:	4798      	blx	r3
 8005532:	3501      	adds	r5, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800553a:	4798      	blx	r3
 800553c:	3501      	adds	r5, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	080055a8 	.word	0x080055a8
 8005544:	080055a8 	.word	0x080055a8
 8005548:	080055a8 	.word	0x080055a8
 800554c:	080055ac 	.word	0x080055ac

08005550 <memset>:
 8005550:	4402      	add	r2, r0
 8005552:	4603      	mov	r3, r0
 8005554:	4293      	cmp	r3, r2
 8005556:	d100      	bne.n	800555a <memset+0xa>
 8005558:	4770      	bx	lr
 800555a:	f803 1b01 	strb.w	r1, [r3], #1
 800555e:	e7f9      	b.n	8005554 <memset+0x4>

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
