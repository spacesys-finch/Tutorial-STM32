
UART_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  080081d0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  08008230  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  24000134  08008290  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000718  08008290  00020718  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025815  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a57  00000000  00000000  00045977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000493d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0004a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385f0  00000000  00000000  0004b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b97  00000000  00000000  00083e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015fb6c  00000000  00000000  0009a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  001fa590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007fec 	.word	0x08007fec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08007fec 	.word	0x08007fec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <BcdToInt>:
#endif /* __GNUC__ */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int BcdToInt(uint8_t num){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	return (num >> 4) * 10 + (num & 15);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	091b      	lsrs	r3, r3, #4
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	461a      	mov	r2, r3
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	4413      	add	r3, r2
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 ff3b 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f8f9 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fa81 	bl	8000bbc <MX_GPIO_Init>
  MX_ETH_Init();
 80006ba:	f000 f975 	bl	80009a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006be:	f000 f9ff 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c2:	f000 fa49 	bl	8000b58 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006c6:	f000 f9bb 	bl	8000a40 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // First, we need to initialize the time registers to a time
  // The DS1307 uses BCD format
  buf[0] = 0x00; // seconds register
 80006ca:	2300      	movs	r3, #0
 80006cc:	733b      	strb	r3, [r7, #12]
  buf[1] = 0x00; // 0 seconds and turn on oscillator (set CH bit to 0)
 80006ce:	2300      	movs	r3, #0
 80006d0:	737b      	strb	r3, [r7, #13]
  buf[2] = 0x00; // 0 minutes
 80006d2:	2300      	movs	r3, #0
 80006d4:	73bb      	strb	r3, [r7, #14]
  buf[3] = 0x00; // 0 minutes and 24h format
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
  buf[4] = 0x02; // Monday
 80006da:	2302      	movs	r3, #2
 80006dc:	743b      	strb	r3, [r7, #16]
  buf[5] = 0x25; // 25th
 80006de:	2325      	movs	r3, #37	; 0x25
 80006e0:	747b      	strb	r3, [r7, #17]
  buf[6] = 0x10; // October
 80006e2:	2310      	movs	r3, #16
 80006e4:	74bb      	strb	r3, [r7, #18]
  buf[7] = 0x21; // 2021
 80006e6:	2321      	movs	r3, #33	; 0x21
 80006e8:	74fb      	strb	r3, [r7, #19]
  buf[8] = 0x00; // don't need square wave output
 80006ea:	2300      	movs	r3, #0
 80006ec:	753b      	strb	r3, [r7, #20]

  // Reset reg pointer to seconds register and send initial values
  ret = HAL_I2C_Master_Transmit(&hi2c2, DS1307_ADDR, buf, 9, HAL_MAX_DELAY);
 80006ee:	23d0      	movs	r3, #208	; 0xd0
 80006f0:	b299      	uxth	r1, r3
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2309      	movs	r3, #9
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <main+0x1cc>)
 8000700:	f001 ff3c 	bl	800257c <HAL_I2C_Master_Transmit>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]
  if ( ret != HAL_OK ) {
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <main+0x6c>
	  printf("Error Tx\r\n");
 800070e:	485a      	ldr	r0, [pc, #360]	; (8000878 <main+0x1d0>)
 8000710:	f006 fd26 	bl	8007160 <puts>
  }

  while (1)
  {
	  // Reset reg pointer to seconds register
	  ret = HAL_I2C_Master_Transmit(&hi2c2, DS1307_ADDR, (uint8_t *const)&REG_SEC, 1, HAL_MAX_DELAY);
 8000714:	23d0      	movs	r3, #208	; 0xd0
 8000716:	b299      	uxth	r1, r3
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	4a56      	ldr	r2, [pc, #344]	; (800087c <main+0x1d4>)
 8000722:	4854      	ldr	r0, [pc, #336]	; (8000874 <main+0x1cc>)
 8000724:	f001 ff2a 	bl	800257c <HAL_I2C_Master_Transmit>
 8000728:	4603      	mov	r3, r0
 800072a:	75fb      	strb	r3, [r7, #23]
	  if ( ret != HAL_OK ) {
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <main+0x92>
		  printf("Error Tx\r\n");
 8000732:	4851      	ldr	r0, [pc, #324]	; (8000878 <main+0x1d0>)
 8000734:	f006 fd14 	bl	8007160 <puts>
 8000738:	e097      	b.n	800086a <main+0x1c2>
	  } else {
		  // After all our hard work initializing the registers, read the date and time
		  ret = HAL_I2C_Master_Receive(&hi2c2, DS1307_ADDR, buf, 8, HAL_MAX_DELAY);
 800073a:	23d0      	movs	r3, #208	; 0xd0
 800073c:	b299      	uxth	r1, r3
 800073e:	f107 020c 	add.w	r2, r7, #12
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2308      	movs	r3, #8
 800074a:	484a      	ldr	r0, [pc, #296]	; (8000874 <main+0x1cc>)
 800074c:	f002 f80a 	bl	8002764 <HAL_I2C_Master_Receive>
 8000750:	4603      	mov	r3, r0
 8000752:	75fb      	strb	r3, [r7, #23]
		  if ( ret != HAL_OK ) {
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <main+0xba>
		  		  printf("Error Tx\r\n");
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <main+0x1d0>)
 800075c:	f006 fd00 	bl	8007160 <puts>
 8000760:	e083      	b.n	800086a <main+0x1c2>
		  } else {
			  switch(buf[3]){
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	3b01      	subs	r3, #1
 8000766:	2b06      	cmp	r3, #6
 8000768:	d84a      	bhi.n	8000800 <main+0x158>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <main+0xc8>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007a3 	.word	0x080007a3
 8000778:	080007b9 	.word	0x080007b9
 800077c:	080007c7 	.word	0x080007c7
 8000780:	080007d3 	.word	0x080007d3
 8000784:	080007df 	.word	0x080007df
 8000788:	080007f5 	.word	0x080007f5
			  case 1:
				  strcpy(day, "Sunday");
 800078c:	463b      	mov	r3, r7
 800078e:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <main+0x1d8>)
 8000790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000794:	6018      	str	r0, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	8019      	strh	r1, [r3, #0]
 800079a:	3302      	adds	r3, #2
 800079c:	0c0a      	lsrs	r2, r1, #16
 800079e:	701a      	strb	r2, [r3, #0]
			  	  break;
 80007a0:	e036      	b.n	8000810 <main+0x168>
			  case 2:
				  strcpy(day, "Monday");
 80007a2:	463b      	mov	r3, r7
 80007a4:	4a37      	ldr	r2, [pc, #220]	; (8000884 <main+0x1dc>)
 80007a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007aa:	6018      	str	r0, [r3, #0]
 80007ac:	3304      	adds	r3, #4
 80007ae:	8019      	strh	r1, [r3, #0]
 80007b0:	3302      	adds	r3, #2
 80007b2:	0c0a      	lsrs	r2, r1, #16
 80007b4:	701a      	strb	r2, [r3, #0]
				  break;
 80007b6:	e02b      	b.n	8000810 <main+0x168>
			  case 3:
				  strcpy(day, "Tuesday");
 80007b8:	463b      	mov	r3, r7
 80007ba:	4a33      	ldr	r2, [pc, #204]	; (8000888 <main+0x1e0>)
 80007bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c0:	e883 0003 	stmia.w	r3, {r0, r1}
			  	  break;
 80007c4:	e024      	b.n	8000810 <main+0x168>
			  case 4:
				  strcpy(day, "Wednesday");
 80007c6:	4a31      	ldr	r2, [pc, #196]	; (800088c <main+0x1e4>)
 80007c8:	463b      	mov	r3, r7
 80007ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80007cc:	c303      	stmia	r3!, {r0, r1}
 80007ce:	801a      	strh	r2, [r3, #0]
				  break;
 80007d0:	e01e      	b.n	8000810 <main+0x168>
			  case 5:
				  strcpy(day, "Thursday");
 80007d2:	463b      	mov	r3, r7
 80007d4:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <main+0x1e8>)
 80007d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d8:	c303      	stmia	r3!, {r0, r1}
 80007da:	701a      	strb	r2, [r3, #0]
				  break;
 80007dc:	e018      	b.n	8000810 <main+0x168>
			  case 6:
				  strcpy(day, "Friday");
 80007de:	463b      	mov	r3, r7
 80007e0:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <main+0x1ec>)
 80007e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e6:	6018      	str	r0, [r3, #0]
 80007e8:	3304      	adds	r3, #4
 80007ea:	8019      	strh	r1, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	0c0a      	lsrs	r2, r1, #16
 80007f0:	701a      	strb	r2, [r3, #0]
				  break;
 80007f2:	e00d      	b.n	8000810 <main+0x168>
			  case 7:
				  strcpy(day, "Saturday");
 80007f4:	463b      	mov	r3, r7
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <main+0x1f0>)
 80007f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fa:	c303      	stmia	r3!, {r0, r1}
 80007fc:	701a      	strb	r2, [r3, #0]
				  break;
 80007fe:	e007      	b.n	8000810 <main+0x168>
			  default:
				  strcpy(day, "Error");
 8000800:	463b      	mov	r3, r7
 8000802:	4a26      	ldr	r2, [pc, #152]	; (800089c <main+0x1f4>)
 8000804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000808:	6018      	str	r0, [r3, #0]
 800080a:	3304      	adds	r3, #4
 800080c:	8019      	strh	r1, [r3, #0]
				  break;
 800080e:	bf00      	nop
			  }

			  printf("%s, %d/%d/%d", day, BcdToInt(buf[4]), BcdToInt(buf[5]), BcdToInt(buf[6]));
 8000810:	7c3b      	ldrb	r3, [r7, #16]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff30 	bl	8000678 <BcdToInt>
 8000818:	4604      	mov	r4, r0
 800081a:	7c7b      	ldrb	r3, [r7, #17]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff2b 	bl	8000678 <BcdToInt>
 8000822:	4605      	mov	r5, r0
 8000824:	7cbb      	ldrb	r3, [r7, #18]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff26 	bl	8000678 <BcdToInt>
 800082c:	4603      	mov	r3, r0
 800082e:	4639      	mov	r1, r7
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	462b      	mov	r3, r5
 8000834:	4622      	mov	r2, r4
 8000836:	481a      	ldr	r0, [pc, #104]	; (80008a0 <main+0x1f8>)
 8000838:	f006 fc0c 	bl	8007054 <iprintf>
			  printf(" %d:%d:%d\r\n", BcdToInt(buf[2]), BcdToInt(buf[1]), BcdToInt(buf[0] & 0x7f));
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff1a 	bl	8000678 <BcdToInt>
 8000844:	4604      	mov	r4, r0
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff15 	bl	8000678 <BcdToInt>
 800084e:	4605      	mov	r5, r0
 8000850:	7b3b      	ldrb	r3, [r7, #12]
 8000852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff0d 	bl	8000678 <BcdToInt>
 800085e:	4603      	mov	r3, r0
 8000860:	462a      	mov	r2, r5
 8000862:	4621      	mov	r1, r4
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <main+0x1fc>)
 8000866:	f006 fbf5 	bl	8007054 <iprintf>
		  }
	  }
	// Wait
	HAL_Delay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f000 feed 	bl	800164c <HAL_Delay>
	  ret = HAL_I2C_Master_Transmit(&hi2c2, DS1307_ADDR, (uint8_t *const)&REG_SEC, 1, HAL_MAX_DELAY);
 8000872:	e74f      	b.n	8000714 <main+0x6c>
 8000874:	240005fc 	.word	0x240005fc
 8000878:	08008004 	.word	0x08008004
 800087c:	08008078 	.word	0x08008078
 8000880:	08008010 	.word	0x08008010
 8000884:	08008018 	.word	0x08008018
 8000888:	08008020 	.word	0x08008020
 800088c:	08008028 	.word	0x08008028
 8000890:	08008034 	.word	0x08008034
 8000894:	08008040 	.word	0x08008040
 8000898:	08008048 	.word	0x08008048
 800089c:	08008054 	.word	0x08008054
 80008a0:	0800805c 	.word	0x0800805c
 80008a4:	0800806c 	.word	0x0800806c

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	; 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fbc4 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fbbe 	bl	8007044 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f002 fc01 	bl	80030d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <SystemClock_Config+0xf8>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <SystemClock_Config+0xf8>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <SystemClock_Config+0xf8>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <SystemClock_Config+0xfc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f0:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <SystemClock_Config+0xfc>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <SystemClock_Config+0xfc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <SystemClock_Config+0xfc>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091e:	2301      	movs	r3, #1
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000922:	2340      	movs	r3, #64	; 0x40
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000932:	2318      	movs	r3, #24
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000942:	230c      	movs	r3, #12
 8000944:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
 8000948:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fc06 	bl	8003164 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800095e:	f000 fa3d 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	233f      	movs	r3, #63	; 0x3f
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fffc 	bl	8003984 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000992:	f000 fa23 	bl	8000ddc <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	; 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024800 	.word	0x58024800

080009a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ETH_Init+0x80>)
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <MX_ETH_Init+0x84>)
 80009b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ETH_Init+0x88>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ETH_Init+0x88>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ETH_Init+0x88>)
 80009c0:	22e1      	movs	r2, #225	; 0xe1
 80009c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ETH_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ETH_Init+0x88>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ETH_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_ETH_Init+0x80>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_ETH_Init+0x88>)
 80009da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_ETH_Init+0x80>)
 80009de:	2201      	movs	r2, #1
 80009e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_ETH_Init+0x80>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_ETH_Init+0x8c>)
 80009e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ETH_Init+0x80>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_ETH_Init+0x90>)
 80009ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_ETH_Init+0x80>)
 80009f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_ETH_Init+0x80>)
 80009f8:	f000 ff50 	bl	800189c <HAL_ETH_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 f9eb 	bl	8000ddc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a0c:	f006 fb1a 	bl	8007044 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a12:	2221      	movs	r2, #33	; 0x21
 8000a14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000648 	.word	0x24000648
 8000a2c:	40028000 	.word	0x40028000
 8000a30:	24000150 	.word	0x24000150
 8000a34:	240000d4 	.word	0x240000d4
 8000a38:	24000074 	.word	0x24000074
 8000a3c:	240006d0 	.word	0x240006d0

08000a40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C2_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C2_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a7c:	f001 fcee 	bl	800245c <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 f9a9 	bl	8000ddc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a8e:	f002 f93f 	bl	8002d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f9a0 	bl	8000ddc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000aa0:	f002 f981 	bl	8002da6 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f997 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	240005fc 	.word	0x240005fc
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	10707dbc 	.word	0x10707dbc

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <MX_USART3_UART_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b0a:	f004 fe29 	bl	8005760 <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f962 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f005 fee0 	bl	80068e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f959 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f005 ff15 	bl	800695c <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f950 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f005 fe96 	bl	800686e <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f948 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	24000164 	.word	0x24000164
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2209      	movs	r2, #9
 8000b66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba0:	f002 f94d 	bl	8002e3e <HAL_PCD_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000baa:	f000 f917 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	240001f4 	.word	0x240001f4
 8000bb8:	40080000 	.word	0x40080000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a67      	ldr	r2, [pc, #412]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf0:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a60      	ldr	r2, [pc, #384]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b5d      	ldr	r3, [pc, #372]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a58      	ldr	r2, [pc, #352]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b52      	ldr	r3, [pc, #328]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a51      	ldr	r2, [pc, #324]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a49      	ldr	r2, [pc, #292]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x1bc>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <MX_GPIO_Init+0x1c0>)
 8000cca:	f001 fbad 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <MX_GPIO_Init+0x1c4>)
 8000cd6:	f001 fba7 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4829      	ldr	r0, [pc, #164]	; (8000d84 <MX_GPIO_Init+0x1c8>)
 8000ce0:	f001 fba2 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4823      	ldr	r0, [pc, #140]	; (8000d88 <MX_GPIO_Init+0x1cc>)
 8000cfa:	f001 f9e5 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cfe:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4819      	ldr	r0, [pc, #100]	; (8000d7c <MX_GPIO_Init+0x1c0>)
 8000d18:	f001 f9d6 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_GPIO_Init+0x1c4>)
 8000d36:	f001 f9c7 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x1d0>)
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <MX_GPIO_Init+0x1d4>)
 8000d4e:	f001 f9bb 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d52:	2302      	movs	r3, #2
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_GPIO_Init+0x1c8>)
 8000d6a:	f001 f9ad 	bl	80020c8 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58020c00 	.word	0x58020c00
 8000d84:	58021000 	.word	0x58021000
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	11110000 	.word	0x11110000
 8000d90:	58021800 	.word	0x58021800

08000d94 <__io_putchar>:
  * @brief  Retargets the C library printf and scanf functions to the UART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d9c:	1d39      	adds	r1, r7, #4
 8000d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da2:	2201      	movs	r2, #1
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <__io_putchar+0x20>)
 8000da6:	f004 fd2b 	bl	8005800 <HAL_UART_Transmit>

  return ch;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000164 	.word	0x24000164

08000db8 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000dbe:	1df9      	adds	r1, r7, #7
 8000dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <__io_getchar+0x20>)
 8000dc8:	f004 fdb0 	bl	800592c <HAL_UART_Receive>

	return ch;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	24000164 	.word	0x24000164

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_MspInit+0x30>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x30>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x30>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	58024400 	.word	0x58024400

08000e1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_ETH_MspInit+0x184>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	f040 80ab 	bne.w	8000f96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e40:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e46:	4a57      	ldr	r2, [pc, #348]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e50:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e5e:	4b51      	ldr	r3, [pc, #324]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e7c:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e82:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e8c:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f12:	2332      	movs	r3, #50	; 0x32
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f22:	230b      	movs	r3, #11
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <HAL_ETH_MspInit+0x18c>)
 8000f2e:	f001 f8cb 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f32:	2386      	movs	r3, #134	; 0x86
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f42:	230b      	movs	r3, #11
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_ETH_MspInit+0x190>)
 8000f4e:	f001 f8bb 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f64:	230b      	movs	r3, #11
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <HAL_ETH_MspInit+0x194>)
 8000f70:	f001 f8aa 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f86:	230b      	movs	r3, #11
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <HAL_ETH_MspInit+0x198>)
 8000f92:	f001 f899 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40028000 	.word	0x40028000
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020800 	.word	0x58020800
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	58020400 	.word	0x58020400
 8000fb4:	58021800 	.word	0x58021800

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0b8      	sub	sp, #224	; 0xe0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	22bc      	movs	r2, #188	; 0xbc
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 f833 	bl	8007044 <memset>
  if(hi2c->Instance==I2C2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a24      	ldr	r2, [pc, #144]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d141      	bne.n	800106c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 f850 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001002:	f7ff feeb 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001024:	2303      	movs	r3, #3
 8001026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800103c:	2304      	movs	r3, #4
 800103e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001042:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <HAL_I2C_MspInit+0xc4>)
 800104a:	f001 f83d 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 8001050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 8001056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 8001060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37e0      	adds	r7, #224	; 0xe0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40005800 	.word	0x40005800
 8001078:	58024400 	.word	0x58024400
 800107c:	58021400 	.word	0x58021400

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b8      	sub	sp, #224	; 0xe0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	22bc      	movs	r2, #188	; 0xbc
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 ffcf 	bl	8007044 <memset>
  if(huart->Instance==USART3)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_UART_MspInit+0xc0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d142      	bne.n	8001136 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 ffec 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ca:	f7ff fe87 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d4:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_UART_MspInit+0xc4>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800110a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001124:	2307      	movs	r3, #7
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_UART_MspInit+0xc8>)
 8001132:	f000 ffc9 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	37e0      	adds	r7, #224	; 0xe0
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40004800 	.word	0x40004800
 8001144:	58024400 	.word	0x58024400
 8001148:	58020c00 	.word	0x58020c00

0800114c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0b8      	sub	sp, #224	; 0xe0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	22bc      	movs	r2, #188	; 0xbc
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f005 ff69 	bl	8007044 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_PCD_MspInit+0xc8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d146      	bne.n	800120a <HAL_PCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800117c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001182:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f002 ff84 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800119a:	f7ff fe1f 	bl	8000ddc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800119e:	f001 ffd1 	bl	8003144 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011da:	230a      	movs	r3, #10
 80011dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <HAL_PCD_MspInit+0xd0>)
 80011e8:	f000 ff6e 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_PCD_MspInit+0xcc>)
 80011fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	37e0      	adds	r7, #224	; 0xe0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40080000 	.word	0x40080000
 8001218:	58024400 	.word	0x58024400
 800121c:	58020000 	.word	0x58020000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f9ce 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00a      	b.n	800129c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001286:	f7ff fd97 	bl	8000db8 <__io_getchar>
 800128a:	4601      	mov	r1, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf0      	blt.n	8001286 <_read+0x12>
	}

return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e009      	b.n	80012d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fd63 	bl	8000d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf1      	blt.n	80012c0 <_write+0x12>
	}
	return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_close>:

int _close(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	605a      	str	r2, [r3, #4]
	return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_isatty>:

int _isatty(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	return 1;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f005 fe36 	bl	8006ff0 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	24080000 	.word	0x24080000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	24000158 	.word	0x24000158
 80013b8:	24000718 	.word	0x24000718

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <SystemInit+0xec>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <SystemInit+0xec>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <SystemInit+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	2b06      	cmp	r3, #6
 80013da:	d807      	bhi.n	80013ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <SystemInit+0xf0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 030f 	bic.w	r3, r3, #15
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <SystemInit+0xf0>)
 80013e6:	f043 0307 	orr.w	r3, r3, #7
 80013ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <SystemInit+0xf4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <SystemInit+0xf4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <SystemInit+0xf4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <SystemInit+0xf4>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	492b      	ldr	r1, [pc, #172]	; (80014b0 <SystemInit+0xf4>)
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <SystemInit+0xf8>)
 8001406:	4013      	ands	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <SystemInit+0xf0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <SystemInit+0xf0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 030f 	bic.w	r3, r3, #15
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <SystemInit+0xf0>)
 8001420:	f043 0307 	orr.w	r3, r3, #7
 8001424:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <SystemInit+0xf4>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <SystemInit+0xf4>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <SystemInit+0xf4>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <SystemInit+0xf4>)
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <SystemInit+0xfc>)
 800143c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <SystemInit+0xf4>)
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <SystemInit+0x100>)
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <SystemInit+0xf4>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <SystemInit+0x104>)
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <SystemInit+0xf4>)
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <SystemInit+0xf4>)
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <SystemInit+0x104>)
 8001454:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <SystemInit+0xf4>)
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <SystemInit+0xf4>)
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <SystemInit+0x104>)
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SystemInit+0xf4>)
 8001464:	2200      	movs	r2, #0
 8001466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <SystemInit+0xf4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <SystemInit+0xf4>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <SystemInit+0xf4>)
 8001476:	2200      	movs	r2, #0
 8001478:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <SystemInit+0x108>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SystemInit+0x10c>)
 8001480:	4013      	ands	r3, r2
 8001482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001486:	d202      	bcs.n	800148e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <SystemInit+0x110>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <SystemInit+0x114>)
 8001490:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001494:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SystemInit+0xec>)
 8001498:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	52002000 	.word	0x52002000
 80014b0:	58024400 	.word	0x58024400
 80014b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b8:	02020200 	.word	0x02020200
 80014bc:	01ff0000 	.word	0x01ff0000
 80014c0:	01010280 	.word	0x01010280
 80014c4:	5c001000 	.word	0x5c001000
 80014c8:	ffff0000 	.word	0xffff0000
 80014cc:	51008108 	.word	0x51008108
 80014d0:	52004000 	.word	0x52004000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff ff70 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f005 fd7b 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f8cf 	bl	80006a8 <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001514:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001518:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 800151c:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001520:	24000718 	.word	0x24000718

08001524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC3_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f982 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f002 fbdc 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f814 	bl	80015a0 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fc31 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	0800807c 	.word	0x0800807c
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_InitTick+0x60>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e021      	b.n	80015f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_InitTick+0x64>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_InitTick+0x60>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f959 	bl	8001882 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f931 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x68>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400000c 	.word	0x2400000c
 8001604:	24000000 	.word	0x24000000
 8001608:	24000008 	.word	0x24000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2400000c 	.word	0x2400000c
 8001630:	24000704 	.word	0x24000704

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	24000704 	.word	0x24000704

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2400000c 	.word	0x2400000c

08001694 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetREVID+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0c1b      	lsrs	r3, r3, #16
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	5c001000 	.word	0x5c001000

080016ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58000400 	.word	0x58000400

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	05fa0000 	.word	0x05fa0000

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff47 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff5e 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff90 	bl	800178c <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5f 	bl	8001738 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb2 	bl	80017f4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0c6      	b.n	8001a3c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fab0 	bl	8000e1c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2223      	movs	r2, #35	; 0x23
 80018c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <HAL_ETH_Init+0x1a8>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_ETH_Init+0x1a8>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_ETH_Init+0x1a8>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7a1b      	ldrb	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d103      	bne.n	80018f0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fedf 	bl	80016ac <HAL_SYSCFG_ETHInterfaceSelect>
 80018ee:	e003      	b.n	80018f8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018f4:	f7ff feda 	bl	80016ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff fe90 	bl	8001634 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001916:	e00f      	b.n	8001938 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001918:	f7ff fe8c 	bl	8001634 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001926:	d907      	bls.n	8001938 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2204      	movs	r2, #4
 800192c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	22e0      	movs	r2, #224	; 0xe0
 8001932:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e081      	b.n	8001a3c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e6      	bne.n	8001918 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fac0 	bl	8001ed0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001950:	f002 fb48 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8001954:	4603      	mov	r3, r0
 8001956:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <HAL_ETH_Init+0x1ac>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9a      	lsrs	r2, r3, #18
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3a01      	subs	r2, #1
 8001964:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa13 	bl	8001d94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001984:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001988:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	22e0      	movs	r2, #224	; 0xe0
 80019a0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e04a      	b.n	8001a3c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80019ae:	4413      	add	r3, r2
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_ETH_Init+0x1b0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6952      	ldr	r2, [r2, #20]
 80019ba:	0052      	lsls	r2, r2, #1
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019c6:	440b      	add	r3, r1
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fad8 	bl	8001f80 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fb1c 	bl	800200e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	3305      	adds	r3, #5
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	021a      	lsls	r2, r3, #8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	3303      	adds	r3, #3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	061a      	lsls	r2, r3, #24
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	3302      	adds	r3, #2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2210      	movs	r2, #16
 8001a32:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2210      	movs	r2, #16
 8001a38:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58024400 	.word	0x58024400
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	ffff8001 	.word	0xffff8001

08001a50 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a62:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a6a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a72:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b5b      	ldrb	r3, [r3, #13]
 8001a78:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a7a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7b9b      	ldrb	r3, [r3, #14]
 8001a80:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7bdb      	ldrb	r3, [r3, #15]
 8001a88:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a8a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	7c12      	ldrb	r2, [r2, #16]
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d102      	bne.n	8001a9a <ETH_SetMACConfig+0x4a>
 8001a94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a98:	e000      	b.n	8001a9c <ETH_SetMACConfig+0x4c>
 8001a9a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a9c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	7c52      	ldrb	r2, [r2, #17]
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d102      	bne.n	8001aac <ETH_SetMACConfig+0x5c>
 8001aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aaa:	e000      	b.n	8001aae <ETH_SetMACConfig+0x5e>
 8001aac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001aae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7c9b      	ldrb	r3, [r3, #18]
 8001ab4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ab6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001abc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001ac2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7f1b      	ldrb	r3, [r3, #28]
 8001ac8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001aca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7f5b      	ldrb	r3, [r3, #29]
 8001ad0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001ad2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	7f92      	ldrb	r2, [r2, #30]
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d102      	bne.n	8001ae2 <ETH_SetMACConfig+0x92>
 8001adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae0:	e000      	b.n	8001ae4 <ETH_SetMACConfig+0x94>
 8001ae2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ae4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7fdb      	ldrb	r3, [r3, #31]
 8001aea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001aec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d102      	bne.n	8001afe <ETH_SetMACConfig+0xae>
 8001af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afc:	e000      	b.n	8001b00 <ETH_SetMACConfig+0xb0>
 8001afe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b00:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b06:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b0e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b10:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <ETH_SetMACConfig+0x22c>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b4e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b50:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d102      	bne.n	8001b62 <ETH_SetMACConfig+0x112>
 8001b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b60:	e000      	b.n	8001b64 <ETH_SetMACConfig+0x114>
 8001b62:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b64:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <ETH_SetMACConfig+0x230>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <ETH_SetMACConfig+0x234>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bb2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d101      	bne.n	8001bc2 <ETH_SetMACConfig+0x172>
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	e000      	b.n	8001bc4 <ETH_SetMACConfig+0x174>
 8001bc2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bc4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bd6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001bec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bf4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f023 0103 	bic.w	r1, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d101      	bne.n	8001c3e <ETH_SetMACConfig+0x1ee>
 8001c3a:	2240      	movs	r2, #64	; 0x40
 8001c3c:	e000      	b.n	8001c40 <ETH_SetMACConfig+0x1f0>
 8001c3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c40:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c4a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	00048083 	.word	0x00048083
 8001c80:	c0f88000 	.word	0xc0f88000
 8001c84:	fffffef0 	.word	0xfffffef0

08001c88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <ETH_SetDMAConfig+0xf8>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001cae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7b1b      	ldrb	r3, [r3, #12]
 8001cc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cce:	4413      	add	r3, r2
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <ETH_SetDMAConfig+0xfc>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ce2:	440b      	add	r3, r1
 8001ce4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7b5b      	ldrb	r3, [r3, #13]
 8001cea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <ETH_SetDMAConfig+0x100>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6811      	ldr	r1, [r2, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7d1b      	ldrb	r3, [r3, #20]
 8001d18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7f5b      	ldrb	r3, [r3, #29]
 8001d20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d2e:	4413      	add	r3, r2
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <ETH_SetDMAConfig+0x104>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6811      	ldr	r1, [r2, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d42:	440b      	add	r3, r1
 8001d44:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7f1b      	ldrb	r3, [r3, #28]
 8001d4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <ETH_SetDMAConfig+0x108>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6811      	ldr	r1, [r2, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d70:	440b      	add	r3, r1
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	ffff87fd 	.word	0xffff87fd
 8001d84:	ffff2ffe 	.word	0xffff2ffe
 8001d88:	fffec000 	.word	0xfffec000
 8001d8c:	ffc0efef 	.word	0xffc0efef
 8001d90:	7fc0ffff 	.word	0x7fc0ffff

08001d94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0a4      	sub	sp, #144	; 0x90
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001da2:	2300      	movs	r3, #0
 8001da4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001dec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001df0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e16:	2300      	movs	r3, #0
 8001e18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e50:	2302      	movs	r3, #2
 8001e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fde6 	bl	8001a50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ea2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001eb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fee1 	bl	8001c88 <ETH_SetDMAConfig>
}
 8001ec6:	bf00      	nop
 8001ec8:	3790      	adds	r7, #144	; 0x90
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001eea:	f002 f87b 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8001eee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d908      	bls.n	8001f0a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d804      	bhi.n	8001f0a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e027      	b.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d908      	bls.n	8001f24 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d204      	bcs.n	8001f24 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e01a      	b.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d303      	bcc.n	8001f34 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d911      	bls.n	8001f58 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d908      	bls.n	8001f4e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d804      	bhi.n	8001f4e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e005      	b.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e000      	b.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f58:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	01312cff 	.word	0x01312cff
 8001f70:	02160ebf 	.word	0x02160ebf
 8001f74:	03938700 	.word	0x03938700
 8001f78:	05f5e0ff 	.word	0x05f5e0ff
 8001f7c:	08f0d17f 	.word	0x08f0d17f

08001f80 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e01d      	b.n	8001fca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68d9      	ldr	r1, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	3206      	adds	r2, #6
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d9de      	bls.n	8001f8e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f241 132c 	movw	r3, #4396	; 0x112c
 8001fde:	4413      	add	r3, r2
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68d9      	ldr	r1, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f241 1314 	movw	r3, #4372	; 0x1114
 8001ff0:	4413      	add	r3, r2
 8001ff2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e024      	b.n	8002066 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3310      	adds	r3, #16
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d9d7      	bls.n	800201c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002092:	4413      	add	r3, r2
 8002094:	2203      	movs	r2, #3
 8002096:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80020a4:	4413      	add	r3, r2
 80020a6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f241 1328 	movw	r3, #4392	; 0x1128
 80020b8:	4413      	add	r3, r2
 80020ba:	6019      	str	r1, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_GPIO_Init+0x234>)
 80020d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020da:	e194      	b.n	8002406 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8186 	beq.w	8002400 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0x4c>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214a:	2201      	movs	r2, #1
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0xee>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d123      	bne.n	80021fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	69b9      	ldr	r1, [r7, #24]
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e0 	beq.w	8002400 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002246:	4a2e      	ldr	r2, [pc, #184]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_GPIO_Init+0x23c>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_GPIO_Init+0x240>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d052      	beq.n	8002330 <HAL_GPIO_Init+0x268>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_GPIO_Init+0x244>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_GPIO_Init+0x22e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_GPIO_Init+0x248>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x22a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x24c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x226>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_GPIO_Init+0x250>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x222>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_GPIO_Init+0x254>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x21e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_GPIO_Init+0x258>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x25c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x260>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_GPIO_Init+0x264>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e02d      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e02b      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022da:	2308      	movs	r3, #8
 80022dc:	e029      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022de:	2307      	movs	r3, #7
 80022e0:	e027      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e025      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e023      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e021      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e01f      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e01d      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e01b      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022fa:	bf00      	nop
 80022fc:	58000080 	.word	0x58000080
 8002300:	58024400 	.word	0x58024400
 8002304:	58000400 	.word	0x58000400
 8002308:	58020000 	.word	0x58020000
 800230c:	58020400 	.word	0x58020400
 8002310:	58020800 	.word	0x58020800
 8002314:	58020c00 	.word	0x58020c00
 8002318:	58021000 	.word	0x58021000
 800231c:	58021400 	.word	0x58021400
 8002320:	58021800 	.word	0x58021800
 8002324:	58021c00 	.word	0x58021c00
 8002328:	58022000 	.word	0x58022000
 800232c:	58022400 	.word	0x58022400
 8002330:	2300      	movs	r3, #0
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	f002 0203 	and.w	r2, r2, #3
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	4093      	lsls	r3, r2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002342:	4938      	ldr	r1, [pc, #224]	; (8002424 <HAL_GPIO_Init+0x35c>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f ae63 	bne.w	80020dc <HAL_GPIO_Init+0x14>
  }
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	3724      	adds	r7, #36	; 0x24
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	58000400 	.word	0x58000400

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fd98 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d104      	bne.n	80024f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_I2C_Init+0x11c>)
 8002502:	430b      	orrs	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	ea42 0103 	orr.w	r1, r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b20      	cmp	r3, #32
 800259a:	f040 80da 	bne.w	8002752 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_Master_Transmit+0x30>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0d3      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b4:	f7ff f83e 	bl	8001634 <HAL_GetTick>
 80025b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2319      	movs	r3, #25
 80025c0:	2201      	movs	r2, #1
 80025c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f9e6 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0be      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2221      	movs	r2, #33	; 0x21
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2210      	movs	r2, #16
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	893a      	ldrh	r2, [r7, #8]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	d90e      	bls.n	8002626 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_I2C_Master_Transmit+0x1e0>)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fb48 	bl	8002cb4 <I2C_TransferConfig>
 8002624:	e06c      	b.n	8002700 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	4b48      	ldr	r3, [pc, #288]	; (800275c <HAL_I2C_Master_Transmit+0x1e0>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fb37 	bl	8002cb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002646:	e05b      	b.n	8002700 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f9e3 	bl	8002a18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e07b      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d034      	beq.n	8002700 <HAL_I2C_Master_Transmit+0x184>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	2b00      	cmp	r3, #0
 800269c:	d130      	bne.n	8002700 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f975 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e04d      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2bff      	cmp	r3, #255	; 0xff
 80026c0:	d90e      	bls.n	80026e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	22ff      	movs	r2, #255	; 0xff
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 faeb 	bl	8002cb4 <I2C_TransferConfig>
 80026de:	e00f      	b.n	8002700 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fada 	bl	8002cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d19e      	bne.n	8002648 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f9c2 	bl	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e01a      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2220      	movs	r2, #32
 8002724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_I2C_Master_Transmit+0x1e4>)
 8002732:	400b      	ands	r3, r1
 8002734:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	80002000 	.word	0x80002000
 8002760:	fe00e800 	.word	0xfe00e800

08002764 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	817b      	strh	r3, [r7, #10]
 8002774:	4613      	mov	r3, r2
 8002776:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	f040 80db 	bne.w	800293c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_I2C_Master_Receive+0x30>
 8002790:	2302      	movs	r3, #2
 8002792:	e0d4      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800279c:	f7fe ff4a 	bl	8001634 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2319      	movs	r3, #25
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f8f2 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0bf      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2222      	movs	r2, #34	; 0x22
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2210      	movs	r2, #16
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2bff      	cmp	r3, #255	; 0xff
 80027ee:	d90e      	bls.n	800280e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	22ff      	movs	r2, #255	; 0xff
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8979      	ldrh	r1, [r7, #10]
 80027fe:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_I2C_Master_Receive+0x1e4>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa54 	bl	8002cb4 <I2C_TransferConfig>
 800280c:	e06d      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	8979      	ldrh	r1, [r7, #10]
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_I2C_Master_Receive+0x1e4>)
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa43 	bl	8002cb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800282e:	e05c      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	6a39      	ldr	r1, [r7, #32]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f96b 	bl	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e07c      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d034      	beq.n	80028ea <HAL_I2C_Master_Receive+0x186>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d130      	bne.n	80028ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2200      	movs	r2, #0
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f880 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04d      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2bff      	cmp	r3, #255	; 0xff
 80028aa:	d90e      	bls.n	80028ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f9f6 	bl	8002cb4 <I2C_TransferConfig>
 80028c8:	e00f      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f9e5 	bl	8002cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d19d      	bne.n	8002830 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f8cd 	bl	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e01a      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2220      	movs	r2, #32
 800290e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_I2C_Master_Receive+0x1e8>)
 800291c:	400b      	ands	r3, r1
 800291e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	80002400 	.word	0x80002400
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d007      	beq.n	800298c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	619a      	str	r2, [r3, #24]
  }
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	e022      	b.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d01e      	beq.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fe3f 	bl	8001634 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d113      	bne.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e00f      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d0cd      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a24:	e02c      	b.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8dc 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02a      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d01e      	beq.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fdf7 	bl	8001634 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d113      	bne.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d1cb      	bne.n	8002a26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa4:	e028      	b.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f89c 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e026      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe fdbb 	bl	8001634 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d113      	bne.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1cf      	bne.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b1c:	e055      	b.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f860 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e053      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d129      	bne.n	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d105      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e03f      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e022      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b94:	f7fe fd4e 	bl	8001634 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d1a2      	bne.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	fe00e800 	.word	0xfe00e800

08002be8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d151      	bne.n	8002ca6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c02:	e022      	b.n	8002c4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d01e      	beq.n	8002c4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7fe fd12 	bl	8001634 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <I2C_IsAcknowledgeFailed+0x3a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d113      	bne.n	8002c4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02e      	b.n	8002ca8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d1d5      	bne.n	8002c04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2220      	movs	r2, #32
 8002c66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fe71 	bl	8002950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0204 	orr.w	r2, r3, #4
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	fe00e800 	.word	0xfe00e800

08002cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	0d5b      	lsrs	r3, r3, #21
 8002cd0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <I2C_TransferConfig+0x58>)
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	ea02 0103 	and.w	r1, r2, r3
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce4:	7a7b      	ldrb	r3, [r7, #9]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	03ff63ff 	.word	0x03ff63ff

08002d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d138      	bne.n	8002d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e032      	b.n	8002d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d139      	bne.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e033      	b.n	8002e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e40:	b08f      	sub	sp, #60	; 0x3c
 8002e42:	af0a      	add	r7, sp, #40	; 0x28
 8002e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e116      	b.n	800307e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe f96e 	bl	800114c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2203      	movs	r2, #3
 8002e74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fe5e 	bl	8006b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	687e      	ldr	r6, [r7, #4]
 8002e9c:	466d      	mov	r5, sp
 8002e9e:	f106 0410 	add.w	r4, r6, #16
 8002ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb2:	1d33      	adds	r3, r6, #4
 8002eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	f003 fddc 	bl	8006a74 <USB_CoreInit>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0d7      	b.n	800307e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fe4c 	bl	8006b72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e04a      	b.n	8002f76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	333d      	adds	r3, #61	; 0x3d
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	333c      	adds	r3, #60	; 0x3c
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	b298      	uxth	r0, r3
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3342      	adds	r3, #66	; 0x42
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	333f      	adds	r3, #63	; 0x3f
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3344      	adds	r3, #68	; 0x44
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3348      	adds	r3, #72	; 0x48
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3350      	adds	r3, #80	; 0x50
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3af      	bcc.n	8002ee0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e044      	b.n	8003010 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	3301      	adds	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d3b5      	bcc.n	8002f86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	687e      	ldr	r6, [r7, #4]
 8003022:	466d      	mov	r5, sp
 8003024:	f106 0410 	add.w	r4, r6, #16
 8003028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003034:	e885 0003 	stmia.w	r5, {r0, r1}
 8003038:	1d33      	adds	r3, r6, #4
 800303a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f003 fdc3 	bl	8006bc8 <USB_DevInit>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e014      	b.n	800307e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f80b 	bl	8003088 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 ff65 	bl	8006f46 <USB_DevDisconnect>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003088 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_PCDEx_ActivateLPM+0x44>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	10000003 	.word	0x10000003

080030d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_PWREx_ConfigSupply+0x70>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d00a      	beq.n	80030fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_PWREx_ConfigSupply+0x70>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e01f      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e01d      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_PWREx_ConfigSupply+0x70>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	490f      	ldr	r1, [pc, #60]	; (8003140 <HAL_PWREx_ConfigSupply+0x70>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800310a:	f7fe fa93 	bl	8001634 <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003110:	e009      	b.n	8003126 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003112:	f7fe fa8f 	bl	8001634 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003120:	d901      	bls.n	8003126 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e007      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_PWREx_ConfigSupply+0x70>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003132:	d1ee      	bne.n	8003112 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	58024800 	.word	0x58024800

08003144 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	58024800 	.word	0x58024800

08003164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e3ff      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8087 	beq.w	8003292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003184:	4b99      	ldr	r3, [pc, #612]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800318e:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b10      	cmp	r3, #16
 8003198:	d007      	beq.n	80031aa <HAL_RCC_OscConfig+0x46>
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	2b18      	cmp	r3, #24
 800319e:	d110      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5e>
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	4b90      	ldr	r3, [pc, #576]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06c      	beq.n	8003290 <HAL_RCC_OscConfig+0x12c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d168      	bne.n	8003290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e3d9      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x76>
 80031cc:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a86      	ldr	r2, [pc, #536]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e02e      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x98>
 80031e2:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a81      	ldr	r2, [pc, #516]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7e      	ldr	r2, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80031f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0xbc>
 8003206:	4b79      	ldr	r3, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a78      	ldr	r2, [pc, #480]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 8003220:	4b72      	ldr	r3, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a71      	ldr	r2, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b6f      	ldr	r3, [pc, #444]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f9f8 	bl	8001634 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe f9f4 	bl	8001634 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e38d      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325a:	4b64      	ldr	r3, [pc, #400]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xe4>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe f9e4 	bl	8001634 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe f9e0 	bl	8001634 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e379      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x10c>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80ae 	beq.w	80033fc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a0:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_RCC_OscConfig+0x162>
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	2b18      	cmp	r3, #24
 80032ba:	d13a      	bne.n	8003332 <HAL_RCC_OscConfig+0x1ce>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d135      	bne.n	8003332 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c6:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x17a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e34b      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	f7fe f9d9 	bl	8001694 <HAL_GetREVID>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d817      	bhi.n	800331c <HAL_RCC_OscConfig+0x1b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d108      	bne.n	8003306 <HAL_RCC_OscConfig+0x1a2>
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80032fc:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003302:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003304:	e07a      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	4935      	ldr	r1, [pc, #212]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331a:	e06f      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	4930      	ldr	r1, [pc, #192]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003330:	e064      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d045      	beq.n	80033c6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0219 	bic.w	r2, r3, #25
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4929      	ldr	r1, [pc, #164]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f972 	bl	8001634 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe f96e 	bl	8001634 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e307      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	f7fe f98f 	bl	8001694 <HAL_GetREVID>
 8003376:	4603      	mov	r3, r0
 8003378:	f241 0203 	movw	r2, #4099	; 0x1003
 800337c:	4293      	cmp	r3, r2
 800337e:	d817      	bhi.n	80033b0 <HAL_RCC_OscConfig+0x24c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d108      	bne.n	800339a <HAL_RCC_OscConfig+0x236>
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003390:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	6053      	str	r3, [r2, #4]
 8003398:	e030      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	031b      	lsls	r3, r3, #12
 80033a8:	4910      	ldr	r1, [pc, #64]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
 80033ae:	e025      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	e01a      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x288>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe f92f 	bl	8001634 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe f92b 	bl	8001634 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d903      	bls.n	80033f0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e2c4      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
 80033ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033f0:	4ba4      	ldr	r3, [pc, #656]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a9 	beq.w	800355c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340a:	4b9e      	ldr	r3, [pc, #632]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003412:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003414:	4b9b      	ldr	r3, [pc, #620]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d007      	beq.n	8003430 <HAL_RCC_OscConfig+0x2cc>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b18      	cmp	r3, #24
 8003424:	d13a      	bne.n	800349c <HAL_RCC_OscConfig+0x338>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d135      	bne.n	800349c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003430:	4b94      	ldr	r3, [pc, #592]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x2e4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e296      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003448:	f7fe f924 	bl	8001694 <HAL_GetREVID>
 800344c:	4603      	mov	r3, r0
 800344e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003452:	4293      	cmp	r3, r2
 8003454:	d817      	bhi.n	8003486 <HAL_RCC_OscConfig+0x322>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x30c>
 800345e:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003466:	4a87      	ldr	r2, [pc, #540]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800346c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800346e:	e075      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003470:	4b84      	ldr	r3, [pc, #528]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	4981      	ldr	r1, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003484:	e06a      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003486:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	497b      	ldr	r1, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349a:	e05f      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d042      	beq.n	800352a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034a4:	4b77      	ldr	r3, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a76      	ldr	r2, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe f8c0 	bl	8001634 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034b8:	f7fe f8bc 	bl	8001634 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e255      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ca:	4b6e      	ldr	r3, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d6:	f7fe f8dd 	bl	8001694 <HAL_GetREVID>
 80034da:	4603      	mov	r3, r0
 80034dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d817      	bhi.n	8003514 <HAL_RCC_OscConfig+0x3b0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d108      	bne.n	80034fe <HAL_RCC_OscConfig+0x39a>
 80034ec:	4b65      	ldr	r3, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80034f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034fa:	6053      	str	r3, [r2, #4]
 80034fc:	e02e      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	069b      	lsls	r3, r3, #26
 800350c:	495d      	ldr	r1, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	e023      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
 8003514:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	4958      	ldr	r1, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
 8003528:	e018      	b.n	800355c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800352a:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a55      	ldr	r2, [pc, #340]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe f87d 	bl	8001634 <HAL_GetTick>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800353e:	f7fe f879 	bl	8001634 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e212      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d036      	beq.n	80035d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d019      	beq.n	80035a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003570:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe f85a 	bl	8001634 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003584:	f7fe f856 	bl	8001634 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1ef      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x420>
 80035a2:	e018      	b.n	80035d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	4a36      	ldr	r2, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe f840 	bl	8001634 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe f83c 	bl	8001634 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1d5      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 80035f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f81d 	bl	8001634 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035fe:	f7fe f819 	bl	8001634 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1b2      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x49a>
 800361c:	e018      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800362a:	f7fe f803 	bl	8001634 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fd ffff 	bl	8001634 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e198      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_RCC_OscConfig+0x520>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8085 	beq.w	8003768 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_OscConfig+0x524>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_OscConfig+0x524>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800366a:	f7fd ffe3 	bl	8001634 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003670:	e00c      	b.n	800368c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fd ffdf 	bl	8001634 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d905      	bls.n	800368c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e178      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
 8003684:	58024400 	.word	0x58024400
 8003688:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800368c:	4b96      	ldr	r3, [pc, #600]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ec      	beq.n	8003672 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x54a>
 80036a0:	4b92      	ldr	r3, [pc, #584]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a91      	ldr	r2, [pc, #580]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	e02d      	b.n	800370a <HAL_RCC_OscConfig+0x5a6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x56c>
 80036b6:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a8c      	ldr	r2, [pc, #560]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a89      	ldr	r2, [pc, #548]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	e01c      	b.n	800370a <HAL_RCC_OscConfig+0x5a6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x58e>
 80036d8:	4b84      	ldr	r3, [pc, #528]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a83      	ldr	r2, [pc, #524]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a80      	ldr	r2, [pc, #512]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e00b      	b.n	800370a <HAL_RCC_OscConfig+0x5a6>
 80036f2:	4b7e      	ldr	r3, [pc, #504]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	4b7b      	ldr	r3, [pc, #492]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a7a      	ldr	r2, [pc, #488]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fd ff8f 	bl	8001634 <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fd ff8b 	bl	8001634 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e122      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003730:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCC_OscConfig+0x5b6>
 800373c:	e014      	b.n	8003768 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd ff79 	bl	8001634 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd ff75 	bl	8001634 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e10c      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800375c:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8101 	beq.w	8003974 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003772:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377a:	2b18      	cmp	r3, #24
 800377c:	f000 80bc 	beq.w	80038f8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b02      	cmp	r3, #2
 8003786:	f040 8095 	bne.w	80038b4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fd ff4d 	bl	8001634 <HAL_GetTick>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fd ff49 	bl	8001634 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0e2      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b0:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037bc:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80037be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCC_OscConfig+0x78c>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	430a      	orrs	r2, r1
 80037d0:	4946      	ldr	r1, [pc, #280]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	628b      	str	r3, [r1, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	3b01      	subs	r3, #1
 80037dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	3b01      	subs	r3, #1
 80037e6:	025b      	lsls	r3, r3, #9
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	3b01      	subs	r3, #1
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003806:	4939      	ldr	r1, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003808:	4313      	orrs	r3, r2
 800380a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800380c:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a36      	ldr	r2, [pc, #216]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800381a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_RCC_OscConfig+0x790>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003824:	00d2      	lsls	r2, r2, #3
 8003826:	4931      	ldr	r1, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003828:	4313      	orrs	r3, r2
 800382a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f023 020c 	bic.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	492c      	ldr	r1, [pc, #176]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800383a:	4313      	orrs	r3, r2
 800383c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800383e:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f023 0202 	bic.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4928      	ldr	r1, [pc, #160]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800384c:	4313      	orrs	r3, r2
 800384e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4a25      	ldr	r2, [pc, #148]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800386e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fed2 	bl	8001634 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd fece 	bl	8001634 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e067      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x730>
 80038b2:	e05f      	b.n	8003974 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80038ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd feb8 	bl	8001634 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd feb4 	bl	8001634 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e04d      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x764>
 80038e6:	e045      	b.n	8003974 <HAL_RCC_OscConfig+0x810>
 80038e8:	58024800 	.word	0x58024800
 80038ec:	58024400 	.word	0x58024400
 80038f0:	fffffc0c 	.word	0xfffffc0c
 80038f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCC_OscConfig+0x81c>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_OscConfig+0x81c>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d031      	beq.n	8003970 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0203 	and.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d12a      	bne.n	8003970 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d122      	bne.n	8003970 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11a      	bne.n	8003970 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	0a5b      	lsrs	r3, r3, #9
 800393e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d111      	bne.n	8003970 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d108      	bne.n	8003970 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3730      	adds	r7, #48	; 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	58024400 	.word	0x58024400

08003984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e19c      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b8a      	ldr	r3, [pc, #552]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d910      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 020f 	bic.w	r2, r3, #15
 80039ae:	4985      	ldr	r1, [pc, #532]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e184      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d908      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039e4:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	4975      	ldr	r1, [pc, #468]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	4b70      	ldr	r3, [pc, #448]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d908      	bls.n	8003a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	496a      	ldr	r1, [pc, #424]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	4b64      	ldr	r3, [pc, #400]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d908      	bls.n	8003a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a40:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	495e      	ldr	r1, [pc, #376]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d908      	bls.n	8003a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a6e:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	4953      	ldr	r1, [pc, #332]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f023 020f 	bic.w	r2, r3, #15
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4947      	ldr	r1, [pc, #284]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d055      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4940      	ldr	r1, [pc, #256]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0f6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d115      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0ea      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b04:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0de      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0d6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f023 0207 	bic.w	r2, r3, #7
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fd7d 	bl	8001634 <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3e:	f7fd fd79 	bl	8001634 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0be      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d1eb      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d208      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f023 020f 	bic.w	r2, r3, #15
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d214      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_RCC_ClockConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e086      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x34e>
 8003bc4:	52002000 	.word	0x52002000
 8003bc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d208      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003be8:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	4939      	ldr	r1, [pc, #228]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d208      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c16:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	492e      	ldr	r1, [pc, #184]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d208      	bcs.n	8003c56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c44:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4922      	ldr	r1, [pc, #136]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d010      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d208      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	4917      	ldr	r1, [pc, #92]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c84:	f000 f834 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	4912      	ldr	r1, [pc, #72]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003cac:	5cd3      	ldrb	r3, [r2, r3]
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_RCC_ClockConfig+0x360>)
 8003cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x364>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x368>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fc6a 	bl	80015a0 <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	0800807c 	.word	0x0800807c
 8003ce4:	24000004 	.word	0x24000004
 8003ce8:	24000000 	.word	0x24000000
 8003cec:	24000008 	.word	0x24000008

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf6:	4bb3      	ldr	r3, [pc, #716]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cfe:	2b18      	cmp	r3, #24
 8003d00:	f200 8155 	bhi.w	8003fae <HAL_RCC_GetSysClockFreq+0x2be>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003faf 	.word	0x08003faf
 8003d14:	08003faf 	.word	0x08003faf
 8003d18:	08003faf 	.word	0x08003faf
 8003d1c:	08003faf 	.word	0x08003faf
 8003d20:	08003faf 	.word	0x08003faf
 8003d24:	08003faf 	.word	0x08003faf
 8003d28:	08003faf 	.word	0x08003faf
 8003d2c:	08003d97 	.word	0x08003d97
 8003d30:	08003faf 	.word	0x08003faf
 8003d34:	08003faf 	.word	0x08003faf
 8003d38:	08003faf 	.word	0x08003faf
 8003d3c:	08003faf 	.word	0x08003faf
 8003d40:	08003faf 	.word	0x08003faf
 8003d44:	08003faf 	.word	0x08003faf
 8003d48:	08003faf 	.word	0x08003faf
 8003d4c:	08003d9d 	.word	0x08003d9d
 8003d50:	08003faf 	.word	0x08003faf
 8003d54:	08003faf 	.word	0x08003faf
 8003d58:	08003faf 	.word	0x08003faf
 8003d5c:	08003faf 	.word	0x08003faf
 8003d60:	08003faf 	.word	0x08003faf
 8003d64:	08003faf 	.word	0x08003faf
 8003d68:	08003faf 	.word	0x08003faf
 8003d6c:	08003da3 	.word	0x08003da3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d70:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d7c:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	08db      	lsrs	r3, r3, #3
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	4a90      	ldr	r2, [pc, #576]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d8e:	e111      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d90:	4b8d      	ldr	r3, [pc, #564]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d92:	61bb      	str	r3, [r7, #24]
    break;
 8003d94:	e10e      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d96:	4b8d      	ldr	r3, [pc, #564]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d98:	61bb      	str	r3, [r7, #24]
    break;
 8003d9a:	e10b      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d9e:	61bb      	str	r3, [r7, #24]
    break;
 8003da0:	e108      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003da2:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dac:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003db8:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dc2:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80e1 	beq.w	8003fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f000 8083 	beq.w	8003ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f200 80a1 	bhi.w	8003f38 <HAL_RCC_GetSysClockFreq+0x248>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x114>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d056      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e02:	e099      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e04:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d02d      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e10:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	4a6b      	ldr	r2, [pc, #428]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3a:	4b62      	ldr	r3, [pc, #392]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e6a:	e087      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7e:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eae:	e065      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec2:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ef2:	e043      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f36:	e021      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	0a5b      	lsrs	r3, r3, #9
 8003f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f86:	3301      	adds	r3, #1
 8003f88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
    break;
 8003fac:	e002      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fb0:	61bb      	str	r3, [r7, #24]
    break;
 8003fb2:	bf00      	nop
  }

  return sysclockfreq;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	03d09000 	.word	0x03d09000
 8003fcc:	003d0900 	.word	0x003d0900
 8003fd0:	007a1200 	.word	0x007a1200
 8003fd4:	46000000 	.word	0x46000000
 8003fd8:	4c742400 	.word	0x4c742400
 8003fdc:	4a742400 	.word	0x4a742400
 8003fe0:	4af42400 	.word	0x4af42400

08003fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fea:	f7ff fe81 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490f      	ldr	r1, [pc, #60]	; (8004038 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_GetHCLKFreq+0x50>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_RCC_GetHCLKFreq+0x54>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_RCC_GetHCLKFreq+0x58>)
 8004020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <HAL_RCC_GetHCLKFreq+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	58024400 	.word	0x58024400
 8004038:	0800807c 	.word	0x0800807c
 800403c:	24000004 	.word	0x24000004
 8004040:	24000000 	.word	0x24000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004048:	f7ff ffcc 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCC_GetPCLK1Freq+0x28>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58024400 	.word	0x58024400
 800406c:	0800807c 	.word	0x0800807c

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004074:	f7ff ffb6 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4904      	ldr	r1, [pc, #16]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58024400 	.word	0x58024400
 8004098:	0800807c 	.word	0x0800807c

0800409c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03f      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040c0:	d02a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040c6:	d824      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040cc:	d018      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d2:	d81e      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040dc:	d007      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040de:	e018      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4bab      	ldr	r3, [pc, #684]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4aaa      	ldr	r2, [pc, #680]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040ec:	e015      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 f9cf 	bl	8005498 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040fe:	e00c      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fa78 	bl	80055fc <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004120:	4b9b      	ldr	r3, [pc, #620]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	4998      	ldr	r1, [pc, #608]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	650b      	str	r3, [r1, #80]	; 0x50
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d03d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b04      	cmp	r3, #4
 800414a:	d826      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004169 	.word	0x08004169
 8004158:	08004177 	.word	0x08004177
 800415c:	08004189 	.word	0x08004189
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a1 	.word	0x080041a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a88      	ldr	r2, [pc, #544]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004174:	e015      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f98b 	bl	8005498 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fa34 	bl	80055fc <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a8:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	f023 0207 	bic.w	r2, r3, #7
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	4976      	ldr	r1, [pc, #472]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	650b      	str	r3, [r1, #80]	; 0x50
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d042      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d02b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d825      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041dc:	2bc0      	cmp	r3, #192	; 0xc0
 80041de:	d028      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041e0:	2bc0      	cmp	r3, #192	; 0xc0
 80041e2:	d821      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d016      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d81d      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d007      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80041f4:	e018      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f6:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	4a65      	ldr	r2, [pc, #404]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004202:	e017      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f001 f944 	bl	8005498 <RCCEx_PLL2_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004214:	e00e      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3324      	adds	r3, #36	; 0x24
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f9ed 	bl	80055fc <RCCEx_PLL3_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004226:	e005      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
      break;
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800423a:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4952      	ldr	r1, [pc, #328]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	650b      	str	r3, [r1, #80]	; 0x50
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	2b00      	cmp	r3, #0
 800425c:	d049      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004268:	d030      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800426a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426e:	d82a      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004270:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004274:	d02c      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800427a:	d824      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800427c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004280:	d018      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004286:	d81e      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004292:	e018      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042a0:	e017      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f8f5 	bl	8005498 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042b2:	e00e      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f99e 	bl	80055fc <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042d8:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e6:	492a      	ldr	r1, [pc, #168]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	658b      	str	r3, [r1, #88]	; 0x58
 80042ec:	e001      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04c      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004308:	d030      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800430a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430e:	d82a      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004314:	d02c      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800431a:	d824      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800431c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004320:	d018      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004326:	d81e      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004330:	d007      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004332:	e018      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004340:	e017      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f001 f8a5 	bl	8005498 <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004352:	e00e      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f94e 	bl	80055fc <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004364:	e005      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004386:	4902      	ldr	r1, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	658b      	str	r3, [r1, #88]	; 0x58
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d032      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d01c      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d817      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d00c      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d813      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d016      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d10f      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4baf      	ldr	r3, [pc, #700]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4aae      	ldr	r2, [pc, #696]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043cc:	e00e      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 f85f 	bl	8005498 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043f2:	4ba3      	ldr	r3, [pc, #652]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	49a0      	ldr	r1, [pc, #640]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004404:	e001      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d047      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441e:	d030      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004424:	d82a      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800442a:	d02c      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800442c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004430:	d824      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d018      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	d81e      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	d007      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004448:	e018      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444a:	4b8d      	ldr	r3, [pc, #564]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	4a8c      	ldr	r2, [pc, #560]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004456:	e017      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f81a 	bl	8005498 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004468:	e00e      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f001 f8c3 	bl	80055fc <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800447a:	e005      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800448e:	4b7c      	ldr	r3, [pc, #496]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	4979      	ldr	r1, [pc, #484]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	650b      	str	r3, [r1, #80]	; 0x50
 80044a0:	e001      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d049      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ba:	d02e      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80044bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c0:	d828      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044c6:	d02a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80044c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044cc:	d822      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d2:	d026      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d8:	d81c      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044de:	d010      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80044e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e4:	d816      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01d      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ee:	d111      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ffce 	bl	8005498 <RCCEx_PLL2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004500:	e012      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3324      	adds	r3, #36	; 0x24
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f877 	bl	80055fc <RCCEx_PLL3_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004512:	e009      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	e006      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800451a:	bf00      	nop
 800451c:	e004      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453a:	4951      	ldr	r1, [pc, #324]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	650b      	str	r3, [r1, #80]	; 0x50
 8004540:	e001      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04b      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d02e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004562:	d828      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d02a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d822      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004574:	d026      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800457a:	d81c      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004586:	d816      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800458c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004590:	d111      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 ff7d 	bl	8005498 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045a2:	e012      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f826 	bl	80055fc <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045b4:	e009      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	e006      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045bc:	bf00      	nop
 80045be:	e004      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045c0:	bf00      	nop
 80045c2:	e002      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045d0:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045de:	4928      	ldr	r1, [pc, #160]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	658b      	str	r3, [r1, #88]	; 0x58
 80045e4:	e001      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02f      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045fe:	d00e      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004604:	d814      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800460a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460e:	d10f      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800461c:	e00c      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ff37 	bl	8005498 <RCCEx_PLL2_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
      break;
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	490d      	ldr	r1, [pc, #52]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	650b      	str	r3, [r1, #80]	; 0x50
 8004650:	e001      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d033      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	2b03      	cmp	r3, #3
 8004668:	d81c      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046ab 	.word	0x080046ab
 8004674:	08004685 	.word	0x08004685
 8004678:	08004693 	.word	0x08004693
 800467c:	080046ab 	.word	0x080046ab
 8004680:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004684:	4bb8      	ldr	r3, [pc, #736]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4ab7      	ldr	r2, [pc, #732]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800468a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004690:	e00c      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fefd 	bl	8005498 <RCCEx_PLL2_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80046aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046b2:	4bad      	ldr	r3, [pc, #692]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	49aa      	ldr	r1, [pc, #680]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046c4:	e001      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8086 	beq.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d8:	4ba4      	ldr	r3, [pc, #656]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4aa3      	ldr	r2, [pc, #652]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e4:	f7fc ffa6 	bl	8001634 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ec:	f7fc ffa2 	bl	8001634 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d902      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	75fb      	strb	r3, [r7, #23]
        break;
 80046fe:	e005      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004700:	4b9a      	ldr	r3, [pc, #616]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ef      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d166      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004712:	4b95      	ldr	r3, [pc, #596]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800471c:	4053      	eors	r3, r2
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d013      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b90      	ldr	r3, [pc, #576]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a8c      	ldr	r2, [pc, #560]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800473c:	4b8a      	ldr	r3, [pc, #552]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a89      	ldr	r2, [pc, #548]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004748:	4a87      	ldr	r2, [pc, #540]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004758:	d115      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fc ff6b 	bl	8001634 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004760:	e00b      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fc ff67 	bl	8001634 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d902      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	75fb      	strb	r3, [r7, #23]
            break;
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ed      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d126      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800479c:	4b72      	ldr	r3, [pc, #456]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047aa:	0919      	lsrs	r1, r3, #4
 80047ac:	4b70      	ldr	r3, [pc, #448]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80047ae:	400b      	ands	r3, r1
 80047b0:	496d      	ldr	r1, [pc, #436]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	610b      	str	r3, [r1, #16]
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80047b8:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047c2:	6113      	str	r3, [r2, #16]
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d2:	4965      	ldr	r1, [pc, #404]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	670b      	str	r3, [r1, #112]	; 0x70
 80047d8:	e004      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
 80047de:	e001      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d07e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f4:	2b28      	cmp	r3, #40	; 0x28
 80047f6:	d867      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	080048cf 	.word	0x080048cf
 8004804:	080048c9 	.word	0x080048c9
 8004808:	080048c9 	.word	0x080048c9
 800480c:	080048c9 	.word	0x080048c9
 8004810:	080048c9 	.word	0x080048c9
 8004814:	080048c9 	.word	0x080048c9
 8004818:	080048c9 	.word	0x080048c9
 800481c:	080048c9 	.word	0x080048c9
 8004820:	080048a5 	.word	0x080048a5
 8004824:	080048c9 	.word	0x080048c9
 8004828:	080048c9 	.word	0x080048c9
 800482c:	080048c9 	.word	0x080048c9
 8004830:	080048c9 	.word	0x080048c9
 8004834:	080048c9 	.word	0x080048c9
 8004838:	080048c9 	.word	0x080048c9
 800483c:	080048c9 	.word	0x080048c9
 8004840:	080048b7 	.word	0x080048b7
 8004844:	080048c9 	.word	0x080048c9
 8004848:	080048c9 	.word	0x080048c9
 800484c:	080048c9 	.word	0x080048c9
 8004850:	080048c9 	.word	0x080048c9
 8004854:	080048c9 	.word	0x080048c9
 8004858:	080048c9 	.word	0x080048c9
 800485c:	080048c9 	.word	0x080048c9
 8004860:	080048cf 	.word	0x080048cf
 8004864:	080048c9 	.word	0x080048c9
 8004868:	080048c9 	.word	0x080048c9
 800486c:	080048c9 	.word	0x080048c9
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048c9 	.word	0x080048c9
 8004878:	080048c9 	.word	0x080048c9
 800487c:	080048c9 	.word	0x080048c9
 8004880:	080048cf 	.word	0x080048cf
 8004884:	080048c9 	.word	0x080048c9
 8004888:	080048c9 	.word	0x080048c9
 800488c:	080048c9 	.word	0x080048c9
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	080048cf 	.word	0x080048cf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fdf4 	bl	8005498 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048b4:	e00c      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fe9d 	bl	80055fc <RCCEx_PLL3_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048c6:	e003      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
      break;
 80048cc:	e000      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80048ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048d6:	4b24      	ldr	r3, [pc, #144]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e2:	4921      	ldr	r1, [pc, #132]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	654b      	str	r3, [r1, #84]	; 0x54
 80048e8:	e001      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d820      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800494b 	.word	0x0800494b
 800490c:	08004921 	.word	0x08004921
 8004910:	08004933 	.word	0x08004933
 8004914:	0800494b 	.word	0x0800494b
 8004918:	0800494b 	.word	0x0800494b
 800491c:	0800494b 	.word	0x0800494b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fdb6 	bl	8005498 <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004930:	e00c      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	2101      	movs	r1, #1
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe5f 	bl	80055fc <RCCEx_PLL3_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004942:	e003      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
      break;
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800494a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d110      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495e:	4902      	ldr	r1, [pc, #8]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	654b      	str	r3, [r1, #84]	; 0x54
 8004964:	e008      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400
 800496c:	58024800 	.word	0x58024800
 8004970:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d039      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	2b05      	cmp	r3, #5
 800498c:	d820      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049d7 	.word	0x080049d7
 8004998:	080049ad 	.word	0x080049ad
 800499c:	080049bf 	.word	0x080049bf
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	2101      	movs	r1, #1
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fd70 	bl	8005498 <RCCEx_PLL2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049bc:	e00c      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3324      	adds	r3, #36	; 0x24
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fe19 	bl	80055fc <RCCEx_PLL3_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80049d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049de:	4bb7      	ldr	r3, [pc, #732]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	f023 0207 	bic.w	r2, r3, #7
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	49b3      	ldr	r1, [pc, #716]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	658b      	str	r3, [r1, #88]	; 0x58
 80049f2:	e001      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d04b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a0e:	d02e      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a14:	d828      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1a:	d02a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d822      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a26:	d026      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a2c:	d81c      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a32:	d010      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a38:	d816      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01d      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a42:	d111      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd24 	bl	8005498 <RCCEx_PLL2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a54:	e012      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3324      	adds	r3, #36	; 0x24
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fdcd 	bl	80055fc <RCCEx_PLL3_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a66:	e009      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6c:	e006      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e004      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a72:	bf00      	nop
 8004a74:	e002      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a82:	4b8e      	ldr	r3, [pc, #568]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a90:	498a      	ldr	r1, [pc, #552]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	654b      	str	r3, [r1, #84]	; 0x54
 8004a96:	e001      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d04b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ab2:	d02e      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004ab4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ab8:	d828      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d02a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d822      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aca:	d026      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad0:	d81c      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad6:	d010      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004adc:	d816      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01d      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fcd2 	bl	8005498 <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004af8:	e012      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3324      	adds	r3, #36	; 0x24
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd7b 	bl	80055fc <RCCEx_PLL3_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b0a:	e009      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b10:	e006      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b12:	bf00      	nop
 8004b14:	e004      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b16:	bf00      	nop
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b34:	4961      	ldr	r1, [pc, #388]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	658b      	str	r3, [r1, #88]	; 0x58
 8004b3a:	e001      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d04b      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b56:	d02e      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004b58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b5c:	d828      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d02a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	d822      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b6e:	d026      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004b70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b74:	d81c      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7a:	d010      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b80:	d816      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01d      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8a:	d111      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fc80 	bl	8005498 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e012      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fd29 	bl	80055fc <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bd8:	4938      	ldr	r1, [pc, #224]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8004bde:	e001      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d10a      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	2102      	movs	r1, #2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fcfa 	bl	80055fc <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c12:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c20:	4926      	ldr	r1, [pc, #152]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2102      	movs	r1, #2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fcd9 	bl	80055fc <RCCEx_PLL3_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c54:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c62:	4916      	ldr	r1, [pc, #88]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d036      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d01f      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c84:	d817      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004c90:	e011      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fbfd 	bl	8005498 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ca2:	e00e      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fca6 	bl	80055fc <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004cbc:	58024400 	.word	0x58024400
      break;
 8004cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc8:	4b93      	ldr	r3, [pc, #588]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cd6:	4990      	ldr	r1, [pc, #576]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	658b      	str	r3, [r1, #88]	; 0x58
 8004cdc:	e001      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d033      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cf8:	d01c      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004cfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cfe:	d816      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d04:	d003      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d0a:	d007      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0e:	4b82      	ldr	r3, [pc, #520]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a81      	ldr	r2, [pc, #516]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d1a:	e00c      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3324      	adds	r3, #36	; 0x24
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fc6a 	bl	80055fc <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d2c:	e003      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
      break;
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3c:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4a:	4973      	ldr	r1, [pc, #460]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	654b      	str	r3, [r1, #84]	; 0x54
 8004d50:	e001      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d029      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d007      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004d70:	e00f      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d72:	4b69      	ldr	r3, [pc, #420]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	4a68      	ldr	r2, [pc, #416]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb86 	bl	8005498 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d90:	e002      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
      break;
 8004d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d9e:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	495b      	ldr	r1, [pc, #364]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004db0:	e001      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3324      	adds	r3, #36	; 0x24
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fc17 	bl	80055fc <RCCEx_PLL3_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d030      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dec:	d017      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df2:	d811      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df8:	d013      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfe:	d80b      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0a:	4b43      	ldr	r3, [pc, #268]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e16:	e007      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1c:	e004      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3a:	4937      	ldr	r1, [pc, #220]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8004e40:	e001      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	492e      	ldr	r1, [pc, #184]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e7e:	4926      	ldr	r1, [pc, #152]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e9c:	491e      	ldr	r1, [pc, #120]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb8:	6113      	str	r3, [r2, #16]
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ec4:	4914      	ldr	r1, [pc, #80]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da08      	bge.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	4906      	ldr	r1, [pc, #24]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f04:	7dbb      	ldrb	r3, [r7, #22]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	58024400 	.word	0x58024400

08004f1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f20:	f7ff f860 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4904      	ldr	r1, [pc, #16]	; (8004f44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	58024400 	.word	0x58024400
 8004f44:	0800807c 	.word	0x0800807c

08004f48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f50:	4ba1      	ldr	r3, [pc, #644]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f5a:	4b9f      	ldr	r3, [pc, #636]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	0b1b      	lsrs	r3, r3, #12
 8004f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f66:	4b9c      	ldr	r3, [pc, #624]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004f72:	4b99      	ldr	r3, [pc, #612]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	08db      	lsrs	r3, r3, #3
 8004f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8111 	beq.w	80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f000 8083 	beq.w	80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	f200 80a1 	bhi.w	80050e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d056      	beq.n	8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004fb2:	e099      	b.n	80050e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fb4:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02d      	beq.n	800501c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fc0:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	4a84      	ldr	r2, [pc, #528]	; (80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fea:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ffe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800501a:	e087      	b.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502e:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005042:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800505e:	e065      	b.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800506e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005072:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005082:	ed97 6a03 	vldr	s12, [r7, #12]
 8005086:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800508a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050a2:	e043      	b.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	4b48      	ldr	r3, [pc, #288]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050e6:	e021      	b.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a03 	vldr	s12, [r7, #12]
 800510e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800512a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800512c:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	0a5b      	lsrs	r3, r3, #9
 8005132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005146:	edd7 6a07 	vldr	s13, [r7, #28]
 800514a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005152:	ee17 2a90 	vmov	r2, s15
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800515a:	4b1f      	ldr	r3, [pc, #124]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005174:	edd7 6a07 	vldr	s13, [r7, #28]
 8005178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005180:	ee17 2a90 	vmov	r2, s15
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ae:	ee17 2a90 	vmov	r2, s15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051b6:	e008      	b.n	80051ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
}
 80051ca:	bf00      	nop
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	03d09000 	.word	0x03d09000
 80051e0:	46000000 	.word	0x46000000
 80051e4:	4c742400 	.word	0x4c742400
 80051e8:	4a742400 	.word	0x4a742400
 80051ec:	4af42400 	.word	0x4af42400

080051f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051f8:	4ba1      	ldr	r3, [pc, #644]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005202:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	0d1b      	lsrs	r3, r3, #20
 8005208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800520e:	4b9c      	ldr	r3, [pc, #624]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800521a:	4b99      	ldr	r3, [pc, #612]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	08db      	lsrs	r3, r3, #3
 8005220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8111 	beq.w	8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f000 8083 	beq.w	800534c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b02      	cmp	r3, #2
 800524a:	f200 80a1 	bhi.w	8005390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d056      	beq.n	8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800525a:	e099      	b.n	8005390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525c:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02d      	beq.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005268:	4b85      	ldr	r3, [pc, #532]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	4a84      	ldr	r2, [pc, #528]	; (8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b7b      	ldr	r3, [pc, #492]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80052c2:	e087      	b.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800548c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d6:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005306:	e065      	b.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531a:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532a:	ed97 6a03 	vldr	s12, [r7, #12]
 800532e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800534a:	e043      	b.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005372:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800538e:	e021      	b.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80053d4:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	0a5b      	lsrs	r3, r3, #9
 80053da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fa:	ee17 2a90 	vmov	r2, s15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005402:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800541c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005428:	ee17 2a90 	vmov	r2, s15
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800544a:	edd7 6a07 	vldr	s13, [r7, #28]
 800544e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005456:	ee17 2a90 	vmov	r2, s15
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
}
 8005472:	bf00      	nop
 8005474:	3724      	adds	r7, #36	; 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	58024400 	.word	0x58024400
 8005484:	03d09000 	.word	0x03d09000
 8005488:	46000000 	.word	0x46000000
 800548c:	4c742400 	.word	0x4c742400
 8005490:	4a742400 	.word	0x4a742400
 8005494:	4af42400 	.word	0x4af42400

08005498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054a6:	4b53      	ldr	r3, [pc, #332]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d101      	bne.n	80054b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e099      	b.n	80055ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054b6:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a4e      	ldr	r2, [pc, #312]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c2:	f7fc f8b7 	bl	8001634 <HAL_GetTick>
 80054c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054c8:	e008      	b.n	80054dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054ca:	f7fc f8b3 	bl	8001634 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e086      	b.n	80055ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054dc:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054e8:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	493f      	ldr	r1, [pc, #252]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	628b      	str	r3, [r1, #40]	; 0x28
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	3b01      	subs	r3, #1
 800550c:	025b      	lsls	r3, r3, #9
 800550e:	b29b      	uxth	r3, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	3b01      	subs	r3, #1
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800552c:	4931      	ldr	r1, [pc, #196]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005532:	4b30      	ldr	r3, [pc, #192]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	492d      	ldr	r1, [pc, #180]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005544:	4b2b      	ldr	r3, [pc, #172]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	f023 0220 	bic.w	r2, r3, #32
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	4928      	ldr	r1, [pc, #160]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005566:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <RCCEx_PLL2_Config+0x160>)
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	69d2      	ldr	r2, [r2, #28]
 800556e:	00d2      	lsls	r2, r2, #3
 8005570:	4920      	ldr	r1, [pc, #128]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005576:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800557c:	f043 0310 	orr.w	r3, r3, #16
 8005580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005588:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800558e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005594:	e00f      	b.n	80055b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d106      	bne.n	80055aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800559c:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055a8:	e005      	b.n	80055b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c2:	f7fc f837 	bl	8001634 <HAL_GetTick>
 80055c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055c8:	e008      	b.n	80055dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055ca:	f7fc f833 	bl	8001634 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e006      	b.n	80055ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <RCCEx_PLL2_Config+0x15c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	ffff0007 	.word	0xffff0007

080055fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800560a:	4b53      	ldr	r3, [pc, #332]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b03      	cmp	r3, #3
 8005614:	d101      	bne.n	800561a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e099      	b.n	800574e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800561a:	4b4f      	ldr	r3, [pc, #316]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005626:	f7fc f805 	bl	8001634 <HAL_GetTick>
 800562a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800562c:	e008      	b.n	8005640 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800562e:	f7fc f801 	bl	8001634 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e086      	b.n	800574e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005640:	4b45      	ldr	r3, [pc, #276]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f0      	bne.n	800562e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800564c:	4b42      	ldr	r3, [pc, #264]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	051b      	lsls	r3, r3, #20
 800565a:	493f      	ldr	r1, [pc, #252]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	628b      	str	r3, [r1, #40]	; 0x28
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	3b01      	subs	r3, #1
 8005666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	3b01      	subs	r3, #1
 8005670:	025b      	lsls	r3, r3, #9
 8005672:	b29b      	uxth	r3, r3
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	3b01      	subs	r3, #1
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005690:	4931      	ldr	r1, [pc, #196]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005696:	4b30      	ldr	r3, [pc, #192]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	492d      	ldr	r1, [pc, #180]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4928      	ldr	r1, [pc, #160]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056ba:	4b27      	ldr	r3, [pc, #156]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	4a26      	ldr	r2, [pc, #152]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <RCCEx_PLL3_Config+0x160>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	69d2      	ldr	r2, [r2, #28]
 80056d2:	00d2      	lsls	r2, r2, #3
 80056d4:	4920      	ldr	r1, [pc, #128]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 80056f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056f8:	e00f      	b.n	800571a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d106      	bne.n	800570e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4a14      	ldr	r2, [pc, #80]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005706:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800570a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800570c:	e005      	b.n	800571a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4a11      	ldr	r2, [pc, #68]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005726:	f7fb ff85 	bl	8001634 <HAL_GetTick>
 800572a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800572c:	e008      	b.n	8005740 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800572e:	f7fb ff81 	bl	8001634 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e006      	b.n	800574e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <RCCEx_PLL3_Config+0x15c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	ffff0007 	.word	0xffff0007

08005760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e042      	b.n	80057f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb fc7b 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	; 0x24
 800578e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f996 	bl	8005ad4 <UART_SetConfig>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e022      	b.n	80057f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 feea 	bl	8006594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 ff71 	bl	80066d8 <UART_CheckIdleState>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005816:	2b20      	cmp	r3, #32
 8005818:	f040 8083 	bne.w	8005922 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_UART_Transmit+0x28>
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e07b      	b.n	8005924 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_UART_Transmit+0x3a>
 8005836:	2302      	movs	r3, #2
 8005838:	e074      	b.n	8005924 <HAL_UART_Transmit+0x124>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2221      	movs	r2, #33	; 0x21
 800584e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005852:	f7fb feef 	bl	8001634 <HAL_GetTick>
 8005856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d108      	bne.n	8005884 <HAL_UART_Transmit+0x84>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e003      	b.n	800588c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005894:	e02c      	b.n	80058f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	2180      	movs	r1, #128	; 0x80
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 ff64 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e039      	b.n	8005924 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	3302      	adds	r3, #2
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e007      	b.n	80058de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3301      	adds	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1cc      	bne.n	8005896 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	2140      	movs	r1, #64	; 0x40
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 ff31 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e006      	b.n	8005924 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	2b20      	cmp	r3, #32
 8005944:	f040 80c0 	bne.w	8005ac8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Receive+0x28>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0b8      	b.n	8005aca <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_UART_Receive+0x3a>
 8005962:	2302      	movs	r3, #2
 8005964:	e0b1      	b.n	8005aca <HAL_UART_Receive+0x19e>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2222      	movs	r2, #34	; 0x22
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005984:	f7fb fe56 	bl	8001634 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d10e      	bne.n	80059c2 <HAL_UART_Receive+0x96>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_UART_Receive+0x8c>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059b6:	e02d      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059c0:	e028      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_UART_Receive+0xba>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Receive+0xb0>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059da:	e01b      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	227f      	movs	r2, #127	; 0x7f
 80059e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059e4:	e016      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ee:	d10d      	bne.n	8005a0c <HAL_UART_Receive+0xe0>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_UART_Receive+0xd6>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	227f      	movs	r2, #127	; 0x7f
 80059fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a00:	e008      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	223f      	movs	r2, #63	; 0x3f
 8005a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Receive+0xe8>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a1a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a24:	d108      	bne.n	8005a38 <HAL_UART_Receive+0x10c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e003      	b.n	8005a40 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a48:	e032      	b.n	8005ab0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2120      	movs	r1, #32
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fe8a 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e032      	b.n	8005aca <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	8a7b      	ldrh	r3, [r7, #18]
 8005a74:	4013      	ands	r3, r2
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	3302      	adds	r3, #2
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e00c      	b.n	8005a9e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	8a7b      	ldrh	r3, [r7, #18]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4013      	ands	r3, r2
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1c6      	bne.n	8005a4a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	b5b0      	push	{r4, r5, r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4bbf      	ldr	r3, [pc, #764]	; (8005e00 <UART_SetConfig+0x32c>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4ab5      	ldr	r2, [pc, #724]	; (8005e04 <UART_SetConfig+0x330>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	4bb0      	ldr	r3, [pc, #704]	; (8005e08 <UART_SetConfig+0x334>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f023 010f 	bic.w	r1, r3, #15
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4aa7      	ldr	r2, [pc, #668]	; (8005e0c <UART_SetConfig+0x338>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d176      	bne.n	8005c60 <UART_SetConfig+0x18c>
 8005b72:	4ba7      	ldr	r3, [pc, #668]	; (8005e10 <UART_SetConfig+0x33c>)
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7a:	2b28      	cmp	r3, #40	; 0x28
 8005b7c:	d86c      	bhi.n	8005c58 <UART_SetConfig+0x184>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0xb0>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005c29 	.word	0x08005c29
 8005b88:	08005c59 	.word	0x08005c59
 8005b8c:	08005c59 	.word	0x08005c59
 8005b90:	08005c59 	.word	0x08005c59
 8005b94:	08005c59 	.word	0x08005c59
 8005b98:	08005c59 	.word	0x08005c59
 8005b9c:	08005c59 	.word	0x08005c59
 8005ba0:	08005c59 	.word	0x08005c59
 8005ba4:	08005c31 	.word	0x08005c31
 8005ba8:	08005c59 	.word	0x08005c59
 8005bac:	08005c59 	.word	0x08005c59
 8005bb0:	08005c59 	.word	0x08005c59
 8005bb4:	08005c59 	.word	0x08005c59
 8005bb8:	08005c59 	.word	0x08005c59
 8005bbc:	08005c59 	.word	0x08005c59
 8005bc0:	08005c59 	.word	0x08005c59
 8005bc4:	08005c39 	.word	0x08005c39
 8005bc8:	08005c59 	.word	0x08005c59
 8005bcc:	08005c59 	.word	0x08005c59
 8005bd0:	08005c59 	.word	0x08005c59
 8005bd4:	08005c59 	.word	0x08005c59
 8005bd8:	08005c59 	.word	0x08005c59
 8005bdc:	08005c59 	.word	0x08005c59
 8005be0:	08005c59 	.word	0x08005c59
 8005be4:	08005c41 	.word	0x08005c41
 8005be8:	08005c59 	.word	0x08005c59
 8005bec:	08005c59 	.word	0x08005c59
 8005bf0:	08005c59 	.word	0x08005c59
 8005bf4:	08005c59 	.word	0x08005c59
 8005bf8:	08005c59 	.word	0x08005c59
 8005bfc:	08005c59 	.word	0x08005c59
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c49 	.word	0x08005c49
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005c59 	.word	0x08005c59
 8005c10:	08005c59 	.word	0x08005c59
 8005c14:	08005c59 	.word	0x08005c59
 8005c18:	08005c59 	.word	0x08005c59
 8005c1c:	08005c59 	.word	0x08005c59
 8005c20:	08005c59 	.word	0x08005c59
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e222      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e21e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e21a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e216      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e212      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e20e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e20a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <UART_SetConfig+0x340>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d130      	bne.n	8005ccc <UART_SetConfig+0x1f8>
 8005c6a:	4b69      	ldr	r3, [pc, #420]	; (8005e10 <UART_SetConfig+0x33c>)
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d826      	bhi.n	8005cc4 <UART_SetConfig+0x1f0>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x1a8>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c95 	.word	0x08005c95
 8005c80:	08005c9d 	.word	0x08005c9d
 8005c84:	08005ca5 	.word	0x08005ca5
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e1ec      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e1e8      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005caa:	e1e4      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb2:	e1e0      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cba:	e1dc      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc2:	e1d8      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cca:	e1d4      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a51      	ldr	r2, [pc, #324]	; (8005e18 <UART_SetConfig+0x344>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d130      	bne.n	8005d38 <UART_SetConfig+0x264>
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <UART_SetConfig+0x33c>)
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d826      	bhi.n	8005d30 <UART_SetConfig+0x25c>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0x214>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	08005d11 	.word	0x08005d11
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d21 	.word	0x08005d21
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e1b6      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e1b2      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d10:	2308      	movs	r3, #8
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e1ae      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e1aa      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d20:	2320      	movs	r3, #32
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e1a6      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d28:	2340      	movs	r3, #64	; 0x40
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e1a2      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e19e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a37      	ldr	r2, [pc, #220]	; (8005e1c <UART_SetConfig+0x348>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d130      	bne.n	8005da4 <UART_SetConfig+0x2d0>
 8005d42:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <UART_SetConfig+0x33c>)
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d826      	bhi.n	8005d9c <UART_SetConfig+0x2c8>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x280>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d6d 	.word	0x08005d6d
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	08005d7d 	.word	0x08005d7d
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005d8d 	.word	0x08005d8d
 8005d68:	08005d95 	.word	0x08005d95
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e180      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d74:	2304      	movs	r3, #4
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e17c      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	e178      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d84:	2310      	movs	r3, #16
 8005d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8a:	e174      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d92:	e170      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d94:	2340      	movs	r3, #64	; 0x40
 8005d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9a:	e16c      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da2:	e168      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <UART_SetConfig+0x34c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d142      	bne.n	8005e34 <UART_SetConfig+0x360>
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <UART_SetConfig+0x33c>)
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d838      	bhi.n	8005e2c <UART_SetConfig+0x358>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <UART_SetConfig+0x2ec>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd9 	.word	0x08005dd9
 8005dc4:	08005de1 	.word	0x08005de1
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e25 	.word	0x08005e25
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e14a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de6:	e146      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dee:	e142      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df6:	e13e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfe:	e13a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005e00:	cfff69f3 	.word	0xcfff69f3
 8005e04:	58000c00 	.word	0x58000c00
 8005e08:	11fff4ff 	.word	0x11fff4ff
 8005e0c:	40011000 	.word	0x40011000
 8005e10:	58024400 	.word	0x58024400
 8005e14:	40004400 	.word	0x40004400
 8005e18:	40004800 	.word	0x40004800
 8005e1c:	40004c00 	.word	0x40004c00
 8005e20:	40005000 	.word	0x40005000
 8005e24:	2340      	movs	r3, #64	; 0x40
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e124      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e120      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4acc      	ldr	r2, [pc, #816]	; (800616c <UART_SetConfig+0x698>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d176      	bne.n	8005f2c <UART_SetConfig+0x458>
 8005e3e:	4bcc      	ldr	r3, [pc, #816]	; (8006170 <UART_SetConfig+0x69c>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d86c      	bhi.n	8005f24 <UART_SetConfig+0x450>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x37c>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005ef5 	.word	0x08005ef5
 8005e54:	08005f25 	.word	0x08005f25
 8005e58:	08005f25 	.word	0x08005f25
 8005e5c:	08005f25 	.word	0x08005f25
 8005e60:	08005f25 	.word	0x08005f25
 8005e64:	08005f25 	.word	0x08005f25
 8005e68:	08005f25 	.word	0x08005f25
 8005e6c:	08005f25 	.word	0x08005f25
 8005e70:	08005efd 	.word	0x08005efd
 8005e74:	08005f25 	.word	0x08005f25
 8005e78:	08005f25 	.word	0x08005f25
 8005e7c:	08005f25 	.word	0x08005f25
 8005e80:	08005f25 	.word	0x08005f25
 8005e84:	08005f25 	.word	0x08005f25
 8005e88:	08005f25 	.word	0x08005f25
 8005e8c:	08005f25 	.word	0x08005f25
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f25 	.word	0x08005f25
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f25 	.word	0x08005f25
 8005ea0:	08005f25 	.word	0x08005f25
 8005ea4:	08005f25 	.word	0x08005f25
 8005ea8:	08005f25 	.word	0x08005f25
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005f25 	.word	0x08005f25
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	08005f25 	.word	0x08005f25
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f25 	.word	0x08005f25
 8005edc:	08005f25 	.word	0x08005f25
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e0bc      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e0b8      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e0b4      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e0b0      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	e0ac      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	e0a8      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2a:	e0a4      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a90      	ldr	r2, [pc, #576]	; (8006174 <UART_SetConfig+0x6a0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d130      	bne.n	8005f98 <UART_SetConfig+0x4c4>
 8005f36:	4b8e      	ldr	r3, [pc, #568]	; (8006170 <UART_SetConfig+0x69c>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d826      	bhi.n	8005f90 <UART_SetConfig+0x4bc>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x474>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f61 	.word	0x08005f61
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e086      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e082      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e07e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e07a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f80:	2320      	movs	r3, #32
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e076      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	e072      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f96:	e06e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a76      	ldr	r2, [pc, #472]	; (8006178 <UART_SetConfig+0x6a4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d130      	bne.n	8006004 <UART_SetConfig+0x530>
 8005fa2:	4b73      	ldr	r3, [pc, #460]	; (8006170 <UART_SetConfig+0x69c>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d826      	bhi.n	8005ffc <UART_SetConfig+0x528>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x4e0>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fdd 	.word	0x08005fdd
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e050      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e04c      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e048      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fea:	e044      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff2:	e040      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffa:	e03c      	b.n	8006076 <UART_SetConfig+0x5a2>
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006002:	e038      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5c      	ldr	r2, [pc, #368]	; (800617c <UART_SetConfig+0x6a8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d130      	bne.n	8006070 <UART_SetConfig+0x59c>
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <UART_SetConfig+0x69c>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b05      	cmp	r3, #5
 8006018:	d826      	bhi.n	8006068 <UART_SetConfig+0x594>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x54c>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006039 	.word	0x08006039
 8006024:	08006041 	.word	0x08006041
 8006028:	08006049 	.word	0x08006049
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	2302      	movs	r3, #2
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e01a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e016      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e012      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006056:	e00e      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006058:	2320      	movs	r3, #32
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605e:	e00a      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006066:	e006      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606e:	e002      	b.n	8006076 <UART_SetConfig+0x5a2>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a40      	ldr	r2, [pc, #256]	; (800617c <UART_SetConfig+0x6a8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	f040 80ef 	bne.w	8006260 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006086:	2b20      	cmp	r3, #32
 8006088:	dc46      	bgt.n	8006118 <UART_SetConfig+0x644>
 800608a:	2b02      	cmp	r3, #2
 800608c:	f2c0 8081 	blt.w	8006192 <UART_SetConfig+0x6be>
 8006090:	3b02      	subs	r3, #2
 8006092:	2b1e      	cmp	r3, #30
 8006094:	d87d      	bhi.n	8006192 <UART_SetConfig+0x6be>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x5c8>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	0800611f 	.word	0x0800611f
 80060a0:	08006193 	.word	0x08006193
 80060a4:	08006127 	.word	0x08006127
 80060a8:	08006193 	.word	0x08006193
 80060ac:	08006193 	.word	0x08006193
 80060b0:	08006193 	.word	0x08006193
 80060b4:	08006137 	.word	0x08006137
 80060b8:	08006193 	.word	0x08006193
 80060bc:	08006193 	.word	0x08006193
 80060c0:	08006193 	.word	0x08006193
 80060c4:	08006193 	.word	0x08006193
 80060c8:	08006193 	.word	0x08006193
 80060cc:	08006193 	.word	0x08006193
 80060d0:	08006193 	.word	0x08006193
 80060d4:	08006147 	.word	0x08006147
 80060d8:	08006193 	.word	0x08006193
 80060dc:	08006193 	.word	0x08006193
 80060e0:	08006193 	.word	0x08006193
 80060e4:	08006193 	.word	0x08006193
 80060e8:	08006193 	.word	0x08006193
 80060ec:	08006193 	.word	0x08006193
 80060f0:	08006193 	.word	0x08006193
 80060f4:	08006193 	.word	0x08006193
 80060f8:	08006193 	.word	0x08006193
 80060fc:	08006193 	.word	0x08006193
 8006100:	08006193 	.word	0x08006193
 8006104:	08006193 	.word	0x08006193
 8006108:	08006193 	.word	0x08006193
 800610c:	08006193 	.word	0x08006193
 8006110:	08006193 	.word	0x08006193
 8006114:	08006185 	.word	0x08006185
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d036      	beq.n	800618a <UART_SetConfig+0x6b6>
 800611c:	e039      	b.n	8006192 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800611e:	f7fe fefd 	bl	8004f1c <HAL_RCCEx_GetD3PCLK1Freq>
 8006122:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006124:	e03b      	b.n	800619e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006126:	f107 0314 	add.w	r3, r7, #20
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe ff0c 	bl	8004f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006134:	e033      	b.n	800619e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff f858 	bl	80051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006144:	e02b      	b.n	800619e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <UART_SetConfig+0x69c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <UART_SetConfig+0x69c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <UART_SetConfig+0x6ac>)
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006164:	e01b      	b.n	800619e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <UART_SetConfig+0x6ac>)
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800616a:	e018      	b.n	800619e <UART_SetConfig+0x6ca>
 800616c:	40011400 	.word	0x40011400
 8006170:	58024400 	.word	0x58024400
 8006174:	40007800 	.word	0x40007800
 8006178:	40007c00 	.word	0x40007c00
 800617c:	58000c00 	.word	0x58000c00
 8006180:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006184:	4bc4      	ldr	r3, [pc, #784]	; (8006498 <UART_SetConfig+0x9c4>)
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006190:	e005      	b.n	800619e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800619c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 81da 	beq.w	800655a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	4abc      	ldr	r2, [pc, #752]	; (800649c <UART_SetConfig+0x9c8>)
 80061ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4413      	add	r3, r2
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d305      	bcc.n	80061d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d903      	bls.n	80061de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061dc:	e1bd      	b.n	800655a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	4618      	mov	r0, r3
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	4aac      	ldr	r2, [pc, #688]	; (800649c <UART_SetConfig+0x9c8>)
 80061ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	f7fa f8c3 	bl	8000380 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	020b      	lsls	r3, r1, #8
 800620c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006210:	0202      	lsls	r2, r0, #8
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	6849      	ldr	r1, [r1, #4]
 8006216:	0849      	lsrs	r1, r1, #1
 8006218:	4608      	mov	r0, r1
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	1814      	adds	r4, r2, r0
 8006220:	eb43 0501 	adc.w	r5, r3, r1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa f8a5 	bl	8000380 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4613      	mov	r3, r2
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006244:	d308      	bcc.n	8006258 <UART_SetConfig+0x784>
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624c:	d204      	bcs.n	8006258 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e180      	b.n	800655a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800625e:	e17c      	b.n	800655a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006268:	f040 80bf 	bne.w	80063ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800626c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006270:	2b20      	cmp	r3, #32
 8006272:	dc49      	bgt.n	8006308 <UART_SetConfig+0x834>
 8006274:	2b00      	cmp	r3, #0
 8006276:	db7c      	blt.n	8006372 <UART_SetConfig+0x89e>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d87a      	bhi.n	8006372 <UART_SetConfig+0x89e>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x7b0>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	0800630f 	.word	0x0800630f
 8006288:	08006317 	.word	0x08006317
 800628c:	08006373 	.word	0x08006373
 8006290:	08006373 	.word	0x08006373
 8006294:	0800631f 	.word	0x0800631f
 8006298:	08006373 	.word	0x08006373
 800629c:	08006373 	.word	0x08006373
 80062a0:	08006373 	.word	0x08006373
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	08006373 	.word	0x08006373
 80062ac:	08006373 	.word	0x08006373
 80062b0:	08006373 	.word	0x08006373
 80062b4:	08006373 	.word	0x08006373
 80062b8:	08006373 	.word	0x08006373
 80062bc:	08006373 	.word	0x08006373
 80062c0:	08006373 	.word	0x08006373
 80062c4:	0800633f 	.word	0x0800633f
 80062c8:	08006373 	.word	0x08006373
 80062cc:	08006373 	.word	0x08006373
 80062d0:	08006373 	.word	0x08006373
 80062d4:	08006373 	.word	0x08006373
 80062d8:	08006373 	.word	0x08006373
 80062dc:	08006373 	.word	0x08006373
 80062e0:	08006373 	.word	0x08006373
 80062e4:	08006373 	.word	0x08006373
 80062e8:	08006373 	.word	0x08006373
 80062ec:	08006373 	.word	0x08006373
 80062f0:	08006373 	.word	0x08006373
 80062f4:	08006373 	.word	0x08006373
 80062f8:	08006373 	.word	0x08006373
 80062fc:	08006373 	.word	0x08006373
 8006300:	08006373 	.word	0x08006373
 8006304:	08006365 	.word	0x08006365
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d02e      	beq.n	800636a <UART_SetConfig+0x896>
 800630c:	e031      	b.n	8006372 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fd fe99 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8006312:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006314:	e033      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006316:	f7fd feab 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 800631a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800631c:	e02f      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631e:	f107 0314 	add.w	r3, r7, #20
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fe10 	bl	8004f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632c:	e027      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe ff5c 	bl	80051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633c:	e01f      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800633e:	4b58      	ldr	r3, [pc, #352]	; (80064a0 <UART_SetConfig+0x9cc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634a:	4b55      	ldr	r3, [pc, #340]	; (80064a0 <UART_SetConfig+0x9cc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a53      	ldr	r2, [pc, #332]	; (80064a4 <UART_SetConfig+0x9d0>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635c:	e00f      	b.n	800637e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800635e:	4b51      	ldr	r3, [pc, #324]	; (80064a4 <UART_SetConfig+0x9d0>)
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006362:	e00c      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006364:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <UART_SetConfig+0x9c4>)
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006368:	e009      	b.n	800637e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006370:	e005      	b.n	800637e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800637c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80ea 	beq.w	800655a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	4a44      	ldr	r2, [pc, #272]	; (800649c <UART_SetConfig+0x9c8>)
 800638c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006390:	461a      	mov	r2, r3
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	fbb3 f3f2 	udiv	r3, r3, r2
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d916      	bls.n	80063e2 <UART_SetConfig+0x90e>
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	d212      	bcs.n	80063e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f023 030f 	bic.w	r3, r3, #15
 80063c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d4:	4313      	orrs	r3, r2
 80063d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e0bb      	b.n	800655a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063e8:	e0b7      	b.n	800655a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	dc4a      	bgt.n	8006488 <UART_SetConfig+0x9b4>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f2c0 8086 	blt.w	8006504 <UART_SetConfig+0xa30>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	f200 8083 	bhi.w	8006504 <UART_SetConfig+0xa30>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <UART_SetConfig+0x930>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	0800648f 	.word	0x0800648f
 8006408:	080064a9 	.word	0x080064a9
 800640c:	08006505 	.word	0x08006505
 8006410:	08006505 	.word	0x08006505
 8006414:	080064b1 	.word	0x080064b1
 8006418:	08006505 	.word	0x08006505
 800641c:	08006505 	.word	0x08006505
 8006420:	08006505 	.word	0x08006505
 8006424:	080064c1 	.word	0x080064c1
 8006428:	08006505 	.word	0x08006505
 800642c:	08006505 	.word	0x08006505
 8006430:	08006505 	.word	0x08006505
 8006434:	08006505 	.word	0x08006505
 8006438:	08006505 	.word	0x08006505
 800643c:	08006505 	.word	0x08006505
 8006440:	08006505 	.word	0x08006505
 8006444:	080064d1 	.word	0x080064d1
 8006448:	08006505 	.word	0x08006505
 800644c:	08006505 	.word	0x08006505
 8006450:	08006505 	.word	0x08006505
 8006454:	08006505 	.word	0x08006505
 8006458:	08006505 	.word	0x08006505
 800645c:	08006505 	.word	0x08006505
 8006460:	08006505 	.word	0x08006505
 8006464:	08006505 	.word	0x08006505
 8006468:	08006505 	.word	0x08006505
 800646c:	08006505 	.word	0x08006505
 8006470:	08006505 	.word	0x08006505
 8006474:	08006505 	.word	0x08006505
 8006478:	08006505 	.word	0x08006505
 800647c:	08006505 	.word	0x08006505
 8006480:	08006505 	.word	0x08006505
 8006484:	080064f7 	.word	0x080064f7
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d037      	beq.n	80064fc <UART_SetConfig+0xa28>
 800648c:	e03a      	b.n	8006504 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648e:	f7fd fdd9 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8006492:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006494:	e03c      	b.n	8006510 <UART_SetConfig+0xa3c>
 8006496:	bf00      	nop
 8006498:	003d0900 	.word	0x003d0900
 800649c:	0800808c 	.word	0x0800808c
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7fd fde2 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 80064ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80064ae:	e02f      	b.n	8006510 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe fd47 	bl	8004f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064be:	e027      	b.n	8006510 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe fe93 	bl	80051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ce:	e01f      	b.n	8006510 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d0:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <UART_SetConfig+0xab0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064dc:	4b29      	ldr	r3, [pc, #164]	; (8006584 <UART_SetConfig+0xab0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <UART_SetConfig+0xab4>)
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064ee:	e00f      	b.n	8006510 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b25      	ldr	r3, [pc, #148]	; (8006588 <UART_SetConfig+0xab4>)
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064f4:	e00c      	b.n	8006510 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064f6:	4b25      	ldr	r3, [pc, #148]	; (800658c <UART_SetConfig+0xab8>)
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064fa:	e009      	b.n	8006510 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006502:	e005      	b.n	8006510 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800650e:	bf00      	nop
    }

    if (pclk != 0U)
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d021      	beq.n	800655a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <UART_SetConfig+0xabc>)
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	461a      	mov	r2, r3
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	fbb3 f2f2 	udiv	r2, r3, r2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	b29b      	uxth	r3, r3
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d908      	bls.n	8006554 <UART_SetConfig+0xa80>
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d204      	bcs.n	8006554 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e002      	b.n	800655a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006576:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800657a:	4618      	mov	r0, r3
 800657c:	3738      	adds	r7, #56	; 0x38
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
 8006588:	03d09000 	.word	0x03d09000
 800658c:	003d0900 	.word	0x003d0900
 8006590:	0800808c 	.word	0x0800808c

08006594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01a      	beq.n	80066aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006692:	d10a      	bne.n	80066aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e8:	f7fa ffa4 	bl	8001634 <HAL_GetTick>
 80066ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d10e      	bne.n	800671a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f82f 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e025      	b.n	8006766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d10e      	bne.n	8006746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f819 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e00f      	b.n	8006766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677e:	e062      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d05e      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006788:	f7fa ff54 	bl	8001634 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <UART_WaitOnFlagUntilTimeout+0x30>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11d      	bne.n	80067da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e045      	b.n	8006866 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02e      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f6:	d126      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006800:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006810:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e00f      	b.n	8006866 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4013      	ands	r3, r2
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	429a      	cmp	r2, r3
 8006854:	bf0c      	ite	eq
 8006856:	2301      	moveq	r3, #1
 8006858:	2300      	movne	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	429a      	cmp	r2, r3
 8006862:	d08d      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_UARTEx_DisableFifoMode+0x16>
 8006880:	2302      	movs	r3, #2
 8006882:	e027      	b.n	80068d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2224      	movs	r2, #36	; 0x24
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e02d      	b.n	8006954 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f84f 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e02d      	b.n	80069d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f811 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069f8:	e031      	b.n	8006a5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069fa:	2310      	movs	r3, #16
 80069fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069fe:	2310      	movs	r3, #16
 8006a00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	0e5b      	lsrs	r3, r3, #25
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0f5b      	lsrs	r3, r3, #29
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	7b3a      	ldrb	r2, [r7, #12]
 8006a26:	4911      	ldr	r1, [pc, #68]	; (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a28:	5c8a      	ldrb	r2, [r1, r2]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a2e:	7b3a      	ldrb	r2, [r7, #12]
 8006a30:	490f      	ldr	r1, [pc, #60]	; (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	7b7a      	ldrb	r2, [r7, #13]
 8006a44:	4909      	ldr	r1, [pc, #36]	; (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a46:	5c8a      	ldrb	r2, [r1, r2]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a4c:	7b7a      	ldrb	r2, [r7, #13]
 8006a4e:	4908      	ldr	r1, [pc, #32]	; (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	080080a4 	.word	0x080080a4
 8006a70:	080080ac 	.word	0x080080ac

08006a74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 001c 	add.w	r0, r7, #28
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d120      	bne.n	8006ace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <USB_CoreInit+0xd4>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d105      	bne.n	8006ac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa60 	bl	8006f88 <USB_CoreReset>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
 8006acc:	e01a      	b.n	8006b04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa54 	bl	8006f88 <USB_CoreReset>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
 8006af6:	e005      	b.n	8006b04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d116      	bne.n	8006b38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <USB_CoreInit+0xd8>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f043 0206 	orr.w	r2, r3, #6
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr
 8006b48:	ffbdffbf 	.word	0xffbdffbf
 8006b4c:	03ee0000 	.word	0x03ee0000

08006b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 0201 	bic.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d106      	bne.n	8006b9e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e00b      	b.n	8006bb6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e001      	b.n	8006bb6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e003      	b.n	8006bbe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006bb6:	2032      	movs	r0, #50	; 0x32
 8006bb8:	f7fa fd48 	bl	800164c <HAL_Delay>

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc8:	b084      	sub	sp, #16
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	e009      	b.n	8006bfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	3340      	adds	r3, #64	; 0x40
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b0e      	cmp	r3, #14
 8006c00:	d9f2      	bls.n	8006be8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11c      	bne.n	8006c42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c16:	f043 0302 	orr.w	r3, r3, #2
 8006c1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e005      	b.n	8006c4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	4619      	mov	r1, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	461a      	mov	r2, r3
 8006c6a:	680b      	ldr	r3, [r1, #0]
 8006c6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d10c      	bne.n	8006c8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f949 	bl	8006f14 <USB_SetDevSpeed>
 8006c82:	e008      	b.n	8006c96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c84:	2101      	movs	r1, #1
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f944 	bl	8006f14 <USB_SetDevSpeed>
 8006c8c:	e003      	b.n	8006c96 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c8e:	2103      	movs	r1, #3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f93f 	bl	8006f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c96:	2110      	movs	r1, #16
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f8f3 	bl	8006e84 <USB_FlushTxFifo>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f911 	bl	8006ed0 <USB_FlushRxFifo>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	e043      	b.n	8006d6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf8:	d118      	bne.n	8006d2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e013      	b.n	8006d3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e008      	b.n	8006d3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	3301      	adds	r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d3b7      	bcc.n	8006ce2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	e043      	b.n	8006e00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d8e:	d118      	bne.n	8006dc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e013      	b.n	8006dd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	461a      	mov	r2, r3
 8006dba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	e008      	b.n	8006dd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de0:	461a      	mov	r2, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	461a      	mov	r2, r3
 8006df4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006df8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3b7      	bcc.n	8006d78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f043 0210 	orr.w	r2, r3, #16
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <USB_DevInit+0x2b4>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f043 0208 	orr.w	r2, r3, #8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d105      	bne.n	8006e6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <USB_DevInit+0x2b8>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e78:	b004      	add	sp, #16
 8006e7a:	4770      	bx	lr
 8006e7c:	803c3800 	.word	0x803c3800
 8006e80:	40000004 	.word	0x40000004

08006e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <USB_FlushTxFifo+0x48>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e006      	b.n	8006ebe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d0f0      	beq.n	8006e9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	00030d40 	.word	0x00030d40

08006ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2210      	movs	r2, #16
 8006ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <USB_FlushRxFifo+0x40>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d901      	bls.n	8006ef4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e006      	b.n	8006f02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d0f0      	beq.n	8006ee2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	00030d40 	.word	0x00030d40

08006f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <USB_CoreReset+0x64>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e01b      	b.n	8006fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	daf2      	bge.n	8006f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f043 0201 	orr.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <USB_CoreReset+0x64>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d0f0      	beq.n	8006fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <__errno>:
 8006ff0:	4b01      	ldr	r3, [pc, #4]	; (8006ff8 <__errno+0x8>)
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	24000010 	.word	0x24000010

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	; (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	; (8007040 <__libc_init_array+0x44>)
 8007010:	f000 ffec 	bl	8007fec <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	08008154 	.word	0x08008154
 8007038:	08008154 	.word	0x08008154
 800703c:	08008154 	.word	0x08008154
 8007040:	08008158 	.word	0x08008158

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <iprintf>:
 8007054:	b40f      	push	{r0, r1, r2, r3}
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <iprintf+0x2c>)
 8007058:	b513      	push	{r0, r1, r4, lr}
 800705a:	681c      	ldr	r4, [r3, #0]
 800705c:	b124      	cbz	r4, 8007068 <iprintf+0x14>
 800705e:	69a3      	ldr	r3, [r4, #24]
 8007060:	b913      	cbnz	r3, 8007068 <iprintf+0x14>
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fa5e 	bl	8007524 <__sinit>
 8007068:	ab05      	add	r3, sp, #20
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	68a1      	ldr	r1, [r4, #8]
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fc2f 	bl	80078d4 <_vfiprintf_r>
 8007076:	b002      	add	sp, #8
 8007078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707c:	b004      	add	sp, #16
 800707e:	4770      	bx	lr
 8007080:	24000010 	.word	0x24000010

08007084 <_puts_r>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	460e      	mov	r6, r1
 8007088:	4605      	mov	r5, r0
 800708a:	b118      	cbz	r0, 8007094 <_puts_r+0x10>
 800708c:	6983      	ldr	r3, [r0, #24]
 800708e:	b90b      	cbnz	r3, 8007094 <_puts_r+0x10>
 8007090:	f000 fa48 	bl	8007524 <__sinit>
 8007094:	69ab      	ldr	r3, [r5, #24]
 8007096:	68ac      	ldr	r4, [r5, #8]
 8007098:	b913      	cbnz	r3, 80070a0 <_puts_r+0x1c>
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fa42 	bl	8007524 <__sinit>
 80070a0:	4b2c      	ldr	r3, [pc, #176]	; (8007154 <_puts_r+0xd0>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d120      	bne.n	80070e8 <_puts_r+0x64>
 80070a6:	686c      	ldr	r4, [r5, #4]
 80070a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070aa:	07db      	lsls	r3, r3, #31
 80070ac:	d405      	bmi.n	80070ba <_puts_r+0x36>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	0598      	lsls	r0, r3, #22
 80070b2:	d402      	bmi.n	80070ba <_puts_r+0x36>
 80070b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b6:	f000 fad3 	bl	8007660 <__retarget_lock_acquire_recursive>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	0719      	lsls	r1, r3, #28
 80070be:	d51d      	bpl.n	80070fc <_puts_r+0x78>
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	b1db      	cbz	r3, 80070fc <_puts_r+0x78>
 80070c4:	3e01      	subs	r6, #1
 80070c6:	68a3      	ldr	r3, [r4, #8]
 80070c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070cc:	3b01      	subs	r3, #1
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	bb39      	cbnz	r1, 8007122 <_puts_r+0x9e>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da38      	bge.n	8007148 <_puts_r+0xc4>
 80070d6:	4622      	mov	r2, r4
 80070d8:	210a      	movs	r1, #10
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 f848 	bl	8007170 <__swbuf_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d011      	beq.n	8007108 <_puts_r+0x84>
 80070e4:	250a      	movs	r5, #10
 80070e6:	e011      	b.n	800710c <_puts_r+0x88>
 80070e8:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <_puts_r+0xd4>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	d101      	bne.n	80070f2 <_puts_r+0x6e>
 80070ee:	68ac      	ldr	r4, [r5, #8]
 80070f0:	e7da      	b.n	80070a8 <_puts_r+0x24>
 80070f2:	4b1a      	ldr	r3, [pc, #104]	; (800715c <_puts_r+0xd8>)
 80070f4:	429c      	cmp	r4, r3
 80070f6:	bf08      	it	eq
 80070f8:	68ec      	ldreq	r4, [r5, #12]
 80070fa:	e7d5      	b.n	80070a8 <_puts_r+0x24>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f888 	bl	8007214 <__swsetup_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	d0dd      	beq.n	80070c4 <_puts_r+0x40>
 8007108:	f04f 35ff 	mov.w	r5, #4294967295
 800710c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800710e:	07da      	lsls	r2, r3, #31
 8007110:	d405      	bmi.n	800711e <_puts_r+0x9a>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	059b      	lsls	r3, r3, #22
 8007116:	d402      	bmi.n	800711e <_puts_r+0x9a>
 8007118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711a:	f000 faa2 	bl	8007662 <__retarget_lock_release_recursive>
 800711e:	4628      	mov	r0, r5
 8007120:	bd70      	pop	{r4, r5, r6, pc}
 8007122:	2b00      	cmp	r3, #0
 8007124:	da04      	bge.n	8007130 <_puts_r+0xac>
 8007126:	69a2      	ldr	r2, [r4, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	dc06      	bgt.n	800713a <_puts_r+0xb6>
 800712c:	290a      	cmp	r1, #10
 800712e:	d004      	beq.n	800713a <_puts_r+0xb6>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	6022      	str	r2, [r4, #0]
 8007136:	7019      	strb	r1, [r3, #0]
 8007138:	e7c5      	b.n	80070c6 <_puts_r+0x42>
 800713a:	4622      	mov	r2, r4
 800713c:	4628      	mov	r0, r5
 800713e:	f000 f817 	bl	8007170 <__swbuf_r>
 8007142:	3001      	adds	r0, #1
 8007144:	d1bf      	bne.n	80070c6 <_puts_r+0x42>
 8007146:	e7df      	b.n	8007108 <_puts_r+0x84>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	250a      	movs	r5, #10
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	701d      	strb	r5, [r3, #0]
 8007152:	e7db      	b.n	800710c <_puts_r+0x88>
 8007154:	080080d8 	.word	0x080080d8
 8007158:	080080f8 	.word	0x080080f8
 800715c:	080080b8 	.word	0x080080b8

08007160 <puts>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <puts+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f7ff bf8d 	b.w	8007084 <_puts_r>
 800716a:	bf00      	nop
 800716c:	24000010 	.word	0x24000010

08007170 <__swbuf_r>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	460e      	mov	r6, r1
 8007174:	4614      	mov	r4, r2
 8007176:	4605      	mov	r5, r0
 8007178:	b118      	cbz	r0, 8007182 <__swbuf_r+0x12>
 800717a:	6983      	ldr	r3, [r0, #24]
 800717c:	b90b      	cbnz	r3, 8007182 <__swbuf_r+0x12>
 800717e:	f000 f9d1 	bl	8007524 <__sinit>
 8007182:	4b21      	ldr	r3, [pc, #132]	; (8007208 <__swbuf_r+0x98>)
 8007184:	429c      	cmp	r4, r3
 8007186:	d12b      	bne.n	80071e0 <__swbuf_r+0x70>
 8007188:	686c      	ldr	r4, [r5, #4]
 800718a:	69a3      	ldr	r3, [r4, #24]
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	071a      	lsls	r2, r3, #28
 8007192:	d52f      	bpl.n	80071f4 <__swbuf_r+0x84>
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	b36b      	cbz	r3, 80071f4 <__swbuf_r+0x84>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1ac0      	subs	r0, r0, r3
 800719e:	6963      	ldr	r3, [r4, #20]
 80071a0:	b2f6      	uxtb	r6, r6
 80071a2:	4283      	cmp	r3, r0
 80071a4:	4637      	mov	r7, r6
 80071a6:	dc04      	bgt.n	80071b2 <__swbuf_r+0x42>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f926 	bl	80073fc <_fflush_r>
 80071b0:	bb30      	cbnz	r0, 8007200 <__swbuf_r+0x90>
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	60a3      	str	r3, [r4, #8]
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	701e      	strb	r6, [r3, #0]
 80071c0:	6963      	ldr	r3, [r4, #20]
 80071c2:	3001      	adds	r0, #1
 80071c4:	4283      	cmp	r3, r0
 80071c6:	d004      	beq.n	80071d2 <__swbuf_r+0x62>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	07db      	lsls	r3, r3, #31
 80071cc:	d506      	bpl.n	80071dc <__swbuf_r+0x6c>
 80071ce:	2e0a      	cmp	r6, #10
 80071d0:	d104      	bne.n	80071dc <__swbuf_r+0x6c>
 80071d2:	4621      	mov	r1, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	f000 f911 	bl	80073fc <_fflush_r>
 80071da:	b988      	cbnz	r0, 8007200 <__swbuf_r+0x90>
 80071dc:	4638      	mov	r0, r7
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <__swbuf_r+0x9c>)
 80071e2:	429c      	cmp	r4, r3
 80071e4:	d101      	bne.n	80071ea <__swbuf_r+0x7a>
 80071e6:	68ac      	ldr	r4, [r5, #8]
 80071e8:	e7cf      	b.n	800718a <__swbuf_r+0x1a>
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <__swbuf_r+0xa0>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	bf08      	it	eq
 80071f0:	68ec      	ldreq	r4, [r5, #12]
 80071f2:	e7ca      	b.n	800718a <__swbuf_r+0x1a>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f80c 	bl	8007214 <__swsetup_r>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0cb      	beq.n	8007198 <__swbuf_r+0x28>
 8007200:	f04f 37ff 	mov.w	r7, #4294967295
 8007204:	e7ea      	b.n	80071dc <__swbuf_r+0x6c>
 8007206:	bf00      	nop
 8007208:	080080d8 	.word	0x080080d8
 800720c:	080080f8 	.word	0x080080f8
 8007210:	080080b8 	.word	0x080080b8

08007214 <__swsetup_r>:
 8007214:	4b32      	ldr	r3, [pc, #200]	; (80072e0 <__swsetup_r+0xcc>)
 8007216:	b570      	push	{r4, r5, r6, lr}
 8007218:	681d      	ldr	r5, [r3, #0]
 800721a:	4606      	mov	r6, r0
 800721c:	460c      	mov	r4, r1
 800721e:	b125      	cbz	r5, 800722a <__swsetup_r+0x16>
 8007220:	69ab      	ldr	r3, [r5, #24]
 8007222:	b913      	cbnz	r3, 800722a <__swsetup_r+0x16>
 8007224:	4628      	mov	r0, r5
 8007226:	f000 f97d 	bl	8007524 <__sinit>
 800722a:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <__swsetup_r+0xd0>)
 800722c:	429c      	cmp	r4, r3
 800722e:	d10f      	bne.n	8007250 <__swsetup_r+0x3c>
 8007230:	686c      	ldr	r4, [r5, #4]
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007238:	0719      	lsls	r1, r3, #28
 800723a:	d42c      	bmi.n	8007296 <__swsetup_r+0x82>
 800723c:	06dd      	lsls	r5, r3, #27
 800723e:	d411      	bmi.n	8007264 <__swsetup_r+0x50>
 8007240:	2309      	movs	r3, #9
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	e03e      	b.n	80072ce <__swsetup_r+0xba>
 8007250:	4b25      	ldr	r3, [pc, #148]	; (80072e8 <__swsetup_r+0xd4>)
 8007252:	429c      	cmp	r4, r3
 8007254:	d101      	bne.n	800725a <__swsetup_r+0x46>
 8007256:	68ac      	ldr	r4, [r5, #8]
 8007258:	e7eb      	b.n	8007232 <__swsetup_r+0x1e>
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <__swsetup_r+0xd8>)
 800725c:	429c      	cmp	r4, r3
 800725e:	bf08      	it	eq
 8007260:	68ec      	ldreq	r4, [r5, #12]
 8007262:	e7e6      	b.n	8007232 <__swsetup_r+0x1e>
 8007264:	0758      	lsls	r0, r3, #29
 8007266:	d512      	bpl.n	800728e <__swsetup_r+0x7a>
 8007268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726a:	b141      	cbz	r1, 800727e <__swsetup_r+0x6a>
 800726c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007270:	4299      	cmp	r1, r3
 8007272:	d002      	beq.n	800727a <__swsetup_r+0x66>
 8007274:	4630      	mov	r0, r6
 8007276:	f000 fa59 	bl	800772c <_free_r>
 800727a:	2300      	movs	r3, #0
 800727c:	6363      	str	r3, [r4, #52]	; 0x34
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	2300      	movs	r3, #0
 8007288:	6063      	str	r3, [r4, #4]
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	f043 0308 	orr.w	r3, r3, #8
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	6923      	ldr	r3, [r4, #16]
 8007298:	b94b      	cbnz	r3, 80072ae <__swsetup_r+0x9a>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a4:	d003      	beq.n	80072ae <__swsetup_r+0x9a>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f9ff 	bl	80076ac <__smakebuf_r>
 80072ae:	89a0      	ldrh	r0, [r4, #12]
 80072b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b4:	f010 0301 	ands.w	r3, r0, #1
 80072b8:	d00a      	beq.n	80072d0 <__swsetup_r+0xbc>
 80072ba:	2300      	movs	r3, #0
 80072bc:	60a3      	str	r3, [r4, #8]
 80072be:	6963      	ldr	r3, [r4, #20]
 80072c0:	425b      	negs	r3, r3
 80072c2:	61a3      	str	r3, [r4, #24]
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	b943      	cbnz	r3, 80072da <__swsetup_r+0xc6>
 80072c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072cc:	d1ba      	bne.n	8007244 <__swsetup_r+0x30>
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	0781      	lsls	r1, r0, #30
 80072d2:	bf58      	it	pl
 80072d4:	6963      	ldrpl	r3, [r4, #20]
 80072d6:	60a3      	str	r3, [r4, #8]
 80072d8:	e7f4      	b.n	80072c4 <__swsetup_r+0xb0>
 80072da:	2000      	movs	r0, #0
 80072dc:	e7f7      	b.n	80072ce <__swsetup_r+0xba>
 80072de:	bf00      	nop
 80072e0:	24000010 	.word	0x24000010
 80072e4:	080080d8 	.word	0x080080d8
 80072e8:	080080f8 	.word	0x080080f8
 80072ec:	080080b8 	.word	0x080080b8

080072f0 <__sflush_r>:
 80072f0:	898a      	ldrh	r2, [r1, #12]
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	4605      	mov	r5, r0
 80072f8:	0710      	lsls	r0, r2, #28
 80072fa:	460c      	mov	r4, r1
 80072fc:	d458      	bmi.n	80073b0 <__sflush_r+0xc0>
 80072fe:	684b      	ldr	r3, [r1, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc05      	bgt.n	8007310 <__sflush_r+0x20>
 8007304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	dc02      	bgt.n	8007310 <__sflush_r+0x20>
 800730a:	2000      	movs	r0, #0
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007312:	2e00      	cmp	r6, #0
 8007314:	d0f9      	beq.n	800730a <__sflush_r+0x1a>
 8007316:	2300      	movs	r3, #0
 8007318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800731c:	682f      	ldr	r7, [r5, #0]
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	d032      	beq.n	8007388 <__sflush_r+0x98>
 8007322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	075a      	lsls	r2, r3, #29
 8007328:	d505      	bpl.n	8007336 <__sflush_r+0x46>
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	1ac0      	subs	r0, r0, r3
 800732e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007330:	b10b      	cbz	r3, 8007336 <__sflush_r+0x46>
 8007332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007334:	1ac0      	subs	r0, r0, r3
 8007336:	2300      	movs	r3, #0
 8007338:	4602      	mov	r2, r0
 800733a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800733c:	6a21      	ldr	r1, [r4, #32]
 800733e:	4628      	mov	r0, r5
 8007340:	47b0      	blx	r6
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	d106      	bne.n	8007356 <__sflush_r+0x66>
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	291d      	cmp	r1, #29
 800734c:	d82c      	bhi.n	80073a8 <__sflush_r+0xb8>
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <__sflush_r+0x108>)
 8007350:	40ca      	lsrs	r2, r1
 8007352:	07d6      	lsls	r6, r2, #31
 8007354:	d528      	bpl.n	80073a8 <__sflush_r+0xb8>
 8007356:	2200      	movs	r2, #0
 8007358:	6062      	str	r2, [r4, #4]
 800735a:	04d9      	lsls	r1, r3, #19
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	d504      	bpl.n	800736c <__sflush_r+0x7c>
 8007362:	1c42      	adds	r2, r0, #1
 8007364:	d101      	bne.n	800736a <__sflush_r+0x7a>
 8007366:	682b      	ldr	r3, [r5, #0]
 8007368:	b903      	cbnz	r3, 800736c <__sflush_r+0x7c>
 800736a:	6560      	str	r0, [r4, #84]	; 0x54
 800736c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	2900      	cmp	r1, #0
 8007372:	d0ca      	beq.n	800730a <__sflush_r+0x1a>
 8007374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <__sflush_r+0x92>
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f9d5 	bl	800772c <_free_r>
 8007382:	2000      	movs	r0, #0
 8007384:	6360      	str	r0, [r4, #52]	; 0x34
 8007386:	e7c1      	b.n	800730c <__sflush_r+0x1c>
 8007388:	6a21      	ldr	r1, [r4, #32]
 800738a:	2301      	movs	r3, #1
 800738c:	4628      	mov	r0, r5
 800738e:	47b0      	blx	r6
 8007390:	1c41      	adds	r1, r0, #1
 8007392:	d1c7      	bne.n	8007324 <__sflush_r+0x34>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c4      	beq.n	8007324 <__sflush_r+0x34>
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d001      	beq.n	80073a2 <__sflush_r+0xb2>
 800739e:	2b16      	cmp	r3, #22
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0xb6>
 80073a2:	602f      	str	r7, [r5, #0]
 80073a4:	e7b1      	b.n	800730a <__sflush_r+0x1a>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	e7ad      	b.n	800730c <__sflush_r+0x1c>
 80073b0:	690f      	ldr	r7, [r1, #16]
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	d0a9      	beq.n	800730a <__sflush_r+0x1a>
 80073b6:	0793      	lsls	r3, r2, #30
 80073b8:	680e      	ldr	r6, [r1, #0]
 80073ba:	bf08      	it	eq
 80073bc:	694b      	ldreq	r3, [r1, #20]
 80073be:	600f      	str	r7, [r1, #0]
 80073c0:	bf18      	it	ne
 80073c2:	2300      	movne	r3, #0
 80073c4:	eba6 0807 	sub.w	r8, r6, r7
 80073c8:	608b      	str	r3, [r1, #8]
 80073ca:	f1b8 0f00 	cmp.w	r8, #0
 80073ce:	dd9c      	ble.n	800730a <__sflush_r+0x1a>
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073d4:	4643      	mov	r3, r8
 80073d6:	463a      	mov	r2, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	2800      	cmp	r0, #0
 80073de:	dc06      	bgt.n	80073ee <__sflush_r+0xfe>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e78e      	b.n	800730c <__sflush_r+0x1c>
 80073ee:	4407      	add	r7, r0
 80073f0:	eba8 0800 	sub.w	r8, r8, r0
 80073f4:	e7e9      	b.n	80073ca <__sflush_r+0xda>
 80073f6:	bf00      	nop
 80073f8:	20400001 	.word	0x20400001

080073fc <_fflush_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	690b      	ldr	r3, [r1, #16]
 8007400:	4605      	mov	r5, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b913      	cbnz	r3, 800740c <_fflush_r+0x10>
 8007406:	2500      	movs	r5, #0
 8007408:	4628      	mov	r0, r5
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	b118      	cbz	r0, 8007416 <_fflush_r+0x1a>
 800740e:	6983      	ldr	r3, [r0, #24]
 8007410:	b90b      	cbnz	r3, 8007416 <_fflush_r+0x1a>
 8007412:	f000 f887 	bl	8007524 <__sinit>
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <_fflush_r+0x6c>)
 8007418:	429c      	cmp	r4, r3
 800741a:	d11b      	bne.n	8007454 <_fflush_r+0x58>
 800741c:	686c      	ldr	r4, [r5, #4]
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ef      	beq.n	8007406 <_fflush_r+0xa>
 8007426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007428:	07d0      	lsls	r0, r2, #31
 800742a:	d404      	bmi.n	8007436 <_fflush_r+0x3a>
 800742c:	0599      	lsls	r1, r3, #22
 800742e:	d402      	bmi.n	8007436 <_fflush_r+0x3a>
 8007430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007432:	f000 f915 	bl	8007660 <__retarget_lock_acquire_recursive>
 8007436:	4628      	mov	r0, r5
 8007438:	4621      	mov	r1, r4
 800743a:	f7ff ff59 	bl	80072f0 <__sflush_r>
 800743e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007440:	07da      	lsls	r2, r3, #31
 8007442:	4605      	mov	r5, r0
 8007444:	d4e0      	bmi.n	8007408 <_fflush_r+0xc>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	059b      	lsls	r3, r3, #22
 800744a:	d4dd      	bmi.n	8007408 <_fflush_r+0xc>
 800744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744e:	f000 f908 	bl	8007662 <__retarget_lock_release_recursive>
 8007452:	e7d9      	b.n	8007408 <_fflush_r+0xc>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_fflush_r+0x70>)
 8007456:	429c      	cmp	r4, r3
 8007458:	d101      	bne.n	800745e <_fflush_r+0x62>
 800745a:	68ac      	ldr	r4, [r5, #8]
 800745c:	e7df      	b.n	800741e <_fflush_r+0x22>
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <_fflush_r+0x74>)
 8007460:	429c      	cmp	r4, r3
 8007462:	bf08      	it	eq
 8007464:	68ec      	ldreq	r4, [r5, #12]
 8007466:	e7da      	b.n	800741e <_fflush_r+0x22>
 8007468:	080080d8 	.word	0x080080d8
 800746c:	080080f8 	.word	0x080080f8
 8007470:	080080b8 	.word	0x080080b8

08007474 <std>:
 8007474:	2300      	movs	r3, #0
 8007476:	b510      	push	{r4, lr}
 8007478:	4604      	mov	r4, r0
 800747a:	e9c0 3300 	strd	r3, r3, [r0]
 800747e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007482:	6083      	str	r3, [r0, #8]
 8007484:	8181      	strh	r1, [r0, #12]
 8007486:	6643      	str	r3, [r0, #100]	; 0x64
 8007488:	81c2      	strh	r2, [r0, #14]
 800748a:	6183      	str	r3, [r0, #24]
 800748c:	4619      	mov	r1, r3
 800748e:	2208      	movs	r2, #8
 8007490:	305c      	adds	r0, #92	; 0x5c
 8007492:	f7ff fdd7 	bl	8007044 <memset>
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <std+0x38>)
 8007498:	6263      	str	r3, [r4, #36]	; 0x24
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <std+0x3c>)
 800749c:	62a3      	str	r3, [r4, #40]	; 0x28
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <std+0x40>)
 80074a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x44>)
 80074a4:	6224      	str	r4, [r4, #32]
 80074a6:	6323      	str	r3, [r4, #48]	; 0x30
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	bf00      	nop
 80074ac:	08007e7d 	.word	0x08007e7d
 80074b0:	08007e9f 	.word	0x08007e9f
 80074b4:	08007ed7 	.word	0x08007ed7
 80074b8:	08007efb 	.word	0x08007efb

080074bc <_cleanup_r>:
 80074bc:	4901      	ldr	r1, [pc, #4]	; (80074c4 <_cleanup_r+0x8>)
 80074be:	f000 b8af 	b.w	8007620 <_fwalk_reent>
 80074c2:	bf00      	nop
 80074c4:	080073fd 	.word	0x080073fd

080074c8 <__sfmoreglue>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	1e4a      	subs	r2, r1, #1
 80074cc:	2568      	movs	r5, #104	; 0x68
 80074ce:	4355      	muls	r5, r2
 80074d0:	460e      	mov	r6, r1
 80074d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074d6:	f000 f979 	bl	80077cc <_malloc_r>
 80074da:	4604      	mov	r4, r0
 80074dc:	b140      	cbz	r0, 80074f0 <__sfmoreglue+0x28>
 80074de:	2100      	movs	r1, #0
 80074e0:	e9c0 1600 	strd	r1, r6, [r0]
 80074e4:	300c      	adds	r0, #12
 80074e6:	60a0      	str	r0, [r4, #8]
 80074e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074ec:	f7ff fdaa 	bl	8007044 <memset>
 80074f0:	4620      	mov	r0, r4
 80074f2:	bd70      	pop	{r4, r5, r6, pc}

080074f4 <__sfp_lock_acquire>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__sfp_lock_acquire+0x8>)
 80074f6:	f000 b8b3 	b.w	8007660 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	24000710 	.word	0x24000710

08007500 <__sfp_lock_release>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__sfp_lock_release+0x8>)
 8007502:	f000 b8ae 	b.w	8007662 <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	24000710 	.word	0x24000710

0800750c <__sinit_lock_acquire>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__sinit_lock_acquire+0x8>)
 800750e:	f000 b8a7 	b.w	8007660 <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	2400070b 	.word	0x2400070b

08007518 <__sinit_lock_release>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sinit_lock_release+0x8>)
 800751a:	f000 b8a2 	b.w	8007662 <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	2400070b 	.word	0x2400070b

08007524 <__sinit>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	f7ff fff0 	bl	800750c <__sinit_lock_acquire>
 800752c:	69a3      	ldr	r3, [r4, #24]
 800752e:	b11b      	cbz	r3, 8007538 <__sinit+0x14>
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f7ff bff0 	b.w	8007518 <__sinit_lock_release>
 8007538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800753c:	6523      	str	r3, [r4, #80]	; 0x50
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <__sinit+0x68>)
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <__sinit+0x6c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	62a2      	str	r2, [r4, #40]	; 0x28
 8007546:	42a3      	cmp	r3, r4
 8007548:	bf04      	itt	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	61a3      	streq	r3, [r4, #24]
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f820 	bl	8007594 <__sfp>
 8007554:	6060      	str	r0, [r4, #4]
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f81c 	bl	8007594 <__sfp>
 800755c:	60a0      	str	r0, [r4, #8]
 800755e:	4620      	mov	r0, r4
 8007560:	f000 f818 	bl	8007594 <__sfp>
 8007564:	2200      	movs	r2, #0
 8007566:	60e0      	str	r0, [r4, #12]
 8007568:	2104      	movs	r1, #4
 800756a:	6860      	ldr	r0, [r4, #4]
 800756c:	f7ff ff82 	bl	8007474 <std>
 8007570:	68a0      	ldr	r0, [r4, #8]
 8007572:	2201      	movs	r2, #1
 8007574:	2109      	movs	r1, #9
 8007576:	f7ff ff7d 	bl	8007474 <std>
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	2112      	movs	r1, #18
 8007580:	f7ff ff78 	bl	8007474 <std>
 8007584:	2301      	movs	r3, #1
 8007586:	61a3      	str	r3, [r4, #24]
 8007588:	e7d2      	b.n	8007530 <__sinit+0xc>
 800758a:	bf00      	nop
 800758c:	080080b4 	.word	0x080080b4
 8007590:	080074bd 	.word	0x080074bd

08007594 <__sfp>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	4607      	mov	r7, r0
 8007598:	f7ff ffac 	bl	80074f4 <__sfp_lock_acquire>
 800759c:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <__sfp+0x84>)
 800759e:	681e      	ldr	r6, [r3, #0]
 80075a0:	69b3      	ldr	r3, [r6, #24]
 80075a2:	b913      	cbnz	r3, 80075aa <__sfp+0x16>
 80075a4:	4630      	mov	r0, r6
 80075a6:	f7ff ffbd 	bl	8007524 <__sinit>
 80075aa:	3648      	adds	r6, #72	; 0x48
 80075ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	d503      	bpl.n	80075bc <__sfp+0x28>
 80075b4:	6833      	ldr	r3, [r6, #0]
 80075b6:	b30b      	cbz	r3, 80075fc <__sfp+0x68>
 80075b8:	6836      	ldr	r6, [r6, #0]
 80075ba:	e7f7      	b.n	80075ac <__sfp+0x18>
 80075bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075c0:	b9d5      	cbnz	r5, 80075f8 <__sfp+0x64>
 80075c2:	4b16      	ldr	r3, [pc, #88]	; (800761c <__sfp+0x88>)
 80075c4:	60e3      	str	r3, [r4, #12]
 80075c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ca:	6665      	str	r5, [r4, #100]	; 0x64
 80075cc:	f000 f847 	bl	800765e <__retarget_lock_init_recursive>
 80075d0:	f7ff ff96 	bl	8007500 <__sfp_lock_release>
 80075d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075dc:	6025      	str	r5, [r4, #0]
 80075de:	61a5      	str	r5, [r4, #24]
 80075e0:	2208      	movs	r2, #8
 80075e2:	4629      	mov	r1, r5
 80075e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075e8:	f7ff fd2c 	bl	8007044 <memset>
 80075ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075f4:	4620      	mov	r0, r4
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	3468      	adds	r4, #104	; 0x68
 80075fa:	e7d9      	b.n	80075b0 <__sfp+0x1c>
 80075fc:	2104      	movs	r1, #4
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ff62 	bl	80074c8 <__sfmoreglue>
 8007604:	4604      	mov	r4, r0
 8007606:	6030      	str	r0, [r6, #0]
 8007608:	2800      	cmp	r0, #0
 800760a:	d1d5      	bne.n	80075b8 <__sfp+0x24>
 800760c:	f7ff ff78 	bl	8007500 <__sfp_lock_release>
 8007610:	230c      	movs	r3, #12
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	e7ee      	b.n	80075f4 <__sfp+0x60>
 8007616:	bf00      	nop
 8007618:	080080b4 	.word	0x080080b4
 800761c:	ffff0001 	.word	0xffff0001

08007620 <_fwalk_reent>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4606      	mov	r6, r0
 8007626:	4688      	mov	r8, r1
 8007628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800762c:	2700      	movs	r7, #0
 800762e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007632:	f1b9 0901 	subs.w	r9, r9, #1
 8007636:	d505      	bpl.n	8007644 <_fwalk_reent+0x24>
 8007638:	6824      	ldr	r4, [r4, #0]
 800763a:	2c00      	cmp	r4, #0
 800763c:	d1f7      	bne.n	800762e <_fwalk_reent+0xe>
 800763e:	4638      	mov	r0, r7
 8007640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007644:	89ab      	ldrh	r3, [r5, #12]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d907      	bls.n	800765a <_fwalk_reent+0x3a>
 800764a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800764e:	3301      	adds	r3, #1
 8007650:	d003      	beq.n	800765a <_fwalk_reent+0x3a>
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	47c0      	blx	r8
 8007658:	4307      	orrs	r7, r0
 800765a:	3568      	adds	r5, #104	; 0x68
 800765c:	e7e9      	b.n	8007632 <_fwalk_reent+0x12>

0800765e <__retarget_lock_init_recursive>:
 800765e:	4770      	bx	lr

08007660 <__retarget_lock_acquire_recursive>:
 8007660:	4770      	bx	lr

08007662 <__retarget_lock_release_recursive>:
 8007662:	4770      	bx	lr

08007664 <__swhatbuf_r>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	460e      	mov	r6, r1
 8007668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766c:	2900      	cmp	r1, #0
 800766e:	b096      	sub	sp, #88	; 0x58
 8007670:	4614      	mov	r4, r2
 8007672:	461d      	mov	r5, r3
 8007674:	da07      	bge.n	8007686 <__swhatbuf_r+0x22>
 8007676:	2300      	movs	r3, #0
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	89b3      	ldrh	r3, [r6, #12]
 800767c:	061a      	lsls	r2, r3, #24
 800767e:	d410      	bmi.n	80076a2 <__swhatbuf_r+0x3e>
 8007680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007684:	e00e      	b.n	80076a4 <__swhatbuf_r+0x40>
 8007686:	466a      	mov	r2, sp
 8007688:	f000 fc5e 	bl	8007f48 <_fstat_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	dbf2      	blt.n	8007676 <__swhatbuf_r+0x12>
 8007690:	9a01      	ldr	r2, [sp, #4]
 8007692:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007696:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800769a:	425a      	negs	r2, r3
 800769c:	415a      	adcs	r2, r3
 800769e:	602a      	str	r2, [r5, #0]
 80076a0:	e7ee      	b.n	8007680 <__swhatbuf_r+0x1c>
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	2000      	movs	r0, #0
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	b016      	add	sp, #88	; 0x58
 80076aa:	bd70      	pop	{r4, r5, r6, pc}

080076ac <__smakebuf_r>:
 80076ac:	898b      	ldrh	r3, [r1, #12]
 80076ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076b0:	079d      	lsls	r5, r3, #30
 80076b2:	4606      	mov	r6, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	d507      	bpl.n	80076c8 <__smakebuf_r+0x1c>
 80076b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	2301      	movs	r3, #1
 80076c2:	6163      	str	r3, [r4, #20]
 80076c4:	b002      	add	sp, #8
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	ab01      	add	r3, sp, #4
 80076ca:	466a      	mov	r2, sp
 80076cc:	f7ff ffca 	bl	8007664 <__swhatbuf_r>
 80076d0:	9900      	ldr	r1, [sp, #0]
 80076d2:	4605      	mov	r5, r0
 80076d4:	4630      	mov	r0, r6
 80076d6:	f000 f879 	bl	80077cc <_malloc_r>
 80076da:	b948      	cbnz	r0, 80076f0 <__smakebuf_r+0x44>
 80076dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d4ef      	bmi.n	80076c4 <__smakebuf_r+0x18>
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	f043 0302 	orr.w	r3, r3, #2
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	e7e3      	b.n	80076b8 <__smakebuf_r+0xc>
 80076f0:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <__smakebuf_r+0x7c>)
 80076f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	6020      	str	r0, [r4, #0]
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	6163      	str	r3, [r4, #20]
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	6120      	str	r0, [r4, #16]
 8007706:	b15b      	cbz	r3, 8007720 <__smakebuf_r+0x74>
 8007708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 fc2d 	bl	8007f6c <_isatty_r>
 8007712:	b128      	cbz	r0, 8007720 <__smakebuf_r+0x74>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	89a0      	ldrh	r0, [r4, #12]
 8007722:	4305      	orrs	r5, r0
 8007724:	81a5      	strh	r5, [r4, #12]
 8007726:	e7cd      	b.n	80076c4 <__smakebuf_r+0x18>
 8007728:	080074bd 	.word	0x080074bd

0800772c <_free_r>:
 800772c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800772e:	2900      	cmp	r1, #0
 8007730:	d048      	beq.n	80077c4 <_free_r+0x98>
 8007732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007736:	9001      	str	r0, [sp, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f1a1 0404 	sub.w	r4, r1, #4
 800773e:	bfb8      	it	lt
 8007740:	18e4      	addlt	r4, r4, r3
 8007742:	f000 fc35 	bl	8007fb0 <__malloc_lock>
 8007746:	4a20      	ldr	r2, [pc, #128]	; (80077c8 <_free_r+0x9c>)
 8007748:	9801      	ldr	r0, [sp, #4]
 800774a:	6813      	ldr	r3, [r2, #0]
 800774c:	4615      	mov	r5, r2
 800774e:	b933      	cbnz	r3, 800775e <_free_r+0x32>
 8007750:	6063      	str	r3, [r4, #4]
 8007752:	6014      	str	r4, [r2, #0]
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800775a:	f000 bc2f 	b.w	8007fbc <__malloc_unlock>
 800775e:	42a3      	cmp	r3, r4
 8007760:	d90b      	bls.n	800777a <_free_r+0x4e>
 8007762:	6821      	ldr	r1, [r4, #0]
 8007764:	1862      	adds	r2, r4, r1
 8007766:	4293      	cmp	r3, r2
 8007768:	bf04      	itt	eq
 800776a:	681a      	ldreq	r2, [r3, #0]
 800776c:	685b      	ldreq	r3, [r3, #4]
 800776e:	6063      	str	r3, [r4, #4]
 8007770:	bf04      	itt	eq
 8007772:	1852      	addeq	r2, r2, r1
 8007774:	6022      	streq	r2, [r4, #0]
 8007776:	602c      	str	r4, [r5, #0]
 8007778:	e7ec      	b.n	8007754 <_free_r+0x28>
 800777a:	461a      	mov	r2, r3
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b10b      	cbz	r3, 8007784 <_free_r+0x58>
 8007780:	42a3      	cmp	r3, r4
 8007782:	d9fa      	bls.n	800777a <_free_r+0x4e>
 8007784:	6811      	ldr	r1, [r2, #0]
 8007786:	1855      	adds	r5, r2, r1
 8007788:	42a5      	cmp	r5, r4
 800778a:	d10b      	bne.n	80077a4 <_free_r+0x78>
 800778c:	6824      	ldr	r4, [r4, #0]
 800778e:	4421      	add	r1, r4
 8007790:	1854      	adds	r4, r2, r1
 8007792:	42a3      	cmp	r3, r4
 8007794:	6011      	str	r1, [r2, #0]
 8007796:	d1dd      	bne.n	8007754 <_free_r+0x28>
 8007798:	681c      	ldr	r4, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	6053      	str	r3, [r2, #4]
 800779e:	4421      	add	r1, r4
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	e7d7      	b.n	8007754 <_free_r+0x28>
 80077a4:	d902      	bls.n	80077ac <_free_r+0x80>
 80077a6:	230c      	movs	r3, #12
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	e7d3      	b.n	8007754 <_free_r+0x28>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf04      	itt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	6063      	str	r3, [r4, #4]
 80077ba:	bf04      	itt	eq
 80077bc:	1949      	addeq	r1, r1, r5
 80077be:	6021      	streq	r1, [r4, #0]
 80077c0:	6054      	str	r4, [r2, #4]
 80077c2:	e7c7      	b.n	8007754 <_free_r+0x28>
 80077c4:	b003      	add	sp, #12
 80077c6:	bd30      	pop	{r4, r5, pc}
 80077c8:	2400015c 	.word	0x2400015c

080077cc <_malloc_r>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	1ccd      	adds	r5, r1, #3
 80077d0:	f025 0503 	bic.w	r5, r5, #3
 80077d4:	3508      	adds	r5, #8
 80077d6:	2d0c      	cmp	r5, #12
 80077d8:	bf38      	it	cc
 80077da:	250c      	movcc	r5, #12
 80077dc:	2d00      	cmp	r5, #0
 80077de:	4606      	mov	r6, r0
 80077e0:	db01      	blt.n	80077e6 <_malloc_r+0x1a>
 80077e2:	42a9      	cmp	r1, r5
 80077e4:	d903      	bls.n	80077ee <_malloc_r+0x22>
 80077e6:	230c      	movs	r3, #12
 80077e8:	6033      	str	r3, [r6, #0]
 80077ea:	2000      	movs	r0, #0
 80077ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ee:	f000 fbdf 	bl	8007fb0 <__malloc_lock>
 80077f2:	4921      	ldr	r1, [pc, #132]	; (8007878 <_malloc_r+0xac>)
 80077f4:	680a      	ldr	r2, [r1, #0]
 80077f6:	4614      	mov	r4, r2
 80077f8:	b99c      	cbnz	r4, 8007822 <_malloc_r+0x56>
 80077fa:	4f20      	ldr	r7, [pc, #128]	; (800787c <_malloc_r+0xb0>)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	b923      	cbnz	r3, 800780a <_malloc_r+0x3e>
 8007800:	4621      	mov	r1, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f000 fb2a 	bl	8007e5c <_sbrk_r>
 8007808:	6038      	str	r0, [r7, #0]
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	f000 fb25 	bl	8007e5c <_sbrk_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d123      	bne.n	800785e <_malloc_r+0x92>
 8007816:	230c      	movs	r3, #12
 8007818:	6033      	str	r3, [r6, #0]
 800781a:	4630      	mov	r0, r6
 800781c:	f000 fbce 	bl	8007fbc <__malloc_unlock>
 8007820:	e7e3      	b.n	80077ea <_malloc_r+0x1e>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	1b5b      	subs	r3, r3, r5
 8007826:	d417      	bmi.n	8007858 <_malloc_r+0x8c>
 8007828:	2b0b      	cmp	r3, #11
 800782a:	d903      	bls.n	8007834 <_malloc_r+0x68>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	441c      	add	r4, r3
 8007830:	6025      	str	r5, [r4, #0]
 8007832:	e004      	b.n	800783e <_malloc_r+0x72>
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	42a2      	cmp	r2, r4
 8007838:	bf0c      	ite	eq
 800783a:	600b      	streq	r3, [r1, #0]
 800783c:	6053      	strne	r3, [r2, #4]
 800783e:	4630      	mov	r0, r6
 8007840:	f000 fbbc 	bl	8007fbc <__malloc_unlock>
 8007844:	f104 000b 	add.w	r0, r4, #11
 8007848:	1d23      	adds	r3, r4, #4
 800784a:	f020 0007 	bic.w	r0, r0, #7
 800784e:	1ac2      	subs	r2, r0, r3
 8007850:	d0cc      	beq.n	80077ec <_malloc_r+0x20>
 8007852:	1a1b      	subs	r3, r3, r0
 8007854:	50a3      	str	r3, [r4, r2]
 8007856:	e7c9      	b.n	80077ec <_malloc_r+0x20>
 8007858:	4622      	mov	r2, r4
 800785a:	6864      	ldr	r4, [r4, #4]
 800785c:	e7cc      	b.n	80077f8 <_malloc_r+0x2c>
 800785e:	1cc4      	adds	r4, r0, #3
 8007860:	f024 0403 	bic.w	r4, r4, #3
 8007864:	42a0      	cmp	r0, r4
 8007866:	d0e3      	beq.n	8007830 <_malloc_r+0x64>
 8007868:	1a21      	subs	r1, r4, r0
 800786a:	4630      	mov	r0, r6
 800786c:	f000 faf6 	bl	8007e5c <_sbrk_r>
 8007870:	3001      	adds	r0, #1
 8007872:	d1dd      	bne.n	8007830 <_malloc_r+0x64>
 8007874:	e7cf      	b.n	8007816 <_malloc_r+0x4a>
 8007876:	bf00      	nop
 8007878:	2400015c 	.word	0x2400015c
 800787c:	24000160 	.word	0x24000160

08007880 <__sfputc_r>:
 8007880:	6893      	ldr	r3, [r2, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	b410      	push	{r4}
 8007888:	6093      	str	r3, [r2, #8]
 800788a:	da08      	bge.n	800789e <__sfputc_r+0x1e>
 800788c:	6994      	ldr	r4, [r2, #24]
 800788e:	42a3      	cmp	r3, r4
 8007890:	db01      	blt.n	8007896 <__sfputc_r+0x16>
 8007892:	290a      	cmp	r1, #10
 8007894:	d103      	bne.n	800789e <__sfputc_r+0x1e>
 8007896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800789a:	f7ff bc69 	b.w	8007170 <__swbuf_r>
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	1c58      	adds	r0, r3, #1
 80078a2:	6010      	str	r0, [r2, #0]
 80078a4:	7019      	strb	r1, [r3, #0]
 80078a6:	4608      	mov	r0, r1
 80078a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <__sfputs_r>:
 80078ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b0:	4606      	mov	r6, r0
 80078b2:	460f      	mov	r7, r1
 80078b4:	4614      	mov	r4, r2
 80078b6:	18d5      	adds	r5, r2, r3
 80078b8:	42ac      	cmp	r4, r5
 80078ba:	d101      	bne.n	80078c0 <__sfputs_r+0x12>
 80078bc:	2000      	movs	r0, #0
 80078be:	e007      	b.n	80078d0 <__sfputs_r+0x22>
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	463a      	mov	r2, r7
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7ff ffda 	bl	8007880 <__sfputc_r>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d1f3      	bne.n	80078b8 <__sfputs_r+0xa>
 80078d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078d4 <_vfiprintf_r>:
 80078d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	460d      	mov	r5, r1
 80078da:	b09d      	sub	sp, #116	; 0x74
 80078dc:	4614      	mov	r4, r2
 80078de:	4698      	mov	r8, r3
 80078e0:	4606      	mov	r6, r0
 80078e2:	b118      	cbz	r0, 80078ec <_vfiprintf_r+0x18>
 80078e4:	6983      	ldr	r3, [r0, #24]
 80078e6:	b90b      	cbnz	r3, 80078ec <_vfiprintf_r+0x18>
 80078e8:	f7ff fe1c 	bl	8007524 <__sinit>
 80078ec:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <_vfiprintf_r+0x240>)
 80078ee:	429d      	cmp	r5, r3
 80078f0:	d11b      	bne.n	800792a <_vfiprintf_r+0x56>
 80078f2:	6875      	ldr	r5, [r6, #4]
 80078f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f6:	07d9      	lsls	r1, r3, #31
 80078f8:	d405      	bmi.n	8007906 <_vfiprintf_r+0x32>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	059a      	lsls	r2, r3, #22
 80078fe:	d402      	bmi.n	8007906 <_vfiprintf_r+0x32>
 8007900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007902:	f7ff fead 	bl	8007660 <__retarget_lock_acquire_recursive>
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	071b      	lsls	r3, r3, #28
 800790a:	d501      	bpl.n	8007910 <_vfiprintf_r+0x3c>
 800790c:	692b      	ldr	r3, [r5, #16]
 800790e:	b9eb      	cbnz	r3, 800794c <_vfiprintf_r+0x78>
 8007910:	4629      	mov	r1, r5
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff fc7e 	bl	8007214 <__swsetup_r>
 8007918:	b1c0      	cbz	r0, 800794c <_vfiprintf_r+0x78>
 800791a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800791c:	07dc      	lsls	r4, r3, #31
 800791e:	d50e      	bpl.n	800793e <_vfiprintf_r+0x6a>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	b01d      	add	sp, #116	; 0x74
 8007926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792a:	4b7b      	ldr	r3, [pc, #492]	; (8007b18 <_vfiprintf_r+0x244>)
 800792c:	429d      	cmp	r5, r3
 800792e:	d101      	bne.n	8007934 <_vfiprintf_r+0x60>
 8007930:	68b5      	ldr	r5, [r6, #8]
 8007932:	e7df      	b.n	80078f4 <_vfiprintf_r+0x20>
 8007934:	4b79      	ldr	r3, [pc, #484]	; (8007b1c <_vfiprintf_r+0x248>)
 8007936:	429d      	cmp	r5, r3
 8007938:	bf08      	it	eq
 800793a:	68f5      	ldreq	r5, [r6, #12]
 800793c:	e7da      	b.n	80078f4 <_vfiprintf_r+0x20>
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	0598      	lsls	r0, r3, #22
 8007942:	d4ed      	bmi.n	8007920 <_vfiprintf_r+0x4c>
 8007944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007946:	f7ff fe8c 	bl	8007662 <__retarget_lock_release_recursive>
 800794a:	e7e9      	b.n	8007920 <_vfiprintf_r+0x4c>
 800794c:	2300      	movs	r3, #0
 800794e:	9309      	str	r3, [sp, #36]	; 0x24
 8007950:	2320      	movs	r3, #32
 8007952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007956:	f8cd 800c 	str.w	r8, [sp, #12]
 800795a:	2330      	movs	r3, #48	; 0x30
 800795c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b20 <_vfiprintf_r+0x24c>
 8007960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007964:	f04f 0901 	mov.w	r9, #1
 8007968:	4623      	mov	r3, r4
 800796a:	469a      	mov	sl, r3
 800796c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007970:	b10a      	cbz	r2, 8007976 <_vfiprintf_r+0xa2>
 8007972:	2a25      	cmp	r2, #37	; 0x25
 8007974:	d1f9      	bne.n	800796a <_vfiprintf_r+0x96>
 8007976:	ebba 0b04 	subs.w	fp, sl, r4
 800797a:	d00b      	beq.n	8007994 <_vfiprintf_r+0xc0>
 800797c:	465b      	mov	r3, fp
 800797e:	4622      	mov	r2, r4
 8007980:	4629      	mov	r1, r5
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ff93 	bl	80078ae <__sfputs_r>
 8007988:	3001      	adds	r0, #1
 800798a:	f000 80aa 	beq.w	8007ae2 <_vfiprintf_r+0x20e>
 800798e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007990:	445a      	add	r2, fp
 8007992:	9209      	str	r2, [sp, #36]	; 0x24
 8007994:	f89a 3000 	ldrb.w	r3, [sl]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80a2 	beq.w	8007ae2 <_vfiprintf_r+0x20e>
 800799e:	2300      	movs	r3, #0
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295
 80079a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b4:	931a      	str	r3, [sp, #104]	; 0x68
 80079b6:	4654      	mov	r4, sl
 80079b8:	2205      	movs	r2, #5
 80079ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079be:	4858      	ldr	r0, [pc, #352]	; (8007b20 <_vfiprintf_r+0x24c>)
 80079c0:	f7f8 fc8e 	bl	80002e0 <memchr>
 80079c4:	9a04      	ldr	r2, [sp, #16]
 80079c6:	b9d8      	cbnz	r0, 8007a00 <_vfiprintf_r+0x12c>
 80079c8:	06d1      	lsls	r1, r2, #27
 80079ca:	bf44      	itt	mi
 80079cc:	2320      	movmi	r3, #32
 80079ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d2:	0713      	lsls	r3, r2, #28
 80079d4:	bf44      	itt	mi
 80079d6:	232b      	movmi	r3, #43	; 0x2b
 80079d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079dc:	f89a 3000 	ldrb.w	r3, [sl]
 80079e0:	2b2a      	cmp	r3, #42	; 0x2a
 80079e2:	d015      	beq.n	8007a10 <_vfiprintf_r+0x13c>
 80079e4:	9a07      	ldr	r2, [sp, #28]
 80079e6:	4654      	mov	r4, sl
 80079e8:	2000      	movs	r0, #0
 80079ea:	f04f 0c0a 	mov.w	ip, #10
 80079ee:	4621      	mov	r1, r4
 80079f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f4:	3b30      	subs	r3, #48	; 0x30
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d94e      	bls.n	8007a98 <_vfiprintf_r+0x1c4>
 80079fa:	b1b0      	cbz	r0, 8007a2a <_vfiprintf_r+0x156>
 80079fc:	9207      	str	r2, [sp, #28]
 80079fe:	e014      	b.n	8007a2a <_vfiprintf_r+0x156>
 8007a00:	eba0 0308 	sub.w	r3, r0, r8
 8007a04:	fa09 f303 	lsl.w	r3, r9, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	46a2      	mov	sl, r4
 8007a0e:	e7d2      	b.n	80079b6 <_vfiprintf_r+0xe2>
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	1d19      	adds	r1, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	9103      	str	r1, [sp, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bfbb      	ittet	lt
 8007a1c:	425b      	neglt	r3, r3
 8007a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a22:	9307      	strge	r3, [sp, #28]
 8007a24:	9307      	strlt	r3, [sp, #28]
 8007a26:	bfb8      	it	lt
 8007a28:	9204      	strlt	r2, [sp, #16]
 8007a2a:	7823      	ldrb	r3, [r4, #0]
 8007a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2e:	d10c      	bne.n	8007a4a <_vfiprintf_r+0x176>
 8007a30:	7863      	ldrb	r3, [r4, #1]
 8007a32:	2b2a      	cmp	r3, #42	; 0x2a
 8007a34:	d135      	bne.n	8007aa2 <_vfiprintf_r+0x1ce>
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	1d1a      	adds	r2, r3, #4
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	9203      	str	r2, [sp, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a46:	3402      	adds	r4, #2
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b30 <_vfiprintf_r+0x25c>
 8007a4e:	7821      	ldrb	r1, [r4, #0]
 8007a50:	2203      	movs	r2, #3
 8007a52:	4650      	mov	r0, sl
 8007a54:	f7f8 fc44 	bl	80002e0 <memchr>
 8007a58:	b140      	cbz	r0, 8007a6c <_vfiprintf_r+0x198>
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	eba0 000a 	sub.w	r0, r0, sl
 8007a60:	fa03 f000 	lsl.w	r0, r3, r0
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	4303      	orrs	r3, r0
 8007a68:	3401      	adds	r4, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a70:	482c      	ldr	r0, [pc, #176]	; (8007b24 <_vfiprintf_r+0x250>)
 8007a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a76:	2206      	movs	r2, #6
 8007a78:	f7f8 fc32 	bl	80002e0 <memchr>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d03f      	beq.n	8007b00 <_vfiprintf_r+0x22c>
 8007a80:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <_vfiprintf_r+0x254>)
 8007a82:	bb1b      	cbnz	r3, 8007acc <_vfiprintf_r+0x1f8>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	3307      	adds	r3, #7
 8007a88:	f023 0307 	bic.w	r3, r3, #7
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	9303      	str	r3, [sp, #12]
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	443b      	add	r3, r7
 8007a94:	9309      	str	r3, [sp, #36]	; 0x24
 8007a96:	e767      	b.n	8007968 <_vfiprintf_r+0x94>
 8007a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e7a5      	b.n	80079ee <_vfiprintf_r+0x11a>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	3401      	adds	r4, #1
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f04f 0c0a 	mov.w	ip, #10
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab4:	3a30      	subs	r2, #48	; 0x30
 8007ab6:	2a09      	cmp	r2, #9
 8007ab8:	d903      	bls.n	8007ac2 <_vfiprintf_r+0x1ee>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0c5      	beq.n	8007a4a <_vfiprintf_r+0x176>
 8007abe:	9105      	str	r1, [sp, #20]
 8007ac0:	e7c3      	b.n	8007a4a <_vfiprintf_r+0x176>
 8007ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7f0      	b.n	8007aae <_vfiprintf_r+0x1da>
 8007acc:	ab03      	add	r3, sp, #12
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <_vfiprintf_r+0x258>)
 8007ad4:	a904      	add	r1, sp, #16
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f3af 8000 	nop.w
 8007adc:	4607      	mov	r7, r0
 8007ade:	1c78      	adds	r0, r7, #1
 8007ae0:	d1d6      	bne.n	8007a90 <_vfiprintf_r+0x1bc>
 8007ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae4:	07d9      	lsls	r1, r3, #31
 8007ae6:	d405      	bmi.n	8007af4 <_vfiprintf_r+0x220>
 8007ae8:	89ab      	ldrh	r3, [r5, #12]
 8007aea:	059a      	lsls	r2, r3, #22
 8007aec:	d402      	bmi.n	8007af4 <_vfiprintf_r+0x220>
 8007aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007af0:	f7ff fdb7 	bl	8007662 <__retarget_lock_release_recursive>
 8007af4:	89ab      	ldrh	r3, [r5, #12]
 8007af6:	065b      	lsls	r3, r3, #25
 8007af8:	f53f af12 	bmi.w	8007920 <_vfiprintf_r+0x4c>
 8007afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afe:	e711      	b.n	8007924 <_vfiprintf_r+0x50>
 8007b00:	ab03      	add	r3, sp, #12
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	462a      	mov	r2, r5
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <_vfiprintf_r+0x258>)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f000 f880 	bl	8007c10 <_printf_i>
 8007b10:	e7e4      	b.n	8007adc <_vfiprintf_r+0x208>
 8007b12:	bf00      	nop
 8007b14:	080080d8 	.word	0x080080d8
 8007b18:	080080f8 	.word	0x080080f8
 8007b1c:	080080b8 	.word	0x080080b8
 8007b20:	08008118 	.word	0x08008118
 8007b24:	08008122 	.word	0x08008122
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	080078af 	.word	0x080078af
 8007b30:	0800811e 	.word	0x0800811e

08007b34 <_printf_common>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	4616      	mov	r6, r2
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	688a      	ldr	r2, [r1, #8]
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bfb8      	it	lt
 8007b48:	4613      	movlt	r3, r2
 8007b4a:	6033      	str	r3, [r6, #0]
 8007b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b50:	4607      	mov	r7, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	b10a      	cbz	r2, 8007b5a <_printf_common+0x26>
 8007b56:	3301      	adds	r3, #1
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	0699      	lsls	r1, r3, #26
 8007b5e:	bf42      	ittt	mi
 8007b60:	6833      	ldrmi	r3, [r6, #0]
 8007b62:	3302      	addmi	r3, #2
 8007b64:	6033      	strmi	r3, [r6, #0]
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	f015 0506 	ands.w	r5, r5, #6
 8007b6c:	d106      	bne.n	8007b7c <_printf_common+0x48>
 8007b6e:	f104 0a19 	add.w	sl, r4, #25
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	6832      	ldr	r2, [r6, #0]
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dc26      	bgt.n	8007bca <_printf_common+0x96>
 8007b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b80:	1e13      	subs	r3, r2, #0
 8007b82:	6822      	ldr	r2, [r4, #0]
 8007b84:	bf18      	it	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	0692      	lsls	r2, r2, #26
 8007b8a:	d42b      	bmi.n	8007be4 <_printf_common+0xb0>
 8007b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b90:	4649      	mov	r1, r9
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c0      	blx	r8
 8007b96:	3001      	adds	r0, #1
 8007b98:	d01e      	beq.n	8007bd8 <_printf_common+0xa4>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	68e5      	ldr	r5, [r4, #12]
 8007b9e:	6832      	ldr	r2, [r6, #0]
 8007ba0:	f003 0306 	and.w	r3, r3, #6
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	bf08      	it	eq
 8007ba8:	1aad      	subeq	r5, r5, r2
 8007baa:	68a3      	ldr	r3, [r4, #8]
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	bf0c      	ite	eq
 8007bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb4:	2500      	movne	r5, #0
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	bfc4      	itt	gt
 8007bba:	1a9b      	subgt	r3, r3, r2
 8007bbc:	18ed      	addgt	r5, r5, r3
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	341a      	adds	r4, #26
 8007bc2:	42b5      	cmp	r5, r6
 8007bc4:	d11a      	bne.n	8007bfc <_printf_common+0xc8>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e008      	b.n	8007bdc <_printf_common+0xa8>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4652      	mov	r2, sl
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	47c0      	blx	r8
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d103      	bne.n	8007be0 <_printf_common+0xac>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	3501      	adds	r5, #1
 8007be2:	e7c6      	b.n	8007b72 <_printf_common+0x3e>
 8007be4:	18e1      	adds	r1, r4, r3
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	2030      	movs	r0, #48	; 0x30
 8007bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bee:	4422      	add	r2, r4
 8007bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	e7c7      	b.n	8007b8c <_printf_common+0x58>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4622      	mov	r2, r4
 8007c00:	4649      	mov	r1, r9
 8007c02:	4638      	mov	r0, r7
 8007c04:	47c0      	blx	r8
 8007c06:	3001      	adds	r0, #1
 8007c08:	d0e6      	beq.n	8007bd8 <_printf_common+0xa4>
 8007c0a:	3601      	adds	r6, #1
 8007c0c:	e7d9      	b.n	8007bc2 <_printf_common+0x8e>
	...

08007c10 <_printf_i>:
 8007c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	460c      	mov	r4, r1
 8007c16:	4691      	mov	r9, r2
 8007c18:	7e27      	ldrb	r7, [r4, #24]
 8007c1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c1c:	2f78      	cmp	r7, #120	; 0x78
 8007c1e:	4680      	mov	r8, r0
 8007c20:	469a      	mov	sl, r3
 8007c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c26:	d807      	bhi.n	8007c38 <_printf_i+0x28>
 8007c28:	2f62      	cmp	r7, #98	; 0x62
 8007c2a:	d80a      	bhi.n	8007c42 <_printf_i+0x32>
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	f000 80d8 	beq.w	8007de2 <_printf_i+0x1d2>
 8007c32:	2f58      	cmp	r7, #88	; 0x58
 8007c34:	f000 80a3 	beq.w	8007d7e <_printf_i+0x16e>
 8007c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c40:	e03a      	b.n	8007cb8 <_printf_i+0xa8>
 8007c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c46:	2b15      	cmp	r3, #21
 8007c48:	d8f6      	bhi.n	8007c38 <_printf_i+0x28>
 8007c4a:	a001      	add	r0, pc, #4	; (adr r0, 8007c50 <_printf_i+0x40>)
 8007c4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007cbd 	.word	0x08007cbd
 8007c58:	08007c39 	.word	0x08007c39
 8007c5c:	08007c39 	.word	0x08007c39
 8007c60:	08007c39 	.word	0x08007c39
 8007c64:	08007c39 	.word	0x08007c39
 8007c68:	08007cbd 	.word	0x08007cbd
 8007c6c:	08007c39 	.word	0x08007c39
 8007c70:	08007c39 	.word	0x08007c39
 8007c74:	08007c39 	.word	0x08007c39
 8007c78:	08007c39 	.word	0x08007c39
 8007c7c:	08007dc9 	.word	0x08007dc9
 8007c80:	08007ced 	.word	0x08007ced
 8007c84:	08007dab 	.word	0x08007dab
 8007c88:	08007c39 	.word	0x08007c39
 8007c8c:	08007c39 	.word	0x08007c39
 8007c90:	08007deb 	.word	0x08007deb
 8007c94:	08007c39 	.word	0x08007c39
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007c39 	.word	0x08007c39
 8007ca0:	08007c39 	.word	0x08007c39
 8007ca4:	08007db3 	.word	0x08007db3
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	1d1a      	adds	r2, r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	600a      	str	r2, [r1, #0]
 8007cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0a3      	b.n	8007e04 <_printf_i+0x1f4>
 8007cbc:	6825      	ldr	r5, [r4, #0]
 8007cbe:	6808      	ldr	r0, [r1, #0]
 8007cc0:	062e      	lsls	r6, r5, #24
 8007cc2:	f100 0304 	add.w	r3, r0, #4
 8007cc6:	d50a      	bpl.n	8007cde <_printf_i+0xce>
 8007cc8:	6805      	ldr	r5, [r0, #0]
 8007cca:	600b      	str	r3, [r1, #0]
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	da03      	bge.n	8007cd8 <_printf_i+0xc8>
 8007cd0:	232d      	movs	r3, #45	; 0x2d
 8007cd2:	426d      	negs	r5, r5
 8007cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd8:	485e      	ldr	r0, [pc, #376]	; (8007e54 <_printf_i+0x244>)
 8007cda:	230a      	movs	r3, #10
 8007cdc:	e019      	b.n	8007d12 <_printf_i+0x102>
 8007cde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ce2:	6805      	ldr	r5, [r0, #0]
 8007ce4:	600b      	str	r3, [r1, #0]
 8007ce6:	bf18      	it	ne
 8007ce8:	b22d      	sxthne	r5, r5
 8007cea:	e7ef      	b.n	8007ccc <_printf_i+0xbc>
 8007cec:	680b      	ldr	r3, [r1, #0]
 8007cee:	6825      	ldr	r5, [r4, #0]
 8007cf0:	1d18      	adds	r0, r3, #4
 8007cf2:	6008      	str	r0, [r1, #0]
 8007cf4:	0628      	lsls	r0, r5, #24
 8007cf6:	d501      	bpl.n	8007cfc <_printf_i+0xec>
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	e002      	b.n	8007d02 <_printf_i+0xf2>
 8007cfc:	0669      	lsls	r1, r5, #25
 8007cfe:	d5fb      	bpl.n	8007cf8 <_printf_i+0xe8>
 8007d00:	881d      	ldrh	r5, [r3, #0]
 8007d02:	4854      	ldr	r0, [pc, #336]	; (8007e54 <_printf_i+0x244>)
 8007d04:	2f6f      	cmp	r7, #111	; 0x6f
 8007d06:	bf0c      	ite	eq
 8007d08:	2308      	moveq	r3, #8
 8007d0a:	230a      	movne	r3, #10
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d12:	6866      	ldr	r6, [r4, #4]
 8007d14:	60a6      	str	r6, [r4, #8]
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	bfa2      	ittt	ge
 8007d1a:	6821      	ldrge	r1, [r4, #0]
 8007d1c:	f021 0104 	bicge.w	r1, r1, #4
 8007d20:	6021      	strge	r1, [r4, #0]
 8007d22:	b90d      	cbnz	r5, 8007d28 <_printf_i+0x118>
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	d04d      	beq.n	8007dc4 <_printf_i+0x1b4>
 8007d28:	4616      	mov	r6, r2
 8007d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d32:	5dc7      	ldrb	r7, [r0, r7]
 8007d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d38:	462f      	mov	r7, r5
 8007d3a:	42bb      	cmp	r3, r7
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	d9f4      	bls.n	8007d2a <_printf_i+0x11a>
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d10b      	bne.n	8007d5c <_printf_i+0x14c>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	07df      	lsls	r7, r3, #31
 8007d48:	d508      	bpl.n	8007d5c <_printf_i+0x14c>
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	6861      	ldr	r1, [r4, #4]
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	bfde      	ittt	le
 8007d52:	2330      	movle	r3, #48	; 0x30
 8007d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d5c:	1b92      	subs	r2, r2, r6
 8007d5e:	6122      	str	r2, [r4, #16]
 8007d60:	f8cd a000 	str.w	sl, [sp]
 8007d64:	464b      	mov	r3, r9
 8007d66:	aa03      	add	r2, sp, #12
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7ff fee2 	bl	8007b34 <_printf_common>
 8007d70:	3001      	adds	r0, #1
 8007d72:	d14c      	bne.n	8007e0e <_printf_i+0x1fe>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	b004      	add	sp, #16
 8007d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7e:	4835      	ldr	r0, [pc, #212]	; (8007e54 <_printf_i+0x244>)
 8007d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	680e      	ldr	r6, [r1, #0]
 8007d88:	061f      	lsls	r7, r3, #24
 8007d8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d8e:	600e      	str	r6, [r1, #0]
 8007d90:	d514      	bpl.n	8007dbc <_printf_i+0x1ac>
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	bf44      	itt	mi
 8007d96:	f043 0320 	orrmi.w	r3, r3, #32
 8007d9a:	6023      	strmi	r3, [r4, #0]
 8007d9c:	b91d      	cbnz	r5, 8007da6 <_printf_i+0x196>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f023 0320 	bic.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	2310      	movs	r3, #16
 8007da8:	e7b0      	b.n	8007d0c <_printf_i+0xfc>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f043 0320 	orr.w	r3, r3, #32
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	2378      	movs	r3, #120	; 0x78
 8007db4:	4828      	ldr	r0, [pc, #160]	; (8007e58 <_printf_i+0x248>)
 8007db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dba:	e7e3      	b.n	8007d84 <_printf_i+0x174>
 8007dbc:	065e      	lsls	r6, r3, #25
 8007dbe:	bf48      	it	mi
 8007dc0:	b2ad      	uxthmi	r5, r5
 8007dc2:	e7e6      	b.n	8007d92 <_printf_i+0x182>
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	e7bb      	b.n	8007d40 <_printf_i+0x130>
 8007dc8:	680b      	ldr	r3, [r1, #0]
 8007dca:	6826      	ldr	r6, [r4, #0]
 8007dcc:	6960      	ldr	r0, [r4, #20]
 8007dce:	1d1d      	adds	r5, r3, #4
 8007dd0:	600d      	str	r5, [r1, #0]
 8007dd2:	0635      	lsls	r5, r6, #24
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	d501      	bpl.n	8007ddc <_printf_i+0x1cc>
 8007dd8:	6018      	str	r0, [r3, #0]
 8007dda:	e002      	b.n	8007de2 <_printf_i+0x1d2>
 8007ddc:	0671      	lsls	r1, r6, #25
 8007dde:	d5fb      	bpl.n	8007dd8 <_printf_i+0x1c8>
 8007de0:	8018      	strh	r0, [r3, #0]
 8007de2:	2300      	movs	r3, #0
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	4616      	mov	r6, r2
 8007de8:	e7ba      	b.n	8007d60 <_printf_i+0x150>
 8007dea:	680b      	ldr	r3, [r1, #0]
 8007dec:	1d1a      	adds	r2, r3, #4
 8007dee:	600a      	str	r2, [r1, #0]
 8007df0:	681e      	ldr	r6, [r3, #0]
 8007df2:	6862      	ldr	r2, [r4, #4]
 8007df4:	2100      	movs	r1, #0
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7f8 fa72 	bl	80002e0 <memchr>
 8007dfc:	b108      	cbz	r0, 8007e02 <_printf_i+0x1f2>
 8007dfe:	1b80      	subs	r0, r0, r6
 8007e00:	6060      	str	r0, [r4, #4]
 8007e02:	6863      	ldr	r3, [r4, #4]
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	2300      	movs	r3, #0
 8007e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0c:	e7a8      	b.n	8007d60 <_printf_i+0x150>
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	4632      	mov	r2, r6
 8007e12:	4649      	mov	r1, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	47d0      	blx	sl
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d0ab      	beq.n	8007d74 <_printf_i+0x164>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	079b      	lsls	r3, r3, #30
 8007e20:	d413      	bmi.n	8007e4a <_printf_i+0x23a>
 8007e22:	68e0      	ldr	r0, [r4, #12]
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	4298      	cmp	r0, r3
 8007e28:	bfb8      	it	lt
 8007e2a:	4618      	movlt	r0, r3
 8007e2c:	e7a4      	b.n	8007d78 <_printf_i+0x168>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4632      	mov	r2, r6
 8007e32:	4649      	mov	r1, r9
 8007e34:	4640      	mov	r0, r8
 8007e36:	47d0      	blx	sl
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d09b      	beq.n	8007d74 <_printf_i+0x164>
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	68e3      	ldr	r3, [r4, #12]
 8007e40:	9903      	ldr	r1, [sp, #12]
 8007e42:	1a5b      	subs	r3, r3, r1
 8007e44:	42ab      	cmp	r3, r5
 8007e46:	dcf2      	bgt.n	8007e2e <_printf_i+0x21e>
 8007e48:	e7eb      	b.n	8007e22 <_printf_i+0x212>
 8007e4a:	2500      	movs	r5, #0
 8007e4c:	f104 0619 	add.w	r6, r4, #25
 8007e50:	e7f5      	b.n	8007e3e <_printf_i+0x22e>
 8007e52:	bf00      	nop
 8007e54:	08008129 	.word	0x08008129
 8007e58:	0800813a 	.word	0x0800813a

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_sbrk_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7f9 fa72 	bl	8001350 <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	24000714 	.word	0x24000714

08007e7c <__sread>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	460c      	mov	r4, r1
 8007e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e84:	f000 f8a0 	bl	8007fc8 <_read_r>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	bfab      	itete	ge
 8007e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e90:	181b      	addge	r3, r3, r0
 8007e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e96:	bfac      	ite	ge
 8007e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e9a:	81a3      	strhlt	r3, [r4, #12]
 8007e9c:	bd10      	pop	{r4, pc}

08007e9e <__swrite>:
 8007e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	05db      	lsls	r3, r3, #23
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4616      	mov	r6, r2
 8007eae:	d505      	bpl.n	8007ebc <__swrite+0x1e>
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f000 f868 	bl	8007f8c <_lseek_r>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	f000 b817 	b.w	8007f04 <_write_r>

08007ed6 <__sseek>:
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ede:	f000 f855 	bl	8007f8c <_lseek_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	bf15      	itete	ne
 8007ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ef2:	81a3      	strheq	r3, [r4, #12]
 8007ef4:	bf18      	it	ne
 8007ef6:	81a3      	strhne	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__sclose>:
 8007efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efe:	f000 b813 	b.w	8007f28 <_close_r>
	...

08007f04 <_write_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d07      	ldr	r5, [pc, #28]	; (8007f24 <_write_r+0x20>)
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	602a      	str	r2, [r5, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7f9 f9cb 	bl	80012ae <_write>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_write_r+0x1e>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_write_r+0x1e>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	24000714 	.word	0x24000714

08007f28 <_close_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d06      	ldr	r5, [pc, #24]	; (8007f44 <_close_r+0x1c>)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4604      	mov	r4, r0
 8007f30:	4608      	mov	r0, r1
 8007f32:	602b      	str	r3, [r5, #0]
 8007f34:	f7f9 f9d7 	bl	80012e6 <_close>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_close_r+0x1a>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_close_r+0x1a>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	24000714 	.word	0x24000714

08007f48 <_fstat_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d07      	ldr	r5, [pc, #28]	; (8007f68 <_fstat_r+0x20>)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	f7f9 f9d2 	bl	80012fe <_fstat>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d102      	bne.n	8007f64 <_fstat_r+0x1c>
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	b103      	cbz	r3, 8007f64 <_fstat_r+0x1c>
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	24000714 	.word	0x24000714

08007f6c <_isatty_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d06      	ldr	r5, [pc, #24]	; (8007f88 <_isatty_r+0x1c>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	f7f9 f9d1 	bl	800131e <_isatty>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_isatty_r+0x1a>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_isatty_r+0x1a>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	24000714 	.word	0x24000714

08007f8c <_lseek_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	; (8007fac <_lseek_r+0x20>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4608      	mov	r0, r1
 8007f94:	4611      	mov	r1, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7f9 f9ca 	bl	8001334 <_lseek>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_lseek_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_lseek_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	24000714 	.word	0x24000714

08007fb0 <__malloc_lock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__malloc_lock+0x8>)
 8007fb2:	f7ff bb55 	b.w	8007660 <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	2400070c 	.word	0x2400070c

08007fbc <__malloc_unlock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <__malloc_unlock+0x8>)
 8007fbe:	f7ff bb50 	b.w	8007662 <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	2400070c 	.word	0x2400070c

08007fc8 <_read_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_read_r+0x20>)
 8007fcc:	4604      	mov	r4, r0
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7f9 f94c 	bl	8001274 <_read>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_read_r+0x1e>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_read_r+0x1e>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	24000714 	.word	0x24000714

08007fec <_init>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_fini>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr
