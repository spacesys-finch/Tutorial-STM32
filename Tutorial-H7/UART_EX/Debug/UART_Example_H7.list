
UART_Example_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  080083f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000080  08008474  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000e0  080084d4  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  24000140  08008534  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006d8  08008534  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002254c  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fe  00000000  00000000  000426ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00045eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00046f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038459  00000000  00000000  00047e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013577  00000000  00000000  000802a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f3da  00000000  00000000  00093820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f2bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  001f2c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008120 	.word	0x08008120

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08008120 	.word	0x08008120

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fe47 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f833 	bl	80006ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fdcc 	bl	8001224 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f978 	bl	8000980 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f8ac 	bl	80007ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f8f6 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 f940 	bl	800091c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <main+0x5c>)
 800069e:	f005 fedb 	bl	8006458 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0x60>)
 80006a4:	f005 fed8 	bl	8006458 <iprintf>

  char str[20];

  setvbuf(stdin, NULL, _IONBF, 0);
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <main+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6858      	ldr	r0, [r3, #4]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2202      	movs	r2, #2
 80006b2:	2100      	movs	r1, #0
 80006b4:	f005 ff00 	bl	80064b8 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("\n\r Enter your name:\n\r");
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <main+0x68>)
 80006ba:	f005 fecd 	bl	8006458 <iprintf>

	scanf("%s",str);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x6c>)
 80006c4:	f005 fee0 	bl	8006488 <iscanf>

	printf("\n\r Your name is: %s \n\r",str);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <main+0x70>)
 80006ce:	f005 fec3 	bl	8006458 <iprintf>
	printf("\n\r Enter your name:\n\r");
 80006d2:	e7f1      	b.n	80006b8 <main+0x40>
 80006d4:	08008138 	.word	0x08008138
 80006d8:	08008188 	.word	0x08008188
 80006dc:	2400001c 	.word	0x2400001c
 80006e0:	080081b0 	.word	0x080081b0
 80006e4:	080081c8 	.word	0x080081c8
 80006e8:	080081cc 	.word	0x080081cc

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fea4 	bl	8006448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2220      	movs	r2, #32
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fe9e 	bl	8006448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800070c:	2002      	movs	r0, #2
 800070e:	f001 fee1 	bl	80024d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <SystemClock_Config+0xf8>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <SystemClock_Config+0xf8>)
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <SystemClock_Config+0xf8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <SystemClock_Config+0xfc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <SystemClock_Config+0xfc>)
 8000736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemClock_Config+0xfc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000748:	bf00      	nop
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xfc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000756:	d1f8      	bne.n	800074a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000758:	2303      	movs	r3, #3
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000762:	2301      	movs	r3, #1
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2340      	movs	r3, #64	; 0x40
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000776:	2318      	movs	r3, #24
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000786:	230c      	movs	r3, #12
 8000788:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	2300      	movs	r3, #0
 800078c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fee6 	bl	8002568 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007a2:	f000 f9ed 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	233f      	movs	r3, #63	; 0x3f
 80007a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fadc 	bl	8002d88 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007d6:	f000 f9d3 	bl	8000b80 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3770      	adds	r7, #112	; 0x70
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58000400 	.word	0x58000400
 80007e8:	58024800 	.word	0x58024800

080007ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ETH_Init+0x80>)
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_ETH_Init+0x84>)
 80007f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ETH_Init+0x88>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ETH_Init+0x88>)
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_ETH_Init+0x88>)
 8000804:	22e1      	movs	r2, #225	; 0xe1
 8000806:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_ETH_Init+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ETH_Init+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ETH_Init+0x88>)
 8000816:	2200      	movs	r2, #0
 8000818:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ETH_Init+0x80>)
 800081c:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_ETH_Init+0x88>)
 800081e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_ETH_Init+0x80>)
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ETH_Init+0x80>)
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_ETH_Init+0x8c>)
 800082a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ETH_Init+0x80>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_ETH_Init+0x90>)
 8000830:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_ETH_Init+0x80>)
 8000834:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000838:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_ETH_Init+0x80>)
 800083c:	f000 ff22 	bl	8001684 <HAL_ETH_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000846:	f000 f99b 	bl	8000b80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800084a:	2234      	movs	r2, #52	; 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_ETH_Init+0x94>)
 8000850:	f005 fdfa 	bl	8006448 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_ETH_Init+0x94>)
 8000856:	2221      	movs	r2, #33	; 0x21
 8000858:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_ETH_Init+0x94>)
 800085c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000860:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_ETH_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000608 	.word	0x24000608
 8000870:	40028000 	.word	0x40028000
 8000874:	2400015c 	.word	0x2400015c
 8000878:	240000e0 	.word	0x240000e0
 800087c:	24000080 	.word	0x24000080
 8000880:	24000690 	.word	0x24000690

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART3_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008ce:	f004 f949 	bl	8004b64 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f952 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008e0:	f005 fa00 	bl	8005ce4 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f949 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008f2:	f005 fa35 	bl	8005d60 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f940 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000902:	f005 f9b6 	bl	8005c72 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f938 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000170 	.word	0x24000170
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000924:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2209      	movs	r2, #9
 800092a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2202      	movs	r2, #2
 8000930:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093a:	2202      	movs	r2, #2
 800093c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000940:	2201      	movs	r2, #1
 8000942:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000952:	2201      	movs	r2, #1
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	f001 fc6d 	bl	8002242 <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800096e:	f000 f907 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000200 	.word	0x24000200
 800097c:	40080000 	.word	0x40080000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <MX_GPIO_Init+0x19c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b4:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a58      	ldr	r2, [pc, #352]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a50      	ldr	r2, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b4e      	ldr	r3, [pc, #312]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a6e:	482c      	ldr	r0, [pc, #176]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000a70:	f001 fbce 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	482a      	ldr	r0, [pc, #168]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000a7c:	f001 fbc8 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	4828      	ldr	r0, [pc, #160]	; (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a86:	f001 fbc3 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4823      	ldr	r0, [pc, #140]	; (8000b2c <MX_GPIO_Init+0x1ac>)
 8000aa0:	f001 fa06 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000abe:	f001 f9f7 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000adc:	f001 f9e8 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_GPIO_Init+0x1b0>)
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x1b4>)
 8000af4:	f001 f9dc 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x1a8>)
 8000b10:	f001 f9ce 	bl	8001eb0 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58020400 	.word	0x58020400
 8000b24:	58020c00 	.word	0x58020c00
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	58020800 	.word	0x58020800
 8000b30:	11110000 	.word	0x11110000
 8000b34:	58021800 	.word	0x58021800

08000b38 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b40:	1d39      	adds	r1, r7, #4
 8000b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b46:	2201      	movs	r2, #1
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <__io_putchar+0x20>)
 8000b4a:	f004 f85b 	bl	8004c04 <HAL_UART_Transmit>

  return ch;
 8000b4e:	687b      	ldr	r3, [r7, #4]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	24000170 	.word	0x24000170

08000b5c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <__io_getchar+0x20>)
 8000b6c:	f004 f8e0 	bl	8004d30 <HAL_UART_Receive>

	return ch;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000170 	.word	0x24000170

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_MspInit+0x30>)
 8000b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x30>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a59      	ldr	r2, [pc, #356]	; (8000d44 <HAL_ETH_MspInit+0x184>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 80ab 	bne.w	8000d3a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000be4:	4b58      	ldr	r3, [pc, #352]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf4:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c08:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c20:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c26:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cb6:	2332      	movs	r3, #50	; 0x32
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481e      	ldr	r0, [pc, #120]	; (8000d4c <HAL_ETH_MspInit+0x18c>)
 8000cd2:	f001 f8ed 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cd6:	2386      	movs	r3, #134	; 0x86
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <HAL_ETH_MspInit+0x190>)
 8000cf2:	f001 f8dd 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_ETH_MspInit+0x194>)
 8000d14:	f001 f8cc 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2a:	230b      	movs	r3, #11
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_ETH_MspInit+0x198>)
 8000d36:	f001 f8bb 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40028000 	.word	0x40028000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020800 	.word	0x58020800
 8000d50:	58020000 	.word	0x58020000
 8000d54:	58020400 	.word	0x58020400
 8000d58:	58021800 	.word	0x58021800

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b8      	sub	sp, #224	; 0xe0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22bc      	movs	r2, #188	; 0xbc
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fb63 	bl	8006448 <memset>
  if(huart->Instance==USART3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_UART_MspInit+0xc0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d142      	bne.n	8000e12 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fb80 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000da6:	f7ff feeb 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e00:	2307      	movs	r3, #7
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000e0e:	f001 f84f 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	37e0      	adds	r7, #224	; 0xe0
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00

08000e28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b8      	sub	sp, #224	; 0xe0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	22bc      	movs	r2, #188	; 0xbc
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fafd 	bl	8006448 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_PCD_MspInit+0xe8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d156      	bne.n	8000f06 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fb18 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e76:	f7ff fe83 	bl	8000b80 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e7a:	f001 fb65 	bl	8002548 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e9c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <HAL_PCD_MspInit+0xf0>)
 8000ec4:	f000 fff4 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <HAL_PCD_MspInit+0xf0>)
 8000ee4:	f000 ffe4 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_PCD_MspInit+0xec>)
 8000efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37e0      	adds	r7, #224	; 0xe0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40080000 	.word	0x40080000
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020000 	.word	0x58020000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 fa44 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f82:	f7ff fdeb 	bl	8000b5c <__io_getchar>
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
	}

return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fdb7 	bl	8000b38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
	}
	return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
	return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f005 f9ba 	bl	80063f4 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24080000 	.word	0x24080000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	24000164 	.word	0x24000164
 80010b4:	240006d8 	.word	0x240006d8

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <SystemInit+0xec>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a38      	ldr	r2, [pc, #224]	; (80011a4 <SystemInit+0xec>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <SystemInit+0xf0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d807      	bhi.n	80010e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <SystemInit+0xf0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <SystemInit+0xf0>)
 80010e2:	f043 0307 	orr.w	r3, r3, #7
 80010e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <SystemInit+0xf4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <SystemInit+0xf4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <SystemInit+0xf4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <SystemInit+0xf4>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	492b      	ldr	r1, [pc, #172]	; (80011ac <SystemInit+0xf4>)
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <SystemInit+0xf8>)
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <SystemInit+0xf0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SystemInit+0xf0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 030f 	bic.w	r3, r3, #15
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <SystemInit+0xf0>)
 800111c:	f043 0307 	orr.w	r3, r3, #7
 8001120:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemInit+0xf4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemInit+0xf4>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemInit+0xf4>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <SystemInit+0xf4>)
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <SystemInit+0xfc>)
 8001138:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <SystemInit+0xf4>)
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <SystemInit+0x100>)
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <SystemInit+0xf4>)
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <SystemInit+0x104>)
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <SystemInit+0xf4>)
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <SystemInit+0xf4>)
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <SystemInit+0x104>)
 8001150:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <SystemInit+0xf4>)
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <SystemInit+0xf4>)
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <SystemInit+0x104>)
 800115c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <SystemInit+0xf4>)
 8001160:	2200      	movs	r2, #0
 8001162:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <SystemInit+0xf4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a10      	ldr	r2, [pc, #64]	; (80011ac <SystemInit+0xf4>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <SystemInit+0xf4>)
 8001172:	2200      	movs	r2, #0
 8001174:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <SystemInit+0x108>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <SystemInit+0x10c>)
 800117c:	4013      	ands	r3, r2
 800117e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001182:	d202      	bcs.n	800118a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <SystemInit+0x110>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <SystemInit+0x114>)
 800118c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001190:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SystemInit+0xec>)
 8001194:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001198:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	52002000 	.word	0x52002000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	02020200 	.word	0x02020200
 80011b8:	01ff0000 	.word	0x01ff0000
 80011bc:	01010280 	.word	0x01010280
 80011c0:	5c001000 	.word	0x5c001000
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	51008108 	.word	0x51008108
 80011cc:	52004000 	.word	0x52004000

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d4:	f7ff ff70 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f005 f8ff 	bl	8006400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff fa39 	bl	8000678 <main>
  bx  lr
 8001206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800120c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001210:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8001214:	080083f4 	.word	0x080083f4
  ldr r2, =_sbss
 8001218:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 800121c:	240006d8 	.word	0x240006d8

08001220 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC3_IRQHandler>
	...

08001224 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <BSP_LED_Init+0x28>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d006      	beq.n	800124c <BSP_LED_Init+0x28>
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d003      	beq.n	800124c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001244:	f06f 0301 	mvn.w	r3, #1
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800124a:	e055      	b.n	80012f8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <BSP_LED_Init+0xe0>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <BSP_LED_Init+0xe0>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <BSP_LED_Init+0xe0>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	e021      	b.n	80012b6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10f      	bne.n	8001298 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <BSP_LED_Init+0xe0>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <BSP_LED_Init+0xe0>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <BSP_LED_Init+0xe0>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	e00e      	b.n	80012b6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <BSP_LED_Init+0xe0>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <BSP_LED_Init+0xe0>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <BSP_LED_Init+0xe0>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <BSP_LED_Init+0xe4>)
 80012ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012be:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <BSP_LED_Init+0xe8>)
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	f107 0218 	add.w	r2, r7, #24
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fde8 	bl	8001eb0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <BSP_LED_Init+0xe8>)
 80012e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <BSP_LED_Init+0xe4>)
 80012ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	f000 ff8c 	bl	8002210 <HAL_GPIO_WritePin>
  }

  return ret;
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	58024400 	.word	0x58024400
 8001308:	08008200 	.word	0x08008200
 800130c:	24000008 	.word	0x24000008

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001316:	2003      	movs	r0, #3
 8001318:	f000 f982 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800131c:	f001 feea 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <HAL_Init+0x6c>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_Init+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_Init+0x6c>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x70>)
 8001352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f814 	bl	8001388 <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e002      	b.n	8001370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fc0f 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	080081f0 	.word	0x080081f0
 8001380:	24000004 	.word	0x24000004
 8001384:	24000000 	.word	0x24000000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_InitTick+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e021      	b.n	80013e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x64>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0x60>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f959 	bl	800166a <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f931 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x68>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000018 	.word	0x24000018
 80013ec:	24000000 	.word	0x24000000
 80013f0:	24000014 	.word	0x24000014

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	24000018 	.word	0x24000018
 8001418:	240006c4 	.word	0x240006c4

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	240006c4 	.word	0x240006c4

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000018 	.word	0x24000018

0800147c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetREVID+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0c1b      	lsrs	r3, r3, #16
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	5c001000 	.word	0x5c001000

08001494 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014a4:	4904      	ldr	r1, [pc, #16]	; (80014b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58000400 	.word	0x58000400

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <__NVIC_SetPriorityGrouping+0x40>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x40>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	05fa0000 	.word	0x05fa0000

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff47 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff5e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffb2 	bl	80015dc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0c6      	b.n	8001824 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fa8e 	bl	8000bc0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2223      	movs	r2, #35	; 0x23
 80016a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <HAL_ETH_Init+0x1a8>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	4a5e      	ldr	r2, [pc, #376]	; (800182c <HAL_ETH_Init+0x1a8>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_ETH_Init+0x1a8>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7a1b      	ldrb	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d103      	bne.n	80016d8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fedf 	bl	8001494 <HAL_SYSCFG_ETHInterfaceSelect>
 80016d6:	e003      	b.n	80016e0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016dc:	f7ff feda 	bl	8001494 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fe90 	bl	800141c <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016fe:	e00f      	b.n	8001720 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001700:	f7ff fe8c 	bl	800141c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170e:	d907      	bls.n	8001720 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2204      	movs	r2, #4
 8001714:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	22e0      	movs	r2, #224	; 0xe0
 800171a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e081      	b.n	8001824 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e6      	bne.n	8001700 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fac0 	bl	8001cb8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001738:	f001 fe56 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800173c:	4603      	mov	r3, r0
 800173e:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <HAL_ETH_Init+0x1ac>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9a      	lsrs	r2, r3, #18
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3a01      	subs	r2, #1
 800174c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa13 	bl	8001b7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800176c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001770:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22e0      	movs	r2, #224	; 0xe0
 8001788:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e04a      	b.n	8001824 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f241 1308 	movw	r3, #4360	; 0x1108
 8001796:	4413      	add	r3, r2
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_ETH_Init+0x1b0>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6952      	ldr	r2, [r2, #20]
 80017a2:	0052      	lsls	r2, r2, #1
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	6809      	ldr	r1, [r1, #0]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fad8 	bl	8001d68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fb1c 	bl	8001df6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	3305      	adds	r3, #5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021a      	lsls	r2, r3, #8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	3303      	adds	r3, #3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	061a      	lsls	r2, r3, #24
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	3302      	adds	r3, #2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800180a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800180c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2210      	movs	r2, #16
 800181a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2210      	movs	r2, #16
 8001820:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400
 8001830:	431bde83 	.word	0x431bde83
 8001834:	ffff8001 	.word	0xffff8001

08001838 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800184a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001852:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800185a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7b5b      	ldrb	r3, [r3, #13]
 8001860:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001862:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7b9b      	ldrb	r3, [r3, #14]
 8001868:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800186a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7bdb      	ldrb	r3, [r3, #15]
 8001870:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001872:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	7c12      	ldrb	r2, [r2, #16]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d102      	bne.n	8001882 <ETH_SetMACConfig+0x4a>
 800187c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x4c>
 8001882:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001884:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	7c52      	ldrb	r2, [r2, #17]
 800188a:	2a00      	cmp	r2, #0
 800188c:	d102      	bne.n	8001894 <ETH_SetMACConfig+0x5c>
 800188e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001892:	e000      	b.n	8001896 <ETH_SetMACConfig+0x5e>
 8001894:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001896:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7c9b      	ldrb	r3, [r3, #18]
 800189c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800189e:	431a      	orrs	r2, r3
                                macconf->Speed |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80018a4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80018aa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80018b2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7f5b      	ldrb	r3, [r3, #29]
 80018b8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80018ba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	7f92      	ldrb	r2, [r2, #30]
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d102      	bne.n	80018ca <ETH_SetMACConfig+0x92>
 80018c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c8:	e000      	b.n	80018cc <ETH_SetMACConfig+0x94>
 80018ca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018cc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7fdb      	ldrb	r3, [r3, #31]
 80018d2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018d4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d102      	bne.n	80018e6 <ETH_SetMACConfig+0xae>
 80018e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0xb0>
 80018e6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018e8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018ee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018f6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80018f8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <ETH_SetMACConfig+0x22c>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001922:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001924:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800192c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800192e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001936:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001938:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001940:	2a00      	cmp	r2, #0
 8001942:	d102      	bne.n	800194a <ETH_SetMACConfig+0x112>
 8001944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001948:	e000      	b.n	800194c <ETH_SetMACConfig+0x114>
 800194a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800194c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <ETH_SetMACConfig+0x230>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	430b      	orrs	r3, r1
 8001968:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001970:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <ETH_SetMACConfig+0x234>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	430b      	orrs	r3, r1
 800198c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001994:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800199a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d101      	bne.n	80019aa <ETH_SetMACConfig+0x172>
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0x174>
 80019aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019ac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	f023 0103 	bic.w	r1, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a02:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d101      	bne.n	8001a26 <ETH_SetMACConfig+0x1ee>
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	e000      	b.n	8001a28 <ETH_SetMACConfig+0x1f0>
 8001a26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a28:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a32:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a48:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	00048083 	.word	0x00048083
 8001a68:	c0f88000 	.word	0xc0f88000
 8001a6c:	fffffef0 	.word	0xfffffef0

08001a70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <ETH_SetDMAConfig+0xf8>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	6809      	ldr	r1, [r1, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001a96:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <ETH_SetDMAConfig+0xfc>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6811      	ldr	r1, [r2, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aca:	440b      	add	r3, r1
 8001acc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b5b      	ldrb	r3, [r3, #13]
 8001ad2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <ETH_SetDMAConfig+0x100>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001af6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7d1b      	ldrb	r3, [r3, #20]
 8001b00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7f5b      	ldrb	r3, [r3, #29]
 8001b08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b16:	4413      	add	r3, r2
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <ETH_SetDMAConfig+0x104>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b2a:	440b      	add	r3, r1
 8001b2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	7f1b      	ldrb	r3, [r3, #28]
 8001b32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b44:	4413      	add	r3, r2
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <ETH_SetDMAConfig+0x108>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	ffff87fd 	.word	0xffff87fd
 8001b6c:	ffff2ffe 	.word	0xffff2ffe
 8001b70:	fffec000 	.word	0xfffec000
 8001b74:	ffc0efef 	.word	0xffc0efef
 8001b78:	7fc0ffff 	.word	0x7fc0ffff

08001b7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0a4      	sub	sp, #144	; 0x90
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bd4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c14:	2320      	movs	r3, #32
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c56:	2300      	movs	r3, #0
 8001c58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fde6 	bl	8001838 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001c9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fee1 	bl	8001a70 <ETH_SetDMAConfig>
}
 8001cae:	bf00      	nop
 8001cb0:	3790      	adds	r7, #144	; 0x90
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cd2:	f001 fb89 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8001cd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d908      	bls.n	8001cf2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d804      	bhi.n	8001cf2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e027      	b.n	8001d42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d908      	bls.n	8001d0c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d204      	bcs.n	8001d0c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e01a      	b.n	8001d42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d303      	bcc.n	8001d1c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d911      	bls.n	8001d40 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d908      	bls.n	8001d36 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d804      	bhi.n	8001d36 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e005      	b.n	8001d42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e000      	b.n	8001d42 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001d40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	01312cff 	.word	0x01312cff
 8001d58:	02160ebf 	.word	0x02160ebf
 8001d5c:	03938700 	.word	0x03938700
 8001d60:	05f5e0ff 	.word	0x05f5e0ff
 8001d64:	08f0d17f 	.word	0x08f0d17f

08001d68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e01d      	b.n	8001db2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	3206      	adds	r2, #6
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d9de      	bls.n	8001d76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f241 132c 	movw	r3, #4396	; 0x112c
 8001dc6:	4413      	add	r3, r2
 8001dc8:	2203      	movs	r2, #3
 8001dca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68d9      	ldr	r1, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	f241 1314 	movw	r3, #4372	; 0x1114
 8001dd8:	4413      	add	r3, r2
 8001dda:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e024      	b.n	8001e4e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6919      	ldr	r1, [r3, #16]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3310      	adds	r3, #16
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d9d7      	bls.n	8001e04 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	f241 1330 	movw	r3, #4400	; 0x1130
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f241 131c 	movw	r3, #4380	; 0x111c
 8001e8c:	4413      	add	r3, r2
 8001e8e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f241 1328 	movw	r3, #4392	; 0x1128
 8001ea0:	4413      	add	r3, r2
 8001ea2:	6019      	str	r1, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_GPIO_Init+0x234>)
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ec2:	e194      	b.n	80021ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8186 	beq.w	80021e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d00b      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0xee>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d123      	bne.n	8001fe6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0203 	and.w	r2, r3, #3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80e0 	beq.w	80021e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_GPIO_Init+0x238>)
 800202a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800202e:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_GPIO_Init+0x238>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_GPIO_Init+0x238>)
 800203a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_GPIO_Init+0x23c>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_GPIO_Init+0x240>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d052      	beq.n	8002118 <HAL_GPIO_Init+0x268>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_GPIO_Init+0x244>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_GPIO_Init+0x22e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_GPIO_Init+0x248>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x22a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x24c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_GPIO_Init+0x250>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_GPIO_Init+0x254>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x258>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_GPIO_Init+0x25c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_GPIO_Init+0x260>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_GPIO_Init+0x264>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x20e>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e02d      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020be:	230a      	movs	r3, #10
 80020c0:	e02b      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e029      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e027      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e025      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e023      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e021      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e01f      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e01d      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020de:	2301      	movs	r3, #1
 80020e0:	e01b      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020e2:	bf00      	nop
 80020e4:	58000080 	.word	0x58000080
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58000400 	.word	0x58000400
 80020f0:	58020000 	.word	0x58020000
 80020f4:	58020400 	.word	0x58020400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020c00 	.word	0x58020c00
 8002100:	58021000 	.word	0x58021000
 8002104:	58021400 	.word	0x58021400
 8002108:	58021800 	.word	0x58021800
 800210c:	58021c00 	.word	0x58021c00
 8002110:	58022000 	.word	0x58022000
 8002114:	58022400 	.word	0x58022400
 8002118:	2300      	movs	r3, #0
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212a:	4938      	ldr	r1, [pc, #224]	; (800220c <HAL_GPIO_Init+0x35c>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f ae63 	bne.w	8001ec4 <HAL_GPIO_Init+0x14>
  }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3724      	adds	r7, #36	; 0x24
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	58000400 	.word	0x58000400

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002244:	b08f      	sub	sp, #60	; 0x3c
 8002246:	af0a      	add	r7, sp, #40	; 0x28
 8002248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e116      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fdda 	bl	8000e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fe5e 	bl	8005f54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	687e      	ldr	r6, [r7, #4]
 80022a0:	466d      	mov	r5, sp
 80022a2:	f106 0410 	add.w	r4, r6, #16
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b6:	1d33      	adds	r3, r6, #4
 80022b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ba:	6838      	ldr	r0, [r7, #0]
 80022bc:	f003 fddc 	bl	8005e78 <USB_CoreInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0d7      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fe4c 	bl	8005f76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e04a      	b.n	800237a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	333d      	adds	r3, #61	; 0x3d
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333c      	adds	r3, #60	; 0x3c
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	b298      	uxth	r0, r3
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3342      	adds	r3, #66	; 0x42
 8002320:	4602      	mov	r2, r0
 8002322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	333f      	adds	r3, #63	; 0x3f
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	; 0x44
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3348      	adds	r3, #72	; 0x48
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3350      	adds	r3, #80	; 0x50
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d3af      	bcc.n	80022e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e044      	b.n	8002414 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3301      	adds	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b5      	bcc.n	800238a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	687e      	ldr	r6, [r7, #4]
 8002426:	466d      	mov	r5, sp
 8002428:	f106 0410 	add.w	r4, r6, #16
 800242c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002438:	e885 0003 	stmia.w	r5, {r0, r1}
 800243c:	1d33      	adds	r3, r6, #4
 800243e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f003 fdc3 	bl	8005fcc <USB_DevInit>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e014      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f80b 	bl	800248c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f003 ff65 	bl	800634a <USB_DevDisconnect>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800248c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	10000003 	.word	0x10000003

080024d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00a      	beq.n	80024fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01f      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e01d      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	490f      	ldr	r1, [pc, #60]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800250e:	f7fe ff85 	bl	800141c <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002514:	e009      	b.n	800252a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002516:	f7fe ff81 	bl	800141c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002524:	d901      	bls.n	800252a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	d1ee      	bne.n	8002516 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	58024800 	.word	0x58024800

08002568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e3ff      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002592:	4b97      	ldr	r3, [pc, #604]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	2b10      	cmp	r3, #16
 800259c:	d007      	beq.n	80025ae <HAL_RCC_OscConfig+0x46>
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b18      	cmp	r3, #24
 80025a2:	d110      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ae:	4b90      	ldr	r3, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d06c      	beq.n	8002694 <HAL_RCC_OscConfig+0x12c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d168      	bne.n	8002694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e3d9      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x76>
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a86      	ldr	r2, [pc, #536]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e02e      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a81      	ldr	r2, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7e      	ldr	r2, [pc, #504]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0xbc>
 800260a:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a78      	ldr	r2, [pc, #480]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a75      	ldr	r2, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002624:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a71      	ldr	r2, [pc, #452]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe feea 	bl	800141c <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fee6 	bl	800141c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e38d      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xe4>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fed6 	bl	800141c <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fed2 	bl	800141c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e379      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x10c>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80ae 	beq.w	8002800 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ae:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x162>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d13a      	bne.n	8002736 <HAL_RCC_OscConfig+0x1ce>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d135      	bne.n	8002736 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e34b      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	f7fe fecb 	bl	800147c <HAL_GetREVID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d817      	bhi.n	8002720 <HAL_RCC_OscConfig+0x1b8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d108      	bne.n	800270a <HAL_RCC_OscConfig+0x1a2>
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	e07a      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	4935      	ldr	r1, [pc, #212]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271e:	e06f      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4930      	ldr	r1, [pc, #192]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	e064      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d045      	beq.n	80027ca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0219 	bic.w	r2, r3, #25
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4929      	ldr	r1, [pc, #164]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fe64 	bl	800141c <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe fe60 	bl	800141c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e307      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	f7fe fe81 	bl	800147c <HAL_GetREVID>
 800277a:	4603      	mov	r3, r0
 800277c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002780:	4293      	cmp	r3, r2
 8002782:	d817      	bhi.n	80027b4 <HAL_RCC_OscConfig+0x24c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d108      	bne.n	800279e <HAL_RCC_OscConfig+0x236>
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002794:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279a:	6053      	str	r3, [r2, #4]
 800279c:	e030      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	4910      	ldr	r1, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e025      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e01a      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fe21 	bl	800141c <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe fe1d 	bl	800141c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d903      	bls.n	80027f4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e2c4      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
 80027f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f4:	4ba4      	ldr	r3, [pc, #656]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a9 	beq.w	8002960 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b9e      	ldr	r3, [pc, #632]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002818:	4b9b      	ldr	r3, [pc, #620]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d007      	beq.n	8002834 <HAL_RCC_OscConfig+0x2cc>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b18      	cmp	r3, #24
 8002828:	d13a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x338>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d135      	bne.n	80028a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002834:	4b94      	ldr	r3, [pc, #592]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x2e4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e296      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800284c:	f7fe fe16 	bl	800147c <HAL_GetREVID>
 8002850:	4603      	mov	r3, r0
 8002852:	f241 0203 	movw	r2, #4099	; 0x1003
 8002856:	4293      	cmp	r3, r2
 8002858:	d817      	bhi.n	800288a <HAL_RCC_OscConfig+0x322>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	2b20      	cmp	r3, #32
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 8002862:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800286c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002870:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002872:	e075      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002874:	4b84      	ldr	r3, [pc, #528]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	4981      	ldr	r1, [pc, #516]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002888:	e06a      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	497b      	ldr	r1, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800289e:	e05f      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d042      	beq.n	800292e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028a8:	4b77      	ldr	r3, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a76      	ldr	r2, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fdb2 	bl	800141c <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028bc:	f7fe fdae 	bl	800141c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e255      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ce:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028da:	f7fe fdcf 	bl	800147c <HAL_GetREVID>
 80028de:	4603      	mov	r3, r0
 80028e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d817      	bhi.n	8002918 <HAL_RCC_OscConfig+0x3b0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d108      	bne.n	8002902 <HAL_RCC_OscConfig+0x39a>
 80028f0:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80028fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028fe:	6053      	str	r3, [r2, #4]
 8002900:	e02e      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
 8002902:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	495d      	ldr	r1, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e023      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4958      	ldr	r1, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e018      	b.n	8002960 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800292e:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a55      	ldr	r2, [pc, #340]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fd6f 	bl	800141c <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002942:	f7fe fd6b 	bl	800141c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e212      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d036      	beq.n	80029da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d019      	beq.n	80029a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002974:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002978:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fd4c 	bl	800141c <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fd48 	bl	800141c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1ef      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x420>
 80029a6:	e018      	b.n	80029da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fd32 	bl	800141c <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fd2e 	bl	800141c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1d5      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d036      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 80029f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fd0f 	bl	800141c <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a02:	f7fe fd0b 	bl	800141c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1b2      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x49a>
 8002a20:	e018      	b.n	8002a54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fcf5 	bl	800141c <HAL_GetTick>
 8002a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a36:	f7fe fcf1 	bl	800141c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e198      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_RCC_OscConfig+0x520>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8085 	beq.w	8002b6c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_OscConfig+0x524>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x524>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fcd5 	bl	800141c <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a74:	e00c      	b.n	8002a90 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fcd1 	bl	800141c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d905      	bls.n	8002a90 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e178      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a90:	4b96      	ldr	r3, [pc, #600]	; (8002cec <HAL_RCC_OscConfig+0x784>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ec      	beq.n	8002a76 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x54a>
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a91      	ldr	r2, [pc, #580]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x5a6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x56c>
 8002aba:	4b8d      	ldr	r3, [pc, #564]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a8c      	ldr	r2, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a89      	ldr	r2, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x5a6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x58e>
 8002adc:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x5a6>
 8002af6:	4b7e      	ldr	r3, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fc81 	bl	800141c <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fc7d 	bl	800141c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e122      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b34:	4b6e      	ldr	r3, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5b6>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fc6b 	bl	800141c <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fc67 	bl	800141c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b60:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8101 	beq.w	8002d78 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	f000 80bc 	beq.w	8002cfc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	f040 8095 	bne.w	8002cb8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc3f 	bl	800141c <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fc3b 	bl	800141c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0e2      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCC_OscConfig+0x78c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	4946      	ldr	r1, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	628b      	str	r3, [r1, #40]	; 0x28
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	3b01      	subs	r3, #1
 8002bea:	025b      	lsls	r3, r3, #9
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	3b01      	subs	r3, #1
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c0a:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_OscConfig+0x790>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c28:	00d2      	lsls	r2, r2, #3
 8002c2a:	4931      	ldr	r1, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f023 020c 	bic.w	r2, r3, #12
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	492c      	ldr	r1, [pc, #176]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f023 0202 	bic.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4928      	ldr	r1, [pc, #160]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fbc4 	bl	800141c <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fbc0 	bl	800141c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x730>
 8002cb6:	e05f      	b.n	8002d78 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fbaa 	bl	800141c <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fba6 	bl	800141c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04d      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_RCC_OscConfig+0x788>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x764>
 8002cea:	e045      	b.n	8002d78 <HAL_RCC_OscConfig+0x810>
 8002cec:	58024800 	.word	0x58024800
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	fffffc0c 	.word	0xfffffc0c
 8002cf8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x81c>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_OscConfig+0x81c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d031      	beq.n	8002d74 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d12a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d122      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0a5b      	lsrs	r3, r3, #9
 8002d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d108      	bne.n	8002d74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3730      	adds	r7, #48	; 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	58024400 	.word	0x58024400

08002d88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e19c      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b8a      	ldr	r3, [pc, #552]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d910      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b87      	ldr	r3, [pc, #540]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 020f 	bic.w	r2, r3, #15
 8002db2:	4985      	ldr	r1, [pc, #532]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e184      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d908      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4975      	ldr	r1, [pc, #468]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d908      	bls.n	8002e28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	496a      	ldr	r1, [pc, #424]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d908      	bls.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	495e      	ldr	r1, [pc, #376]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d908      	bls.n	8002e84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e72:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4953      	ldr	r1, [pc, #332]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4b4d      	ldr	r3, [pc, #308]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d908      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f023 020f 	bic.w	r2, r3, #15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4947      	ldr	r1, [pc, #284]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d055      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4940      	ldr	r1, [pc, #256]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed8:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d121      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0f6      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d115      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0ea      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0de      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f18:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d6      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f023 0207 	bic.w	r2, r3, #7
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4925      	ldr	r1, [pc, #148]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa6f 	bl	800141c <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f42:	f7fe fa6b 	bl	800141c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0be      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d1eb      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d208      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	490e      	ldr	r1, [pc, #56]	; (8002fcc <HAL_RCC_ClockConfig+0x244>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d214      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	4906      	ldr	r1, [pc, #24]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <HAL_RCC_ClockConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e086      	b.n	80030d6 <HAL_RCC_ClockConfig+0x34e>
 8002fc8:	52002000 	.word	0x52002000
 8002fcc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d208      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fec:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4939      	ldr	r1, [pc, #228]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003016:	429a      	cmp	r2, r3
 8003018:	d208      	bcs.n	800302c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	492e      	ldr	r1, [pc, #184]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003028:	4313      	orrs	r3, r2
 800302a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003044:	429a      	cmp	r2, r3
 8003046:	d208      	bcs.n	800305a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	4922      	ldr	r1, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003056:	4313      	orrs	r3, r2
 8003058:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003072:	429a      	cmp	r2, r3
 8003074:	d208      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4917      	ldr	r1, [pc, #92]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003084:	4313      	orrs	r3, r2
 8003086:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003088:	f000 f834 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	4912      	ldr	r1, [pc, #72]	; (80030e4 <HAL_RCC_ClockConfig+0x35c>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_RCC_ClockConfig+0x35c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_RCC_ClockConfig+0x360>)
 80030be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x364>)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x368>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f95c 	bl	8001388 <HAL_InitTick>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	58024400 	.word	0x58024400
 80030e4:	080081f0 	.word	0x080081f0
 80030e8:	24000004 	.word	0x24000004
 80030ec:	24000000 	.word	0x24000000
 80030f0:	24000014 	.word	0x24000014

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fa:	4bb3      	ldr	r3, [pc, #716]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003102:	2b18      	cmp	r3, #24
 8003104:	f200 8155 	bhi.w	80033b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCC_GetSysClockFreq+0x1c>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003175 	.word	0x08003175
 8003114:	080033b3 	.word	0x080033b3
 8003118:	080033b3 	.word	0x080033b3
 800311c:	080033b3 	.word	0x080033b3
 8003120:	080033b3 	.word	0x080033b3
 8003124:	080033b3 	.word	0x080033b3
 8003128:	080033b3 	.word	0x080033b3
 800312c:	080033b3 	.word	0x080033b3
 8003130:	0800319b 	.word	0x0800319b
 8003134:	080033b3 	.word	0x080033b3
 8003138:	080033b3 	.word	0x080033b3
 800313c:	080033b3 	.word	0x080033b3
 8003140:	080033b3 	.word	0x080033b3
 8003144:	080033b3 	.word	0x080033b3
 8003148:	080033b3 	.word	0x080033b3
 800314c:	080033b3 	.word	0x080033b3
 8003150:	080031a1 	.word	0x080031a1
 8003154:	080033b3 	.word	0x080033b3
 8003158:	080033b3 	.word	0x080033b3
 800315c:	080033b3 	.word	0x080033b3
 8003160:	080033b3 	.word	0x080033b3
 8003164:	080033b3 	.word	0x080033b3
 8003168:	080033b3 	.word	0x080033b3
 800316c:	080033b3 	.word	0x080033b3
 8003170:	080031a7 	.word	0x080031a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003174:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003180:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	4a90      	ldr	r2, [pc, #576]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003192:	e111      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003194:	4b8d      	ldr	r3, [pc, #564]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003196:	61bb      	str	r3, [r7, #24]
    break;
 8003198:	e10e      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800319a:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800319c:	61bb      	str	r3, [r7, #24]
    break;
 800319e:	e10b      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031a0:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031a2:	61bb      	str	r3, [r7, #24]
    break;
 80031a4:	e108      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031b0:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031bc:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031c6:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80e1 	beq.w	80033ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	f000 8083 	beq.w	80032f8 <HAL_RCC_GetSysClockFreq+0x204>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	f200 80a1 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x248>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x114>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d056      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003206:	e099      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02d      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003214:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	4a6b      	ldr	r2, [pc, #428]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
 8003224:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323e:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003252:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800326e:	e087      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800327e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003292:	ed97 6a02 	vldr	s12, [r7, #8]
 8003296:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800329a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032b2:	e065      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c6:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f6:	e043      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	ed97 6a02 	vldr	s12, [r7, #8]
 800331e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800333a:	e021      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800337e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	0a5b      	lsrs	r3, r3, #9
 8003386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338a:	3301      	adds	r3, #1
 800338c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003398:	edd7 6a07 	vldr	s13, [r7, #28]
 800339c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a4:	ee17 3a90 	vmov	r3, s15
 80033a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
    break;
 80033b0:	e002      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033b4:	61bb      	str	r3, [r7, #24]
    break;
 80033b6:	bf00      	nop
  }

  return sysclockfreq;
 80033b8:	69bb      	ldr	r3, [r7, #24]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	; 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	58024400 	.word	0x58024400
 80033cc:	03d09000 	.word	0x03d09000
 80033d0:	003d0900 	.word	0x003d0900
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	46000000 	.word	0x46000000
 80033dc:	4c742400 	.word	0x4c742400
 80033e0:	4a742400 	.word	0x4a742400
 80033e4:	4af42400 	.word	0x4af42400

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ee:	f7ff fe81 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCC_GetHCLKFreq+0x50>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490f      	ldr	r1, [pc, #60]	; (800343c <HAL_RCC_GetHCLKFreq+0x54>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_GetHCLKFreq+0x50>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_GetHCLKFreq+0x54>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_GetHCLKFreq+0x58>)
 8003424:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_RCC_GetHCLKFreq+0x58>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58024400 	.word	0x58024400
 800343c:	080081f0 	.word	0x080081f0
 8003440:	24000004 	.word	0x24000004
 8003444:	24000000 	.word	0x24000000

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800344c:	f7ff ffcc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4904      	ldr	r1, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	58024400 	.word	0x58024400
 8003470:	080081f0 	.word	0x080081f0

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003478:	f7ff ffb6 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4904      	ldr	r1, [pc, #16]	; (800349c <HAL_RCC_GetPCLK2Freq+0x28>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	58024400 	.word	0x58024400
 800349c:	080081f0 	.word	0x080081f0

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03f      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034c4:	d02a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ca:	d824      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d0:	d018      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d6:	d81e      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e0:	d007      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034e2:	e018      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4bab      	ldr	r3, [pc, #684]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4aaa      	ldr	r2, [pc, #680]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 f9cf 	bl	800489c <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fa78 	bl	8004a00 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
      break;
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800351c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003524:	4b9b      	ldr	r3, [pc, #620]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	4998      	ldr	r1, [pc, #608]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	650b      	str	r3, [r1, #80]	; 0x50
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03d      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	2b04      	cmp	r3, #4
 800354e:	d826      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800356d 	.word	0x0800356d
 800355c:	0800357b 	.word	0x0800357b
 8003560:	0800358d 	.word	0x0800358d
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356c:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	4a88      	ldr	r2, [pc, #544]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003578:	e015      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f001 f98b 	bl	800489c <RCCEx_PLL2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800358a:	e00c      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3324      	adds	r3, #36	; 0x24
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fa34 	bl	8004a00 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800359c:	e003      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
      break;
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ac:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	f023 0207 	bic.w	r2, r3, #7
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	4976      	ldr	r1, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	650b      	str	r3, [r1, #80]	; 0x50
 80035be:	e001      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d042      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d02b      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035de:	d825      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035e0:	2bc0      	cmp	r3, #192	; 0xc0
 80035e2:	d028      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035e4:	2bc0      	cmp	r3, #192	; 0xc0
 80035e6:	d821      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d016      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d81d      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d007      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035f8:	e018      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003606:	e017      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f944 	bl	800489c <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003618:	e00e      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3324      	adds	r3, #36	; 0x24
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 f9ed 	bl	8004a00 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
      break;
 8003630:	e002      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800363e:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	4952      	ldr	r1, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	650b      	str	r3, [r1, #80]	; 0x50
 8003650:	e001      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	d049      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366c:	d030      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800366e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003672:	d82a      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003674:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003678:	d02c      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800367a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800367e:	d824      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003684:	d018      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368a:	d81e      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003694:	d007      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003696:	e018      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a4:	e017      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f8f5 	bl	800489c <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036b6:	e00e      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f99e 	bl	8004a00 <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c8:	e005      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
      break;
 80036ce:	e002      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036ea:	492a      	ldr	r1, [pc, #168]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	658b      	str	r3, [r1, #88]	; 0x58
 80036f0:	e001      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04c      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370c:	d030      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003712:	d82a      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003718:	d02c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800371a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800371e:	d824      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003724:	d018      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800372a:	d81e      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003734:	d007      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003736:	e018      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003744:	e017      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 f8a5 	bl	800489c <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003756:	e00e      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3324      	adds	r3, #36	; 0x24
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f94e 	bl	8004a00 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003768:	e005      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800378a:	4902      	ldr	r1, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	658b      	str	r3, [r1, #88]	; 0x58
 8003790:	e004      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d032      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d01c      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d817      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d00c      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d813      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d016      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d10f      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4baf      	ldr	r3, [pc, #700]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4aae      	ldr	r2, [pc, #696]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037d0:	e00e      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f85f 	bl	800489c <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037f6:	4ba3      	ldr	r3, [pc, #652]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	49a0      	ldr	r1, [pc, #640]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003808:	e001      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d047      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003822:	d030      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003828:	d82a      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800382a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800382e:	d02c      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003834:	d824      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383a:	d018      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003840:	d81e      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384a:	d007      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800384c:	e018      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384e:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	4a8c      	ldr	r2, [pc, #560]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800385a:	e017      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f81a 	bl	800489c <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800386c:	e00e      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3324      	adds	r3, #36	; 0x24
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f8c3 	bl	8004a00 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800387e:	e005      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
      break;
 8003884:	e002      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800388a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003892:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	4979      	ldr	r1, [pc, #484]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	650b      	str	r3, [r1, #80]	; 0x50
 80038a4:	e001      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d049      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038be:	d02e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d828      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ca:	d02a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80038cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d0:	d822      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038d6:	d026      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038dc:	d81c      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e2:	d010      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80038e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e8:	d816      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01d      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d111      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 ffce 	bl	800489c <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003904:	e012      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f877 	bl	8004a00 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003932:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	4951      	ldr	r1, [pc, #324]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	650b      	str	r3, [r1, #80]	; 0x50
 8003944:	e001      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003960:	d02e      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003966:	d828      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d02a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d822      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003978:	d026      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800397a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800397e:	d81c      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d010      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398a:	d816      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01d      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003994:	d111      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	2101      	movs	r1, #1
 800399c:	4618      	mov	r0, r3
 800399e:	f000 ff7d 	bl	800489c <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039a6:	e012      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3324      	adds	r3, #36	; 0x24
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f826 	bl	8004a00 <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039b8:	e009      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039e2:	4928      	ldr	r1, [pc, #160]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	658b      	str	r3, [r1, #88]	; 0x58
 80039e8:	e001      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02f      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a02:	d00e      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a08:	d814      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a12:	d10f      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 ff37 	bl	800489c <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	490d      	ldr	r1, [pc, #52]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	650b      	str	r3, [r1, #80]	; 0x50
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d033      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d81c      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003aaf 	.word	0x08003aaf
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a97 	.word	0x08003a97
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4bb8      	ldr	r3, [pc, #736]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4ab7      	ldr	r2, [pc, #732]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a94:	e00c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fefd 	bl	800489c <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ab6:	4bad      	ldr	r3, [pc, #692]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	49aa      	ldr	r1, [pc, #680]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ac8:	e001      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8086 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4ba4      	ldr	r3, [pc, #656]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4aa3      	ldr	r2, [pc, #652]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fc98 	bl	800141c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fd fc94 	bl	800141c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d902      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	75fb      	strb	r3, [r7, #23]
        break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b04:	4b9a      	ldr	r3, [pc, #616]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d166      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b16:	4b95      	ldr	r3, [pc, #596]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b20:	4053      	eors	r3, r2
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2a:	4b90      	ldr	r3, [pc, #576]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b34:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a8c      	ldr	r2, [pc, #560]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b40:	4b8a      	ldr	r3, [pc, #552]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a89      	ldr	r2, [pc, #548]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b4c:	4a87      	ldr	r2, [pc, #540]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fc5d 	bl	800141c <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b64:	e00b      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fc59 	bl	800141c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d902      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b7c:	e005      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b7e:	4b7b      	ldr	r3, [pc, #492]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ed      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d126      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ba0:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bae:	0919      	lsrs	r1, r3, #4
 8003bb0:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	496d      	ldr	r1, [pc, #436]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	610b      	str	r3, [r1, #16]
 8003bba:	e005      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bbc:	4b6b      	ldr	r3, [pc, #428]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	4a6a      	ldr	r2, [pc, #424]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc6:	6113      	str	r3, [r2, #16]
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	4965      	ldr	r1, [pc, #404]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	670b      	str	r3, [r1, #112]	; 0x70
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	75bb      	strb	r3, [r7, #22]
 8003be2:	e001      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d07e      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf8:	2b28      	cmp	r3, #40	; 0x28
 8003bfa:	d867      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003cd3 	.word	0x08003cd3
 8003c08:	08003ccd 	.word	0x08003ccd
 8003c0c:	08003ccd 	.word	0x08003ccd
 8003c10:	08003ccd 	.word	0x08003ccd
 8003c14:	08003ccd 	.word	0x08003ccd
 8003c18:	08003ccd 	.word	0x08003ccd
 8003c1c:	08003ccd 	.word	0x08003ccd
 8003c20:	08003ccd 	.word	0x08003ccd
 8003c24:	08003ca9 	.word	0x08003ca9
 8003c28:	08003ccd 	.word	0x08003ccd
 8003c2c:	08003ccd 	.word	0x08003ccd
 8003c30:	08003ccd 	.word	0x08003ccd
 8003c34:	08003ccd 	.word	0x08003ccd
 8003c38:	08003ccd 	.word	0x08003ccd
 8003c3c:	08003ccd 	.word	0x08003ccd
 8003c40:	08003ccd 	.word	0x08003ccd
 8003c44:	08003cbb 	.word	0x08003cbb
 8003c48:	08003ccd 	.word	0x08003ccd
 8003c4c:	08003ccd 	.word	0x08003ccd
 8003c50:	08003ccd 	.word	0x08003ccd
 8003c54:	08003ccd 	.word	0x08003ccd
 8003c58:	08003ccd 	.word	0x08003ccd
 8003c5c:	08003ccd 	.word	0x08003ccd
 8003c60:	08003ccd 	.word	0x08003ccd
 8003c64:	08003cd3 	.word	0x08003cd3
 8003c68:	08003ccd 	.word	0x08003ccd
 8003c6c:	08003ccd 	.word	0x08003ccd
 8003c70:	08003ccd 	.word	0x08003ccd
 8003c74:	08003ccd 	.word	0x08003ccd
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003ccd 	.word	0x08003ccd
 8003c80:	08003ccd 	.word	0x08003ccd
 8003c84:	08003cd3 	.word	0x08003cd3
 8003c88:	08003ccd 	.word	0x08003ccd
 8003c8c:	08003ccd 	.word	0x08003ccd
 8003c90:	08003ccd 	.word	0x08003ccd
 8003c94:	08003ccd 	.word	0x08003ccd
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003ccd 	.word	0x08003ccd
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08003cd3 	.word	0x08003cd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fdf4 	bl	800489c <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3324      	adds	r3, #36	; 0x24
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fe9d 	bl	8004a00 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce6:	4921      	ldr	r1, [pc, #132]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	654b      	str	r3, [r1, #84]	; 0x54
 8003cec:	e001      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d03e      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d820      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d4f 	.word	0x08003d4f
 8003d10:	08003d25 	.word	0x08003d25
 8003d14:	08003d37 	.word	0x08003d37
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fdb6 	bl	800489c <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fe5f 	bl	8004a00 <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d110      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	4902      	ldr	r1, [pc, #8]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	654b      	str	r3, [r1, #84]	; 0x54
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003d6a:	bf00      	nop
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	58024800 	.word	0x58024800
 8003d74:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d039      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d820      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003ddb 	.word	0x08003ddb
 8003d9c:	08003db1 	.word	0x08003db1
 8003da0:	08003dc3 	.word	0x08003dc3
 8003da4:	08003ddb 	.word	0x08003ddb
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003ddb 	.word	0x08003ddb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fd70 	bl	800489c <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fe19 	bl	8004a00 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de2:	4bb7      	ldr	r3, [pc, #732]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	49b3      	ldr	r1, [pc, #716]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	658b      	str	r3, [r1, #88]	; 0x58
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e12:	d02e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d02a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e2a:	d026      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e30:	d81c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d816      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01d      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e46:	d111      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fd24 	bl	800489c <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e58:	e012      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fdcd 	bl	8004a00 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b8e      	ldr	r3, [pc, #568]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e94:	498a      	ldr	r1, [pc, #552]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	654b      	str	r3, [r1, #84]	; 0x54
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d04b      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eb6:	d02e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003eb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ebc:	d828      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d02a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d822      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ece:	d026      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed4:	d81c      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eda:	d010      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d816      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01d      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eea:	d111      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fcd2 	bl	800489c <RCCEx_PLL2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003efc:	e012      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3324      	adds	r3, #36	; 0x24
 8003f02:	2102      	movs	r1, #2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fd7b 	bl	8004a00 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f0e:	e009      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
      break;
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f2a:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f38:	4961      	ldr	r1, [pc, #388]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3e:	e001      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d04b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f5a:	d02e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003f5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f60:	d828      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d02a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d822      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f72:	d026      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f84:	d816      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01d      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8e:	d111      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fc80 	bl	800489c <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fa0:	e012      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fd29 	bl	8004a00 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fb2:	e009      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fce:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fdc:	4938      	ldr	r1, [pc, #224]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d10a      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3324      	adds	r3, #36	; 0x24
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fcfa 	bl	8004a00 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004024:	4926      	ldr	r1, [pc, #152]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004026:	4313      	orrs	r3, r2
 8004028:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004040:	d10a      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3324      	adds	r3, #36	; 0x24
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fcd9 	bl	8004a00 <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004068:	4313      	orrs	r3, r2
 800406a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d036      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004082:	d01f      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d817      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004092:	d009      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004094:	e011      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fbfd 	bl	800489c <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040a6:	e00e      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fca6 	bl	8004a00 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040b8:	e005      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e002      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80040c0:	58024400 	.word	0x58024400
      break;
 80040c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040cc:	4b93      	ldr	r3, [pc, #588]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040da:	4990      	ldr	r1, [pc, #576]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	658b      	str	r3, [r1, #88]	; 0x58
 80040e0:	e001      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d033      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040fc:	d01c      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80040fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004102:	d816      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004108:	d003      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800410a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800410e:	d007      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4b82      	ldr	r3, [pc, #520]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a81      	ldr	r2, [pc, #516]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800411e:	e00c      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fc6a 	bl	8004a00 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
      break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004140:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	4973      	ldr	r1, [pc, #460]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	654b      	str	r3, [r1, #84]	; 0x54
 8004154:	e001      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d029      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d007      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004174:	e00f      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004176:	4b69      	ldr	r3, [pc, #420]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	4a68      	ldr	r2, [pc, #416]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004182:	e00b      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2102      	movs	r1, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fb86 	bl	800489c <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041a2:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	495b      	ldr	r1, [pc, #364]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3324      	adds	r3, #36	; 0x24
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc17 	bl	8004a00 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d030      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f0:	d017      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80041f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f6:	d811      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fc:	d013      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004202:	d80b      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	d106      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800421a:	e007      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
      break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800422a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004232:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423e:	4937      	ldr	r1, [pc, #220]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	654b      	str	r3, [r1, #84]	; 0x54
 8004244:	e001      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	492e      	ldr	r1, [pc, #184]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004274:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004282:	4926      	ldr	r1, [pc, #152]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a0:	491e      	ldr	r1, [pc, #120]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042bc:	6113      	str	r3, [r2, #16]
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042c8:	4914      	ldr	r1, [pc, #80]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da08      	bge.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e2:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004308:	7dbb      	ldrb	r3, [r7, #22]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	58024400 	.word	0x58024400

08004320 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004324:	f7ff f860 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4904      	ldr	r1, [pc, #16]	; (8004348 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	58024400 	.word	0x58024400
 8004348:	080081f0 	.word	0x080081f0

0800434c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004354:	4ba1      	ldr	r3, [pc, #644]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800435e:	4b9f      	ldr	r3, [pc, #636]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	0b1b      	lsrs	r3, r3, #12
 8004364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004368:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800436a:	4b9c      	ldr	r3, [pc, #624]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004376:	4b99      	ldr	r3, [pc, #612]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	08db      	lsrs	r3, r3, #3
 800437c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8111 	beq.w	80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b02      	cmp	r3, #2
 800439e:	f000 8083 	beq.w	80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f200 80a1 	bhi.w	80044ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d056      	beq.n	8004464 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043b6:	e099      	b.n	80044ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02d      	beq.n	8004420 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043c4:	4b85      	ldr	r3, [pc, #532]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	08db      	lsrs	r3, r3, #3
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	4a84      	ldr	r2, [pc, #528]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b7b      	ldr	r3, [pc, #492]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004402:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800441e:	e087      	b.n	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a03 	vldr	s12, [r7, #12]
 8004446:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004462:	e065      	b.n	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a6:	e043      	b.n	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ea:	e021      	b.n	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004512:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800452e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	0a5b      	lsrs	r3, r3, #9
 8004536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454a:	edd7 6a07 	vldr	s13, [r7, #28]
 800454e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004556:	ee17 2a90 	vmov	r2, s15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004578:	edd7 6a07 	vldr	s13, [r7, #28]
 800457c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004584:	ee17 2a90 	vmov	r2, s15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	0e1b      	lsrs	r3, r3, #24
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b2:	ee17 2a90 	vmov	r2, s15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045ba:	e008      	b.n	80045ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
}
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	; 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	03d09000 	.word	0x03d09000
 80045e4:	46000000 	.word	0x46000000
 80045e8:	4c742400 	.word	0x4c742400
 80045ec:	4a742400 	.word	0x4a742400
 80045f0:	4af42400 	.word	0x4af42400

080045f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	; 0x24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045fc:	4ba1      	ldr	r3, [pc, #644]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004606:	4b9f      	ldr	r3, [pc, #636]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	0d1b      	lsrs	r3, r3, #20
 800460c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004610:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004612:	4b9c      	ldr	r3, [pc, #624]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800461e:	4b99      	ldr	r3, [pc, #612]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	08db      	lsrs	r3, r3, #3
 8004624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8111 	beq.w	8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b02      	cmp	r3, #2
 8004646:	f000 8083 	beq.w	8004750 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	f200 80a1 	bhi.w	8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d056      	beq.n	800470c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800465e:	e099      	b.n	8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004660:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d02d      	beq.n	80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800466c:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	4a84      	ldr	r2, [pc, #528]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046c6:	e087      	b.n	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800470a:	e065      	b.n	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004732:	eddf 5a56 	vldr	s11, [pc, #344]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800474e:	e043      	b.n	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a45 	vldr	s11, [pc, #276]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004792:	e021      	b.n	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	0a5b      	lsrs	r3, r3, #9
 80047de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fe:	ee17 2a90 	vmov	r2, s15
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004820:	edd7 6a07 	vldr	s13, [r7, #28]
 8004824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482c:	ee17 2a90 	vmov	r2, s15
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485a:	ee17 2a90 	vmov	r2, s15
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	3724      	adds	r7, #36	; 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
 8004888:	03d09000 	.word	0x03d09000
 800488c:	46000000 	.word	0x46000000
 8004890:	4c742400 	.word	0x4c742400
 8004894:	4a742400 	.word	0x4a742400
 8004898:	4af42400 	.word	0x4af42400

0800489c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048aa:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d101      	bne.n	80048ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e099      	b.n	80049ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048ba:	4b4f      	ldr	r3, [pc, #316]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c6:	f7fc fda9 	bl	800141c <HAL_GetTick>
 80048ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048ce:	f7fc fda5 	bl	800141c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e086      	b.n	80049ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048e0:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048ec:	4b42      	ldr	r3, [pc, #264]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	031b      	lsls	r3, r3, #12
 80048fa:	493f      	ldr	r1, [pc, #252]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	3b01      	subs	r3, #1
 8004906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	025b      	lsls	r3, r3, #9
 8004912:	b29b      	uxth	r3, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	3b01      	subs	r3, #1
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004930:	4931      	ldr	r1, [pc, #196]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	492d      	ldr	r1, [pc, #180]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	f023 0220 	bic.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	4928      	ldr	r1, [pc, #160]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004960:	f023 0310 	bic.w	r3, r3, #16
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <RCCEx_PLL2_Config+0x160>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	69d2      	ldr	r2, [r2, #28]
 8004972:	00d2      	lsls	r2, r2, #3
 8004974:	4920      	ldr	r1, [pc, #128]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 8004992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004998:	e00f      	b.n	80049ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d106      	bne.n	80049ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049ac:	e005      	b.n	80049ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c6:	f7fc fd29 	bl	800141c <HAL_GetTick>
 80049ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049cc:	e008      	b.n	80049e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049ce:	f7fc fd25 	bl	800141c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <RCCEx_PLL2_Config+0x15c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	58024400 	.word	0x58024400
 80049fc:	ffff0007 	.word	0xffff0007

08004a00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0e:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d101      	bne.n	8004a1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e099      	b.n	8004b52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a1e:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fc fcf7 	bl	800141c <HAL_GetTick>
 8004a2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a32:	f7fc fcf3 	bl	800141c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e086      	b.n	8004b52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a50:	4b42      	ldr	r3, [pc, #264]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	051b      	lsls	r3, r3, #20
 8004a5e:	493f      	ldr	r1, [pc, #252]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	628b      	str	r3, [r1, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	025b      	lsls	r3, r3, #9
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a94:	4931      	ldr	r1, [pc, #196]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a9a:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	492d      	ldr	r1, [pc, #180]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	4928      	ldr	r1, [pc, #160]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <RCCEx_PLL3_Config+0x160>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	69d2      	ldr	r2, [r2, #28]
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	4920      	ldr	r1, [pc, #128]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ade:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004afc:	e00f      	b.n	8004b1e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d106      	bne.n	8004b12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b04:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fc fc77 	bl	800141c <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b30:	e008      	b.n	8004b44 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b32:	f7fc fc73 	bl	800141c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <RCCEx_PLL3_Config+0x15c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	ffff0007 	.word	0xffff0007

08004b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e042      	b.n	8004bfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fc f8e7 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2224      	movs	r2, #36	; 0x24
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f996 	bl	8004ed8 <UART_SetConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e022      	b.n	8004bfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 feea 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 ff71 	bl	8005adc <UART_CheckIdleState>
 8004bfa:	4603      	mov	r3, r0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f040 8083 	bne.w	8004d26 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Transmit+0x28>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e07b      	b.n	8004d28 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Transmit+0x3a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e074      	b.n	8004d28 <HAL_UART_Transmit+0x124>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2221      	movs	r2, #33	; 0x21
 8004c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c56:	f7fc fbe1 	bl	800141c <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d108      	bne.n	8004c88 <HAL_UART_Transmit+0x84>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e003      	b.n	8004c90 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c98:	e02c      	b.n	8004cf4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	; 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 ff64 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e039      	b.n	8004d28 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e007      	b.n	8004ce2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1cc      	bne.n	8004c9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2200      	movs	r2, #0
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 ff31 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e006      	b.n	8004d28 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	f040 80c0 	bne.w	8004ecc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_UART_Receive+0x28>
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b8      	b.n	8004ece <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Receive+0x3a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0b1      	b.n	8004ece <HAL_UART_Receive+0x19e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2222      	movs	r2, #34	; 0x22
 8004d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d88:	f7fc fb48 	bl	800141c <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d10e      	bne.n	8004dc6 <HAL_UART_Receive+0x96>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_UART_Receive+0x8c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dba:	e02d      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	22ff      	movs	r2, #255	; 0xff
 8004dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dc4:	e028      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10d      	bne.n	8004dea <HAL_UART_Receive+0xba>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_UART_Receive+0xb0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dde:	e01b      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	227f      	movs	r2, #127	; 0x7f
 8004de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004de8:	e016      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df2:	d10d      	bne.n	8004e10 <HAL_UART_Receive+0xe0>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_UART_Receive+0xd6>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	227f      	movs	r2, #127	; 0x7f
 8004e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e04:	e008      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	223f      	movs	r2, #63	; 0x3f
 8004e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Receive+0xe8>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d108      	bne.n	8004e3c <HAL_UART_Receive+0x10c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e003      	b.n	8004e44 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e4c:	e032      	b.n	8004eb4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2120      	movs	r1, #32
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fe8a 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e032      	b.n	8004ece <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10c      	bne.n	8004e88 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8a7b      	ldrh	r3, [r7, #18]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	3302      	adds	r3, #2
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e00c      	b.n	8004ea2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	8a7b      	ldrh	r3, [r7, #18]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4013      	ands	r3, r2
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1c6      	bne.n	8004e4e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b08e      	sub	sp, #56	; 0x38
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4bbf      	ldr	r3, [pc, #764]	; (8005204 <UART_SetConfig+0x32c>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4ab5      	ldr	r2, [pc, #724]	; (8005208 <UART_SetConfig+0x330>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	4bb0      	ldr	r3, [pc, #704]	; (800520c <UART_SetConfig+0x334>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f023 010f 	bic.w	r1, r3, #15
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4aa7      	ldr	r2, [pc, #668]	; (8005210 <UART_SetConfig+0x338>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d176      	bne.n	8005064 <UART_SetConfig+0x18c>
 8004f76:	4ba7      	ldr	r3, [pc, #668]	; (8005214 <UART_SetConfig+0x33c>)
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f7e:	2b28      	cmp	r3, #40	; 0x28
 8004f80:	d86c      	bhi.n	800505c <UART_SetConfig+0x184>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0xb0>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	0800502d 	.word	0x0800502d
 8004f8c:	0800505d 	.word	0x0800505d
 8004f90:	0800505d 	.word	0x0800505d
 8004f94:	0800505d 	.word	0x0800505d
 8004f98:	0800505d 	.word	0x0800505d
 8004f9c:	0800505d 	.word	0x0800505d
 8004fa0:	0800505d 	.word	0x0800505d
 8004fa4:	0800505d 	.word	0x0800505d
 8004fa8:	08005035 	.word	0x08005035
 8004fac:	0800505d 	.word	0x0800505d
 8004fb0:	0800505d 	.word	0x0800505d
 8004fb4:	0800505d 	.word	0x0800505d
 8004fb8:	0800505d 	.word	0x0800505d
 8004fbc:	0800505d 	.word	0x0800505d
 8004fc0:	0800505d 	.word	0x0800505d
 8004fc4:	0800505d 	.word	0x0800505d
 8004fc8:	0800503d 	.word	0x0800503d
 8004fcc:	0800505d 	.word	0x0800505d
 8004fd0:	0800505d 	.word	0x0800505d
 8004fd4:	0800505d 	.word	0x0800505d
 8004fd8:	0800505d 	.word	0x0800505d
 8004fdc:	0800505d 	.word	0x0800505d
 8004fe0:	0800505d 	.word	0x0800505d
 8004fe4:	0800505d 	.word	0x0800505d
 8004fe8:	08005045 	.word	0x08005045
 8004fec:	0800505d 	.word	0x0800505d
 8004ff0:	0800505d 	.word	0x0800505d
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	0800505d 	.word	0x0800505d
 8004ffc:	0800505d 	.word	0x0800505d
 8005000:	0800505d 	.word	0x0800505d
 8005004:	0800505d 	.word	0x0800505d
 8005008:	0800504d 	.word	0x0800504d
 800500c:	0800505d 	.word	0x0800505d
 8005010:	0800505d 	.word	0x0800505d
 8005014:	0800505d 	.word	0x0800505d
 8005018:	0800505d 	.word	0x0800505d
 800501c:	0800505d 	.word	0x0800505d
 8005020:	0800505d 	.word	0x0800505d
 8005024:	0800505d 	.word	0x0800505d
 8005028:	08005055 	.word	0x08005055
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005032:	e222      	b.n	800547a <UART_SetConfig+0x5a2>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503a:	e21e      	b.n	800547a <UART_SetConfig+0x5a2>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005042:	e21a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504a:	e216      	b.n	800547a <UART_SetConfig+0x5a2>
 800504c:	2320      	movs	r3, #32
 800504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005052:	e212      	b.n	800547a <UART_SetConfig+0x5a2>
 8005054:	2340      	movs	r3, #64	; 0x40
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505a:	e20e      	b.n	800547a <UART_SetConfig+0x5a2>
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005062:	e20a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <UART_SetConfig+0x340>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d130      	bne.n	80050d0 <UART_SetConfig+0x1f8>
 800506e:	4b69      	ldr	r3, [pc, #420]	; (8005214 <UART_SetConfig+0x33c>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b05      	cmp	r3, #5
 8005078:	d826      	bhi.n	80050c8 <UART_SetConfig+0x1f0>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x1a8>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005099 	.word	0x08005099
 8005084:	080050a1 	.word	0x080050a1
 8005088:	080050a9 	.word	0x080050a9
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509e:	e1ec      	b.n	800547a <UART_SetConfig+0x5a2>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a6:	e1e8      	b.n	800547a <UART_SetConfig+0x5a2>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ae:	e1e4      	b.n	800547a <UART_SetConfig+0x5a2>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b6:	e1e0      	b.n	800547a <UART_SetConfig+0x5a2>
 80050b8:	2320      	movs	r3, #32
 80050ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050be:	e1dc      	b.n	800547a <UART_SetConfig+0x5a2>
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c6:	e1d8      	b.n	800547a <UART_SetConfig+0x5a2>
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ce:	e1d4      	b.n	800547a <UART_SetConfig+0x5a2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a51      	ldr	r2, [pc, #324]	; (800521c <UART_SetConfig+0x344>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d130      	bne.n	800513c <UART_SetConfig+0x264>
 80050da:	4b4e      	ldr	r3, [pc, #312]	; (8005214 <UART_SetConfig+0x33c>)
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d826      	bhi.n	8005134 <UART_SetConfig+0x25c>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x214>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005105 	.word	0x08005105
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512d 	.word	0x0800512d
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510a:	e1b6      	b.n	800547a <UART_SetConfig+0x5a2>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005112:	e1b2      	b.n	800547a <UART_SetConfig+0x5a2>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511a:	e1ae      	b.n	800547a <UART_SetConfig+0x5a2>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005122:	e1aa      	b.n	800547a <UART_SetConfig+0x5a2>
 8005124:	2320      	movs	r3, #32
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512a:	e1a6      	b.n	800547a <UART_SetConfig+0x5a2>
 800512c:	2340      	movs	r3, #64	; 0x40
 800512e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005132:	e1a2      	b.n	800547a <UART_SetConfig+0x5a2>
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513a:	e19e      	b.n	800547a <UART_SetConfig+0x5a2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a37      	ldr	r2, [pc, #220]	; (8005220 <UART_SetConfig+0x348>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d130      	bne.n	80051a8 <UART_SetConfig+0x2d0>
 8005146:	4b33      	ldr	r3, [pc, #204]	; (8005214 <UART_SetConfig+0x33c>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b05      	cmp	r3, #5
 8005150:	d826      	bhi.n	80051a0 <UART_SetConfig+0x2c8>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x280>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	08005171 	.word	0x08005171
 800515c:	08005179 	.word	0x08005179
 8005160:	08005181 	.word	0x08005181
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005176:	e180      	b.n	800547a <UART_SetConfig+0x5a2>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517e:	e17c      	b.n	800547a <UART_SetConfig+0x5a2>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005186:	e178      	b.n	800547a <UART_SetConfig+0x5a2>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518e:	e174      	b.n	800547a <UART_SetConfig+0x5a2>
 8005190:	2320      	movs	r3, #32
 8005192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005196:	e170      	b.n	800547a <UART_SetConfig+0x5a2>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519e:	e16c      	b.n	800547a <UART_SetConfig+0x5a2>
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a6:	e168      	b.n	800547a <UART_SetConfig+0x5a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <UART_SetConfig+0x34c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d142      	bne.n	8005238 <UART_SetConfig+0x360>
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <UART_SetConfig+0x33c>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d838      	bhi.n	8005230 <UART_SetConfig+0x358>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x2ec>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051dd 	.word	0x080051dd
 80051c8:	080051e5 	.word	0x080051e5
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005229 	.word	0x08005229
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e2:	e14a      	b.n	800547a <UART_SetConfig+0x5a2>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ea:	e146      	b.n	800547a <UART_SetConfig+0x5a2>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f2:	e142      	b.n	800547a <UART_SetConfig+0x5a2>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fa:	e13e      	b.n	800547a <UART_SetConfig+0x5a2>
 80051fc:	2320      	movs	r3, #32
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005202:	e13a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005204:	cfff69f3 	.word	0xcfff69f3
 8005208:	58000c00 	.word	0x58000c00
 800520c:	11fff4ff 	.word	0x11fff4ff
 8005210:	40011000 	.word	0x40011000
 8005214:	58024400 	.word	0x58024400
 8005218:	40004400 	.word	0x40004400
 800521c:	40004800 	.word	0x40004800
 8005220:	40004c00 	.word	0x40004c00
 8005224:	40005000 	.word	0x40005000
 8005228:	2340      	movs	r3, #64	; 0x40
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e124      	b.n	800547a <UART_SetConfig+0x5a2>
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e120      	b.n	800547a <UART_SetConfig+0x5a2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4acc      	ldr	r2, [pc, #816]	; (8005570 <UART_SetConfig+0x698>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d176      	bne.n	8005330 <UART_SetConfig+0x458>
 8005242:	4bcc      	ldr	r3, [pc, #816]	; (8005574 <UART_SetConfig+0x69c>)
 8005244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524a:	2b28      	cmp	r3, #40	; 0x28
 800524c:	d86c      	bhi.n	8005328 <UART_SetConfig+0x450>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x37c>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	080052f9 	.word	0x080052f9
 8005258:	08005329 	.word	0x08005329
 800525c:	08005329 	.word	0x08005329
 8005260:	08005329 	.word	0x08005329
 8005264:	08005329 	.word	0x08005329
 8005268:	08005329 	.word	0x08005329
 800526c:	08005329 	.word	0x08005329
 8005270:	08005329 	.word	0x08005329
 8005274:	08005301 	.word	0x08005301
 8005278:	08005329 	.word	0x08005329
 800527c:	08005329 	.word	0x08005329
 8005280:	08005329 	.word	0x08005329
 8005284:	08005329 	.word	0x08005329
 8005288:	08005329 	.word	0x08005329
 800528c:	08005329 	.word	0x08005329
 8005290:	08005329 	.word	0x08005329
 8005294:	08005309 	.word	0x08005309
 8005298:	08005329 	.word	0x08005329
 800529c:	08005329 	.word	0x08005329
 80052a0:	08005329 	.word	0x08005329
 80052a4:	08005329 	.word	0x08005329
 80052a8:	08005329 	.word	0x08005329
 80052ac:	08005329 	.word	0x08005329
 80052b0:	08005329 	.word	0x08005329
 80052b4:	08005311 	.word	0x08005311
 80052b8:	08005329 	.word	0x08005329
 80052bc:	08005329 	.word	0x08005329
 80052c0:	08005329 	.word	0x08005329
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005329 	.word	0x08005329
 80052cc:	08005329 	.word	0x08005329
 80052d0:	08005329 	.word	0x08005329
 80052d4:	08005319 	.word	0x08005319
 80052d8:	08005329 	.word	0x08005329
 80052dc:	08005329 	.word	0x08005329
 80052e0:	08005329 	.word	0x08005329
 80052e4:	08005329 	.word	0x08005329
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005329 	.word	0x08005329
 80052f0:	08005329 	.word	0x08005329
 80052f4:	08005321 	.word	0x08005321
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fe:	e0bc      	b.n	800547a <UART_SetConfig+0x5a2>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	e0b8      	b.n	800547a <UART_SetConfig+0x5a2>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530e:	e0b4      	b.n	800547a <UART_SetConfig+0x5a2>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e0b0      	b.n	800547a <UART_SetConfig+0x5a2>
 8005318:	2320      	movs	r3, #32
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e0ac      	b.n	800547a <UART_SetConfig+0x5a2>
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e0a8      	b.n	800547a <UART_SetConfig+0x5a2>
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e0a4      	b.n	800547a <UART_SetConfig+0x5a2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a90      	ldr	r2, [pc, #576]	; (8005578 <UART_SetConfig+0x6a0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d130      	bne.n	800539c <UART_SetConfig+0x4c4>
 800533a:	4b8e      	ldr	r3, [pc, #568]	; (8005574 <UART_SetConfig+0x69c>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b05      	cmp	r3, #5
 8005344:	d826      	bhi.n	8005394 <UART_SetConfig+0x4bc>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0x474>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005365 	.word	0x08005365
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005375 	.word	0x08005375
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536a:	e086      	b.n	800547a <UART_SetConfig+0x5a2>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e082      	b.n	800547a <UART_SetConfig+0x5a2>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e07e      	b.n	800547a <UART_SetConfig+0x5a2>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e07a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005384:	2320      	movs	r3, #32
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e076      	b.n	800547a <UART_SetConfig+0x5a2>
 800538c:	2340      	movs	r3, #64	; 0x40
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e072      	b.n	800547a <UART_SetConfig+0x5a2>
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e06e      	b.n	800547a <UART_SetConfig+0x5a2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a76      	ldr	r2, [pc, #472]	; (800557c <UART_SetConfig+0x6a4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d130      	bne.n	8005408 <UART_SetConfig+0x530>
 80053a6:	4b73      	ldr	r3, [pc, #460]	; (8005574 <UART_SetConfig+0x69c>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d826      	bhi.n	8005400 <UART_SetConfig+0x528>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x4e0>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e050      	b.n	800547a <UART_SetConfig+0x5a2>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e04c      	b.n	800547a <UART_SetConfig+0x5a2>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	e048      	b.n	800547a <UART_SetConfig+0x5a2>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e044      	b.n	800547a <UART_SetConfig+0x5a2>
 80053f0:	2320      	movs	r3, #32
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e040      	b.n	800547a <UART_SetConfig+0x5a2>
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e03c      	b.n	800547a <UART_SetConfig+0x5a2>
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e038      	b.n	800547a <UART_SetConfig+0x5a2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5c      	ldr	r2, [pc, #368]	; (8005580 <UART_SetConfig+0x6a8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d130      	bne.n	8005474 <UART_SetConfig+0x59c>
 8005412:	4b58      	ldr	r3, [pc, #352]	; (8005574 <UART_SetConfig+0x69c>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b05      	cmp	r3, #5
 800541c:	d826      	bhi.n	800546c <UART_SetConfig+0x594>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x54c>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	2302      	movs	r3, #2
 800543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005442:	e01a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544a:	e016      	b.n	800547a <UART_SetConfig+0x5a2>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005452:	e012      	b.n	800547a <UART_SetConfig+0x5a2>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545a:	e00e      	b.n	800547a <UART_SetConfig+0x5a2>
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005462:	e00a      	b.n	800547a <UART_SetConfig+0x5a2>
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546a:	e006      	b.n	800547a <UART_SetConfig+0x5a2>
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005472:	e002      	b.n	800547a <UART_SetConfig+0x5a2>
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a40      	ldr	r2, [pc, #256]	; (8005580 <UART_SetConfig+0x6a8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	f040 80ef 	bne.w	8005664 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800548a:	2b20      	cmp	r3, #32
 800548c:	dc46      	bgt.n	800551c <UART_SetConfig+0x644>
 800548e:	2b02      	cmp	r3, #2
 8005490:	f2c0 8081 	blt.w	8005596 <UART_SetConfig+0x6be>
 8005494:	3b02      	subs	r3, #2
 8005496:	2b1e      	cmp	r3, #30
 8005498:	d87d      	bhi.n	8005596 <UART_SetConfig+0x6be>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x5c8>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	08005523 	.word	0x08005523
 80054a4:	08005597 	.word	0x08005597
 80054a8:	0800552b 	.word	0x0800552b
 80054ac:	08005597 	.word	0x08005597
 80054b0:	08005597 	.word	0x08005597
 80054b4:	08005597 	.word	0x08005597
 80054b8:	0800553b 	.word	0x0800553b
 80054bc:	08005597 	.word	0x08005597
 80054c0:	08005597 	.word	0x08005597
 80054c4:	08005597 	.word	0x08005597
 80054c8:	08005597 	.word	0x08005597
 80054cc:	08005597 	.word	0x08005597
 80054d0:	08005597 	.word	0x08005597
 80054d4:	08005597 	.word	0x08005597
 80054d8:	0800554b 	.word	0x0800554b
 80054dc:	08005597 	.word	0x08005597
 80054e0:	08005597 	.word	0x08005597
 80054e4:	08005597 	.word	0x08005597
 80054e8:	08005597 	.word	0x08005597
 80054ec:	08005597 	.word	0x08005597
 80054f0:	08005597 	.word	0x08005597
 80054f4:	08005597 	.word	0x08005597
 80054f8:	08005597 	.word	0x08005597
 80054fc:	08005597 	.word	0x08005597
 8005500:	08005597 	.word	0x08005597
 8005504:	08005597 	.word	0x08005597
 8005508:	08005597 	.word	0x08005597
 800550c:	08005597 	.word	0x08005597
 8005510:	08005597 	.word	0x08005597
 8005514:	08005597 	.word	0x08005597
 8005518:	08005589 	.word	0x08005589
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d036      	beq.n	800558e <UART_SetConfig+0x6b6>
 8005520:	e039      	b.n	8005596 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005522:	f7fe fefd 	bl	8004320 <HAL_RCCEx_GetD3PCLK1Freq>
 8005526:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005528:	e03b      	b.n	80055a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552a:	f107 0314 	add.w	r3, r7, #20
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ff0c 	bl	800434c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005538:	e033      	b.n	80055a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff f858 	bl	80045f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005548:	e02b      	b.n	80055a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <UART_SetConfig+0x69c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <UART_SetConfig+0x69c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	4a08      	ldr	r2, [pc, #32]	; (8005584 <UART_SetConfig+0x6ac>)
 8005562:	fa22 f303 	lsr.w	r3, r2, r3
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005568:	e01b      	b.n	80055a2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <UART_SetConfig+0x6ac>)
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800556e:	e018      	b.n	80055a2 <UART_SetConfig+0x6ca>
 8005570:	40011400 	.word	0x40011400
 8005574:	58024400 	.word	0x58024400
 8005578:	40007800 	.word	0x40007800
 800557c:	40007c00 	.word	0x40007c00
 8005580:	58000c00 	.word	0x58000c00
 8005584:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005588:	4bc4      	ldr	r3, [pc, #784]	; (800589c <UART_SetConfig+0x9c4>)
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 81da 	beq.w	800595e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	4abc      	ldr	r2, [pc, #752]	; (80058a0 <UART_SetConfig+0x9c8>)
 80055b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055bc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d305      	bcc.n	80055da <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055e0:	e1bd      	b.n	800595e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	4618      	mov	r0, r3
 80055e6:	f04f 0100 	mov.w	r1, #0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	4aac      	ldr	r2, [pc, #688]	; (80058a0 <UART_SetConfig+0x9c8>)
 80055f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	f7fa fec1 	bl	8000380 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	020b      	lsls	r3, r1, #8
 8005610:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005614:	0202      	lsls	r2, r0, #8
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	6849      	ldr	r1, [r1, #4]
 800561a:	0849      	lsrs	r1, r1, #1
 800561c:	4608      	mov	r0, r1
 800561e:	f04f 0100 	mov.w	r1, #0
 8005622:	1814      	adds	r4, r2, r0
 8005624:	eb43 0501 	adc.w	r5, r3, r1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	461a      	mov	r2, r3
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fa fea3 	bl	8000380 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4613      	mov	r3, r2
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005648:	d308      	bcc.n	800565c <UART_SetConfig+0x784>
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d204      	bcs.n	800565c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e180      	b.n	800595e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005662:	e17c      	b.n	800595e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	f040 80bf 	bne.w	80057ee <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005674:	2b20      	cmp	r3, #32
 8005676:	dc49      	bgt.n	800570c <UART_SetConfig+0x834>
 8005678:	2b00      	cmp	r3, #0
 800567a:	db7c      	blt.n	8005776 <UART_SetConfig+0x89e>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d87a      	bhi.n	8005776 <UART_SetConfig+0x89e>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x7b0>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005713 	.word	0x08005713
 800568c:	0800571b 	.word	0x0800571b
 8005690:	08005777 	.word	0x08005777
 8005694:	08005777 	.word	0x08005777
 8005698:	08005723 	.word	0x08005723
 800569c:	08005777 	.word	0x08005777
 80056a0:	08005777 	.word	0x08005777
 80056a4:	08005777 	.word	0x08005777
 80056a8:	08005733 	.word	0x08005733
 80056ac:	08005777 	.word	0x08005777
 80056b0:	08005777 	.word	0x08005777
 80056b4:	08005777 	.word	0x08005777
 80056b8:	08005777 	.word	0x08005777
 80056bc:	08005777 	.word	0x08005777
 80056c0:	08005777 	.word	0x08005777
 80056c4:	08005777 	.word	0x08005777
 80056c8:	08005743 	.word	0x08005743
 80056cc:	08005777 	.word	0x08005777
 80056d0:	08005777 	.word	0x08005777
 80056d4:	08005777 	.word	0x08005777
 80056d8:	08005777 	.word	0x08005777
 80056dc:	08005777 	.word	0x08005777
 80056e0:	08005777 	.word	0x08005777
 80056e4:	08005777 	.word	0x08005777
 80056e8:	08005777 	.word	0x08005777
 80056ec:	08005777 	.word	0x08005777
 80056f0:	08005777 	.word	0x08005777
 80056f4:	08005777 	.word	0x08005777
 80056f8:	08005777 	.word	0x08005777
 80056fc:	08005777 	.word	0x08005777
 8005700:	08005777 	.word	0x08005777
 8005704:	08005777 	.word	0x08005777
 8005708:	08005769 	.word	0x08005769
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d02e      	beq.n	800576e <UART_SetConfig+0x896>
 8005710:	e031      	b.n	8005776 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005712:	f7fd fe99 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8005716:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005718:	e033      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571a:	f7fd feab 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 800571e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005720:	e02f      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fe10 	bl	800434c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005730:	e027      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005732:	f107 0308 	add.w	r3, r7, #8
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe ff5c 	bl	80045f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005740:	e01f      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005742:	4b58      	ldr	r3, [pc, #352]	; (80058a4 <UART_SetConfig+0x9cc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800574e:	4b55      	ldr	r3, [pc, #340]	; (80058a4 <UART_SetConfig+0x9cc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	08db      	lsrs	r3, r3, #3
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	4a53      	ldr	r2, [pc, #332]	; (80058a8 <UART_SetConfig+0x9d0>)
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005760:	e00f      	b.n	8005782 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005762:	4b51      	ldr	r3, [pc, #324]	; (80058a8 <UART_SetConfig+0x9d0>)
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005766:	e00c      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005768:	4b4c      	ldr	r3, [pc, #304]	; (800589c <UART_SetConfig+0x9c4>)
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800576c:	e009      	b.n	8005782 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005774:	e005      	b.n	8005782 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80ea 	beq.w	800595e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	4a44      	ldr	r2, [pc, #272]	; (80058a0 <UART_SetConfig+0x9c8>)
 8005790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005794:	461a      	mov	r2, r3
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	fbb3 f3f2 	udiv	r3, r3, r2
 800579c:	005a      	lsls	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	441a      	add	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	2b0f      	cmp	r3, #15
 80057b6:	d916      	bls.n	80057e6 <UART_SetConfig+0x90e>
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057be:	d212      	bcs.n	80057e6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f023 030f 	bic.w	r3, r3, #15
 80057c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d8:	4313      	orrs	r3, r2
 80057da:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e0bb      	b.n	800595e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057ec:	e0b7      	b.n	800595e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	dc4a      	bgt.n	800588c <UART_SetConfig+0x9b4>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f2c0 8086 	blt.w	8005908 <UART_SetConfig+0xa30>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f200 8083 	bhi.w	8005908 <UART_SetConfig+0xa30>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x930>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005893 	.word	0x08005893
 800580c:	080058ad 	.word	0x080058ad
 8005810:	08005909 	.word	0x08005909
 8005814:	08005909 	.word	0x08005909
 8005818:	080058b5 	.word	0x080058b5
 800581c:	08005909 	.word	0x08005909
 8005820:	08005909 	.word	0x08005909
 8005824:	08005909 	.word	0x08005909
 8005828:	080058c5 	.word	0x080058c5
 800582c:	08005909 	.word	0x08005909
 8005830:	08005909 	.word	0x08005909
 8005834:	08005909 	.word	0x08005909
 8005838:	08005909 	.word	0x08005909
 800583c:	08005909 	.word	0x08005909
 8005840:	08005909 	.word	0x08005909
 8005844:	08005909 	.word	0x08005909
 8005848:	080058d5 	.word	0x080058d5
 800584c:	08005909 	.word	0x08005909
 8005850:	08005909 	.word	0x08005909
 8005854:	08005909 	.word	0x08005909
 8005858:	08005909 	.word	0x08005909
 800585c:	08005909 	.word	0x08005909
 8005860:	08005909 	.word	0x08005909
 8005864:	08005909 	.word	0x08005909
 8005868:	08005909 	.word	0x08005909
 800586c:	08005909 	.word	0x08005909
 8005870:	08005909 	.word	0x08005909
 8005874:	08005909 	.word	0x08005909
 8005878:	08005909 	.word	0x08005909
 800587c:	08005909 	.word	0x08005909
 8005880:	08005909 	.word	0x08005909
 8005884:	08005909 	.word	0x08005909
 8005888:	080058fb 	.word	0x080058fb
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d037      	beq.n	8005900 <UART_SetConfig+0xa28>
 8005890:	e03a      	b.n	8005908 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fd fdd9 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8005896:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005898:	e03c      	b.n	8005914 <UART_SetConfig+0xa3c>
 800589a:	bf00      	nop
 800589c:	003d0900 	.word	0x003d0900
 80058a0:	08008208 	.word	0x08008208
 80058a4:	58024400 	.word	0x58024400
 80058a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fd fde2 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 80058b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058b2:	e02f      	b.n	8005914 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fd47 	bl	800434c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058c2:	e027      	b.n	8005914 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fe93 	bl	80045f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058d2:	e01f      	b.n	8005914 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d4:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <UART_SetConfig+0xab0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <UART_SetConfig+0xab0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	4a28      	ldr	r2, [pc, #160]	; (800598c <UART_SetConfig+0xab4>)
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058f2:	e00f      	b.n	8005914 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80058f4:	4b25      	ldr	r3, [pc, #148]	; (800598c <UART_SetConfig+0xab4>)
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f8:	e00c      	b.n	8005914 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058fa:	4b25      	ldr	r3, [pc, #148]	; (8005990 <UART_SetConfig+0xab8>)
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058fe:	e009      	b.n	8005914 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005906:	e005      	b.n	8005914 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005912:	bf00      	nop
    }

    if (pclk != 0U)
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d021      	beq.n	800595e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <UART_SetConfig+0xabc>)
 8005920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005924:	461a      	mov	r2, r3
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	fbb3 f2f2 	udiv	r2, r3, r2
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	441a      	add	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	b29b      	uxth	r3, r3
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d908      	bls.n	8005958 <UART_SetConfig+0xa80>
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d204      	bcs.n	8005958 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	e002      	b.n	800595e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800597a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800597e:	4618      	mov	r0, r3
 8005980:	3738      	adds	r7, #56	; 0x38
 8005982:	46bd      	mov	sp, r7
 8005984:	bdb0      	pop	{r4, r5, r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	08008208 	.word	0x08008208

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fb fc96 	bl	800141c <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d10e      	bne.n	8005b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f82f 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e025      	b.n	8005b6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d10e      	bne.n	8005b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f819 	bl	8005b72 <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e00f      	b.n	8005b6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	e062      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d05e      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8c:	f7fb fc46 	bl	800141c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11d      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e045      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02e      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfa:	d126      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00f      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d08d      	beq.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e027      	b.n	8005cd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e02d      	b.n	8005d58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f84f 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e02d      	b.n	8005dd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f811 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dfc:	e031      	b.n	8005e62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dfe:	2310      	movs	r3, #16
 8005e00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e02:	2310      	movs	r3, #16
 8005e04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	0f5b      	lsrs	r3, r3, #29
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	7b3a      	ldrb	r2, [r7, #12]
 8005e2a:	4911      	ldr	r1, [pc, #68]	; (8005e70 <UARTEx_SetNbDataToProcess+0x94>)
 8005e2c:	5c8a      	ldrb	r2, [r1, r2]
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e32:	7b3a      	ldrb	r2, [r7, #12]
 8005e34:	490f      	ldr	r1, [pc, #60]	; (8005e74 <UARTEx_SetNbDataToProcess+0x98>)
 8005e36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	7b7a      	ldrb	r2, [r7, #13]
 8005e48:	4909      	ldr	r1, [pc, #36]	; (8005e70 <UARTEx_SetNbDataToProcess+0x94>)
 8005e4a:	5c8a      	ldrb	r2, [r1, r2]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e50:	7b7a      	ldrb	r2, [r7, #13]
 8005e52:	4908      	ldr	r1, [pc, #32]	; (8005e74 <UARTEx_SetNbDataToProcess+0x98>)
 8005e54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e56:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	08008220 	.word	0x08008220
 8005e74:	08008228 	.word	0x08008228

08005e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e78:	b084      	sub	sp, #16
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	f107 001c 	add.w	r0, r7, #28
 8005e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d120      	bne.n	8005ed2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <USB_CoreInit+0xd4>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa60 	bl	800638c <USB_CoreReset>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e01a      	b.n	8005f08 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa54 	bl	800638c <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8005efa:	e005      	b.n	8005f08 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d116      	bne.n	8005f3c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <USB_CoreInit+0xd8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f043 0206 	orr.w	r2, r3, #6
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f043 0220 	orr.w	r2, r3, #32
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f48:	b004      	add	sp, #16
 8005f4a:	4770      	bx	lr
 8005f4c:	ffbdffbf 	.word	0xffbdffbf
 8005f50:	03ee0000 	.word	0x03ee0000

08005f54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 0201 	bic.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e00b      	b.n	8005fba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
 8005fb4:	e001      	b.n	8005fba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e003      	b.n	8005fc2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fba:	2032      	movs	r0, #50	; 0x32
 8005fbc:	f7fb fa3a 	bl	8001434 <HAL_Delay>

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b086      	sub	sp, #24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	e009      	b.n	8006000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3340      	adds	r3, #64	; 0x40
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0e      	cmp	r3, #14
 8006004:	d9f2      	bls.n	8005fec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11c      	bne.n	8006046 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601a:	f043 0302 	orr.w	r3, r3, #2
 800601e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e005      	b.n	8006052 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006058:	461a      	mov	r2, r3
 800605a:	2300      	movs	r3, #0
 800605c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006064:	4619      	mov	r1, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606c:	461a      	mov	r2, r3
 800606e:	680b      	ldr	r3, [r1, #0]
 8006070:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10c      	bne.n	8006092 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800607e:	2100      	movs	r1, #0
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f949 	bl	8006318 <USB_SetDevSpeed>
 8006086:	e008      	b.n	800609a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006088:	2101      	movs	r1, #1
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f944 	bl	8006318 <USB_SetDevSpeed>
 8006090:	e003      	b.n	800609a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006092:	2103      	movs	r1, #3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f93f 	bl	8006318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800609a:	2110      	movs	r1, #16
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8f3 	bl	8006288 <USB_FlushTxFifo>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f911 	bl	80062d4 <USB_FlushRxFifo>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	461a      	mov	r2, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	e043      	b.n	800616e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fc:	d118      	bne.n	8006130 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	461a      	mov	r2, r3
 8006112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e013      	b.n	8006142 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	461a      	mov	r2, r3
 8006128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e008      	b.n	8006142 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	2300      	movs	r3, #0
 8006152:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	461a      	mov	r2, r3
 8006162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006166:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	429a      	cmp	r2, r3
 8006174:	d3b7      	bcc.n	80060e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	e043      	b.n	8006204 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006192:	d118      	bne.n	80061c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	461a      	mov	r2, r3
 80061a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e013      	b.n	80061d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e008      	b.n	80061d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	461a      	mov	r2, r3
 80061f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3301      	adds	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	d3b7      	bcc.n	800617c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800622c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <USB_DevInit+0x2b4>)
 8006246:	4313      	orrs	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <USB_DevInit+0x2b8>)
 800626a:	4313      	orrs	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800627c:	b004      	add	sp, #16
 800627e:	4770      	bx	lr
 8006280:	803c3800 	.word	0x803c3800
 8006284:	40000004 	.word	0x40000004

08006288 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <USB_FlushTxFifo+0x48>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e006      	b.n	80062c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d0f0      	beq.n	80062a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	00030d40 	.word	0x00030d40

080062d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2210      	movs	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a09      	ldr	r2, [pc, #36]	; (8006314 <USB_FlushRxFifo+0x40>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e006      	b.n	8006306 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b10      	cmp	r3, #16
 8006302:	d0f0      	beq.n	80062e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	00030d40 	.word	0x00030d40

08006318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006378:	f043 0302 	orr.w	r3, r3, #2
 800637c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <USB_CoreReset+0x64>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e01b      	b.n	80063e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	daf2      	bge.n	8006398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <USB_CoreReset+0x64>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e006      	b.n	80063e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d0f0      	beq.n	80063c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	00030d40 	.word	0x00030d40

080063f4 <__errno>:
 80063f4:	4b01      	ldr	r3, [pc, #4]	; (80063fc <__errno+0x8>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	2400001c 	.word	0x2400001c

08006400 <__libc_init_array>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4d0d      	ldr	r5, [pc, #52]	; (8006438 <__libc_init_array+0x38>)
 8006404:	4c0d      	ldr	r4, [pc, #52]	; (800643c <__libc_init_array+0x3c>)
 8006406:	1b64      	subs	r4, r4, r5
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	2600      	movs	r6, #0
 800640c:	42a6      	cmp	r6, r4
 800640e:	d109      	bne.n	8006424 <__libc_init_array+0x24>
 8006410:	4d0b      	ldr	r5, [pc, #44]	; (8006440 <__libc_init_array+0x40>)
 8006412:	4c0c      	ldr	r4, [pc, #48]	; (8006444 <__libc_init_array+0x44>)
 8006414:	f001 fe84 	bl	8008120 <_init>
 8006418:	1b64      	subs	r4, r4, r5
 800641a:	10a4      	asrs	r4, r4, #2
 800641c:	2600      	movs	r6, #0
 800641e:	42a6      	cmp	r6, r4
 8006420:	d105      	bne.n	800642e <__libc_init_array+0x2e>
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	f855 3b04 	ldr.w	r3, [r5], #4
 8006428:	4798      	blx	r3
 800642a:	3601      	adds	r6, #1
 800642c:	e7ee      	b.n	800640c <__libc_init_array+0xc>
 800642e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006432:	4798      	blx	r3
 8006434:	3601      	adds	r6, #1
 8006436:	e7f2      	b.n	800641e <__libc_init_array+0x1e>
 8006438:	080083ec 	.word	0x080083ec
 800643c:	080083ec 	.word	0x080083ec
 8006440:	080083ec 	.word	0x080083ec
 8006444:	080083f0 	.word	0x080083f0

08006448 <memset>:
 8006448:	4402      	add	r2, r0
 800644a:	4603      	mov	r3, r0
 800644c:	4293      	cmp	r3, r2
 800644e:	d100      	bne.n	8006452 <memset+0xa>
 8006450:	4770      	bx	lr
 8006452:	f803 1b01 	strb.w	r1, [r3], #1
 8006456:	e7f9      	b.n	800644c <memset+0x4>

08006458 <iprintf>:
 8006458:	b40f      	push	{r0, r1, r2, r3}
 800645a:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <iprintf+0x2c>)
 800645c:	b513      	push	{r0, r1, r4, lr}
 800645e:	681c      	ldr	r4, [r3, #0]
 8006460:	b124      	cbz	r4, 800646c <iprintf+0x14>
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	b913      	cbnz	r3, 800646c <iprintf+0x14>
 8006466:	4620      	mov	r0, r4
 8006468:	f000 fa18 	bl	800689c <__sinit>
 800646c:	ab05      	add	r3, sp, #20
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	68a1      	ldr	r1, [r4, #8]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	4620      	mov	r0, r4
 8006476:	f000 fc0f 	bl	8006c98 <_vfiprintf_r>
 800647a:	b002      	add	sp, #8
 800647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006480:	b004      	add	sp, #16
 8006482:	4770      	bx	lr
 8006484:	2400001c 	.word	0x2400001c

08006488 <iscanf>:
 8006488:	b40f      	push	{r0, r1, r2, r3}
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <iscanf+0x2c>)
 800648c:	b513      	push	{r0, r1, r4, lr}
 800648e:	681c      	ldr	r4, [r3, #0]
 8006490:	b124      	cbz	r4, 800649c <iscanf+0x14>
 8006492:	69a3      	ldr	r3, [r4, #24]
 8006494:	b913      	cbnz	r3, 800649c <iscanf+0x14>
 8006496:	4620      	mov	r0, r4
 8006498:	f000 fa00 	bl	800689c <__sinit>
 800649c:	ab05      	add	r3, sp, #20
 800649e:	9a04      	ldr	r2, [sp, #16]
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f001 f85f 	bl	8007568 <_vfiscanf_r>
 80064aa:	b002      	add	sp, #8
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr
 80064b4:	2400001c 	.word	0x2400001c

080064b8 <setvbuf>:
 80064b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064bc:	461d      	mov	r5, r3
 80064be:	4b5d      	ldr	r3, [pc, #372]	; (8006634 <setvbuf+0x17c>)
 80064c0:	681f      	ldr	r7, [r3, #0]
 80064c2:	4604      	mov	r4, r0
 80064c4:	460e      	mov	r6, r1
 80064c6:	4690      	mov	r8, r2
 80064c8:	b127      	cbz	r7, 80064d4 <setvbuf+0x1c>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	b913      	cbnz	r3, 80064d4 <setvbuf+0x1c>
 80064ce:	4638      	mov	r0, r7
 80064d0:	f000 f9e4 	bl	800689c <__sinit>
 80064d4:	4b58      	ldr	r3, [pc, #352]	; (8006638 <setvbuf+0x180>)
 80064d6:	429c      	cmp	r4, r3
 80064d8:	d167      	bne.n	80065aa <setvbuf+0xf2>
 80064da:	687c      	ldr	r4, [r7, #4]
 80064dc:	f1b8 0f02 	cmp.w	r8, #2
 80064e0:	d006      	beq.n	80064f0 <setvbuf+0x38>
 80064e2:	f1b8 0f01 	cmp.w	r8, #1
 80064e6:	f200 809f 	bhi.w	8006628 <setvbuf+0x170>
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	f2c0 809c 	blt.w	8006628 <setvbuf+0x170>
 80064f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d405      	bmi.n	8006502 <setvbuf+0x4a>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d402      	bmi.n	8006502 <setvbuf+0x4a>
 80064fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064fe:	f000 fa88 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8006502:	4621      	mov	r1, r4
 8006504:	4638      	mov	r0, r7
 8006506:	f000 f923 	bl	8006750 <_fflush_r>
 800650a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650c:	b141      	cbz	r1, 8006520 <setvbuf+0x68>
 800650e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006512:	4299      	cmp	r1, r3
 8006514:	d002      	beq.n	800651c <setvbuf+0x64>
 8006516:	4638      	mov	r0, r7
 8006518:	f000 faea 	bl	8006af0 <_free_r>
 800651c:	2300      	movs	r3, #0
 800651e:	6363      	str	r3, [r4, #52]	; 0x34
 8006520:	2300      	movs	r3, #0
 8006522:	61a3      	str	r3, [r4, #24]
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	0619      	lsls	r1, r3, #24
 800652a:	d503      	bpl.n	8006534 <setvbuf+0x7c>
 800652c:	6921      	ldr	r1, [r4, #16]
 800652e:	4638      	mov	r0, r7
 8006530:	f000 fade 	bl	8006af0 <_free_r>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	f1b8 0f02 	cmp.w	r8, #2
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	d06c      	beq.n	8006620 <setvbuf+0x168>
 8006546:	ab01      	add	r3, sp, #4
 8006548:	466a      	mov	r2, sp
 800654a:	4621      	mov	r1, r4
 800654c:	4638      	mov	r0, r7
 800654e:	f000 fa62 	bl	8006a16 <__swhatbuf_r>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	4318      	orrs	r0, r3
 8006556:	81a0      	strh	r0, [r4, #12]
 8006558:	2d00      	cmp	r5, #0
 800655a:	d130      	bne.n	80065be <setvbuf+0x106>
 800655c:	9d00      	ldr	r5, [sp, #0]
 800655e:	4628      	mov	r0, r5
 8006560:	f000 fabe 	bl	8006ae0 <malloc>
 8006564:	4606      	mov	r6, r0
 8006566:	2800      	cmp	r0, #0
 8006568:	d155      	bne.n	8006616 <setvbuf+0x15e>
 800656a:	f8dd 9000 	ldr.w	r9, [sp]
 800656e:	45a9      	cmp	r9, r5
 8006570:	d14a      	bne.n	8006608 <setvbuf+0x150>
 8006572:	f04f 35ff 	mov.w	r5, #4294967295
 8006576:	2200      	movs	r2, #0
 8006578:	60a2      	str	r2, [r4, #8]
 800657a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800657e:	6022      	str	r2, [r4, #0]
 8006580:	6122      	str	r2, [r4, #16]
 8006582:	2201      	movs	r2, #1
 8006584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006588:	6162      	str	r2, [r4, #20]
 800658a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	07d2      	lsls	r2, r2, #31
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	d405      	bmi.n	80065a2 <setvbuf+0xea>
 8006596:	f413 7f00 	tst.w	r3, #512	; 0x200
 800659a:	d102      	bne.n	80065a2 <setvbuf+0xea>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f000 fa39 	bl	8006a14 <__retarget_lock_release_recursive>
 80065a2:	4628      	mov	r0, r5
 80065a4:	b003      	add	sp, #12
 80065a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <setvbuf+0x184>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d101      	bne.n	80065b4 <setvbuf+0xfc>
 80065b0:	68bc      	ldr	r4, [r7, #8]
 80065b2:	e793      	b.n	80064dc <setvbuf+0x24>
 80065b4:	4b22      	ldr	r3, [pc, #136]	; (8006640 <setvbuf+0x188>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	bf08      	it	eq
 80065ba:	68fc      	ldreq	r4, [r7, #12]
 80065bc:	e78e      	b.n	80064dc <setvbuf+0x24>
 80065be:	2e00      	cmp	r6, #0
 80065c0:	d0cd      	beq.n	800655e <setvbuf+0xa6>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	b913      	cbnz	r3, 80065cc <setvbuf+0x114>
 80065c6:	4638      	mov	r0, r7
 80065c8:	f000 f968 	bl	800689c <__sinit>
 80065cc:	f1b8 0f01 	cmp.w	r8, #1
 80065d0:	bf08      	it	eq
 80065d2:	89a3      	ldrheq	r3, [r4, #12]
 80065d4:	6026      	str	r6, [r4, #0]
 80065d6:	bf04      	itt	eq
 80065d8:	f043 0301 	orreq.w	r3, r3, #1
 80065dc:	81a3      	strheq	r3, [r4, #12]
 80065de:	89a2      	ldrh	r2, [r4, #12]
 80065e0:	f012 0308 	ands.w	r3, r2, #8
 80065e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80065e8:	d01c      	beq.n	8006624 <setvbuf+0x16c>
 80065ea:	07d3      	lsls	r3, r2, #31
 80065ec:	bf41      	itttt	mi
 80065ee:	2300      	movmi	r3, #0
 80065f0:	426d      	negmi	r5, r5
 80065f2:	60a3      	strmi	r3, [r4, #8]
 80065f4:	61a5      	strmi	r5, [r4, #24]
 80065f6:	bf58      	it	pl
 80065f8:	60a5      	strpl	r5, [r4, #8]
 80065fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80065fc:	f015 0501 	ands.w	r5, r5, #1
 8006600:	d115      	bne.n	800662e <setvbuf+0x176>
 8006602:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006606:	e7c8      	b.n	800659a <setvbuf+0xe2>
 8006608:	4648      	mov	r0, r9
 800660a:	f000 fa69 	bl	8006ae0 <malloc>
 800660e:	4606      	mov	r6, r0
 8006610:	2800      	cmp	r0, #0
 8006612:	d0ae      	beq.n	8006572 <setvbuf+0xba>
 8006614:	464d      	mov	r5, r9
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	e7d0      	b.n	80065c2 <setvbuf+0x10a>
 8006620:	2500      	movs	r5, #0
 8006622:	e7a8      	b.n	8006576 <setvbuf+0xbe>
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	e7e8      	b.n	80065fa <setvbuf+0x142>
 8006628:	f04f 35ff 	mov.w	r5, #4294967295
 800662c:	e7b9      	b.n	80065a2 <setvbuf+0xea>
 800662e:	2500      	movs	r5, #0
 8006630:	e7b7      	b.n	80065a2 <setvbuf+0xea>
 8006632:	bf00      	nop
 8006634:	2400001c 	.word	0x2400001c
 8006638:	08008254 	.word	0x08008254
 800663c:	08008274 	.word	0x08008274
 8006640:	08008234 	.word	0x08008234

08006644 <__sflush_r>:
 8006644:	898a      	ldrh	r2, [r1, #12]
 8006646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	4605      	mov	r5, r0
 800664c:	0710      	lsls	r0, r2, #28
 800664e:	460c      	mov	r4, r1
 8006650:	d458      	bmi.n	8006704 <__sflush_r+0xc0>
 8006652:	684b      	ldr	r3, [r1, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dc05      	bgt.n	8006664 <__sflush_r+0x20>
 8006658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	dc02      	bgt.n	8006664 <__sflush_r+0x20>
 800665e:	2000      	movs	r0, #0
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006666:	2e00      	cmp	r6, #0
 8006668:	d0f9      	beq.n	800665e <__sflush_r+0x1a>
 800666a:	2300      	movs	r3, #0
 800666c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006670:	682f      	ldr	r7, [r5, #0]
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	d032      	beq.n	80066dc <__sflush_r+0x98>
 8006676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	075a      	lsls	r2, r3, #29
 800667c:	d505      	bpl.n	800668a <__sflush_r+0x46>
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	1ac0      	subs	r0, r0, r3
 8006682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006684:	b10b      	cbz	r3, 800668a <__sflush_r+0x46>
 8006686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006688:	1ac0      	subs	r0, r0, r3
 800668a:	2300      	movs	r3, #0
 800668c:	4602      	mov	r2, r0
 800668e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006690:	6a21      	ldr	r1, [r4, #32]
 8006692:	4628      	mov	r0, r5
 8006694:	47b0      	blx	r6
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	d106      	bne.n	80066aa <__sflush_r+0x66>
 800669c:	6829      	ldr	r1, [r5, #0]
 800669e:	291d      	cmp	r1, #29
 80066a0:	d82c      	bhi.n	80066fc <__sflush_r+0xb8>
 80066a2:	4a2a      	ldr	r2, [pc, #168]	; (800674c <__sflush_r+0x108>)
 80066a4:	40ca      	lsrs	r2, r1
 80066a6:	07d6      	lsls	r6, r2, #31
 80066a8:	d528      	bpl.n	80066fc <__sflush_r+0xb8>
 80066aa:	2200      	movs	r2, #0
 80066ac:	6062      	str	r2, [r4, #4]
 80066ae:	04d9      	lsls	r1, r3, #19
 80066b0:	6922      	ldr	r2, [r4, #16]
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	d504      	bpl.n	80066c0 <__sflush_r+0x7c>
 80066b6:	1c42      	adds	r2, r0, #1
 80066b8:	d101      	bne.n	80066be <__sflush_r+0x7a>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	b903      	cbnz	r3, 80066c0 <__sflush_r+0x7c>
 80066be:	6560      	str	r0, [r4, #84]	; 0x54
 80066c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c2:	602f      	str	r7, [r5, #0]
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d0ca      	beq.n	800665e <__sflush_r+0x1a>
 80066c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066cc:	4299      	cmp	r1, r3
 80066ce:	d002      	beq.n	80066d6 <__sflush_r+0x92>
 80066d0:	4628      	mov	r0, r5
 80066d2:	f000 fa0d 	bl	8006af0 <_free_r>
 80066d6:	2000      	movs	r0, #0
 80066d8:	6360      	str	r0, [r4, #52]	; 0x34
 80066da:	e7c1      	b.n	8006660 <__sflush_r+0x1c>
 80066dc:	6a21      	ldr	r1, [r4, #32]
 80066de:	2301      	movs	r3, #1
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b0      	blx	r6
 80066e4:	1c41      	adds	r1, r0, #1
 80066e6:	d1c7      	bne.n	8006678 <__sflush_r+0x34>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0c4      	beq.n	8006678 <__sflush_r+0x34>
 80066ee:	2b1d      	cmp	r3, #29
 80066f0:	d001      	beq.n	80066f6 <__sflush_r+0xb2>
 80066f2:	2b16      	cmp	r3, #22
 80066f4:	d101      	bne.n	80066fa <__sflush_r+0xb6>
 80066f6:	602f      	str	r7, [r5, #0]
 80066f8:	e7b1      	b.n	800665e <__sflush_r+0x1a>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	e7ad      	b.n	8006660 <__sflush_r+0x1c>
 8006704:	690f      	ldr	r7, [r1, #16]
 8006706:	2f00      	cmp	r7, #0
 8006708:	d0a9      	beq.n	800665e <__sflush_r+0x1a>
 800670a:	0793      	lsls	r3, r2, #30
 800670c:	680e      	ldr	r6, [r1, #0]
 800670e:	bf08      	it	eq
 8006710:	694b      	ldreq	r3, [r1, #20]
 8006712:	600f      	str	r7, [r1, #0]
 8006714:	bf18      	it	ne
 8006716:	2300      	movne	r3, #0
 8006718:	eba6 0807 	sub.w	r8, r6, r7
 800671c:	608b      	str	r3, [r1, #8]
 800671e:	f1b8 0f00 	cmp.w	r8, #0
 8006722:	dd9c      	ble.n	800665e <__sflush_r+0x1a>
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006728:	4643      	mov	r3, r8
 800672a:	463a      	mov	r2, r7
 800672c:	4628      	mov	r0, r5
 800672e:	47b0      	blx	r6
 8006730:	2800      	cmp	r0, #0
 8006732:	dc06      	bgt.n	8006742 <__sflush_r+0xfe>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	e78e      	b.n	8006660 <__sflush_r+0x1c>
 8006742:	4407      	add	r7, r0
 8006744:	eba8 0800 	sub.w	r8, r8, r0
 8006748:	e7e9      	b.n	800671e <__sflush_r+0xda>
 800674a:	bf00      	nop
 800674c:	20400001 	.word	0x20400001

08006750 <_fflush_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	690b      	ldr	r3, [r1, #16]
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	b913      	cbnz	r3, 8006760 <_fflush_r+0x10>
 800675a:	2500      	movs	r5, #0
 800675c:	4628      	mov	r0, r5
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	b118      	cbz	r0, 800676a <_fflush_r+0x1a>
 8006762:	6983      	ldr	r3, [r0, #24]
 8006764:	b90b      	cbnz	r3, 800676a <_fflush_r+0x1a>
 8006766:	f000 f899 	bl	800689c <__sinit>
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <_fflush_r+0x6c>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d11b      	bne.n	80067a8 <_fflush_r+0x58>
 8006770:	686c      	ldr	r4, [r5, #4]
 8006772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0ef      	beq.n	800675a <_fflush_r+0xa>
 800677a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800677c:	07d0      	lsls	r0, r2, #31
 800677e:	d404      	bmi.n	800678a <_fflush_r+0x3a>
 8006780:	0599      	lsls	r1, r3, #22
 8006782:	d402      	bmi.n	800678a <_fflush_r+0x3a>
 8006784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006786:	f000 f944 	bl	8006a12 <__retarget_lock_acquire_recursive>
 800678a:	4628      	mov	r0, r5
 800678c:	4621      	mov	r1, r4
 800678e:	f7ff ff59 	bl	8006644 <__sflush_r>
 8006792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006794:	07da      	lsls	r2, r3, #31
 8006796:	4605      	mov	r5, r0
 8006798:	d4e0      	bmi.n	800675c <_fflush_r+0xc>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	d4dd      	bmi.n	800675c <_fflush_r+0xc>
 80067a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a2:	f000 f937 	bl	8006a14 <__retarget_lock_release_recursive>
 80067a6:	e7d9      	b.n	800675c <_fflush_r+0xc>
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <_fflush_r+0x70>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d101      	bne.n	80067b2 <_fflush_r+0x62>
 80067ae:	68ac      	ldr	r4, [r5, #8]
 80067b0:	e7df      	b.n	8006772 <_fflush_r+0x22>
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <_fflush_r+0x74>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	bf08      	it	eq
 80067b8:	68ec      	ldreq	r4, [r5, #12]
 80067ba:	e7da      	b.n	8006772 <_fflush_r+0x22>
 80067bc:	08008254 	.word	0x08008254
 80067c0:	08008274 	.word	0x08008274
 80067c4:	08008234 	.word	0x08008234

080067c8 <fflush>:
 80067c8:	4601      	mov	r1, r0
 80067ca:	b920      	cbnz	r0, 80067d6 <fflush+0xe>
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <fflush+0x18>)
 80067ce:	4905      	ldr	r1, [pc, #20]	; (80067e4 <fflush+0x1c>)
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f000 b8fe 	b.w	80069d2 <_fwalk_reent>
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <fflush+0x20>)
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	f7ff bfb9 	b.w	8006750 <_fflush_r>
 80067de:	bf00      	nop
 80067e0:	08008230 	.word	0x08008230
 80067e4:	08006751 	.word	0x08006751
 80067e8:	2400001c 	.word	0x2400001c

080067ec <std>:
 80067ec:	2300      	movs	r3, #0
 80067ee:	b510      	push	{r4, lr}
 80067f0:	4604      	mov	r4, r0
 80067f2:	e9c0 3300 	strd	r3, r3, [r0]
 80067f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067fa:	6083      	str	r3, [r0, #8]
 80067fc:	8181      	strh	r1, [r0, #12]
 80067fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006800:	81c2      	strh	r2, [r0, #14]
 8006802:	6183      	str	r3, [r0, #24]
 8006804:	4619      	mov	r1, r3
 8006806:	2208      	movs	r2, #8
 8006808:	305c      	adds	r0, #92	; 0x5c
 800680a:	f7ff fe1d 	bl	8006448 <memset>
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <std+0x38>)
 8006810:	6263      	str	r3, [r4, #36]	; 0x24
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <std+0x3c>)
 8006814:	62a3      	str	r3, [r4, #40]	; 0x28
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <std+0x40>)
 8006818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <std+0x44>)
 800681c:	6224      	str	r4, [r4, #32]
 800681e:	6323      	str	r3, [r4, #48]	; 0x30
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop
 8006824:	08007a0d 	.word	0x08007a0d
 8006828:	08007a2f 	.word	0x08007a2f
 800682c:	08007a67 	.word	0x08007a67
 8006830:	08007a8b 	.word	0x08007a8b

08006834 <_cleanup_r>:
 8006834:	4901      	ldr	r1, [pc, #4]	; (800683c <_cleanup_r+0x8>)
 8006836:	f000 b8cc 	b.w	80069d2 <_fwalk_reent>
 800683a:	bf00      	nop
 800683c:	08006751 	.word	0x08006751

08006840 <__sfmoreglue>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	1e4a      	subs	r2, r1, #1
 8006844:	2568      	movs	r5, #104	; 0x68
 8006846:	4355      	muls	r5, r2
 8006848:	460e      	mov	r6, r1
 800684a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800684e:	f000 f99f 	bl	8006b90 <_malloc_r>
 8006852:	4604      	mov	r4, r0
 8006854:	b140      	cbz	r0, 8006868 <__sfmoreglue+0x28>
 8006856:	2100      	movs	r1, #0
 8006858:	e9c0 1600 	strd	r1, r6, [r0]
 800685c:	300c      	adds	r0, #12
 800685e:	60a0      	str	r0, [r4, #8]
 8006860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006864:	f7ff fdf0 	bl	8006448 <memset>
 8006868:	4620      	mov	r0, r4
 800686a:	bd70      	pop	{r4, r5, r6, pc}

0800686c <__sfp_lock_acquire>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__sfp_lock_acquire+0x8>)
 800686e:	f000 b8d0 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	240006d0 	.word	0x240006d0

08006878 <__sfp_lock_release>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__sfp_lock_release+0x8>)
 800687a:	f000 b8cb 	b.w	8006a14 <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	240006d0 	.word	0x240006d0

08006884 <__sinit_lock_acquire>:
 8006884:	4801      	ldr	r0, [pc, #4]	; (800688c <__sinit_lock_acquire+0x8>)
 8006886:	f000 b8c4 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	240006cb 	.word	0x240006cb

08006890 <__sinit_lock_release>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sinit_lock_release+0x8>)
 8006892:	f000 b8bf 	b.w	8006a14 <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	240006cb 	.word	0x240006cb

0800689c <__sinit>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	f7ff fff0 	bl	8006884 <__sinit_lock_acquire>
 80068a4:	69a3      	ldr	r3, [r4, #24]
 80068a6:	b11b      	cbz	r3, 80068b0 <__sinit+0x14>
 80068a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ac:	f7ff bff0 	b.w	8006890 <__sinit_lock_release>
 80068b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068b4:	6523      	str	r3, [r4, #80]	; 0x50
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <__sinit+0x68>)
 80068b8:	4a13      	ldr	r2, [pc, #76]	; (8006908 <__sinit+0x6c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068be:	42a3      	cmp	r3, r4
 80068c0:	bf04      	itt	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	61a3      	streq	r3, [r4, #24]
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 f820 	bl	800690c <__sfp>
 80068cc:	6060      	str	r0, [r4, #4]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 f81c 	bl	800690c <__sfp>
 80068d4:	60a0      	str	r0, [r4, #8]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f818 	bl	800690c <__sfp>
 80068dc:	2200      	movs	r2, #0
 80068de:	60e0      	str	r0, [r4, #12]
 80068e0:	2104      	movs	r1, #4
 80068e2:	6860      	ldr	r0, [r4, #4]
 80068e4:	f7ff ff82 	bl	80067ec <std>
 80068e8:	68a0      	ldr	r0, [r4, #8]
 80068ea:	2201      	movs	r2, #1
 80068ec:	2109      	movs	r1, #9
 80068ee:	f7ff ff7d 	bl	80067ec <std>
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	2202      	movs	r2, #2
 80068f6:	2112      	movs	r1, #18
 80068f8:	f7ff ff78 	bl	80067ec <std>
 80068fc:	2301      	movs	r3, #1
 80068fe:	61a3      	str	r3, [r4, #24]
 8006900:	e7d2      	b.n	80068a8 <__sinit+0xc>
 8006902:	bf00      	nop
 8006904:	08008230 	.word	0x08008230
 8006908:	08006835 	.word	0x08006835

0800690c <__sfp>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	4607      	mov	r7, r0
 8006910:	f7ff ffac 	bl	800686c <__sfp_lock_acquire>
 8006914:	4b1e      	ldr	r3, [pc, #120]	; (8006990 <__sfp+0x84>)
 8006916:	681e      	ldr	r6, [r3, #0]
 8006918:	69b3      	ldr	r3, [r6, #24]
 800691a:	b913      	cbnz	r3, 8006922 <__sfp+0x16>
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff ffbd 	bl	800689c <__sinit>
 8006922:	3648      	adds	r6, #72	; 0x48
 8006924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006928:	3b01      	subs	r3, #1
 800692a:	d503      	bpl.n	8006934 <__sfp+0x28>
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	b30b      	cbz	r3, 8006974 <__sfp+0x68>
 8006930:	6836      	ldr	r6, [r6, #0]
 8006932:	e7f7      	b.n	8006924 <__sfp+0x18>
 8006934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006938:	b9d5      	cbnz	r5, 8006970 <__sfp+0x64>
 800693a:	4b16      	ldr	r3, [pc, #88]	; (8006994 <__sfp+0x88>)
 800693c:	60e3      	str	r3, [r4, #12]
 800693e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006942:	6665      	str	r5, [r4, #100]	; 0x64
 8006944:	f000 f864 	bl	8006a10 <__retarget_lock_init_recursive>
 8006948:	f7ff ff96 	bl	8006878 <__sfp_lock_release>
 800694c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006954:	6025      	str	r5, [r4, #0]
 8006956:	61a5      	str	r5, [r4, #24]
 8006958:	2208      	movs	r2, #8
 800695a:	4629      	mov	r1, r5
 800695c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006960:	f7ff fd72 	bl	8006448 <memset>
 8006964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800696c:	4620      	mov	r0, r4
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006970:	3468      	adds	r4, #104	; 0x68
 8006972:	e7d9      	b.n	8006928 <__sfp+0x1c>
 8006974:	2104      	movs	r1, #4
 8006976:	4638      	mov	r0, r7
 8006978:	f7ff ff62 	bl	8006840 <__sfmoreglue>
 800697c:	4604      	mov	r4, r0
 800697e:	6030      	str	r0, [r6, #0]
 8006980:	2800      	cmp	r0, #0
 8006982:	d1d5      	bne.n	8006930 <__sfp+0x24>
 8006984:	f7ff ff78 	bl	8006878 <__sfp_lock_release>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	e7ee      	b.n	800696c <__sfp+0x60>
 800698e:	bf00      	nop
 8006990:	08008230 	.word	0x08008230
 8006994:	ffff0001 	.word	0xffff0001

08006998 <_fwalk>:
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	460f      	mov	r7, r1
 800699e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069a2:	2600      	movs	r6, #0
 80069a4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80069a8:	f1b8 0801 	subs.w	r8, r8, #1
 80069ac:	d505      	bpl.n	80069ba <_fwalk+0x22>
 80069ae:	6824      	ldr	r4, [r4, #0]
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	d1f7      	bne.n	80069a4 <_fwalk+0xc>
 80069b4:	4630      	mov	r0, r6
 80069b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d906      	bls.n	80069ce <_fwalk+0x36>
 80069c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069c4:	3301      	adds	r3, #1
 80069c6:	d002      	beq.n	80069ce <_fwalk+0x36>
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	4306      	orrs	r6, r0
 80069ce:	3568      	adds	r5, #104	; 0x68
 80069d0:	e7ea      	b.n	80069a8 <_fwalk+0x10>

080069d2 <_fwalk_reent>:
 80069d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d6:	4606      	mov	r6, r0
 80069d8:	4688      	mov	r8, r1
 80069da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069de:	2700      	movs	r7, #0
 80069e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e4:	f1b9 0901 	subs.w	r9, r9, #1
 80069e8:	d505      	bpl.n	80069f6 <_fwalk_reent+0x24>
 80069ea:	6824      	ldr	r4, [r4, #0]
 80069ec:	2c00      	cmp	r4, #0
 80069ee:	d1f7      	bne.n	80069e0 <_fwalk_reent+0xe>
 80069f0:	4638      	mov	r0, r7
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d907      	bls.n	8006a0c <_fwalk_reent+0x3a>
 80069fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d003      	beq.n	8006a0c <_fwalk_reent+0x3a>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	47c0      	blx	r8
 8006a0a:	4307      	orrs	r7, r0
 8006a0c:	3568      	adds	r5, #104	; 0x68
 8006a0e:	e7e9      	b.n	80069e4 <_fwalk_reent+0x12>

08006a10 <__retarget_lock_init_recursive>:
 8006a10:	4770      	bx	lr

08006a12 <__retarget_lock_acquire_recursive>:
 8006a12:	4770      	bx	lr

08006a14 <__retarget_lock_release_recursive>:
 8006a14:	4770      	bx	lr

08006a16 <__swhatbuf_r>:
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	460e      	mov	r6, r1
 8006a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	b096      	sub	sp, #88	; 0x58
 8006a22:	4614      	mov	r4, r2
 8006a24:	461d      	mov	r5, r3
 8006a26:	da07      	bge.n	8006a38 <__swhatbuf_r+0x22>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	89b3      	ldrh	r3, [r6, #12]
 8006a2e:	061a      	lsls	r2, r3, #24
 8006a30:	d410      	bmi.n	8006a54 <__swhatbuf_r+0x3e>
 8006a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a36:	e00e      	b.n	8006a56 <__swhatbuf_r+0x40>
 8006a38:	466a      	mov	r2, sp
 8006a3a:	f001 fae3 	bl	8008004 <_fstat_r>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	dbf2      	blt.n	8006a28 <__swhatbuf_r+0x12>
 8006a42:	9a01      	ldr	r2, [sp, #4]
 8006a44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a4c:	425a      	negs	r2, r3
 8006a4e:	415a      	adcs	r2, r3
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	e7ee      	b.n	8006a32 <__swhatbuf_r+0x1c>
 8006a54:	2340      	movs	r3, #64	; 0x40
 8006a56:	2000      	movs	r0, #0
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	b016      	add	sp, #88	; 0x58
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a60 <__smakebuf_r>:
 8006a60:	898b      	ldrh	r3, [r1, #12]
 8006a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a64:	079d      	lsls	r5, r3, #30
 8006a66:	4606      	mov	r6, r0
 8006a68:	460c      	mov	r4, r1
 8006a6a:	d507      	bpl.n	8006a7c <__smakebuf_r+0x1c>
 8006a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	2301      	movs	r3, #1
 8006a76:	6163      	str	r3, [r4, #20]
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	ab01      	add	r3, sp, #4
 8006a7e:	466a      	mov	r2, sp
 8006a80:	f7ff ffc9 	bl	8006a16 <__swhatbuf_r>
 8006a84:	9900      	ldr	r1, [sp, #0]
 8006a86:	4605      	mov	r5, r0
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f000 f881 	bl	8006b90 <_malloc_r>
 8006a8e:	b948      	cbnz	r0, 8006aa4 <__smakebuf_r+0x44>
 8006a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a94:	059a      	lsls	r2, r3, #22
 8006a96:	d4ef      	bmi.n	8006a78 <__smakebuf_r+0x18>
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	e7e3      	b.n	8006a6c <__smakebuf_r+0xc>
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <__smakebuf_r+0x7c>)
 8006aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	6020      	str	r0, [r4, #0]
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	6163      	str	r3, [r4, #20]
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	6120      	str	r0, [r4, #16]
 8006aba:	b15b      	cbz	r3, 8006ad4 <__smakebuf_r+0x74>
 8006abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f001 fab1 	bl	8008028 <_isatty_r>
 8006ac6:	b128      	cbz	r0, 8006ad4 <__smakebuf_r+0x74>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	89a0      	ldrh	r0, [r4, #12]
 8006ad6:	4305      	orrs	r5, r0
 8006ad8:	81a5      	strh	r5, [r4, #12]
 8006ada:	e7cd      	b.n	8006a78 <__smakebuf_r+0x18>
 8006adc:	08006835 	.word	0x08006835

08006ae0 <malloc>:
 8006ae0:	4b02      	ldr	r3, [pc, #8]	; (8006aec <malloc+0xc>)
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f000 b853 	b.w	8006b90 <_malloc_r>
 8006aea:	bf00      	nop
 8006aec:	2400001c 	.word	0x2400001c

08006af0 <_free_r>:
 8006af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af2:	2900      	cmp	r1, #0
 8006af4:	d048      	beq.n	8006b88 <_free_r+0x98>
 8006af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afa:	9001      	str	r0, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f1a1 0404 	sub.w	r4, r1, #4
 8006b02:	bfb8      	it	lt
 8006b04:	18e4      	addlt	r4, r4, r3
 8006b06:	f001 fabf 	bl	8008088 <__malloc_lock>
 8006b0a:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <_free_r+0x9c>)
 8006b0c:	9801      	ldr	r0, [sp, #4]
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	4615      	mov	r5, r2
 8006b12:	b933      	cbnz	r3, 8006b22 <_free_r+0x32>
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	6014      	str	r4, [r2, #0]
 8006b18:	b003      	add	sp, #12
 8006b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b1e:	f001 bab9 	b.w	8008094 <__malloc_unlock>
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	d90b      	bls.n	8006b3e <_free_r+0x4e>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	1862      	adds	r2, r4, r1
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bf04      	itt	eq
 8006b2e:	681a      	ldreq	r2, [r3, #0]
 8006b30:	685b      	ldreq	r3, [r3, #4]
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	bf04      	itt	eq
 8006b36:	1852      	addeq	r2, r2, r1
 8006b38:	6022      	streq	r2, [r4, #0]
 8006b3a:	602c      	str	r4, [r5, #0]
 8006b3c:	e7ec      	b.n	8006b18 <_free_r+0x28>
 8006b3e:	461a      	mov	r2, r3
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	b10b      	cbz	r3, 8006b48 <_free_r+0x58>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d9fa      	bls.n	8006b3e <_free_r+0x4e>
 8006b48:	6811      	ldr	r1, [r2, #0]
 8006b4a:	1855      	adds	r5, r2, r1
 8006b4c:	42a5      	cmp	r5, r4
 8006b4e:	d10b      	bne.n	8006b68 <_free_r+0x78>
 8006b50:	6824      	ldr	r4, [r4, #0]
 8006b52:	4421      	add	r1, r4
 8006b54:	1854      	adds	r4, r2, r1
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	6011      	str	r1, [r2, #0]
 8006b5a:	d1dd      	bne.n	8006b18 <_free_r+0x28>
 8006b5c:	681c      	ldr	r4, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	4421      	add	r1, r4
 8006b64:	6011      	str	r1, [r2, #0]
 8006b66:	e7d7      	b.n	8006b18 <_free_r+0x28>
 8006b68:	d902      	bls.n	8006b70 <_free_r+0x80>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	e7d3      	b.n	8006b18 <_free_r+0x28>
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	1961      	adds	r1, r4, r5
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf04      	itt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	bf04      	itt	eq
 8006b80:	1949      	addeq	r1, r1, r5
 8006b82:	6021      	streq	r1, [r4, #0]
 8006b84:	6054      	str	r4, [r2, #4]
 8006b86:	e7c7      	b.n	8006b18 <_free_r+0x28>
 8006b88:	b003      	add	sp, #12
 8006b8a:	bd30      	pop	{r4, r5, pc}
 8006b8c:	24000168 	.word	0x24000168

08006b90 <_malloc_r>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	1ccd      	adds	r5, r1, #3
 8006b94:	f025 0503 	bic.w	r5, r5, #3
 8006b98:	3508      	adds	r5, #8
 8006b9a:	2d0c      	cmp	r5, #12
 8006b9c:	bf38      	it	cc
 8006b9e:	250c      	movcc	r5, #12
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	db01      	blt.n	8006baa <_malloc_r+0x1a>
 8006ba6:	42a9      	cmp	r1, r5
 8006ba8:	d903      	bls.n	8006bb2 <_malloc_r+0x22>
 8006baa:	230c      	movs	r3, #12
 8006bac:	6033      	str	r3, [r6, #0]
 8006bae:	2000      	movs	r0, #0
 8006bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb2:	f001 fa69 	bl	8008088 <__malloc_lock>
 8006bb6:	4921      	ldr	r1, [pc, #132]	; (8006c3c <_malloc_r+0xac>)
 8006bb8:	680a      	ldr	r2, [r1, #0]
 8006bba:	4614      	mov	r4, r2
 8006bbc:	b99c      	cbnz	r4, 8006be6 <_malloc_r+0x56>
 8006bbe:	4f20      	ldr	r7, [pc, #128]	; (8006c40 <_malloc_r+0xb0>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	b923      	cbnz	r3, 8006bce <_malloc_r+0x3e>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 fed6 	bl	8007978 <_sbrk_r>
 8006bcc:	6038      	str	r0, [r7, #0]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 fed1 	bl	8007978 <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d123      	bne.n	8006c22 <_malloc_r+0x92>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	4630      	mov	r0, r6
 8006be0:	f001 fa58 	bl	8008094 <__malloc_unlock>
 8006be4:	e7e3      	b.n	8006bae <_malloc_r+0x1e>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	1b5b      	subs	r3, r3, r5
 8006bea:	d417      	bmi.n	8006c1c <_malloc_r+0x8c>
 8006bec:	2b0b      	cmp	r3, #11
 8006bee:	d903      	bls.n	8006bf8 <_malloc_r+0x68>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	441c      	add	r4, r3
 8006bf4:	6025      	str	r5, [r4, #0]
 8006bf6:	e004      	b.n	8006c02 <_malloc_r+0x72>
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	42a2      	cmp	r2, r4
 8006bfc:	bf0c      	ite	eq
 8006bfe:	600b      	streq	r3, [r1, #0]
 8006c00:	6053      	strne	r3, [r2, #4]
 8006c02:	4630      	mov	r0, r6
 8006c04:	f001 fa46 	bl	8008094 <__malloc_unlock>
 8006c08:	f104 000b 	add.w	r0, r4, #11
 8006c0c:	1d23      	adds	r3, r4, #4
 8006c0e:	f020 0007 	bic.w	r0, r0, #7
 8006c12:	1ac2      	subs	r2, r0, r3
 8006c14:	d0cc      	beq.n	8006bb0 <_malloc_r+0x20>
 8006c16:	1a1b      	subs	r3, r3, r0
 8006c18:	50a3      	str	r3, [r4, r2]
 8006c1a:	e7c9      	b.n	8006bb0 <_malloc_r+0x20>
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	6864      	ldr	r4, [r4, #4]
 8006c20:	e7cc      	b.n	8006bbc <_malloc_r+0x2c>
 8006c22:	1cc4      	adds	r4, r0, #3
 8006c24:	f024 0403 	bic.w	r4, r4, #3
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d0e3      	beq.n	8006bf4 <_malloc_r+0x64>
 8006c2c:	1a21      	subs	r1, r4, r0
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 fea2 	bl	8007978 <_sbrk_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1dd      	bne.n	8006bf4 <_malloc_r+0x64>
 8006c38:	e7cf      	b.n	8006bda <_malloc_r+0x4a>
 8006c3a:	bf00      	nop
 8006c3c:	24000168 	.word	0x24000168
 8006c40:	2400016c 	.word	0x2400016c

08006c44 <__sfputc_r>:
 8006c44:	6893      	ldr	r3, [r2, #8]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	b410      	push	{r4}
 8006c4c:	6093      	str	r3, [r2, #8]
 8006c4e:	da08      	bge.n	8006c62 <__sfputc_r+0x1e>
 8006c50:	6994      	ldr	r4, [r2, #24]
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	db01      	blt.n	8006c5a <__sfputc_r+0x16>
 8006c56:	290a      	cmp	r1, #10
 8006c58:	d103      	bne.n	8006c62 <__sfputc_r+0x1e>
 8006c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5e:	f001 b8ef 	b.w	8007e40 <__swbuf_r>
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	1c58      	adds	r0, r3, #1
 8006c66:	6010      	str	r0, [r2, #0]
 8006c68:	7019      	strb	r1, [r3, #0]
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <__sfputs_r>:
 8006c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	18d5      	adds	r5, r2, r3
 8006c7c:	42ac      	cmp	r4, r5
 8006c7e:	d101      	bne.n	8006c84 <__sfputs_r+0x12>
 8006c80:	2000      	movs	r0, #0
 8006c82:	e007      	b.n	8006c94 <__sfputs_r+0x22>
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffda 	bl	8006c44 <__sfputc_r>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d1f3      	bne.n	8006c7c <__sfputs_r+0xa>
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c98 <_vfiprintf_r>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	b09d      	sub	sp, #116	; 0x74
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4698      	mov	r8, r3
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	b118      	cbz	r0, 8006cb0 <_vfiprintf_r+0x18>
 8006ca8:	6983      	ldr	r3, [r0, #24]
 8006caa:	b90b      	cbnz	r3, 8006cb0 <_vfiprintf_r+0x18>
 8006cac:	f7ff fdf6 	bl	800689c <__sinit>
 8006cb0:	4b89      	ldr	r3, [pc, #548]	; (8006ed8 <_vfiprintf_r+0x240>)
 8006cb2:	429d      	cmp	r5, r3
 8006cb4:	d11b      	bne.n	8006cee <_vfiprintf_r+0x56>
 8006cb6:	6875      	ldr	r5, [r6, #4]
 8006cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cba:	07d9      	lsls	r1, r3, #31
 8006cbc:	d405      	bmi.n	8006cca <_vfiprintf_r+0x32>
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	059a      	lsls	r2, r3, #22
 8006cc2:	d402      	bmi.n	8006cca <_vfiprintf_r+0x32>
 8006cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cc6:	f7ff fea4 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	071b      	lsls	r3, r3, #28
 8006cce:	d501      	bpl.n	8006cd4 <_vfiprintf_r+0x3c>
 8006cd0:	692b      	ldr	r3, [r5, #16]
 8006cd2:	b9eb      	cbnz	r3, 8006d10 <_vfiprintf_r+0x78>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f001 f916 	bl	8007f08 <__swsetup_r>
 8006cdc:	b1c0      	cbz	r0, 8006d10 <_vfiprintf_r+0x78>
 8006cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce0:	07dc      	lsls	r4, r3, #31
 8006ce2:	d50e      	bpl.n	8006d02 <_vfiprintf_r+0x6a>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	b01d      	add	sp, #116	; 0x74
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	4b7b      	ldr	r3, [pc, #492]	; (8006edc <_vfiprintf_r+0x244>)
 8006cf0:	429d      	cmp	r5, r3
 8006cf2:	d101      	bne.n	8006cf8 <_vfiprintf_r+0x60>
 8006cf4:	68b5      	ldr	r5, [r6, #8]
 8006cf6:	e7df      	b.n	8006cb8 <_vfiprintf_r+0x20>
 8006cf8:	4b79      	ldr	r3, [pc, #484]	; (8006ee0 <_vfiprintf_r+0x248>)
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	bf08      	it	eq
 8006cfe:	68f5      	ldreq	r5, [r6, #12]
 8006d00:	e7da      	b.n	8006cb8 <_vfiprintf_r+0x20>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	0598      	lsls	r0, r3, #22
 8006d06:	d4ed      	bmi.n	8006ce4 <_vfiprintf_r+0x4c>
 8006d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d0a:	f7ff fe83 	bl	8006a14 <__retarget_lock_release_recursive>
 8006d0e:	e7e9      	b.n	8006ce4 <_vfiprintf_r+0x4c>
 8006d10:	2300      	movs	r3, #0
 8006d12:	9309      	str	r3, [sp, #36]	; 0x24
 8006d14:	2320      	movs	r3, #32
 8006d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d1e:	2330      	movs	r3, #48	; 0x30
 8006d20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ee4 <_vfiprintf_r+0x24c>
 8006d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d28:	f04f 0901 	mov.w	r9, #1
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	469a      	mov	sl, r3
 8006d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d34:	b10a      	cbz	r2, 8006d3a <_vfiprintf_r+0xa2>
 8006d36:	2a25      	cmp	r2, #37	; 0x25
 8006d38:	d1f9      	bne.n	8006d2e <_vfiprintf_r+0x96>
 8006d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d3e:	d00b      	beq.n	8006d58 <_vfiprintf_r+0xc0>
 8006d40:	465b      	mov	r3, fp
 8006d42:	4622      	mov	r2, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ff93 	bl	8006c72 <__sfputs_r>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f000 80aa 	beq.w	8006ea6 <_vfiprintf_r+0x20e>
 8006d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d54:	445a      	add	r2, fp
 8006d56:	9209      	str	r2, [sp, #36]	; 0x24
 8006d58:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80a2 	beq.w	8006ea6 <_vfiprintf_r+0x20e>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d6c:	f10a 0a01 	add.w	sl, sl, #1
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9307      	str	r3, [sp, #28]
 8006d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d78:	931a      	str	r3, [sp, #104]	; 0x68
 8006d7a:	4654      	mov	r4, sl
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d82:	4858      	ldr	r0, [pc, #352]	; (8006ee4 <_vfiprintf_r+0x24c>)
 8006d84:	f7f9 faac 	bl	80002e0 <memchr>
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	b9d8      	cbnz	r0, 8006dc4 <_vfiprintf_r+0x12c>
 8006d8c:	06d1      	lsls	r1, r2, #27
 8006d8e:	bf44      	itt	mi
 8006d90:	2320      	movmi	r3, #32
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d96:	0713      	lsls	r3, r2, #28
 8006d98:	bf44      	itt	mi
 8006d9a:	232b      	movmi	r3, #43	; 0x2b
 8006d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da0:	f89a 3000 	ldrb.w	r3, [sl]
 8006da4:	2b2a      	cmp	r3, #42	; 0x2a
 8006da6:	d015      	beq.n	8006dd4 <_vfiprintf_r+0x13c>
 8006da8:	9a07      	ldr	r2, [sp, #28]
 8006daa:	4654      	mov	r4, sl
 8006dac:	2000      	movs	r0, #0
 8006dae:	f04f 0c0a 	mov.w	ip, #10
 8006db2:	4621      	mov	r1, r4
 8006db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db8:	3b30      	subs	r3, #48	; 0x30
 8006dba:	2b09      	cmp	r3, #9
 8006dbc:	d94e      	bls.n	8006e5c <_vfiprintf_r+0x1c4>
 8006dbe:	b1b0      	cbz	r0, 8006dee <_vfiprintf_r+0x156>
 8006dc0:	9207      	str	r2, [sp, #28]
 8006dc2:	e014      	b.n	8006dee <_vfiprintf_r+0x156>
 8006dc4:	eba0 0308 	sub.w	r3, r0, r8
 8006dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	46a2      	mov	sl, r4
 8006dd2:	e7d2      	b.n	8006d7a <_vfiprintf_r+0xe2>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	1d19      	adds	r1, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	9103      	str	r1, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfbb      	ittet	lt
 8006de0:	425b      	neglt	r3, r3
 8006de2:	f042 0202 	orrlt.w	r2, r2, #2
 8006de6:	9307      	strge	r3, [sp, #28]
 8006de8:	9307      	strlt	r3, [sp, #28]
 8006dea:	bfb8      	it	lt
 8006dec:	9204      	strlt	r2, [sp, #16]
 8006dee:	7823      	ldrb	r3, [r4, #0]
 8006df0:	2b2e      	cmp	r3, #46	; 0x2e
 8006df2:	d10c      	bne.n	8006e0e <_vfiprintf_r+0x176>
 8006df4:	7863      	ldrb	r3, [r4, #1]
 8006df6:	2b2a      	cmp	r3, #42	; 0x2a
 8006df8:	d135      	bne.n	8006e66 <_vfiprintf_r+0x1ce>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	9203      	str	r2, [sp, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfb8      	it	lt
 8006e06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e0a:	3402      	adds	r4, #2
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ef4 <_vfiprintf_r+0x25c>
 8006e12:	7821      	ldrb	r1, [r4, #0]
 8006e14:	2203      	movs	r2, #3
 8006e16:	4650      	mov	r0, sl
 8006e18:	f7f9 fa62 	bl	80002e0 <memchr>
 8006e1c:	b140      	cbz	r0, 8006e30 <_vfiprintf_r+0x198>
 8006e1e:	2340      	movs	r3, #64	; 0x40
 8006e20:	eba0 000a 	sub.w	r0, r0, sl
 8006e24:	fa03 f000 	lsl.w	r0, r3, r0
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	4303      	orrs	r3, r0
 8006e2c:	3401      	adds	r4, #1
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e34:	482c      	ldr	r0, [pc, #176]	; (8006ee8 <_vfiprintf_r+0x250>)
 8006e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e3a:	2206      	movs	r2, #6
 8006e3c:	f7f9 fa50 	bl	80002e0 <memchr>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d03f      	beq.n	8006ec4 <_vfiprintf_r+0x22c>
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <_vfiprintf_r+0x254>)
 8006e46:	bb1b      	cbnz	r3, 8006e90 <_vfiprintf_r+0x1f8>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	3307      	adds	r3, #7
 8006e4c:	f023 0307 	bic.w	r3, r3, #7
 8006e50:	3308      	adds	r3, #8
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e56:	443b      	add	r3, r7
 8006e58:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5a:	e767      	b.n	8006d2c <_vfiprintf_r+0x94>
 8006e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e60:	460c      	mov	r4, r1
 8006e62:	2001      	movs	r0, #1
 8006e64:	e7a5      	b.n	8006db2 <_vfiprintf_r+0x11a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	3401      	adds	r4, #1
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f04f 0c0a 	mov.w	ip, #10
 8006e72:	4620      	mov	r0, r4
 8006e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e78:	3a30      	subs	r2, #48	; 0x30
 8006e7a:	2a09      	cmp	r2, #9
 8006e7c:	d903      	bls.n	8006e86 <_vfiprintf_r+0x1ee>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0c5      	beq.n	8006e0e <_vfiprintf_r+0x176>
 8006e82:	9105      	str	r1, [sp, #20]
 8006e84:	e7c3      	b.n	8006e0e <_vfiprintf_r+0x176>
 8006e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e7f0      	b.n	8006e72 <_vfiprintf_r+0x1da>
 8006e90:	ab03      	add	r3, sp, #12
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	462a      	mov	r2, r5
 8006e96:	4b16      	ldr	r3, [pc, #88]	; (8006ef0 <_vfiprintf_r+0x258>)
 8006e98:	a904      	add	r1, sp, #16
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f3af 8000 	nop.w
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	1c78      	adds	r0, r7, #1
 8006ea4:	d1d6      	bne.n	8006e54 <_vfiprintf_r+0x1bc>
 8006ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ea8:	07d9      	lsls	r1, r3, #31
 8006eaa:	d405      	bmi.n	8006eb8 <_vfiprintf_r+0x220>
 8006eac:	89ab      	ldrh	r3, [r5, #12]
 8006eae:	059a      	lsls	r2, r3, #22
 8006eb0:	d402      	bmi.n	8006eb8 <_vfiprintf_r+0x220>
 8006eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eb4:	f7ff fdae 	bl	8006a14 <__retarget_lock_release_recursive>
 8006eb8:	89ab      	ldrh	r3, [r5, #12]
 8006eba:	065b      	lsls	r3, r3, #25
 8006ebc:	f53f af12 	bmi.w	8006ce4 <_vfiprintf_r+0x4c>
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	e711      	b.n	8006ce8 <_vfiprintf_r+0x50>
 8006ec4:	ab03      	add	r3, sp, #12
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	462a      	mov	r2, r5
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <_vfiprintf_r+0x258>)
 8006ecc:	a904      	add	r1, sp, #16
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 f880 	bl	8006fd4 <_printf_i>
 8006ed4:	e7e4      	b.n	8006ea0 <_vfiprintf_r+0x208>
 8006ed6:	bf00      	nop
 8006ed8:	08008254 	.word	0x08008254
 8006edc:	08008274 	.word	0x08008274
 8006ee0:	08008234 	.word	0x08008234
 8006ee4:	08008294 	.word	0x08008294
 8006ee8:	0800829e 	.word	0x0800829e
 8006eec:	00000000 	.word	0x00000000
 8006ef0:	08006c73 	.word	0x08006c73
 8006ef4:	0800829a 	.word	0x0800829a

08006ef8 <_printf_common>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	4616      	mov	r6, r2
 8006efe:	4699      	mov	r9, r3
 8006f00:	688a      	ldr	r2, [r1, #8]
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bfb8      	it	lt
 8006f0c:	4613      	movlt	r3, r2
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f14:	4607      	mov	r7, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b10a      	cbz	r2, 8006f1e <_printf_common+0x26>
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	0699      	lsls	r1, r3, #26
 8006f22:	bf42      	ittt	mi
 8006f24:	6833      	ldrmi	r3, [r6, #0]
 8006f26:	3302      	addmi	r3, #2
 8006f28:	6033      	strmi	r3, [r6, #0]
 8006f2a:	6825      	ldr	r5, [r4, #0]
 8006f2c:	f015 0506 	ands.w	r5, r5, #6
 8006f30:	d106      	bne.n	8006f40 <_printf_common+0x48>
 8006f32:	f104 0a19 	add.w	sl, r4, #25
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	6832      	ldr	r2, [r6, #0]
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dc26      	bgt.n	8006f8e <_printf_common+0x96>
 8006f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f44:	1e13      	subs	r3, r2, #0
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	bf18      	it	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	0692      	lsls	r2, r2, #26
 8006f4e:	d42b      	bmi.n	8006fa8 <_printf_common+0xb0>
 8006f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f54:	4649      	mov	r1, r9
 8006f56:	4638      	mov	r0, r7
 8006f58:	47c0      	blx	r8
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d01e      	beq.n	8006f9c <_printf_common+0xa4>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	68e5      	ldr	r5, [r4, #12]
 8006f62:	6832      	ldr	r2, [r6, #0]
 8006f64:	f003 0306 	and.w	r3, r3, #6
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	bf08      	it	eq
 8006f6c:	1aad      	subeq	r5, r5, r2
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	6922      	ldr	r2, [r4, #16]
 8006f72:	bf0c      	ite	eq
 8006f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f78:	2500      	movne	r5, #0
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bfc4      	itt	gt
 8006f7e:	1a9b      	subgt	r3, r3, r2
 8006f80:	18ed      	addgt	r5, r5, r3
 8006f82:	2600      	movs	r6, #0
 8006f84:	341a      	adds	r4, #26
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	d11a      	bne.n	8006fc0 <_printf_common+0xc8>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e008      	b.n	8006fa0 <_printf_common+0xa8>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4649      	mov	r1, r9
 8006f94:	4638      	mov	r0, r7
 8006f96:	47c0      	blx	r8
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d103      	bne.n	8006fa4 <_printf_common+0xac>
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e7c6      	b.n	8006f36 <_printf_common+0x3e>
 8006fa8:	18e1      	adds	r1, r4, r3
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	2030      	movs	r0, #48	; 0x30
 8006fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fb2:	4422      	add	r2, r4
 8006fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	e7c7      	b.n	8006f50 <_printf_common+0x58>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c0      	blx	r8
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d0e6      	beq.n	8006f9c <_printf_common+0xa4>
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7d9      	b.n	8006f86 <_printf_common+0x8e>
	...

08006fd4 <_printf_i>:
 8006fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	460c      	mov	r4, r1
 8006fda:	4691      	mov	r9, r2
 8006fdc:	7e27      	ldrb	r7, [r4, #24]
 8006fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fe0:	2f78      	cmp	r7, #120	; 0x78
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fea:	d807      	bhi.n	8006ffc <_printf_i+0x28>
 8006fec:	2f62      	cmp	r7, #98	; 0x62
 8006fee:	d80a      	bhi.n	8007006 <_printf_i+0x32>
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	f000 80d8 	beq.w	80071a6 <_printf_i+0x1d2>
 8006ff6:	2f58      	cmp	r7, #88	; 0x58
 8006ff8:	f000 80a3 	beq.w	8007142 <_printf_i+0x16e>
 8006ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007004:	e03a      	b.n	800707c <_printf_i+0xa8>
 8007006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800700a:	2b15      	cmp	r3, #21
 800700c:	d8f6      	bhi.n	8006ffc <_printf_i+0x28>
 800700e:	a001      	add	r0, pc, #4	; (adr r0, 8007014 <_printf_i+0x40>)
 8007010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007014:	0800706d 	.word	0x0800706d
 8007018:	08007081 	.word	0x08007081
 800701c:	08006ffd 	.word	0x08006ffd
 8007020:	08006ffd 	.word	0x08006ffd
 8007024:	08006ffd 	.word	0x08006ffd
 8007028:	08006ffd 	.word	0x08006ffd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006ffd 	.word	0x08006ffd
 8007034:	08006ffd 	.word	0x08006ffd
 8007038:	08006ffd 	.word	0x08006ffd
 800703c:	08006ffd 	.word	0x08006ffd
 8007040:	0800718d 	.word	0x0800718d
 8007044:	080070b1 	.word	0x080070b1
 8007048:	0800716f 	.word	0x0800716f
 800704c:	08006ffd 	.word	0x08006ffd
 8007050:	08006ffd 	.word	0x08006ffd
 8007054:	080071af 	.word	0x080071af
 8007058:	08006ffd 	.word	0x08006ffd
 800705c:	080070b1 	.word	0x080070b1
 8007060:	08006ffd 	.word	0x08006ffd
 8007064:	08006ffd 	.word	0x08006ffd
 8007068:	08007177 	.word	0x08007177
 800706c:	680b      	ldr	r3, [r1, #0]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	600a      	str	r2, [r1, #0]
 8007074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800707c:	2301      	movs	r3, #1
 800707e:	e0a3      	b.n	80071c8 <_printf_i+0x1f4>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	6808      	ldr	r0, [r1, #0]
 8007084:	062e      	lsls	r6, r5, #24
 8007086:	f100 0304 	add.w	r3, r0, #4
 800708a:	d50a      	bpl.n	80070a2 <_printf_i+0xce>
 800708c:	6805      	ldr	r5, [r0, #0]
 800708e:	600b      	str	r3, [r1, #0]
 8007090:	2d00      	cmp	r5, #0
 8007092:	da03      	bge.n	800709c <_printf_i+0xc8>
 8007094:	232d      	movs	r3, #45	; 0x2d
 8007096:	426d      	negs	r5, r5
 8007098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709c:	485e      	ldr	r0, [pc, #376]	; (8007218 <_printf_i+0x244>)
 800709e:	230a      	movs	r3, #10
 80070a0:	e019      	b.n	80070d6 <_printf_i+0x102>
 80070a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070a6:	6805      	ldr	r5, [r0, #0]
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	bf18      	it	ne
 80070ac:	b22d      	sxthne	r5, r5
 80070ae:	e7ef      	b.n	8007090 <_printf_i+0xbc>
 80070b0:	680b      	ldr	r3, [r1, #0]
 80070b2:	6825      	ldr	r5, [r4, #0]
 80070b4:	1d18      	adds	r0, r3, #4
 80070b6:	6008      	str	r0, [r1, #0]
 80070b8:	0628      	lsls	r0, r5, #24
 80070ba:	d501      	bpl.n	80070c0 <_printf_i+0xec>
 80070bc:	681d      	ldr	r5, [r3, #0]
 80070be:	e002      	b.n	80070c6 <_printf_i+0xf2>
 80070c0:	0669      	lsls	r1, r5, #25
 80070c2:	d5fb      	bpl.n	80070bc <_printf_i+0xe8>
 80070c4:	881d      	ldrh	r5, [r3, #0]
 80070c6:	4854      	ldr	r0, [pc, #336]	; (8007218 <_printf_i+0x244>)
 80070c8:	2f6f      	cmp	r7, #111	; 0x6f
 80070ca:	bf0c      	ite	eq
 80070cc:	2308      	moveq	r3, #8
 80070ce:	230a      	movne	r3, #10
 80070d0:	2100      	movs	r1, #0
 80070d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070d6:	6866      	ldr	r6, [r4, #4]
 80070d8:	60a6      	str	r6, [r4, #8]
 80070da:	2e00      	cmp	r6, #0
 80070dc:	bfa2      	ittt	ge
 80070de:	6821      	ldrge	r1, [r4, #0]
 80070e0:	f021 0104 	bicge.w	r1, r1, #4
 80070e4:	6021      	strge	r1, [r4, #0]
 80070e6:	b90d      	cbnz	r5, 80070ec <_printf_i+0x118>
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	d04d      	beq.n	8007188 <_printf_i+0x1b4>
 80070ec:	4616      	mov	r6, r2
 80070ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80070f2:	fb03 5711 	mls	r7, r3, r1, r5
 80070f6:	5dc7      	ldrb	r7, [r0, r7]
 80070f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070fc:	462f      	mov	r7, r5
 80070fe:	42bb      	cmp	r3, r7
 8007100:	460d      	mov	r5, r1
 8007102:	d9f4      	bls.n	80070ee <_printf_i+0x11a>
 8007104:	2b08      	cmp	r3, #8
 8007106:	d10b      	bne.n	8007120 <_printf_i+0x14c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07df      	lsls	r7, r3, #31
 800710c:	d508      	bpl.n	8007120 <_printf_i+0x14c>
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	6861      	ldr	r1, [r4, #4]
 8007112:	4299      	cmp	r1, r3
 8007114:	bfde      	ittt	le
 8007116:	2330      	movle	r3, #48	; 0x30
 8007118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800711c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007120:	1b92      	subs	r2, r2, r6
 8007122:	6122      	str	r2, [r4, #16]
 8007124:	f8cd a000 	str.w	sl, [sp]
 8007128:	464b      	mov	r3, r9
 800712a:	aa03      	add	r2, sp, #12
 800712c:	4621      	mov	r1, r4
 800712e:	4640      	mov	r0, r8
 8007130:	f7ff fee2 	bl	8006ef8 <_printf_common>
 8007134:	3001      	adds	r0, #1
 8007136:	d14c      	bne.n	80071d2 <_printf_i+0x1fe>
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	b004      	add	sp, #16
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007142:	4835      	ldr	r0, [pc, #212]	; (8007218 <_printf_i+0x244>)
 8007144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	680e      	ldr	r6, [r1, #0]
 800714c:	061f      	lsls	r7, r3, #24
 800714e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007152:	600e      	str	r6, [r1, #0]
 8007154:	d514      	bpl.n	8007180 <_printf_i+0x1ac>
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	bf44      	itt	mi
 800715a:	f043 0320 	orrmi.w	r3, r3, #32
 800715e:	6023      	strmi	r3, [r4, #0]
 8007160:	b91d      	cbnz	r5, 800716a <_printf_i+0x196>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	f023 0320 	bic.w	r3, r3, #32
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	2310      	movs	r3, #16
 800716c:	e7b0      	b.n	80070d0 <_printf_i+0xfc>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f043 0320 	orr.w	r3, r3, #32
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	2378      	movs	r3, #120	; 0x78
 8007178:	4828      	ldr	r0, [pc, #160]	; (800721c <_printf_i+0x248>)
 800717a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800717e:	e7e3      	b.n	8007148 <_printf_i+0x174>
 8007180:	065e      	lsls	r6, r3, #25
 8007182:	bf48      	it	mi
 8007184:	b2ad      	uxthmi	r5, r5
 8007186:	e7e6      	b.n	8007156 <_printf_i+0x182>
 8007188:	4616      	mov	r6, r2
 800718a:	e7bb      	b.n	8007104 <_printf_i+0x130>
 800718c:	680b      	ldr	r3, [r1, #0]
 800718e:	6826      	ldr	r6, [r4, #0]
 8007190:	6960      	ldr	r0, [r4, #20]
 8007192:	1d1d      	adds	r5, r3, #4
 8007194:	600d      	str	r5, [r1, #0]
 8007196:	0635      	lsls	r5, r6, #24
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	d501      	bpl.n	80071a0 <_printf_i+0x1cc>
 800719c:	6018      	str	r0, [r3, #0]
 800719e:	e002      	b.n	80071a6 <_printf_i+0x1d2>
 80071a0:	0671      	lsls	r1, r6, #25
 80071a2:	d5fb      	bpl.n	800719c <_printf_i+0x1c8>
 80071a4:	8018      	strh	r0, [r3, #0]
 80071a6:	2300      	movs	r3, #0
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	4616      	mov	r6, r2
 80071ac:	e7ba      	b.n	8007124 <_printf_i+0x150>
 80071ae:	680b      	ldr	r3, [r1, #0]
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	600a      	str	r2, [r1, #0]
 80071b4:	681e      	ldr	r6, [r3, #0]
 80071b6:	6862      	ldr	r2, [r4, #4]
 80071b8:	2100      	movs	r1, #0
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7f9 f890 	bl	80002e0 <memchr>
 80071c0:	b108      	cbz	r0, 80071c6 <_printf_i+0x1f2>
 80071c2:	1b80      	subs	r0, r0, r6
 80071c4:	6060      	str	r0, [r4, #4]
 80071c6:	6863      	ldr	r3, [r4, #4]
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	2300      	movs	r3, #0
 80071cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d0:	e7a8      	b.n	8007124 <_printf_i+0x150>
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	4632      	mov	r2, r6
 80071d6:	4649      	mov	r1, r9
 80071d8:	4640      	mov	r0, r8
 80071da:	47d0      	blx	sl
 80071dc:	3001      	adds	r0, #1
 80071de:	d0ab      	beq.n	8007138 <_printf_i+0x164>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	079b      	lsls	r3, r3, #30
 80071e4:	d413      	bmi.n	800720e <_printf_i+0x23a>
 80071e6:	68e0      	ldr	r0, [r4, #12]
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	4298      	cmp	r0, r3
 80071ec:	bfb8      	it	lt
 80071ee:	4618      	movlt	r0, r3
 80071f0:	e7a4      	b.n	800713c <_printf_i+0x168>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4632      	mov	r2, r6
 80071f6:	4649      	mov	r1, r9
 80071f8:	4640      	mov	r0, r8
 80071fa:	47d0      	blx	sl
 80071fc:	3001      	adds	r0, #1
 80071fe:	d09b      	beq.n	8007138 <_printf_i+0x164>
 8007200:	3501      	adds	r5, #1
 8007202:	68e3      	ldr	r3, [r4, #12]
 8007204:	9903      	ldr	r1, [sp, #12]
 8007206:	1a5b      	subs	r3, r3, r1
 8007208:	42ab      	cmp	r3, r5
 800720a:	dcf2      	bgt.n	80071f2 <_printf_i+0x21e>
 800720c:	e7eb      	b.n	80071e6 <_printf_i+0x212>
 800720e:	2500      	movs	r5, #0
 8007210:	f104 0619 	add.w	r6, r4, #25
 8007214:	e7f5      	b.n	8007202 <_printf_i+0x22e>
 8007216:	bf00      	nop
 8007218:	080082a5 	.word	0x080082a5
 800721c:	080082b6 	.word	0x080082b6

08007220 <__svfiscanf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	461d      	mov	r5, r3
 8007226:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007228:	07df      	lsls	r7, r3, #31
 800722a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800722e:	4606      	mov	r6, r0
 8007230:	460c      	mov	r4, r1
 8007232:	4692      	mov	sl, r2
 8007234:	d405      	bmi.n	8007242 <__svfiscanf_r+0x22>
 8007236:	898b      	ldrh	r3, [r1, #12]
 8007238:	0598      	lsls	r0, r3, #22
 800723a:	d402      	bmi.n	8007242 <__svfiscanf_r+0x22>
 800723c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800723e:	f7ff fbe8 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8007242:	2300      	movs	r3, #0
 8007244:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8007248:	4bae      	ldr	r3, [pc, #696]	; (8007504 <__svfiscanf_r+0x2e4>)
 800724a:	93a0      	str	r3, [sp, #640]	; 0x280
 800724c:	f10d 0804 	add.w	r8, sp, #4
 8007250:	4bad      	ldr	r3, [pc, #692]	; (8007508 <__svfiscanf_r+0x2e8>)
 8007252:	4fae      	ldr	r7, [pc, #696]	; (800750c <__svfiscanf_r+0x2ec>)
 8007254:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8007510 <__svfiscanf_r+0x2f0>
 8007258:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800725c:	93a1      	str	r3, [sp, #644]	; 0x284
 800725e:	9500      	str	r5, [sp, #0]
 8007260:	f89a b000 	ldrb.w	fp, [sl]
 8007264:	f1bb 0f00 	cmp.w	fp, #0
 8007268:	f000 8170 	beq.w	800754c <__svfiscanf_r+0x32c>
 800726c:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8007270:	f013 0308 	ands.w	r3, r3, #8
 8007274:	f10a 0501 	add.w	r5, sl, #1
 8007278:	d019      	beq.n	80072ae <__svfiscanf_r+0x8e>
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dd0f      	ble.n	80072a0 <__svfiscanf_r+0x80>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	5cba      	ldrb	r2, [r7, r2]
 8007286:	0711      	lsls	r1, r2, #28
 8007288:	d401      	bmi.n	800728e <__svfiscanf_r+0x6e>
 800728a:	46aa      	mov	sl, r5
 800728c:	e7e8      	b.n	8007260 <__svfiscanf_r+0x40>
 800728e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007290:	3201      	adds	r2, #1
 8007292:	9245      	str	r2, [sp, #276]	; 0x114
 8007294:	6862      	ldr	r2, [r4, #4]
 8007296:	3301      	adds	r3, #1
 8007298:	3a01      	subs	r2, #1
 800729a:	6062      	str	r2, [r4, #4]
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	e7ec      	b.n	800727a <__svfiscanf_r+0x5a>
 80072a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80072a2:	4621      	mov	r1, r4
 80072a4:	4630      	mov	r0, r6
 80072a6:	4798      	blx	r3
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0e9      	beq.n	8007280 <__svfiscanf_r+0x60>
 80072ac:	e7ed      	b.n	800728a <__svfiscanf_r+0x6a>
 80072ae:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80072b2:	f040 8086 	bne.w	80073c2 <__svfiscanf_r+0x1a2>
 80072b6:	9341      	str	r3, [sp, #260]	; 0x104
 80072b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80072ba:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80072be:	2b2a      	cmp	r3, #42	; 0x2a
 80072c0:	bf02      	ittt	eq
 80072c2:	2310      	moveq	r3, #16
 80072c4:	9341      	streq	r3, [sp, #260]	; 0x104
 80072c6:	f10a 0502 	addeq.w	r5, sl, #2
 80072ca:	220a      	movs	r2, #10
 80072cc:	46aa      	mov	sl, r5
 80072ce:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80072d2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d91e      	bls.n	8007318 <__svfiscanf_r+0xf8>
 80072da:	488d      	ldr	r0, [pc, #564]	; (8007510 <__svfiscanf_r+0x2f0>)
 80072dc:	2203      	movs	r2, #3
 80072de:	f7f8 ffff 	bl	80002e0 <memchr>
 80072e2:	b140      	cbz	r0, 80072f6 <__svfiscanf_r+0xd6>
 80072e4:	2301      	movs	r3, #1
 80072e6:	eba0 0009 	sub.w	r0, r0, r9
 80072ea:	fa03 f000 	lsl.w	r0, r3, r0
 80072ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80072f0:	4318      	orrs	r0, r3
 80072f2:	9041      	str	r0, [sp, #260]	; 0x104
 80072f4:	4655      	mov	r5, sl
 80072f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072fa:	2b78      	cmp	r3, #120	; 0x78
 80072fc:	d807      	bhi.n	800730e <__svfiscanf_r+0xee>
 80072fe:	2b57      	cmp	r3, #87	; 0x57
 8007300:	d811      	bhi.n	8007326 <__svfiscanf_r+0x106>
 8007302:	2b25      	cmp	r3, #37	; 0x25
 8007304:	d05d      	beq.n	80073c2 <__svfiscanf_r+0x1a2>
 8007306:	d857      	bhi.n	80073b8 <__svfiscanf_r+0x198>
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80d6 	beq.w	80074ba <__svfiscanf_r+0x29a>
 800730e:	2303      	movs	r3, #3
 8007310:	9347      	str	r3, [sp, #284]	; 0x11c
 8007312:	230a      	movs	r3, #10
 8007314:	9342      	str	r3, [sp, #264]	; 0x108
 8007316:	e08b      	b.n	8007430 <__svfiscanf_r+0x210>
 8007318:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800731a:	fb02 1303 	mla	r3, r2, r3, r1
 800731e:	3b30      	subs	r3, #48	; 0x30
 8007320:	9343      	str	r3, [sp, #268]	; 0x10c
 8007322:	4655      	mov	r5, sl
 8007324:	e7d2      	b.n	80072cc <__svfiscanf_r+0xac>
 8007326:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800732a:	2a20      	cmp	r2, #32
 800732c:	d8ef      	bhi.n	800730e <__svfiscanf_r+0xee>
 800732e:	a101      	add	r1, pc, #4	; (adr r1, 8007334 <__svfiscanf_r+0x114>)
 8007330:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007334:	0800741b 	.word	0x0800741b
 8007338:	0800730f 	.word	0x0800730f
 800733c:	0800730f 	.word	0x0800730f
 8007340:	08007479 	.word	0x08007479
 8007344:	0800730f 	.word	0x0800730f
 8007348:	0800730f 	.word	0x0800730f
 800734c:	0800730f 	.word	0x0800730f
 8007350:	0800730f 	.word	0x0800730f
 8007354:	0800730f 	.word	0x0800730f
 8007358:	0800730f 	.word	0x0800730f
 800735c:	0800730f 	.word	0x0800730f
 8007360:	0800748f 	.word	0x0800748f
 8007364:	08007465 	.word	0x08007465
 8007368:	080073bf 	.word	0x080073bf
 800736c:	080073bf 	.word	0x080073bf
 8007370:	080073bf 	.word	0x080073bf
 8007374:	0800730f 	.word	0x0800730f
 8007378:	08007469 	.word	0x08007469
 800737c:	0800730f 	.word	0x0800730f
 8007380:	0800730f 	.word	0x0800730f
 8007384:	0800730f 	.word	0x0800730f
 8007388:	0800730f 	.word	0x0800730f
 800738c:	0800749f 	.word	0x0800749f
 8007390:	08007471 	.word	0x08007471
 8007394:	08007413 	.word	0x08007413
 8007398:	0800730f 	.word	0x0800730f
 800739c:	0800730f 	.word	0x0800730f
 80073a0:	0800749b 	.word	0x0800749b
 80073a4:	0800730f 	.word	0x0800730f
 80073a8:	08007465 	.word	0x08007465
 80073ac:	0800730f 	.word	0x0800730f
 80073b0:	0800730f 	.word	0x0800730f
 80073b4:	0800741b 	.word	0x0800741b
 80073b8:	3b45      	subs	r3, #69	; 0x45
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d8a7      	bhi.n	800730e <__svfiscanf_r+0xee>
 80073be:	2305      	movs	r3, #5
 80073c0:	e035      	b.n	800742e <__svfiscanf_r+0x20e>
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dd0d      	ble.n	80073e4 <__svfiscanf_r+0x1c4>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	455a      	cmp	r2, fp
 80073ce:	f040 80bd 	bne.w	800754c <__svfiscanf_r+0x32c>
 80073d2:	3301      	adds	r3, #1
 80073d4:	6862      	ldr	r2, [r4, #4]
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073da:	3a01      	subs	r2, #1
 80073dc:	3301      	adds	r3, #1
 80073de:	6062      	str	r2, [r4, #4]
 80073e0:	9345      	str	r3, [sp, #276]	; 0x114
 80073e2:	e752      	b.n	800728a <__svfiscanf_r+0x6a>
 80073e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	4798      	blx	r3
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0eb      	beq.n	80073c8 <__svfiscanf_r+0x1a8>
 80073f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	f140 80a2 	bpl.w	800753c <__svfiscanf_r+0x31c>
 80073f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d066      	beq.n	80074cc <__svfiscanf_r+0x2ac>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007404:	bf18      	it	ne
 8007406:	f04f 30ff 	movne.w	r0, #4294967295
 800740a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007414:	f042 0220 	orr.w	r2, r2, #32
 8007418:	9241      	str	r2, [sp, #260]	; 0x104
 800741a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800741c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007420:	9241      	str	r2, [sp, #260]	; 0x104
 8007422:	2210      	movs	r2, #16
 8007424:	2b6f      	cmp	r3, #111	; 0x6f
 8007426:	9242      	str	r2, [sp, #264]	; 0x108
 8007428:	bf34      	ite	cc
 800742a:	2303      	movcc	r3, #3
 800742c:	2304      	movcs	r3, #4
 800742e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd4d      	ble.n	80074d2 <__svfiscanf_r+0x2b2>
 8007436:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007438:	065b      	lsls	r3, r3, #25
 800743a:	d404      	bmi.n	8007446 <__svfiscanf_r+0x226>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	5cba      	ldrb	r2, [r7, r2]
 8007442:	0710      	lsls	r0, r2, #28
 8007444:	d44c      	bmi.n	80074e0 <__svfiscanf_r+0x2c0>
 8007446:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007448:	2b02      	cmp	r3, #2
 800744a:	dc63      	bgt.n	8007514 <__svfiscanf_r+0x2f4>
 800744c:	466b      	mov	r3, sp
 800744e:	4622      	mov	r2, r4
 8007450:	a941      	add	r1, sp, #260	; 0x104
 8007452:	4630      	mov	r0, r6
 8007454:	f000 f8b0 	bl	80075b8 <_scanf_chars>
 8007458:	2801      	cmp	r0, #1
 800745a:	d077      	beq.n	800754c <__svfiscanf_r+0x32c>
 800745c:	2802      	cmp	r0, #2
 800745e:	f47f af14 	bne.w	800728a <__svfiscanf_r+0x6a>
 8007462:	e7c5      	b.n	80073f0 <__svfiscanf_r+0x1d0>
 8007464:	220a      	movs	r2, #10
 8007466:	e7dd      	b.n	8007424 <__svfiscanf_r+0x204>
 8007468:	2300      	movs	r3, #0
 800746a:	9342      	str	r3, [sp, #264]	; 0x108
 800746c:	2303      	movs	r3, #3
 800746e:	e7de      	b.n	800742e <__svfiscanf_r+0x20e>
 8007470:	2308      	movs	r3, #8
 8007472:	9342      	str	r3, [sp, #264]	; 0x108
 8007474:	2304      	movs	r3, #4
 8007476:	e7da      	b.n	800742e <__svfiscanf_r+0x20e>
 8007478:	4629      	mov	r1, r5
 800747a:	4640      	mov	r0, r8
 800747c:	f000 fa8c 	bl	8007998 <__sccl>
 8007480:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007486:	9341      	str	r3, [sp, #260]	; 0x104
 8007488:	4605      	mov	r5, r0
 800748a:	2301      	movs	r3, #1
 800748c:	e7cf      	b.n	800742e <__svfiscanf_r+0x20e>
 800748e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007494:	9341      	str	r3, [sp, #260]	; 0x104
 8007496:	2300      	movs	r3, #0
 8007498:	e7c9      	b.n	800742e <__svfiscanf_r+0x20e>
 800749a:	2302      	movs	r3, #2
 800749c:	e7c7      	b.n	800742e <__svfiscanf_r+0x20e>
 800749e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80074a0:	06c3      	lsls	r3, r0, #27
 80074a2:	f53f aef2 	bmi.w	800728a <__svfiscanf_r+0x6a>
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074aa:	1d19      	adds	r1, r3, #4
 80074ac:	9100      	str	r1, [sp, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	07c0      	lsls	r0, r0, #31
 80074b2:	bf4c      	ite	mi
 80074b4:	801a      	strhmi	r2, [r3, #0]
 80074b6:	601a      	strpl	r2, [r3, #0]
 80074b8:	e6e7      	b.n	800728a <__svfiscanf_r+0x6a>
 80074ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074bc:	07d8      	lsls	r0, r3, #31
 80074be:	d405      	bmi.n	80074cc <__svfiscanf_r+0x2ac>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	0599      	lsls	r1, r3, #22
 80074c4:	d402      	bmi.n	80074cc <__svfiscanf_r+0x2ac>
 80074c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c8:	f7ff faa4 	bl	8006a14 <__retarget_lock_release_recursive>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e79b      	b.n	800740a <__svfiscanf_r+0x1ea>
 80074d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074d4:	4621      	mov	r1, r4
 80074d6:	4630      	mov	r0, r6
 80074d8:	4798      	blx	r3
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0ab      	beq.n	8007436 <__svfiscanf_r+0x216>
 80074de:	e787      	b.n	80073f0 <__svfiscanf_r+0x1d0>
 80074e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074e2:	3201      	adds	r2, #1
 80074e4:	9245      	str	r2, [sp, #276]	; 0x114
 80074e6:	6862      	ldr	r2, [r4, #4]
 80074e8:	3a01      	subs	r2, #1
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	6062      	str	r2, [r4, #4]
 80074ee:	dd02      	ble.n	80074f6 <__svfiscanf_r+0x2d6>
 80074f0:	3301      	adds	r3, #1
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	e7a2      	b.n	800743c <__svfiscanf_r+0x21c>
 80074f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074f8:	4621      	mov	r1, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	4798      	blx	r3
 80074fe:	2800      	cmp	r0, #0
 8007500:	d09c      	beq.n	800743c <__svfiscanf_r+0x21c>
 8007502:	e775      	b.n	80073f0 <__svfiscanf_r+0x1d0>
 8007504:	08007d11 	.word	0x08007d11
 8007508:	08007865 	.word	0x08007865
 800750c:	080082e3 	.word	0x080082e3
 8007510:	0800829a 	.word	0x0800829a
 8007514:	2b04      	cmp	r3, #4
 8007516:	dc06      	bgt.n	8007526 <__svfiscanf_r+0x306>
 8007518:	466b      	mov	r3, sp
 800751a:	4622      	mov	r2, r4
 800751c:	a941      	add	r1, sp, #260	; 0x104
 800751e:	4630      	mov	r0, r6
 8007520:	f000 f8a2 	bl	8007668 <_scanf_i>
 8007524:	e798      	b.n	8007458 <__svfiscanf_r+0x238>
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <__svfiscanf_r+0x344>)
 8007528:	2b00      	cmp	r3, #0
 800752a:	f43f aeae 	beq.w	800728a <__svfiscanf_r+0x6a>
 800752e:	466b      	mov	r3, sp
 8007530:	4622      	mov	r2, r4
 8007532:	a941      	add	r1, sp, #260	; 0x104
 8007534:	4630      	mov	r0, r6
 8007536:	f3af 8000 	nop.w
 800753a:	e78d      	b.n	8007458 <__svfiscanf_r+0x238>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	0599      	lsls	r1, r3, #22
 8007540:	f53f af5a 	bmi.w	80073f8 <__svfiscanf_r+0x1d8>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f7ff fa65 	bl	8006a14 <__retarget_lock_release_recursive>
 800754a:	e755      	b.n	80073f8 <__svfiscanf_r+0x1d8>
 800754c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800754e:	07da      	lsls	r2, r3, #31
 8007550:	d405      	bmi.n	800755e <__svfiscanf_r+0x33e>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	059b      	lsls	r3, r3, #22
 8007556:	d402      	bmi.n	800755e <__svfiscanf_r+0x33e>
 8007558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755a:	f7ff fa5b 	bl	8006a14 <__retarget_lock_release_recursive>
 800755e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007560:	e753      	b.n	800740a <__svfiscanf_r+0x1ea>
 8007562:	bf00      	nop
 8007564:	00000000 	.word	0x00000000

08007568 <_vfiscanf_r>:
 8007568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	4605      	mov	r5, r0
 800756e:	b138      	cbz	r0, 8007580 <_vfiscanf_r+0x18>
 8007570:	6981      	ldr	r1, [r0, #24]
 8007572:	b929      	cbnz	r1, 8007580 <_vfiscanf_r+0x18>
 8007574:	e9cd 2300 	strd	r2, r3, [sp]
 8007578:	f7ff f990 	bl	800689c <__sinit>
 800757c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007580:	490a      	ldr	r1, [pc, #40]	; (80075ac <_vfiscanf_r+0x44>)
 8007582:	428c      	cmp	r4, r1
 8007584:	d107      	bne.n	8007596 <_vfiscanf_r+0x2e>
 8007586:	686c      	ldr	r4, [r5, #4]
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	b003      	add	sp, #12
 800758e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007592:	f7ff be45 	b.w	8007220 <__svfiscanf_r>
 8007596:	4906      	ldr	r1, [pc, #24]	; (80075b0 <_vfiscanf_r+0x48>)
 8007598:	428c      	cmp	r4, r1
 800759a:	d101      	bne.n	80075a0 <_vfiscanf_r+0x38>
 800759c:	68ac      	ldr	r4, [r5, #8]
 800759e:	e7f3      	b.n	8007588 <_vfiscanf_r+0x20>
 80075a0:	4904      	ldr	r1, [pc, #16]	; (80075b4 <_vfiscanf_r+0x4c>)
 80075a2:	428c      	cmp	r4, r1
 80075a4:	bf08      	it	eq
 80075a6:	68ec      	ldreq	r4, [r5, #12]
 80075a8:	e7ee      	b.n	8007588 <_vfiscanf_r+0x20>
 80075aa:	bf00      	nop
 80075ac:	08008254 	.word	0x08008254
 80075b0:	08008274 	.word	0x08008274
 80075b4:	08008234 	.word	0x08008234

080075b8 <_scanf_chars>:
 80075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	4615      	mov	r5, r2
 80075be:	688a      	ldr	r2, [r1, #8]
 80075c0:	4680      	mov	r8, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b932      	cbnz	r2, 80075d4 <_scanf_chars+0x1c>
 80075c6:	698a      	ldr	r2, [r1, #24]
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	bf0c      	ite	eq
 80075cc:	2201      	moveq	r2, #1
 80075ce:	f04f 32ff 	movne.w	r2, #4294967295
 80075d2:	608a      	str	r2, [r1, #8]
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007664 <_scanf_chars+0xac>
 80075da:	06d1      	lsls	r1, r2, #27
 80075dc:	bf5f      	itttt	pl
 80075de:	681a      	ldrpl	r2, [r3, #0]
 80075e0:	1d11      	addpl	r1, r2, #4
 80075e2:	6019      	strpl	r1, [r3, #0]
 80075e4:	6816      	ldrpl	r6, [r2, #0]
 80075e6:	2700      	movs	r7, #0
 80075e8:	69a0      	ldr	r0, [r4, #24]
 80075ea:	b188      	cbz	r0, 8007610 <_scanf_chars+0x58>
 80075ec:	2801      	cmp	r0, #1
 80075ee:	d107      	bne.n	8007600 <_scanf_chars+0x48>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	6963      	ldr	r3, [r4, #20]
 80075f6:	5c9b      	ldrb	r3, [r3, r2]
 80075f8:	b953      	cbnz	r3, 8007610 <_scanf_chars+0x58>
 80075fa:	bb27      	cbnz	r7, 8007646 <_scanf_chars+0x8e>
 80075fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007600:	2802      	cmp	r0, #2
 8007602:	d120      	bne.n	8007646 <_scanf_chars+0x8e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f813 3009 	ldrb.w	r3, [r3, r9]
 800760c:	071b      	lsls	r3, r3, #28
 800760e:	d41a      	bmi.n	8007646 <_scanf_chars+0x8e>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	06da      	lsls	r2, r3, #27
 8007614:	bf5e      	ittt	pl
 8007616:	682b      	ldrpl	r3, [r5, #0]
 8007618:	781b      	ldrbpl	r3, [r3, #0]
 800761a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800761e:	682a      	ldr	r2, [r5, #0]
 8007620:	686b      	ldr	r3, [r5, #4]
 8007622:	3201      	adds	r2, #1
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	68a2      	ldr	r2, [r4, #8]
 8007628:	3b01      	subs	r3, #1
 800762a:	3a01      	subs	r2, #1
 800762c:	606b      	str	r3, [r5, #4]
 800762e:	3701      	adds	r7, #1
 8007630:	60a2      	str	r2, [r4, #8]
 8007632:	b142      	cbz	r2, 8007646 <_scanf_chars+0x8e>
 8007634:	2b00      	cmp	r3, #0
 8007636:	dcd7      	bgt.n	80075e8 <_scanf_chars+0x30>
 8007638:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800763c:	4629      	mov	r1, r5
 800763e:	4640      	mov	r0, r8
 8007640:	4798      	blx	r3
 8007642:	2800      	cmp	r0, #0
 8007644:	d0d0      	beq.n	80075e8 <_scanf_chars+0x30>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	f013 0310 	ands.w	r3, r3, #16
 800764c:	d105      	bne.n	800765a <_scanf_chars+0xa2>
 800764e:	68e2      	ldr	r2, [r4, #12]
 8007650:	3201      	adds	r2, #1
 8007652:	60e2      	str	r2, [r4, #12]
 8007654:	69a2      	ldr	r2, [r4, #24]
 8007656:	b102      	cbz	r2, 800765a <_scanf_chars+0xa2>
 8007658:	7033      	strb	r3, [r6, #0]
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	441f      	add	r7, r3
 800765e:	6127      	str	r7, [r4, #16]
 8007660:	2000      	movs	r0, #0
 8007662:	e7cb      	b.n	80075fc <_scanf_chars+0x44>
 8007664:	080082e3 	.word	0x080082e3

08007668 <_scanf_i>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	4698      	mov	r8, r3
 800766e:	4b74      	ldr	r3, [pc, #464]	; (8007840 <_scanf_i+0x1d8>)
 8007670:	460c      	mov	r4, r1
 8007672:	4682      	mov	sl, r0
 8007674:	4616      	mov	r6, r2
 8007676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800767a:	b087      	sub	sp, #28
 800767c:	ab03      	add	r3, sp, #12
 800767e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007682:	4b70      	ldr	r3, [pc, #448]	; (8007844 <_scanf_i+0x1dc>)
 8007684:	69a1      	ldr	r1, [r4, #24]
 8007686:	4a70      	ldr	r2, [pc, #448]	; (8007848 <_scanf_i+0x1e0>)
 8007688:	2903      	cmp	r1, #3
 800768a:	bf18      	it	ne
 800768c:	461a      	movne	r2, r3
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	9201      	str	r2, [sp, #4]
 8007692:	1e5a      	subs	r2, r3, #1
 8007694:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007698:	bf88      	it	hi
 800769a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800769e:	4627      	mov	r7, r4
 80076a0:	bf82      	ittt	hi
 80076a2:	eb03 0905 	addhi.w	r9, r3, r5
 80076a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80076aa:	60a3      	strhi	r3, [r4, #8]
 80076ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80076b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80076b4:	bf98      	it	ls
 80076b6:	f04f 0900 	movls.w	r9, #0
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	463d      	mov	r5, r7
 80076be:	f04f 0b00 	mov.w	fp, #0
 80076c2:	6831      	ldr	r1, [r6, #0]
 80076c4:	ab03      	add	r3, sp, #12
 80076c6:	7809      	ldrb	r1, [r1, #0]
 80076c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f7f8 fe07 	bl	80002e0 <memchr>
 80076d2:	b328      	cbz	r0, 8007720 <_scanf_i+0xb8>
 80076d4:	f1bb 0f01 	cmp.w	fp, #1
 80076d8:	d159      	bne.n	800778e <_scanf_i+0x126>
 80076da:	6862      	ldr	r2, [r4, #4]
 80076dc:	b92a      	cbnz	r2, 80076ea <_scanf_i+0x82>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	2308      	movs	r3, #8
 80076e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	6022      	str	r2, [r4, #0]
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80076f0:	6022      	str	r2, [r4, #0]
 80076f2:	68a2      	ldr	r2, [r4, #8]
 80076f4:	1e51      	subs	r1, r2, #1
 80076f6:	60a1      	str	r1, [r4, #8]
 80076f8:	b192      	cbz	r2, 8007720 <_scanf_i+0xb8>
 80076fa:	6832      	ldr	r2, [r6, #0]
 80076fc:	1c51      	adds	r1, r2, #1
 80076fe:	6031      	str	r1, [r6, #0]
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	f805 2b01 	strb.w	r2, [r5], #1
 8007706:	6872      	ldr	r2, [r6, #4]
 8007708:	3a01      	subs	r2, #1
 800770a:	2a00      	cmp	r2, #0
 800770c:	6072      	str	r2, [r6, #4]
 800770e:	dc07      	bgt.n	8007720 <_scanf_i+0xb8>
 8007710:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007714:	4631      	mov	r1, r6
 8007716:	4650      	mov	r0, sl
 8007718:	4790      	blx	r2
 800771a:	2800      	cmp	r0, #0
 800771c:	f040 8085 	bne.w	800782a <_scanf_i+0x1c2>
 8007720:	f10b 0b01 	add.w	fp, fp, #1
 8007724:	f1bb 0f03 	cmp.w	fp, #3
 8007728:	d1cb      	bne.n	80076c2 <_scanf_i+0x5a>
 800772a:	6863      	ldr	r3, [r4, #4]
 800772c:	b90b      	cbnz	r3, 8007732 <_scanf_i+0xca>
 800772e:	230a      	movs	r3, #10
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6863      	ldr	r3, [r4, #4]
 8007734:	4945      	ldr	r1, [pc, #276]	; (800784c <_scanf_i+0x1e4>)
 8007736:	6960      	ldr	r0, [r4, #20]
 8007738:	1ac9      	subs	r1, r1, r3
 800773a:	f000 f92d 	bl	8007998 <__sccl>
 800773e:	f04f 0b00 	mov.w	fp, #0
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d03d      	beq.n	80077c6 <_scanf_i+0x15e>
 800774a:	6831      	ldr	r1, [r6, #0]
 800774c:	6960      	ldr	r0, [r4, #20]
 800774e:	f891 c000 	ldrb.w	ip, [r1]
 8007752:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007756:	2800      	cmp	r0, #0
 8007758:	d035      	beq.n	80077c6 <_scanf_i+0x15e>
 800775a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800775e:	d124      	bne.n	80077aa <_scanf_i+0x142>
 8007760:	0510      	lsls	r0, r2, #20
 8007762:	d522      	bpl.n	80077aa <_scanf_i+0x142>
 8007764:	f10b 0b01 	add.w	fp, fp, #1
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	d003      	beq.n	8007776 <_scanf_i+0x10e>
 800776e:	3301      	adds	r3, #1
 8007770:	f109 39ff 	add.w	r9, r9, #4294967295
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	6873      	ldr	r3, [r6, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	6073      	str	r3, [r6, #4]
 800777e:	dd1b      	ble.n	80077b8 <_scanf_i+0x150>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	3b01      	subs	r3, #1
 800778a:	60a3      	str	r3, [r4, #8]
 800778c:	e7d9      	b.n	8007742 <_scanf_i+0xda>
 800778e:	f1bb 0f02 	cmp.w	fp, #2
 8007792:	d1ae      	bne.n	80076f2 <_scanf_i+0x8a>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800779a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800779e:	d1bf      	bne.n	8007720 <_scanf_i+0xb8>
 80077a0:	2310      	movs	r3, #16
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a8:	e7a2      	b.n	80076f0 <_scanf_i+0x88>
 80077aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	780b      	ldrb	r3, [r1, #0]
 80077b2:	f805 3b01 	strb.w	r3, [r5], #1
 80077b6:	e7de      	b.n	8007776 <_scanf_i+0x10e>
 80077b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077bc:	4631      	mov	r1, r6
 80077be:	4650      	mov	r0, sl
 80077c0:	4798      	blx	r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0df      	beq.n	8007786 <_scanf_i+0x11e>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	05d9      	lsls	r1, r3, #23
 80077ca:	d50d      	bpl.n	80077e8 <_scanf_i+0x180>
 80077cc:	42bd      	cmp	r5, r7
 80077ce:	d909      	bls.n	80077e4 <_scanf_i+0x17c>
 80077d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077d8:	4632      	mov	r2, r6
 80077da:	4650      	mov	r0, sl
 80077dc:	4798      	blx	r3
 80077de:	f105 39ff 	add.w	r9, r5, #4294967295
 80077e2:	464d      	mov	r5, r9
 80077e4:	42bd      	cmp	r5, r7
 80077e6:	d028      	beq.n	800783a <_scanf_i+0x1d2>
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	f012 0210 	ands.w	r2, r2, #16
 80077ee:	d113      	bne.n	8007818 <_scanf_i+0x1b0>
 80077f0:	702a      	strb	r2, [r5, #0]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	9e01      	ldr	r6, [sp, #4]
 80077f6:	4639      	mov	r1, r7
 80077f8:	4650      	mov	r0, sl
 80077fa:	47b0      	blx	r6
 80077fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	f8c8 2000 	str.w	r2, [r8]
 8007808:	f011 0f20 	tst.w	r1, #32
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	d00f      	beq.n	8007830 <_scanf_i+0x1c8>
 8007810:	6018      	str	r0, [r3, #0]
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	3301      	adds	r3, #1
 8007816:	60e3      	str	r3, [r4, #12]
 8007818:	1bed      	subs	r5, r5, r7
 800781a:	44ab      	add	fp, r5
 800781c:	6925      	ldr	r5, [r4, #16]
 800781e:	445d      	add	r5, fp
 8007820:	6125      	str	r5, [r4, #16]
 8007822:	2000      	movs	r0, #0
 8007824:	b007      	add	sp, #28
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	f04f 0b00 	mov.w	fp, #0
 800782e:	e7ca      	b.n	80077c6 <_scanf_i+0x15e>
 8007830:	07ca      	lsls	r2, r1, #31
 8007832:	bf4c      	ite	mi
 8007834:	8018      	strhmi	r0, [r3, #0]
 8007836:	6018      	strpl	r0, [r3, #0]
 8007838:	e7eb      	b.n	8007812 <_scanf_i+0x1aa>
 800783a:	2001      	movs	r0, #1
 800783c:	e7f2      	b.n	8007824 <_scanf_i+0x1bc>
 800783e:	bf00      	nop
 8007840:	080081e4 	.word	0x080081e4
 8007844:	08007c99 	.word	0x08007c99
 8007848:	08007b9d 	.word	0x08007b9d
 800784c:	080082e0 	.word	0x080082e0

08007850 <lflush>:
 8007850:	8983      	ldrh	r3, [r0, #12]
 8007852:	f003 0309 	and.w	r3, r3, #9
 8007856:	2b09      	cmp	r3, #9
 8007858:	d101      	bne.n	800785e <lflush+0xe>
 800785a:	f7fe bfb5 	b.w	80067c8 <fflush>
 800785e:	2000      	movs	r0, #0
 8007860:	4770      	bx	lr
	...

08007864 <__srefill_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	460c      	mov	r4, r1
 8007868:	4605      	mov	r5, r0
 800786a:	b118      	cbz	r0, 8007874 <__srefill_r+0x10>
 800786c:	6983      	ldr	r3, [r0, #24]
 800786e:	b90b      	cbnz	r3, 8007874 <__srefill_r+0x10>
 8007870:	f7ff f814 	bl	800689c <__sinit>
 8007874:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <__srefill_r+0x100>)
 8007876:	429c      	cmp	r4, r3
 8007878:	d10a      	bne.n	8007890 <__srefill_r+0x2c>
 800787a:	686c      	ldr	r4, [r5, #4]
 800787c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007880:	2300      	movs	r3, #0
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	069e      	lsls	r6, r3, #26
 8007888:	d50c      	bpl.n	80078a4 <__srefill_r+0x40>
 800788a:	f04f 30ff 	mov.w	r0, #4294967295
 800788e:	e066      	b.n	800795e <__srefill_r+0xfa>
 8007890:	4b35      	ldr	r3, [pc, #212]	; (8007968 <__srefill_r+0x104>)
 8007892:	429c      	cmp	r4, r3
 8007894:	d101      	bne.n	800789a <__srefill_r+0x36>
 8007896:	68ac      	ldr	r4, [r5, #8]
 8007898:	e7f0      	b.n	800787c <__srefill_r+0x18>
 800789a:	4b34      	ldr	r3, [pc, #208]	; (800796c <__srefill_r+0x108>)
 800789c:	429c      	cmp	r4, r3
 800789e:	bf08      	it	eq
 80078a0:	68ec      	ldreq	r4, [r5, #12]
 80078a2:	e7eb      	b.n	800787c <__srefill_r+0x18>
 80078a4:	0758      	lsls	r0, r3, #29
 80078a6:	d448      	bmi.n	800793a <__srefill_r+0xd6>
 80078a8:	06d9      	lsls	r1, r3, #27
 80078aa:	d405      	bmi.n	80078b8 <__srefill_r+0x54>
 80078ac:	2309      	movs	r3, #9
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	e7e8      	b.n	800788a <__srefill_r+0x26>
 80078b8:	071a      	lsls	r2, r3, #28
 80078ba:	d50b      	bpl.n	80078d4 <__srefill_r+0x70>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f7fe ff46 	bl	8006750 <_fflush_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1e0      	bne.n	800788a <__srefill_r+0x26>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	60a0      	str	r0, [r4, #8]
 80078cc:	f023 0308 	bic.w	r3, r3, #8
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	61a0      	str	r0, [r4, #24]
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f043 0304 	orr.w	r3, r3, #4
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	b91b      	cbnz	r3, 80078e8 <__srefill_r+0x84>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7ff f8bc 	bl	8006a60 <__smakebuf_r>
 80078e8:	89a6      	ldrh	r6, [r4, #12]
 80078ea:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80078ee:	07b3      	lsls	r3, r6, #30
 80078f0:	d00f      	beq.n	8007912 <__srefill_r+0xae>
 80078f2:	2301      	movs	r3, #1
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <__srefill_r+0x10c>)
 80078f8:	491e      	ldr	r1, [pc, #120]	; (8007974 <__srefill_r+0x110>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	f006 0609 	and.w	r6, r6, #9
 8007900:	f7ff f84a 	bl	8006998 <_fwalk>
 8007904:	2e09      	cmp	r6, #9
 8007906:	81a7      	strh	r7, [r4, #12]
 8007908:	d103      	bne.n	8007912 <__srefill_r+0xae>
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f7fe fe99 	bl	8006644 <__sflush_r>
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007916:	6963      	ldr	r3, [r4, #20]
 8007918:	6a21      	ldr	r1, [r4, #32]
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	4628      	mov	r0, r5
 800791e:	47b0      	blx	r6
 8007920:	2800      	cmp	r0, #0
 8007922:	6060      	str	r0, [r4, #4]
 8007924:	dc1c      	bgt.n	8007960 <__srefill_r+0xfc>
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	bf17      	itett	ne
 800792c:	2200      	movne	r2, #0
 800792e:	f043 0320 	orreq.w	r3, r3, #32
 8007932:	6062      	strne	r2, [r4, #4]
 8007934:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8007938:	e7bc      	b.n	80078b4 <__srefill_r+0x50>
 800793a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800793c:	2900      	cmp	r1, #0
 800793e:	d0cd      	beq.n	80078dc <__srefill_r+0x78>
 8007940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007944:	4299      	cmp	r1, r3
 8007946:	d002      	beq.n	800794e <__srefill_r+0xea>
 8007948:	4628      	mov	r0, r5
 800794a:	f7ff f8d1 	bl	8006af0 <_free_r>
 800794e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	2000      	movs	r0, #0
 8007954:	6360      	str	r0, [r4, #52]	; 0x34
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0c0      	beq.n	80078dc <__srefill_r+0x78>
 800795a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	2000      	movs	r0, #0
 8007962:	e7fc      	b.n	800795e <__srefill_r+0xfa>
 8007964:	08008254 	.word	0x08008254
 8007968:	08008274 	.word	0x08008274
 800796c:	08008234 	.word	0x08008234
 8007970:	08008230 	.word	0x08008230
 8007974:	08007851 	.word	0x08007851

08007978 <_sbrk_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d06      	ldr	r5, [pc, #24]	; (8007994 <_sbrk_r+0x1c>)
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7f9 fb62 	bl	800104c <_sbrk>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_sbrk_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_sbrk_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	240006d4 	.word	0x240006d4

08007998 <__sccl>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	780b      	ldrb	r3, [r1, #0]
 800799c:	4604      	mov	r4, r0
 800799e:	2b5e      	cmp	r3, #94	; 0x5e
 80079a0:	bf0b      	itete	eq
 80079a2:	784b      	ldrbeq	r3, [r1, #1]
 80079a4:	1c48      	addne	r0, r1, #1
 80079a6:	1c88      	addeq	r0, r1, #2
 80079a8:	2200      	movne	r2, #0
 80079aa:	bf08      	it	eq
 80079ac:	2201      	moveq	r2, #1
 80079ae:	1e61      	subs	r1, r4, #1
 80079b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80079b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80079b8:	42a9      	cmp	r1, r5
 80079ba:	d1fb      	bne.n	80079b4 <__sccl+0x1c>
 80079bc:	b90b      	cbnz	r3, 80079c2 <__sccl+0x2a>
 80079be:	3801      	subs	r0, #1
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	f082 0101 	eor.w	r1, r2, #1
 80079c6:	54e1      	strb	r1, [r4, r3]
 80079c8:	1c42      	adds	r2, r0, #1
 80079ca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80079ce:	2d2d      	cmp	r5, #45	; 0x2d
 80079d0:	f102 36ff 	add.w	r6, r2, #4294967295
 80079d4:	4610      	mov	r0, r2
 80079d6:	d006      	beq.n	80079e6 <__sccl+0x4e>
 80079d8:	2d5d      	cmp	r5, #93	; 0x5d
 80079da:	d0f1      	beq.n	80079c0 <__sccl+0x28>
 80079dc:	b90d      	cbnz	r5, 80079e2 <__sccl+0x4a>
 80079de:	4630      	mov	r0, r6
 80079e0:	e7ee      	b.n	80079c0 <__sccl+0x28>
 80079e2:	462b      	mov	r3, r5
 80079e4:	e7ef      	b.n	80079c6 <__sccl+0x2e>
 80079e6:	7816      	ldrb	r6, [r2, #0]
 80079e8:	2e5d      	cmp	r6, #93	; 0x5d
 80079ea:	d0fa      	beq.n	80079e2 <__sccl+0x4a>
 80079ec:	42b3      	cmp	r3, r6
 80079ee:	dcf8      	bgt.n	80079e2 <__sccl+0x4a>
 80079f0:	4618      	mov	r0, r3
 80079f2:	3001      	adds	r0, #1
 80079f4:	4286      	cmp	r6, r0
 80079f6:	5421      	strb	r1, [r4, r0]
 80079f8:	dcfb      	bgt.n	80079f2 <__sccl+0x5a>
 80079fa:	43d8      	mvns	r0, r3
 80079fc:	4430      	add	r0, r6
 80079fe:	1c5d      	adds	r5, r3, #1
 8007a00:	42b3      	cmp	r3, r6
 8007a02:	bfa8      	it	ge
 8007a04:	2000      	movge	r0, #0
 8007a06:	182b      	adds	r3, r5, r0
 8007a08:	3202      	adds	r2, #2
 8007a0a:	e7de      	b.n	80079ca <__sccl+0x32>

08007a0c <__sread>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	f000 fb6a 	bl	80080ec <_read_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	bfab      	itete	ge
 8007a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a20:	181b      	addge	r3, r3, r0
 8007a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a26:	bfac      	ite	ge
 8007a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a2a:	81a3      	strhlt	r3, [r4, #12]
 8007a2c:	bd10      	pop	{r4, pc}

08007a2e <__swrite>:
 8007a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	461f      	mov	r7, r3
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	05db      	lsls	r3, r3, #23
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	d505      	bpl.n	8007a4c <__swrite+0x1e>
 8007a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a44:	2302      	movs	r3, #2
 8007a46:	2200      	movs	r2, #0
 8007a48:	f000 fafe 	bl	8008048 <_lseek_r>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	4632      	mov	r2, r6
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	f000 ba3f 	b.w	8007ee4 <_write_r>

08007a66 <__sseek>:
 8007a66:	b510      	push	{r4, lr}
 8007a68:	460c      	mov	r4, r1
 8007a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6e:	f000 faeb 	bl	8008048 <_lseek_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	bf15      	itete	ne
 8007a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a82:	81a3      	strheq	r3, [r4, #12]
 8007a84:	bf18      	it	ne
 8007a86:	81a3      	strhne	r3, [r4, #12]
 8007a88:	bd10      	pop	{r4, pc}

08007a8a <__sclose>:
 8007a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8e:	f000 baa9 	b.w	8007fe4 <_close_r>
	...

08007a94 <_strtol_l.isra.0>:
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9a:	d001      	beq.n	8007aa0 <_strtol_l.isra.0+0xc>
 8007a9c:	2b24      	cmp	r3, #36	; 0x24
 8007a9e:	d906      	bls.n	8007aae <_strtol_l.isra.0+0x1a>
 8007aa0:	f7fe fca8 	bl	80063f4 <__errno>
 8007aa4:	2316      	movs	r3, #22
 8007aa6:	6003      	str	r3, [r0, #0]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	4f3a      	ldr	r7, [pc, #232]	; (8007b98 <_strtol_l.isra.0+0x104>)
 8007ab0:	468e      	mov	lr, r1
 8007ab2:	4676      	mov	r6, lr
 8007ab4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ab8:	5de5      	ldrb	r5, [r4, r7]
 8007aba:	f015 0508 	ands.w	r5, r5, #8
 8007abe:	d1f8      	bne.n	8007ab2 <_strtol_l.isra.0+0x1e>
 8007ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ac2:	d134      	bne.n	8007b2e <_strtol_l.isra.0+0x9a>
 8007ac4:	f89e 4000 	ldrb.w	r4, [lr]
 8007ac8:	f04f 0801 	mov.w	r8, #1
 8007acc:	f106 0e02 	add.w	lr, r6, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d05c      	beq.n	8007b8e <_strtol_l.isra.0+0xfa>
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d10c      	bne.n	8007af2 <_strtol_l.isra.0+0x5e>
 8007ad8:	2c30      	cmp	r4, #48	; 0x30
 8007ada:	d10a      	bne.n	8007af2 <_strtol_l.isra.0+0x5e>
 8007adc:	f89e 4000 	ldrb.w	r4, [lr]
 8007ae0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007ae4:	2c58      	cmp	r4, #88	; 0x58
 8007ae6:	d14d      	bne.n	8007b84 <_strtol_l.isra.0+0xf0>
 8007ae8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007aec:	2310      	movs	r3, #16
 8007aee:	f10e 0e02 	add.w	lr, lr, #2
 8007af2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007af6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007afa:	2600      	movs	r6, #0
 8007afc:	fbbc f9f3 	udiv	r9, ip, r3
 8007b00:	4635      	mov	r5, r6
 8007b02:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b06:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b0a:	2f09      	cmp	r7, #9
 8007b0c:	d818      	bhi.n	8007b40 <_strtol_l.isra.0+0xac>
 8007b0e:	463c      	mov	r4, r7
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	dd24      	ble.n	8007b5e <_strtol_l.isra.0+0xca>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	db1f      	blt.n	8007b58 <_strtol_l.isra.0+0xc4>
 8007b18:	45a9      	cmp	r9, r5
 8007b1a:	d31d      	bcc.n	8007b58 <_strtol_l.isra.0+0xc4>
 8007b1c:	d101      	bne.n	8007b22 <_strtol_l.isra.0+0x8e>
 8007b1e:	45a2      	cmp	sl, r4
 8007b20:	db1a      	blt.n	8007b58 <_strtol_l.isra.0+0xc4>
 8007b22:	fb05 4503 	mla	r5, r5, r3, r4
 8007b26:	2601      	movs	r6, #1
 8007b28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007b2c:	e7eb      	b.n	8007b06 <_strtol_l.isra.0+0x72>
 8007b2e:	2c2b      	cmp	r4, #43	; 0x2b
 8007b30:	bf08      	it	eq
 8007b32:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007b36:	46a8      	mov	r8, r5
 8007b38:	bf08      	it	eq
 8007b3a:	f106 0e02 	addeq.w	lr, r6, #2
 8007b3e:	e7c7      	b.n	8007ad0 <_strtol_l.isra.0+0x3c>
 8007b40:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007b44:	2f19      	cmp	r7, #25
 8007b46:	d801      	bhi.n	8007b4c <_strtol_l.isra.0+0xb8>
 8007b48:	3c37      	subs	r4, #55	; 0x37
 8007b4a:	e7e1      	b.n	8007b10 <_strtol_l.isra.0+0x7c>
 8007b4c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007b50:	2f19      	cmp	r7, #25
 8007b52:	d804      	bhi.n	8007b5e <_strtol_l.isra.0+0xca>
 8007b54:	3c57      	subs	r4, #87	; 0x57
 8007b56:	e7db      	b.n	8007b10 <_strtol_l.isra.0+0x7c>
 8007b58:	f04f 36ff 	mov.w	r6, #4294967295
 8007b5c:	e7e4      	b.n	8007b28 <_strtol_l.isra.0+0x94>
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	da05      	bge.n	8007b6e <_strtol_l.isra.0+0xda>
 8007b62:	2322      	movs	r3, #34	; 0x22
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	4665      	mov	r5, ip
 8007b68:	b942      	cbnz	r2, 8007b7c <_strtol_l.isra.0+0xe8>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	e79d      	b.n	8007aaa <_strtol_l.isra.0+0x16>
 8007b6e:	f1b8 0f00 	cmp.w	r8, #0
 8007b72:	d000      	beq.n	8007b76 <_strtol_l.isra.0+0xe2>
 8007b74:	426d      	negs	r5, r5
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d0f7      	beq.n	8007b6a <_strtol_l.isra.0+0xd6>
 8007b7a:	b10e      	cbz	r6, 8007b80 <_strtol_l.isra.0+0xec>
 8007b7c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007b80:	6011      	str	r1, [r2, #0]
 8007b82:	e7f2      	b.n	8007b6a <_strtol_l.isra.0+0xd6>
 8007b84:	2430      	movs	r4, #48	; 0x30
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1b3      	bne.n	8007af2 <_strtol_l.isra.0+0x5e>
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	e7b1      	b.n	8007af2 <_strtol_l.isra.0+0x5e>
 8007b8e:	2c30      	cmp	r4, #48	; 0x30
 8007b90:	d0a4      	beq.n	8007adc <_strtol_l.isra.0+0x48>
 8007b92:	230a      	movs	r3, #10
 8007b94:	e7ad      	b.n	8007af2 <_strtol_l.isra.0+0x5e>
 8007b96:	bf00      	nop
 8007b98:	080082e3 	.word	0x080082e3

08007b9c <_strtol_r>:
 8007b9c:	f7ff bf7a 	b.w	8007a94 <_strtol_l.isra.0>

08007ba0 <_strtoul_l.isra.0>:
 8007ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	4e3b      	ldr	r6, [pc, #236]	; (8007c94 <_strtoul_l.isra.0+0xf4>)
 8007ba6:	4686      	mov	lr, r0
 8007ba8:	468c      	mov	ip, r1
 8007baa:	4660      	mov	r0, ip
 8007bac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007bb0:	5da5      	ldrb	r5, [r4, r6]
 8007bb2:	f015 0508 	ands.w	r5, r5, #8
 8007bb6:	d1f8      	bne.n	8007baa <_strtoul_l.isra.0+0xa>
 8007bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bba:	d134      	bne.n	8007c26 <_strtoul_l.isra.0+0x86>
 8007bbc:	f89c 4000 	ldrb.w	r4, [ip]
 8007bc0:	f04f 0801 	mov.w	r8, #1
 8007bc4:	f100 0c02 	add.w	ip, r0, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05e      	beq.n	8007c8a <_strtoul_l.isra.0+0xea>
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d10c      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007bd0:	2c30      	cmp	r4, #48	; 0x30
 8007bd2:	d10a      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007bd4:	f89c 0000 	ldrb.w	r0, [ip]
 8007bd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bdc:	2858      	cmp	r0, #88	; 0x58
 8007bde:	d14f      	bne.n	8007c80 <_strtoul_l.isra.0+0xe0>
 8007be0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007be4:	2310      	movs	r3, #16
 8007be6:	f10c 0c02 	add.w	ip, ip, #2
 8007bea:	f04f 37ff 	mov.w	r7, #4294967295
 8007bee:	2500      	movs	r5, #0
 8007bf0:	fbb7 f7f3 	udiv	r7, r7, r3
 8007bf4:	fb03 f907 	mul.w	r9, r3, r7
 8007bf8:	ea6f 0909 	mvn.w	r9, r9
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007c02:	2e09      	cmp	r6, #9
 8007c04:	d818      	bhi.n	8007c38 <_strtoul_l.isra.0+0x98>
 8007c06:	4634      	mov	r4, r6
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	dd24      	ble.n	8007c56 <_strtoul_l.isra.0+0xb6>
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	db1f      	blt.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c10:	4287      	cmp	r7, r0
 8007c12:	d31d      	bcc.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c14:	d101      	bne.n	8007c1a <_strtoul_l.isra.0+0x7a>
 8007c16:	45a1      	cmp	r9, r4
 8007c18:	db1a      	blt.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c1a:	fb00 4003 	mla	r0, r0, r3, r4
 8007c1e:	2501      	movs	r5, #1
 8007c20:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007c24:	e7eb      	b.n	8007bfe <_strtoul_l.isra.0+0x5e>
 8007c26:	2c2b      	cmp	r4, #43	; 0x2b
 8007c28:	bf08      	it	eq
 8007c2a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007c2e:	46a8      	mov	r8, r5
 8007c30:	bf08      	it	eq
 8007c32:	f100 0c02 	addeq.w	ip, r0, #2
 8007c36:	e7c7      	b.n	8007bc8 <_strtoul_l.isra.0+0x28>
 8007c38:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c3c:	2e19      	cmp	r6, #25
 8007c3e:	d801      	bhi.n	8007c44 <_strtoul_l.isra.0+0xa4>
 8007c40:	3c37      	subs	r4, #55	; 0x37
 8007c42:	e7e1      	b.n	8007c08 <_strtoul_l.isra.0+0x68>
 8007c44:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c48:	2e19      	cmp	r6, #25
 8007c4a:	d804      	bhi.n	8007c56 <_strtoul_l.isra.0+0xb6>
 8007c4c:	3c57      	subs	r4, #87	; 0x57
 8007c4e:	e7db      	b.n	8007c08 <_strtoul_l.isra.0+0x68>
 8007c50:	f04f 35ff 	mov.w	r5, #4294967295
 8007c54:	e7e4      	b.n	8007c20 <_strtoul_l.isra.0+0x80>
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	da07      	bge.n	8007c6a <_strtoul_l.isra.0+0xca>
 8007c5a:	2322      	movs	r3, #34	; 0x22
 8007c5c:	f8ce 3000 	str.w	r3, [lr]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b942      	cbnz	r2, 8007c78 <_strtoul_l.isra.0+0xd8>
 8007c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	d000      	beq.n	8007c72 <_strtoul_l.isra.0+0xd2>
 8007c70:	4240      	negs	r0, r0
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d0f7      	beq.n	8007c66 <_strtoul_l.isra.0+0xc6>
 8007c76:	b10d      	cbz	r5, 8007c7c <_strtoul_l.isra.0+0xdc>
 8007c78:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	e7f2      	b.n	8007c66 <_strtoul_l.isra.0+0xc6>
 8007c80:	2430      	movs	r4, #48	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1b1      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c86:	2308      	movs	r3, #8
 8007c88:	e7af      	b.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c8a:	2c30      	cmp	r4, #48	; 0x30
 8007c8c:	d0a2      	beq.n	8007bd4 <_strtoul_l.isra.0+0x34>
 8007c8e:	230a      	movs	r3, #10
 8007c90:	e7ab      	b.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c92:	bf00      	nop
 8007c94:	080082e3 	.word	0x080082e3

08007c98 <_strtoul_r>:
 8007c98:	f7ff bf82 	b.w	8007ba0 <_strtoul_l.isra.0>

08007c9c <__submore>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d11d      	bne.n	8007ce8 <__submore+0x4c>
 8007cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cb0:	f7fe ff6e 	bl	8006b90 <_malloc_r>
 8007cb4:	b918      	cbnz	r0, 8007cbe <__submore+0x22>
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007cce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007cd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007cde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007ce2:	6020      	str	r0, [r4, #0]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e7e8      	b.n	8007cba <__submore+0x1e>
 8007ce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007cea:	0077      	lsls	r7, r6, #1
 8007cec:	463a      	mov	r2, r7
 8007cee:	f000 f9d7 	bl	80080a0 <_realloc_r>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d0de      	beq.n	8007cb6 <__submore+0x1a>
 8007cf8:	eb00 0806 	add.w	r8, r0, r6
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4632      	mov	r2, r6
 8007d00:	4640      	mov	r0, r8
 8007d02:	f000 f9b3 	bl	800806c <memcpy>
 8007d06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007d0a:	f8c4 8000 	str.w	r8, [r4]
 8007d0e:	e7e9      	b.n	8007ce4 <__submore+0x48>

08007d10 <_ungetc_r>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	4614      	mov	r4, r2
 8007d14:	1c4a      	adds	r2, r1, #1
 8007d16:	4606      	mov	r6, r0
 8007d18:	460d      	mov	r5, r1
 8007d1a:	d103      	bne.n	8007d24 <_ungetc_r+0x14>
 8007d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007d20:	4628      	mov	r0, r5
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	b118      	cbz	r0, 8007d2e <_ungetc_r+0x1e>
 8007d26:	6983      	ldr	r3, [r0, #24]
 8007d28:	b90b      	cbnz	r3, 8007d2e <_ungetc_r+0x1e>
 8007d2a:	f7fe fdb7 	bl	800689c <__sinit>
 8007d2e:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <_ungetc_r+0x124>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d11d      	bne.n	8007d70 <_ungetc_r+0x60>
 8007d34:	6874      	ldr	r4, [r6, #4]
 8007d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d38:	07db      	lsls	r3, r3, #31
 8007d3a:	d405      	bmi.n	8007d48 <_ungetc_r+0x38>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	0598      	lsls	r0, r3, #22
 8007d40:	d402      	bmi.n	8007d48 <_ungetc_r+0x38>
 8007d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d44:	f7fe fe65 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8007d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4c:	f023 0320 	bic.w	r3, r3, #32
 8007d50:	0759      	lsls	r1, r3, #29
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	d42d      	bmi.n	8007db4 <_ungetc_r+0xa4>
 8007d58:	06d3      	lsls	r3, r2, #27
 8007d5a:	d413      	bmi.n	8007d84 <_ungetc_r+0x74>
 8007d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d5e:	07dd      	lsls	r5, r3, #31
 8007d60:	d4dc      	bmi.n	8007d1c <_ungetc_r+0xc>
 8007d62:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007d66:	d1d9      	bne.n	8007d1c <_ungetc_r+0xc>
 8007d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6a:	f7fe fe53 	bl	8006a14 <__retarget_lock_release_recursive>
 8007d6e:	e7d5      	b.n	8007d1c <_ungetc_r+0xc>
 8007d70:	4b31      	ldr	r3, [pc, #196]	; (8007e38 <_ungetc_r+0x128>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <_ungetc_r+0x6a>
 8007d76:	68b4      	ldr	r4, [r6, #8]
 8007d78:	e7dd      	b.n	8007d36 <_ungetc_r+0x26>
 8007d7a:	4b30      	ldr	r3, [pc, #192]	; (8007e3c <_ungetc_r+0x12c>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68f4      	ldreq	r4, [r6, #12]
 8007d82:	e7d8      	b.n	8007d36 <_ungetc_r+0x26>
 8007d84:	0710      	lsls	r0, r2, #28
 8007d86:	d511      	bpl.n	8007dac <_ungetc_r+0x9c>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7fe fce0 	bl	8006750 <_fflush_r>
 8007d90:	b130      	cbz	r0, 8007da0 <_ungetc_r+0x90>
 8007d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d94:	07d9      	lsls	r1, r3, #31
 8007d96:	d4c1      	bmi.n	8007d1c <_ungetc_r+0xc>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007d9e:	e7e2      	b.n	8007d66 <_ungetc_r+0x56>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	60a0      	str	r0, [r4, #8]
 8007da4:	f023 0308 	bic.w	r3, r3, #8
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	61a0      	str	r0, [r4, #24]
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f043 0304 	orr.w	r3, r3, #4
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007db6:	6862      	ldr	r2, [r4, #4]
 8007db8:	b2ed      	uxtb	r5, r5
 8007dba:	b1d3      	cbz	r3, 8007df2 <_ungetc_r+0xe2>
 8007dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	dc05      	bgt.n	8007dce <_ungetc_r+0xbe>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ff69 	bl	8007c9c <__submore>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d1e1      	bne.n	8007d92 <_ungetc_r+0x82>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	1e5a      	subs	r2, r3, #1
 8007dd2:	6022      	str	r2, [r4, #0]
 8007dd4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de0:	07da      	lsls	r2, r3, #31
 8007de2:	d49d      	bmi.n	8007d20 <_ungetc_r+0x10>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	059b      	lsls	r3, r3, #22
 8007de8:	d49a      	bmi.n	8007d20 <_ungetc_r+0x10>
 8007dea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dec:	f7fe fe12 	bl	8006a14 <__retarget_lock_release_recursive>
 8007df0:	e796      	b.n	8007d20 <_ungetc_r+0x10>
 8007df2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007df4:	6920      	ldr	r0, [r4, #16]
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	f001 0101 	and.w	r1, r1, #1
 8007dfc:	b160      	cbz	r0, 8007e18 <_ungetc_r+0x108>
 8007dfe:	4298      	cmp	r0, r3
 8007e00:	d20a      	bcs.n	8007e18 <_ungetc_r+0x108>
 8007e02:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8007e06:	42a8      	cmp	r0, r5
 8007e08:	d106      	bne.n	8007e18 <_ungetc_r+0x108>
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	6062      	str	r2, [r4, #4]
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d184      	bne.n	8007d20 <_ungetc_r+0x10>
 8007e16:	e7e5      	b.n	8007de4 <_ungetc_r+0xd4>
 8007e18:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e20:	6363      	str	r3, [r4, #52]	; 0x34
 8007e22:	2303      	movs	r3, #3
 8007e24:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e26:	4623      	mov	r3, r4
 8007e28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6063      	str	r3, [r4, #4]
 8007e32:	e7ee      	b.n	8007e12 <_ungetc_r+0x102>
 8007e34:	08008254 	.word	0x08008254
 8007e38:	08008274 	.word	0x08008274
 8007e3c:	08008234 	.word	0x08008234

08007e40 <__swbuf_r>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	460e      	mov	r6, r1
 8007e44:	4614      	mov	r4, r2
 8007e46:	4605      	mov	r5, r0
 8007e48:	b118      	cbz	r0, 8007e52 <__swbuf_r+0x12>
 8007e4a:	6983      	ldr	r3, [r0, #24]
 8007e4c:	b90b      	cbnz	r3, 8007e52 <__swbuf_r+0x12>
 8007e4e:	f7fe fd25 	bl	800689c <__sinit>
 8007e52:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <__swbuf_r+0x98>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d12b      	bne.n	8007eb0 <__swbuf_r+0x70>
 8007e58:	686c      	ldr	r4, [r5, #4]
 8007e5a:	69a3      	ldr	r3, [r4, #24]
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	071a      	lsls	r2, r3, #28
 8007e62:	d52f      	bpl.n	8007ec4 <__swbuf_r+0x84>
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	b36b      	cbz	r3, 8007ec4 <__swbuf_r+0x84>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	6820      	ldr	r0, [r4, #0]
 8007e6c:	1ac0      	subs	r0, r0, r3
 8007e6e:	6963      	ldr	r3, [r4, #20]
 8007e70:	b2f6      	uxtb	r6, r6
 8007e72:	4283      	cmp	r3, r0
 8007e74:	4637      	mov	r7, r6
 8007e76:	dc04      	bgt.n	8007e82 <__swbuf_r+0x42>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7fe fc68 	bl	8006750 <_fflush_r>
 8007e80:	bb30      	cbnz	r0, 8007ed0 <__swbuf_r+0x90>
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	6022      	str	r2, [r4, #0]
 8007e8e:	701e      	strb	r6, [r3, #0]
 8007e90:	6963      	ldr	r3, [r4, #20]
 8007e92:	3001      	adds	r0, #1
 8007e94:	4283      	cmp	r3, r0
 8007e96:	d004      	beq.n	8007ea2 <__swbuf_r+0x62>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d506      	bpl.n	8007eac <__swbuf_r+0x6c>
 8007e9e:	2e0a      	cmp	r6, #10
 8007ea0:	d104      	bne.n	8007eac <__swbuf_r+0x6c>
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f7fe fc53 	bl	8006750 <_fflush_r>
 8007eaa:	b988      	cbnz	r0, 8007ed0 <__swbuf_r+0x90>
 8007eac:	4638      	mov	r0, r7
 8007eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <__swbuf_r+0x9c>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d101      	bne.n	8007eba <__swbuf_r+0x7a>
 8007eb6:	68ac      	ldr	r4, [r5, #8]
 8007eb8:	e7cf      	b.n	8007e5a <__swbuf_r+0x1a>
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <__swbuf_r+0xa0>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	bf08      	it	eq
 8007ec0:	68ec      	ldreq	r4, [r5, #12]
 8007ec2:	e7ca      	b.n	8007e5a <__swbuf_r+0x1a>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 f81e 	bl	8007f08 <__swsetup_r>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d0cb      	beq.n	8007e68 <__swbuf_r+0x28>
 8007ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ed4:	e7ea      	b.n	8007eac <__swbuf_r+0x6c>
 8007ed6:	bf00      	nop
 8007ed8:	08008254 	.word	0x08008254
 8007edc:	08008274 	.word	0x08008274
 8007ee0:	08008234 	.word	0x08008234

08007ee4 <_write_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	; (8007f04 <_write_r+0x20>)
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	602a      	str	r2, [r5, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7f9 f859 	bl	8000faa <_write>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_write_r+0x1e>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_write_r+0x1e>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	240006d4 	.word	0x240006d4

08007f08 <__swsetup_r>:
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <__swsetup_r+0xcc>)
 8007f0a:	b570      	push	{r4, r5, r6, lr}
 8007f0c:	681d      	ldr	r5, [r3, #0]
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460c      	mov	r4, r1
 8007f12:	b125      	cbz	r5, 8007f1e <__swsetup_r+0x16>
 8007f14:	69ab      	ldr	r3, [r5, #24]
 8007f16:	b913      	cbnz	r3, 8007f1e <__swsetup_r+0x16>
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f7fe fcbf 	bl	800689c <__sinit>
 8007f1e:	4b2e      	ldr	r3, [pc, #184]	; (8007fd8 <__swsetup_r+0xd0>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d10f      	bne.n	8007f44 <__swsetup_r+0x3c>
 8007f24:	686c      	ldr	r4, [r5, #4]
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f2c:	0719      	lsls	r1, r3, #28
 8007f2e:	d42c      	bmi.n	8007f8a <__swsetup_r+0x82>
 8007f30:	06dd      	lsls	r5, r3, #27
 8007f32:	d411      	bmi.n	8007f58 <__swsetup_r+0x50>
 8007f34:	2309      	movs	r3, #9
 8007f36:	6033      	str	r3, [r6, #0]
 8007f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f42:	e03e      	b.n	8007fc2 <__swsetup_r+0xba>
 8007f44:	4b25      	ldr	r3, [pc, #148]	; (8007fdc <__swsetup_r+0xd4>)
 8007f46:	429c      	cmp	r4, r3
 8007f48:	d101      	bne.n	8007f4e <__swsetup_r+0x46>
 8007f4a:	68ac      	ldr	r4, [r5, #8]
 8007f4c:	e7eb      	b.n	8007f26 <__swsetup_r+0x1e>
 8007f4e:	4b24      	ldr	r3, [pc, #144]	; (8007fe0 <__swsetup_r+0xd8>)
 8007f50:	429c      	cmp	r4, r3
 8007f52:	bf08      	it	eq
 8007f54:	68ec      	ldreq	r4, [r5, #12]
 8007f56:	e7e6      	b.n	8007f26 <__swsetup_r+0x1e>
 8007f58:	0758      	lsls	r0, r3, #29
 8007f5a:	d512      	bpl.n	8007f82 <__swsetup_r+0x7a>
 8007f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f5e:	b141      	cbz	r1, 8007f72 <__swsetup_r+0x6a>
 8007f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f64:	4299      	cmp	r1, r3
 8007f66:	d002      	beq.n	8007f6e <__swsetup_r+0x66>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7fe fdc1 	bl	8006af0 <_free_r>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6363      	str	r3, [r4, #52]	; 0x34
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6063      	str	r3, [r4, #4]
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f043 0308 	orr.w	r3, r3, #8
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	b94b      	cbnz	r3, 8007fa2 <__swsetup_r+0x9a>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f98:	d003      	beq.n	8007fa2 <__swsetup_r+0x9a>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7fe fd5f 	bl	8006a60 <__smakebuf_r>
 8007fa2:	89a0      	ldrh	r0, [r4, #12]
 8007fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa8:	f010 0301 	ands.w	r3, r0, #1
 8007fac:	d00a      	beq.n	8007fc4 <__swsetup_r+0xbc>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6963      	ldr	r3, [r4, #20]
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	61a3      	str	r3, [r4, #24]
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	b943      	cbnz	r3, 8007fce <__swsetup_r+0xc6>
 8007fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fc0:	d1ba      	bne.n	8007f38 <__swsetup_r+0x30>
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	0781      	lsls	r1, r0, #30
 8007fc6:	bf58      	it	pl
 8007fc8:	6963      	ldrpl	r3, [r4, #20]
 8007fca:	60a3      	str	r3, [r4, #8]
 8007fcc:	e7f4      	b.n	8007fb8 <__swsetup_r+0xb0>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e7f7      	b.n	8007fc2 <__swsetup_r+0xba>
 8007fd2:	bf00      	nop
 8007fd4:	2400001c 	.word	0x2400001c
 8007fd8:	08008254 	.word	0x08008254
 8007fdc:	08008274 	.word	0x08008274
 8007fe0:	08008234 	.word	0x08008234

08007fe4 <_close_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	; (8008000 <_close_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7f8 fff7 	bl	8000fe2 <_close>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_close_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_close_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	240006d4 	.word	0x240006d4

08008004 <_fstat_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d07      	ldr	r5, [pc, #28]	; (8008024 <_fstat_r+0x20>)
 8008008:	2300      	movs	r3, #0
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f7f8 fff2 	bl	8000ffa <_fstat>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d102      	bne.n	8008020 <_fstat_r+0x1c>
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	b103      	cbz	r3, 8008020 <_fstat_r+0x1c>
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	240006d4 	.word	0x240006d4

08008028 <_isatty_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_isatty_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f8 fff1 	bl	800101a <_isatty>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_isatty_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_isatty_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	240006d4 	.word	0x240006d4

08008048 <_lseek_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	; (8008068 <_lseek_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7f8 ffea 	bl	8001030 <_lseek>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_lseek_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_lseek_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	240006d4 	.word	0x240006d4

0800806c <memcpy>:
 800806c:	440a      	add	r2, r1
 800806e:	4291      	cmp	r1, r2
 8008070:	f100 33ff 	add.w	r3, r0, #4294967295
 8008074:	d100      	bne.n	8008078 <memcpy+0xc>
 8008076:	4770      	bx	lr
 8008078:	b510      	push	{r4, lr}
 800807a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008082:	4291      	cmp	r1, r2
 8008084:	d1f9      	bne.n	800807a <memcpy+0xe>
 8008086:	bd10      	pop	{r4, pc}

08008088 <__malloc_lock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_lock+0x8>)
 800808a:	f7fe bcc2 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	240006cc 	.word	0x240006cc

08008094 <__malloc_unlock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_unlock+0x8>)
 8008096:	f7fe bcbd 	b.w	8006a14 <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	240006cc 	.word	0x240006cc

080080a0 <_realloc_r>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	4607      	mov	r7, r0
 80080a4:	4614      	mov	r4, r2
 80080a6:	460e      	mov	r6, r1
 80080a8:	b921      	cbnz	r1, 80080b4 <_realloc_r+0x14>
 80080aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080ae:	4611      	mov	r1, r2
 80080b0:	f7fe bd6e 	b.w	8006b90 <_malloc_r>
 80080b4:	b922      	cbnz	r2, 80080c0 <_realloc_r+0x20>
 80080b6:	f7fe fd1b 	bl	8006af0 <_free_r>
 80080ba:	4625      	mov	r5, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c0:	f000 f826 	bl	8008110 <_malloc_usable_size_r>
 80080c4:	42a0      	cmp	r0, r4
 80080c6:	d20f      	bcs.n	80080e8 <_realloc_r+0x48>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4638      	mov	r0, r7
 80080cc:	f7fe fd60 	bl	8006b90 <_malloc_r>
 80080d0:	4605      	mov	r5, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d0f2      	beq.n	80080bc <_realloc_r+0x1c>
 80080d6:	4631      	mov	r1, r6
 80080d8:	4622      	mov	r2, r4
 80080da:	f7ff ffc7 	bl	800806c <memcpy>
 80080de:	4631      	mov	r1, r6
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7fe fd05 	bl	8006af0 <_free_r>
 80080e6:	e7e9      	b.n	80080bc <_realloc_r+0x1c>
 80080e8:	4635      	mov	r5, r6
 80080ea:	e7e7      	b.n	80080bc <_realloc_r+0x1c>

080080ec <_read_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	; (800810c <_read_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7f8 ff38 	bl	8000f70 <_read>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_read_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_read_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	240006d4 	.word	0x240006d4

08008110 <_malloc_usable_size_r>:
 8008110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008114:	1f18      	subs	r0, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfbc      	itt	lt
 800811a:	580b      	ldrlt	r3, [r1, r0]
 800811c:	18c0      	addlt	r0, r0, r3
 800811e:	4770      	bx	lr

08008120 <_init>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr

0800812c <_fini>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr
