
UART_Example_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  080080d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000080  08008158  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000e0  080081b8  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  24000140  08008218  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006d8  08008218  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224f6  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a2  00000000  00000000  00042664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00045e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00046e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003844d  00000000  00000000  00047d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013541  00000000  00000000  000801cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f370  00000000  00000000  0009370e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f2a7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  001f2ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e04 	.word	0x08007e04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08007e04 	.word	0x08007e04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fe23 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f833 	bl	80006ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fda8 	bl	80011dc <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f978 	bl	8000980 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f8ac 	bl	80007ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f8f6 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 f940 	bl	800091c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <main+0x5c>)
 800069e:	f005 fd4d 	bl	800613c <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0x60>)
 80006a4:	f005 fd4a 	bl	800613c <iprintf>

  char str[20];

  setvbuf(stdin, NULL, _IONBF, 0);
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <main+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6858      	ldr	r0, [r3, #4]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2202      	movs	r2, #2
 80006b2:	2100      	movs	r1, #0
 80006b4:	f005 fd72 	bl	800619c <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("\n\r Enter your name:\n\r");
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <main+0x68>)
 80006ba:	f005 fd3f 	bl	800613c <iprintf>

	scanf("%s",str);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x6c>)
 80006c4:	f005 fd52 	bl	800616c <iscanf>

	printf("\n\r Your name is: %s \n\r",str);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <main+0x70>)
 80006ce:	f005 fd35 	bl	800613c <iprintf>
	printf("\n\r Enter your name:\n\r");
 80006d2:	e7f1      	b.n	80006b8 <main+0x40>
 80006d4:	08007e1c 	.word	0x08007e1c
 80006d8:	08007e6c 	.word	0x08007e6c
 80006dc:	2400001c 	.word	0x2400001c
 80006e0:	08007e94 	.word	0x08007e94
 80006e4:	08007eac 	.word	0x08007eac
 80006e8:	08007eb0 	.word	0x08007eb0

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fd16 	bl	800612c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2220      	movs	r2, #32
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fd10 	bl	800612c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800070c:	2002      	movs	r0, #2
 800070e:	f001 febd 	bl	800248c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <SystemClock_Config+0xf8>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <SystemClock_Config+0xf8>)
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <SystemClock_Config+0xf8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <SystemClock_Config+0xfc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <SystemClock_Config+0xfc>)
 8000736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemClock_Config+0xfc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000748:	bf00      	nop
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xfc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000756:	d1f8      	bne.n	800074a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000758:	2303      	movs	r3, #3
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000762:	2301      	movs	r3, #1
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2340      	movs	r3, #64	; 0x40
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000776:	2318      	movs	r3, #24
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000786:	230c      	movs	r3, #12
 8000788:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	2300      	movs	r3, #0
 800078c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fec2 	bl	8002520 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007a2:	f000 f9c9 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	233f      	movs	r3, #63	; 0x3f
 80007a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fab8 	bl	8002d40 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007d6:	f000 f9af 	bl	8000b38 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3770      	adds	r7, #112	; 0x70
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58000400 	.word	0x58000400
 80007e8:	58024800 	.word	0x58024800

080007ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ETH_Init+0x80>)
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_ETH_Init+0x84>)
 80007f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ETH_Init+0x88>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ETH_Init+0x88>)
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_ETH_Init+0x88>)
 8000804:	22e1      	movs	r2, #225	; 0xe1
 8000806:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_ETH_Init+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ETH_Init+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ETH_Init+0x88>)
 8000816:	2200      	movs	r2, #0
 8000818:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ETH_Init+0x80>)
 800081c:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_ETH_Init+0x88>)
 800081e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_ETH_Init+0x80>)
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ETH_Init+0x80>)
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_ETH_Init+0x8c>)
 800082a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ETH_Init+0x80>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_ETH_Init+0x90>)
 8000830:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_ETH_Init+0x80>)
 8000834:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000838:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_ETH_Init+0x80>)
 800083c:	f000 fefe 	bl	800163c <HAL_ETH_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000846:	f000 f977 	bl	8000b38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800084a:	2234      	movs	r2, #52	; 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_ETH_Init+0x94>)
 8000850:	f005 fc6c 	bl	800612c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_ETH_Init+0x94>)
 8000856:	2221      	movs	r2, #33	; 0x21
 8000858:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_ETH_Init+0x94>)
 800085c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000860:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_ETH_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000608 	.word	0x24000608
 8000870:	40028000 	.word	0x40028000
 8000874:	2400015c 	.word	0x2400015c
 8000878:	240000e0 	.word	0x240000e0
 800087c:	24000080 	.word	0x24000080
 8000880:	24000690 	.word	0x24000690

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART3_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008ce:	f004 f925 	bl	8004b1c <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f92e 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008e0:	f005 f872 	bl	80059c8 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f925 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008f2:	f005 f8a7 	bl	8005a44 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f91c 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000902:	f005 f828 	bl	8005956 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f914 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000170 	.word	0x24000170
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000924:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2209      	movs	r2, #9
 800092a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2202      	movs	r2, #2
 8000930:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093a:	2202      	movs	r2, #2
 800093c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000940:	2201      	movs	r2, #1
 8000942:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000952:	2201      	movs	r2, #1
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	f001 fc49 	bl	80021fa <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800096e:	f000 f8e3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000200 	.word	0x24000200
 800097c:	40080000 	.word	0x40080000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <MX_GPIO_Init+0x19c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b4:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a58      	ldr	r2, [pc, #352]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a50      	ldr	r2, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b4e      	ldr	r3, [pc, #312]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x19c>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a6e:	482c      	ldr	r0, [pc, #176]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000a70:	f001 fbaa 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	482a      	ldr	r0, [pc, #168]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000a7c:	f001 fba4 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	4828      	ldr	r0, [pc, #160]	; (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a86:	f001 fb9f 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4823      	ldr	r0, [pc, #140]	; (8000b2c <MX_GPIO_Init+0x1ac>)
 8000aa0:	f001 f9e2 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000abe:	f001 f9d3 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000adc:	f001 f9c4 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_GPIO_Init+0x1b0>)
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x1b4>)
 8000af4:	f001 f9b8 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x1a8>)
 8000b10:	f001 f9aa 	bl	8001e68 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58020400 	.word	0x58020400
 8000b24:	58020c00 	.word	0x58020c00
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	58020800 	.word	0x58020800
 8000b30:	11110000 	.word	0x11110000
 8000b34:	58021800 	.word	0x58021800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x30>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	58024400 	.word	0x58024400

08000b78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_ETH_MspInit+0x184>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	f040 80ab 	bne.w	8000cf2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b9c:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba2:	4a57      	ldr	r2, [pc, #348]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bac:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	623b      	str	r3, [r7, #32]
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc0:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bca:	4b4d      	ldr	r3, [pc, #308]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bd8:	4b49      	ldr	r3, [pc, #292]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bde:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000be8:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a39      	ldr	r2, [pc, #228]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a2a      	ldr	r2, [pc, #168]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c6e:	2332      	movs	r3, #50	; 0x32
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	481e      	ldr	r0, [pc, #120]	; (8000d04 <HAL_ETH_MspInit+0x18c>)
 8000c8a:	f001 f8ed 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c8e:	2386      	movs	r3, #134	; 0x86
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4817      	ldr	r0, [pc, #92]	; (8000d08 <HAL_ETH_MspInit+0x190>)
 8000caa:	f001 f8dd 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <HAL_ETH_MspInit+0x194>)
 8000ccc:	f001 f8cc 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <HAL_ETH_MspInit+0x198>)
 8000cee:	f001 f8bb 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	; 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40028000 	.word	0x40028000
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58020800 	.word	0x58020800
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	58020400 	.word	0x58020400
 8000d10:	58021800 	.word	0x58021800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0b8      	sub	sp, #224	; 0xe0
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	22bc      	movs	r2, #188	; 0xbc
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 f9f9 	bl	800612c <memset>
  if(huart->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <HAL_UART_MspInit+0xc0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d142      	bne.n	8000dca <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 fb80 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5e:	f7ff feeb 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0xc8>)
 8000dc6:	f001 f84f 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	37e0      	adds	r7, #224	; 0xe0
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020c00 	.word	0x58020c00

08000de0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0b8      	sub	sp, #224	; 0xe0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22bc      	movs	r2, #188	; 0xbc
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 f993 	bl	800612c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <HAL_PCD_MspInit+0xe8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d156      	bne.n	8000ebe <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fb18 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e2e:	f7ff fe83 	bl	8000b38 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e32:	f001 fb65 	bl	8002500 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <HAL_PCD_MspInit+0xf0>)
 8000e7c:	f000 fff4 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <HAL_PCD_MspInit+0xf0>)
 8000e9c:	f000 ffe4 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_PCD_MspInit+0xec>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	37e0      	adds	r7, #224	; 0xe0
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40080000 	.word	0x40080000
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020000 	.word	0x58020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 fa44 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00a      	b.n	8000f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f3a:	f3af 8000 	nop.w
 8000f3e:	4601      	mov	r1, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	b2ca      	uxtb	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf0      	blt.n	8000f3a <_read+0x12>
	}

return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e009      	b.n	8000f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf1      	blt.n	8000f74 <_write+0x12>
	}
	return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_close>:

int _close(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_isatty>:

int _isatty(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f005 f850 	bl	80060d8 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	24080000 	.word	0x24080000
 8001064:	00000400 	.word	0x00000400
 8001068:	24000164 	.word	0x24000164
 800106c:	240006d8 	.word	0x240006d8

08001070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <SystemInit+0xec>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a38      	ldr	r2, [pc, #224]	; (800115c <SystemInit+0xec>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001084:	4b36      	ldr	r3, [pc, #216]	; (8001160 <SystemInit+0xf0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	2b06      	cmp	r3, #6
 800108e:	d807      	bhi.n	80010a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <SystemInit+0xf0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 030f 	bic.w	r3, r3, #15
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <SystemInit+0xf0>)
 800109a:	f043 0307 	orr.w	r3, r3, #7
 800109e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <SystemInit+0xf4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <SystemInit+0xf4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <SystemInit+0xf4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <SystemInit+0xf4>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	492b      	ldr	r1, [pc, #172]	; (8001164 <SystemInit+0xf4>)
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <SystemInit+0xf8>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemInit+0xf0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SystemInit+0xf0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 030f 	bic.w	r3, r3, #15
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <SystemInit+0xf0>)
 80010d4:	f043 0307 	orr.w	r3, r3, #7
 80010d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemInit+0xf4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <SystemInit+0xf4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemInit+0xf4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <SystemInit+0xf4>)
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <SystemInit+0xfc>)
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SystemInit+0xf4>)
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <SystemInit+0x100>)
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <SystemInit+0xf4>)
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <SystemInit+0x104>)
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <SystemInit+0xf4>)
 8001100:	2200      	movs	r2, #0
 8001102:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <SystemInit+0xf4>)
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <SystemInit+0x104>)
 8001108:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <SystemInit+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <SystemInit+0xf4>)
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <SystemInit+0x104>)
 8001114:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <SystemInit+0xf4>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <SystemInit+0xf4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <SystemInit+0xf4>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <SystemInit+0xf4>)
 800112a:	2200      	movs	r2, #0
 800112c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <SystemInit+0x108>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <SystemInit+0x10c>)
 8001134:	4013      	ands	r3, r2
 8001136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800113a:	d202      	bcs.n	8001142 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <SystemInit+0x110>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <SystemInit+0x114>)
 8001144:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001148:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SystemInit+0xec>)
 800114c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001150:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	52002000 	.word	0x52002000
 8001164:	58024400 	.word	0x58024400
 8001168:	eaf6ed7f 	.word	0xeaf6ed7f
 800116c:	02020200 	.word	0x02020200
 8001170:	01ff0000 	.word	0x01ff0000
 8001174:	01010280 	.word	0x01010280
 8001178:	5c001000 	.word	0x5c001000
 800117c:	ffff0000 	.word	0xffff0000
 8001180:	51008108 	.word	0x51008108
 8001184:	52004000 	.word	0x52004000

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff ff70 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	; (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f004 ff95 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fa5d 	bl	8000678 <main>
  bx  lr
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c8:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80011cc:	080080d8 	.word	0x080080d8
  ldr r2, =_sbss
 80011d0:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 80011d4:	240006d8 	.word	0x240006d8

080011d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC3_IRQHandler>
	...

080011dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <BSP_LED_Init+0x28>
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d006      	beq.n	8001204 <BSP_LED_Init+0x28>
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d003      	beq.n	8001204 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011fc:	f06f 0301 	mvn.w	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e055      	b.n	80012b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <BSP_LED_Init+0xe0>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <BSP_LED_Init+0xe0>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <BSP_LED_Init+0xe0>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	e021      	b.n	800126e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10f      	bne.n	8001250 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <BSP_LED_Init+0xe0>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <BSP_LED_Init+0xe0>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <BSP_LED_Init+0xe0>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	e00e      	b.n	800126e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <BSP_LED_Init+0xe0>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <BSP_LED_Init+0xe0>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <BSP_LED_Init+0xe0>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <BSP_LED_Init+0xe4>)
 8001272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001276:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <BSP_LED_Init+0xe8>)
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	f107 0218 	add.w	r2, r7, #24
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fde8 	bl	8001e68 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <BSP_LED_Init+0xe8>)
 800129c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <BSP_LED_Init+0xe4>)
 80012a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	f000 ff8c 	bl	80021c8 <HAL_GPIO_WritePin>
  }

  return ret;
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58024400 	.word	0x58024400
 80012c0:	08007ee4 	.word	0x08007ee4
 80012c4:	24000008 	.word	0x24000008

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f000 f982 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012d4:	f001 feea 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	4913      	ldr	r1, [pc, #76]	; (8001334 <HAL_Init+0x6c>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_Init+0x68>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_Init+0x6c>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_Init+0x70>)
 800130a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_Init+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f814 	bl	8001340 <HAL_InitTick>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e002      	b.n	8001328 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001322:	f7ff fc0f 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024400 	.word	0x58024400
 8001334:	08007ed4 	.word	0x08007ed4
 8001338:	24000004 	.word	0x24000004
 800133c:	24000000 	.word	0x24000000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_InitTick+0x60>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e021      	b.n	8001398 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_InitTick+0x64>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_InitTick+0x60>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f959 	bl	8001622 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f931 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x68>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24000018 	.word	0x24000018
 80013a4:	24000000 	.word	0x24000000
 80013a8:	24000014 	.word	0x24000014

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	24000018 	.word	0x24000018
 80013d0:	240006c4 	.word	0x240006c4

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	240006c4 	.word	0x240006c4

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24000018 	.word	0x24000018

08001434 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetREVID+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1b      	lsrs	r3, r3, #16
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	5c001000 	.word	0x5c001000

0800144c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800145c:	4904      	ldr	r1, [pc, #16]	; (8001470 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	58000400 	.word	0x58000400

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	05fa0000 	.word	0x05fa0000

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff47 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015fc:	f7ff ff5e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7ff ff90 	bl	800152c <NVIC_EncodePriority>
 800160c:	4602      	mov	r2, r0
 800160e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff5f 	bl	80014d8 <__NVIC_SetPriority>
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffb2 	bl	8001594 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0c6      	b.n	80017dc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fa8e 	bl	8000b78 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2223      	movs	r2, #35	; 0x23
 8001660:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b60      	ldr	r3, [pc, #384]	; (80017e4 <HAL_ETH_Init+0x1a8>)
 8001664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001668:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_ETH_Init+0x1a8>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_ETH_Init+0x1a8>)
 8001674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fedf 	bl	800144c <HAL_SYSCFG_ETHInterfaceSelect>
 800168e:	e003      	b.n	8001698 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001690:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001694:	f7ff feda 	bl	800144c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff fe90 	bl	80013d4 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016b6:	e00f      	b.n	80016d8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80016b8:	f7ff fe8c 	bl	80013d4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016c6:	d907      	bls.n	80016d8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	22e0      	movs	r2, #224	; 0xe0
 80016d2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e081      	b.n	80017dc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1e6      	bne.n	80016b8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fac0 	bl	8001c70 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016f0:	f001 fe56 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <HAL_ETH_Init+0x1ac>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	0c9a      	lsrs	r2, r3, #18
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3a01      	subs	r2, #1
 8001704:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fa13 	bl	8001b34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001724:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001728:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	22e0      	movs	r2, #224	; 0xe0
 8001740:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e04a      	b.n	80017dc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f241 1308 	movw	r3, #4360	; 0x1108
 800174e:	4413      	add	r3, r2
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_ETH_Init+0x1b0>)
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6952      	ldr	r2, [r2, #20]
 800175a:	0052      	lsls	r2, r2, #1
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	431a      	orrs	r2, r3
 8001762:	f241 1308 	movw	r3, #4360	; 0x1108
 8001766:	440b      	add	r3, r1
 8001768:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fad8 	bl	8001d20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fb1c 	bl	8001dae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	3305      	adds	r3, #5
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021a      	lsls	r2, r3, #8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	061a      	lsls	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	3302      	adds	r3, #2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	3301      	adds	r3, #1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2210      	movs	r2, #16
 80017d2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2210      	movs	r2, #16
 80017d8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	58024400 	.word	0x58024400
 80017e8:	431bde83 	.word	0x431bde83
 80017ec:	ffff8001 	.word	0xffff8001

080017f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001802:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800180a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001812:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	7b5b      	ldrb	r3, [r3, #13]
 8001818:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800181a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	7b9b      	ldrb	r3, [r3, #14]
 8001820:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001822:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800182a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	7c12      	ldrb	r2, [r2, #16]
 8001830:	2a00      	cmp	r2, #0
 8001832:	d102      	bne.n	800183a <ETH_SetMACConfig+0x4a>
 8001834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x4c>
 800183a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800183c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	7c52      	ldrb	r2, [r2, #17]
 8001842:	2a00      	cmp	r2, #0
 8001844:	d102      	bne.n	800184c <ETH_SetMACConfig+0x5c>
 8001846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184a:	e000      	b.n	800184e <ETH_SetMACConfig+0x5e>
 800184c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800184e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7c9b      	ldrb	r3, [r3, #18]
 8001854:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001856:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800185c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001862:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7f1b      	ldrb	r3, [r3, #28]
 8001868:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800186a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7f5b      	ldrb	r3, [r3, #29]
 8001870:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001872:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	7f92      	ldrb	r2, [r2, #30]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d102      	bne.n	8001882 <ETH_SetMACConfig+0x92>
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x94>
 8001882:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001884:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7fdb      	ldrb	r3, [r3, #31]
 800188a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800188c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d102      	bne.n	800189e <ETH_SetMACConfig+0xae>
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0xb0>
 800189e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018a0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018a6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ae:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80018b0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <ETH_SetMACConfig+0x22c>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80018dc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80018e6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018ee:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80018f0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d102      	bne.n	8001902 <ETH_SetMACConfig+0x112>
 80018fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001900:	e000      	b.n	8001904 <ETH_SetMACConfig+0x114>
 8001902:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001904:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <ETH_SetMACConfig+0x230>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001928:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <ETH_SetMACConfig+0x234>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	430b      	orrs	r3, r1
 8001944:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800194c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001952:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800195a:	2a00      	cmp	r2, #0
 800195c:	d101      	bne.n	8001962 <ETH_SetMACConfig+0x172>
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	e000      	b.n	8001964 <ETH_SetMACConfig+0x174>
 8001962:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001964:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001976:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800198c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001994:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a2:	f023 0103 	bic.w	r1, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d101      	bne.n	80019de <ETH_SetMACConfig+0x1ee>
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x1f0>
 80019de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80019e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80019f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	00048083 	.word	0x00048083
 8001a20:	c0f88000 	.word	0xc0f88000
 8001a24:	fffffef0 	.word	0xfffffef0

08001a28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <ETH_SetDMAConfig+0xf8>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001a4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a6e:	4413      	add	r3, r2
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <ETH_SetDMAConfig+0xfc>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6811      	ldr	r1, [r2, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a82:	440b      	add	r3, r1
 8001a84:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7b5b      	ldrb	r3, [r3, #13]
 8001a8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <ETH_SetDMAConfig+0x100>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6811      	ldr	r1, [r2, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001aae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7d1b      	ldrb	r3, [r3, #20]
 8001ab8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7f5b      	ldrb	r3, [r3, #29]
 8001ac0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ace:	4413      	add	r3, r2
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <ETH_SetDMAConfig+0x104>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ae2:	440b      	add	r3, r1
 8001ae4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7f1b      	ldrb	r3, [r3, #28]
 8001aea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001afc:	4413      	add	r3, r2
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <ETH_SetDMAConfig+0x108>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6811      	ldr	r1, [r2, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b10:	440b      	add	r3, r1
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	ffff87fd 	.word	0xffff87fd
 8001b24:	ffff2ffe 	.word	0xffff2ffe
 8001b28:	fffec000 	.word	0xfffec000
 8001b2c:	ffc0efef 	.word	0xffc0efef
 8001b30:	7fc0ffff 	.word	0x7fc0ffff

08001b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0a4      	sub	sp, #144	; 0x90
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b42:	2300      	movs	r3, #0
 8001b44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fde6 	bl	80017f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001c54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fee1 	bl	8001a28 <ETH_SetDMAConfig>
}
 8001c66:	bf00      	nop
 8001c68:	3790      	adds	r7, #144	; 0x90
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c8a:	f001 fb89 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8001c8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d908      	bls.n	8001caa <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d804      	bhi.n	8001caa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e027      	b.n	8001cfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d908      	bls.n	8001cc4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d204      	bcs.n	8001cc4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e01a      	b.n	8001cfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d303      	bcc.n	8001cd4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d911      	bls.n	8001cf8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d908      	bls.n	8001cee <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d804      	bhi.n	8001cee <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e005      	b.n	8001cfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e000      	b.n	8001cfa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001cf8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	01312cff 	.word	0x01312cff
 8001d10:	02160ebf 	.word	0x02160ebf
 8001d14:	03938700 	.word	0x03938700
 8001d18:	05f5e0ff 	.word	0x05f5e0ff
 8001d1c:	08f0d17f 	.word	0x08f0d17f

08001d20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e01d      	b.n	8001d6a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	3206      	adds	r2, #6
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d9de      	bls.n	8001d2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f241 132c 	movw	r3, #4396	; 0x112c
 8001d7e:	4413      	add	r3, r2
 8001d80:	2203      	movs	r2, #3
 8001d82:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f241 1314 	movw	r3, #4372	; 0x1114
 8001d90:	4413      	add	r3, r2
 8001d92:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e024      	b.n	8001e06 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6919      	ldr	r1, [r3, #16]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3310      	adds	r3, #16
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d9d7      	bls.n	8001dbc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f241 1330 	movw	r3, #4400	; 0x1130
 8001e32:	4413      	add	r3, r2
 8001e34:	2203      	movs	r2, #3
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f241 131c 	movw	r3, #4380	; 0x111c
 8001e44:	4413      	add	r3, r2
 8001e46:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f241 1328 	movw	r3, #4392	; 0x1128
 8001e58:	4413      	add	r3, r2
 8001e5a:	6019      	str	r1, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_GPIO_Init+0x234>)
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7a:	e194      	b.n	80021a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8186 	beq.w	80021a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_GPIO_Init+0x4c>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea8:	2b11      	cmp	r3, #17
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0xee>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	69b9      	ldr	r1, [r7, #24]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80e0 	beq.w	80021a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x238>)
 8001fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe6:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <HAL_GPIO_Init+0x238>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_GPIO_Init+0x238>)
 8001ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_GPIO_Init+0x23c>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <HAL_GPIO_Init+0x240>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d052      	beq.n	80020d0 <HAL_GPIO_Init+0x268>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_GPIO_Init+0x244>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_GPIO_Init+0x22e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_GPIO_Init+0x248>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x22a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_GPIO_Init+0x24c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x226>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_GPIO_Init+0x250>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x222>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_GPIO_Init+0x254>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x21e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_GPIO_Init+0x258>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x21a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_GPIO_Init+0x25c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x216>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_GPIO_Init+0x260>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x212>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_GPIO_Init+0x264>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x20e>
 8002072:	2309      	movs	r3, #9
 8002074:	e02d      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 8002076:	230a      	movs	r3, #10
 8002078:	e02b      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 800207a:	2308      	movs	r3, #8
 800207c:	e029      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 800207e:	2307      	movs	r3, #7
 8002080:	e027      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 8002082:	2306      	movs	r3, #6
 8002084:	e025      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 8002086:	2305      	movs	r3, #5
 8002088:	e023      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 800208a:	2304      	movs	r3, #4
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 800208e:	2303      	movs	r3, #3
 8002090:	e01f      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 8002092:	2302      	movs	r3, #2
 8002094:	e01d      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 8002096:	2301      	movs	r3, #1
 8002098:	e01b      	b.n	80020d2 <HAL_GPIO_Init+0x26a>
 800209a:	bf00      	nop
 800209c:	58000080 	.word	0x58000080
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58000400 	.word	0x58000400
 80020a8:	58020000 	.word	0x58020000
 80020ac:	58020400 	.word	0x58020400
 80020b0:	58020800 	.word	0x58020800
 80020b4:	58020c00 	.word	0x58020c00
 80020b8:	58021000 	.word	0x58021000
 80020bc:	58021400 	.word	0x58021400
 80020c0:	58021800 	.word	0x58021800
 80020c4:	58021c00 	.word	0x58021c00
 80020c8:	58022000 	.word	0x58022000
 80020cc:	58022400 	.word	0x58022400
 80020d0:	2300      	movs	r3, #0
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4093      	lsls	r3, r2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e2:	4938      	ldr	r1, [pc, #224]	; (80021c4 <HAL_GPIO_Init+0x35c>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800216a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f ae63 	bne.w	8001e7c <HAL_GPIO_Init+0x14>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3724      	adds	r7, #36	; 0x24
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	58000400 	.word	0x58000400

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fc:	b08f      	sub	sp, #60	; 0x3c
 80021fe:	af0a      	add	r7, sp, #40	; 0x28
 8002200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e116      	b.n	800243a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fdda 	bl	8000de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fcf4 	bl	8005c38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	687e      	ldr	r6, [r7, #4]
 8002258:	466d      	mov	r5, sp
 800225a:	f106 0410 	add.w	r4, r6, #16
 800225e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226a:	e885 0003 	stmia.w	r5, {r0, r1}
 800226e:	1d33      	adds	r3, r6, #4
 8002270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f003 fc72 	bl	8005b5c <USB_CoreInit>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0d7      	b.n	800243a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f003 fce2 	bl	8005c5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e04a      	b.n	8002332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	333d      	adds	r3, #61	; 0x3d
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	333c      	adds	r3, #60	; 0x3c
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	b298      	uxth	r0, r3
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3342      	adds	r3, #66	; 0x42
 80022d8:	4602      	mov	r2, r0
 80022da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	333f      	adds	r3, #63	; 0x3f
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3344      	adds	r3, #68	; 0x44
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3350      	adds	r3, #80	; 0x50
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d3af      	bcc.n	800229c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e044      	b.n	80023cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3b5      	bcc.n	8002342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	687e      	ldr	r6, [r7, #4]
 80023de:	466d      	mov	r5, sp
 80023e0:	f106 0410 	add.w	r4, r6, #16
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f4:	1d33      	adds	r3, r6, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f003 fc59 	bl	8005cb0 <USB_DevInit>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e014      	b.n	800243a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f80b 	bl	8002444 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fdfb 	bl	800602e <USB_DevDisconnect>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_PCDEx_ActivateLPM+0x44>)
 8002474:	4313      	orrs	r3, r2
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	10000003 	.word	0x10000003

0800248c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_PWREx_ConfigSupply+0x70>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d00a      	beq.n	80024b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_PWREx_ConfigSupply+0x70>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e01f      	b.n	80024f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e01d      	b.n	80024f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_PWREx_ConfigSupply+0x70>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	490f      	ldr	r1, [pc, #60]	; (80024fc <HAL_PWREx_ConfigSupply+0x70>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024c6:	f7fe ff85 	bl	80013d4 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024cc:	e009      	b.n	80024e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ce:	f7fe ff81 	bl	80013d4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024dc:	d901      	bls.n	80024e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e007      	b.n	80024f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_PWREx_ConfigSupply+0x70>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ee:	d1ee      	bne.n	80024ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	58024800 	.word	0x58024800

08002500 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	58024800 	.word	0x58024800

08002520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e3ff      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8087 	beq.w	800264e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002540:	4b99      	ldr	r3, [pc, #612]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254a:	4b97      	ldr	r3, [pc, #604]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	2b10      	cmp	r3, #16
 8002554:	d007      	beq.n	8002566 <HAL_RCC_OscConfig+0x46>
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2b18      	cmp	r3, #24
 800255a:	d110      	bne.n	800257e <HAL_RCC_OscConfig+0x5e>
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d10b      	bne.n	800257e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002566:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d06c      	beq.n	800264c <HAL_RCC_OscConfig+0x12c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d168      	bne.n	800264c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3d9      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x76>
 8002588:	4b87      	ldr	r3, [pc, #540]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a86      	ldr	r2, [pc, #536]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e02e      	b.n	80025f4 <HAL_RCC_OscConfig+0xd4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a81      	ldr	r2, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b7f      	ldr	r3, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e01d      	b.n	80025f4 <HAL_RCC_OscConfig+0xd4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0xbc>
 80025c2:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a78      	ldr	r2, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0xd4>
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a71      	ldr	r2, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe feea 	bl	80013d4 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fee6 	bl	80013d4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e38d      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002616:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0xe4>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fed6 	bl	80013d4 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fed2 	bl	80013d4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e379      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x10c>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80ae 	beq.w	80027b8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265c:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002664:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002666:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_RCC_OscConfig+0x162>
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b18      	cmp	r3, #24
 8002676:	d13a      	bne.n	80026ee <HAL_RCC_OscConfig+0x1ce>
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d135      	bne.n	80026ee <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x17a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e34b      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	f7fe fecb 	bl	8001434 <HAL_GetREVID>
 800269e:	4603      	mov	r3, r0
 80026a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d817      	bhi.n	80026d8 <HAL_RCC_OscConfig+0x1b8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d108      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1a2>
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026b8:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c0:	e07a      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	031b      	lsls	r3, r3, #12
 80026d0:	4935      	ldr	r1, [pc, #212]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d6:	e06f      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	4930      	ldr	r1, [pc, #192]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	e064      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d045      	beq.n	8002782 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0219 	bic.w	r2, r3, #25
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4929      	ldr	r1, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe fe64 	bl	80013d4 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002710:	f7fe fe60 	bl	80013d4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e307      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	f7fe fe81 	bl	8001434 <HAL_GetREVID>
 8002732:	4603      	mov	r3, r0
 8002734:	f241 0203 	movw	r2, #4099	; 0x1003
 8002738:	4293      	cmp	r3, r2
 800273a:	d817      	bhi.n	800276c <HAL_RCC_OscConfig+0x24c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d108      	bne.n	8002756 <HAL_RCC_OscConfig+0x236>
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800274c:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002752:	6053      	str	r3, [r2, #4]
 8002754:	e030      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	031b      	lsls	r3, r3, #12
 8002764:	4910      	ldr	r1, [pc, #64]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
 800276a:	e025      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	490b      	ldr	r1, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e01a      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fe21 	bl	80013d4 <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fe1d 	bl	80013d4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d903      	bls.n	80027ac <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e2c4      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
 80027a8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ac:	4ba4      	ldr	r3, [pc, #656]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a9 	beq.w	8002918 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027d0:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d007      	beq.n	80027ec <HAL_RCC_OscConfig+0x2cc>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b18      	cmp	r3, #24
 80027e0:	d13a      	bne.n	8002858 <HAL_RCC_OscConfig+0x338>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d135      	bne.n	8002858 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ec:	4b94      	ldr	r3, [pc, #592]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x2e4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e296      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002804:	f7fe fe16 	bl	8001434 <HAL_GetREVID>
 8002808:	4603      	mov	r3, r0
 800280a:	f241 0203 	movw	r2, #4099	; 0x1003
 800280e:	4293      	cmp	r3, r2
 8002810:	d817      	bhi.n	8002842 <HAL_RCC_OscConfig+0x322>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	2b20      	cmp	r3, #32
 8002818:	d108      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002822:	4a87      	ldr	r2, [pc, #540]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002828:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800282a:	e075      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	4981      	ldr	r1, [pc, #516]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002840:	e06a      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	497b      	ldr	r1, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002856:	e05f      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d042      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002860:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a76      	ldr	r2, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fdb2 	bl	80013d4 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002874:	f7fe fdae 	bl	80013d4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e255      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002892:	f7fe fdcf 	bl	8001434 <HAL_GetREVID>
 8002896:	4603      	mov	r3, r0
 8002898:	f241 0203 	movw	r2, #4099	; 0x1003
 800289c:	4293      	cmp	r3, r2
 800289e:	d817      	bhi.n	80028d0 <HAL_RCC_OscConfig+0x3b0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d108      	bne.n	80028ba <HAL_RCC_OscConfig+0x39a>
 80028a8:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028b0:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	6053      	str	r3, [r2, #4]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	495d      	ldr	r1, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
 80028ce:	e023      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4958      	ldr	r1, [pc, #352]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028e6:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80028ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fd6f 	bl	80013d4 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd6b 	bl	80013d4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e212      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d036      	beq.n	8002992 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fd4c 	bl	80013d4 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fd48 	bl	80013d4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1ef      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x420>
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fd32 	bl	80013d4 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fd2e 	bl	80013d4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1d5      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80029ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fd0f 	bl	80013d4 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029ba:	f7fe fd0b 	bl	80013d4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1b2      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x49a>
 80029d8:	e018      	b.n	8002a0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 80029e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fcf5 	bl	80013d4 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029ee:	f7fe fcf1 	bl	80013d4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e198      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_OscConfig+0x520>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8085 	beq.w	8002b24 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_OscConfig+0x524>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x524>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fcd5 	bl	80013d4 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fcd1 	bl	80013d4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d905      	bls.n	8002a48 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e178      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
 8002a40:	58024400 	.word	0x58024400
 8002a44:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a48:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ec      	beq.n	8002a2e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x54a>
 8002a5c:	4b92      	ldr	r3, [pc, #584]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a91      	ldr	r2, [pc, #580]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	e02d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5a6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x56c>
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a8c      	ldr	r2, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	4b8a      	ldr	r3, [pc, #552]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a89      	ldr	r2, [pc, #548]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	e01c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5a6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_OscConfig+0x58e>
 8002a94:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a83      	ldr	r2, [pc, #524]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	4b81      	ldr	r3, [pc, #516]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a80      	ldr	r2, [pc, #512]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	e00b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5a6>
 8002aae:	4b7e      	ldr	r3, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d015      	beq.n	8002afa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe fc81 	bl	80013d4 <HAL_GetTick>
 8002ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fc7d 	bl	80013d4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e122      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aec:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ee      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x5b6>
 8002af8:	e014      	b.n	8002b24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fc6b 	bl	80013d4 <HAL_GetTick>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fc67 	bl	80013d4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e10c      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ee      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8101 	beq.w	8002d30 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b36:	2b18      	cmp	r3, #24
 8002b38:	f000 80bc 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	f040 8095 	bne.w	8002c70 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b58      	ldr	r3, [pc, #352]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a57      	ldr	r2, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fc3f 	bl	80013d4 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fc3b 	bl	80013d4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0e2      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7c:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <HAL_RCC_OscConfig+0x78c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	4946      	ldr	r1, [pc, #280]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	628b      	str	r3, [r1, #40]	; 0x28
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bc2:	4939      	ldr	r1, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bc8:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bd4:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCC_OscConfig+0x790>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002be0:	00d2      	lsls	r2, r2, #3
 8002be2:	4931      	ldr	r1, [pc, #196]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f023 020c 	bic.w	r2, r3, #12
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	492c      	ldr	r1, [pc, #176]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f023 0202 	bic.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4928      	ldr	r1, [pc, #160]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fbc4 	bl	80013d4 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fbc0 	bl	80013d4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e067      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x730>
 8002c6e:	e05f      	b.n	8002d30 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fbaa 	bl	80013d4 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fba6 	bl	80013d4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e04d      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x764>
 8002ca2:	e045      	b.n	8002d30 <HAL_RCC_OscConfig+0x810>
 8002ca4:	58024800 	.word	0x58024800
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	fffffc0c 	.word	0xfffffc0c
 8002cb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_RCC_OscConfig+0x81c>)
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_RCC_OscConfig+0x81c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d031      	beq.n	8002d2c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0203 	and.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d12a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d122      	bne.n	8002d2c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d11a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	0a5b      	lsrs	r3, r3, #9
 8002cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d111      	bne.n	8002d2c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d108      	bne.n	8002d2c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0e1b      	lsrs	r3, r3, #24
 8002d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3730      	adds	r7, #48	; 0x30
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	58024400 	.word	0x58024400

08002d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e19c      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b8a      	ldr	r3, [pc, #552]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b87      	ldr	r3, [pc, #540]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 020f 	bic.w	r2, r3, #15
 8002d6a:	4985      	ldr	r1, [pc, #532]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b83      	ldr	r3, [pc, #524]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e184      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d010      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d908      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4975      	ldr	r1, [pc, #468]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	4b70      	ldr	r3, [pc, #448]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d908      	bls.n	8002de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	496a      	ldr	r1, [pc, #424]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	4b64      	ldr	r3, [pc, #400]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d908      	bls.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	495e      	ldr	r1, [pc, #376]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d010      	beq.n	8002e3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d908      	bls.n	8002e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4953      	ldr	r1, [pc, #332]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d908      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f023 020f 	bic.w	r2, r3, #15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4947      	ldr	r1, [pc, #284]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d055      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4940      	ldr	r1, [pc, #256]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e90:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d121      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0f6      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d115      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0ea      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0de      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d6      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f023 0207 	bic.w	r2, r3, #7
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4925      	ldr	r1, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa6f 	bl	80013d4 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efa:	f7fe fa6b 	bl	80013d4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0be      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d1eb      	bne.n	8002efa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f023 020f 	bic.w	r2, r3, #15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	490e      	ldr	r1, [pc, #56]	; (8002f84 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d214      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	4906      	ldr	r1, [pc, #24]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e086      	b.n	800308e <HAL_RCC_ClockConfig+0x34e>
 8002f80:	52002000 	.word	0x52002000
 8002f84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d208      	bcs.n	8002fb6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	4939      	ldr	r1, [pc, #228]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d208      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	492e      	ldr	r1, [pc, #184]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d208      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 800300e:	4313      	orrs	r3, r2
 8003010:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302a:	429a      	cmp	r2, r3
 800302c:	d208      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 800303c:	4313      	orrs	r3, r2
 800303e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003040:	f000 f834 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	4912      	ldr	r1, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x35c>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCC_ClockConfig+0x358>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <HAL_RCC_ClockConfig+0x35c>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x360>)
 8003076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x364>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x368>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe f95c 	bl	8001340 <HAL_InitTick>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400
 800309c:	08007ed4 	.word	0x08007ed4
 80030a0:	24000004 	.word	0x24000004
 80030a4:	24000000 	.word	0x24000000
 80030a8:	24000014 	.word	0x24000014

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b2:	4bb3      	ldr	r3, [pc, #716]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	2b18      	cmp	r3, #24
 80030bc:	f200 8155 	bhi.w	800336a <HAL_RCC_GetSysClockFreq+0x2be>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	0800312d 	.word	0x0800312d
 80030cc:	0800336b 	.word	0x0800336b
 80030d0:	0800336b 	.word	0x0800336b
 80030d4:	0800336b 	.word	0x0800336b
 80030d8:	0800336b 	.word	0x0800336b
 80030dc:	0800336b 	.word	0x0800336b
 80030e0:	0800336b 	.word	0x0800336b
 80030e4:	0800336b 	.word	0x0800336b
 80030e8:	08003153 	.word	0x08003153
 80030ec:	0800336b 	.word	0x0800336b
 80030f0:	0800336b 	.word	0x0800336b
 80030f4:	0800336b 	.word	0x0800336b
 80030f8:	0800336b 	.word	0x0800336b
 80030fc:	0800336b 	.word	0x0800336b
 8003100:	0800336b 	.word	0x0800336b
 8003104:	0800336b 	.word	0x0800336b
 8003108:	08003159 	.word	0x08003159
 800310c:	0800336b 	.word	0x0800336b
 8003110:	0800336b 	.word	0x0800336b
 8003114:	0800336b 	.word	0x0800336b
 8003118:	0800336b 	.word	0x0800336b
 800311c:	0800336b 	.word	0x0800336b
 8003120:	0800336b 	.word	0x0800336b
 8003124:	0800336b 	.word	0x0800336b
 8003128:	0800315f 	.word	0x0800315f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312c:	4b94      	ldr	r3, [pc, #592]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003138:	4b91      	ldr	r3, [pc, #580]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	4a90      	ldr	r2, [pc, #576]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800314a:	e111      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800314c:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800314e:	61bb      	str	r3, [r7, #24]
    break;
 8003150:	e10e      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003152:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003154:	61bb      	str	r3, [r7, #24]
    break;
 8003156:	e10b      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003158:	4b8c      	ldr	r3, [pc, #560]	; (800338c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800315a:	61bb      	str	r3, [r7, #24]
    break;
 800315c:	e108      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800315e:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003168:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003172:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003174:	4b82      	ldr	r3, [pc, #520]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800317e:	4b80      	ldr	r3, [pc, #512]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	08db      	lsrs	r3, r3, #3
 8003184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80e1 	beq.w	8003364 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f000 8083 	beq.w	80032b0 <HAL_RCC_GetSysClockFreq+0x204>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f200 80a1 	bhi.w	80032f4 <HAL_RCC_GetSysClockFreq+0x248>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x114>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d056      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x1c0>
 80031be:	e099      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031c0:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02d      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031cc:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b62      	ldr	r3, [pc, #392]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003226:	e087      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003394 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800326a:	e065      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2ec>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b40      	ldr	r3, [pc, #256]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ae:	e043      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800339c <HAL_RCC_GetSysClockFreq+0x2f0>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f2:	e021      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a02 	vldr	s12, [r7, #8]
 800331a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003336:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	0a5b      	lsrs	r3, r3, #9
 800333e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003342:	3301      	adds	r3, #1
 8003344:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003350:	edd7 6a07 	vldr	s13, [r7, #28]
 8003354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	ee17 3a90 	vmov	r3, s15
 8003360:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003362:	e005      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
    break;
 8003368:	e002      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800336c:	61bb      	str	r3, [r7, #24]
    break;
 800336e:	bf00      	nop
  }

  return sysclockfreq;
 8003370:	69bb      	ldr	r3, [r7, #24]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	58024400 	.word	0x58024400
 8003384:	03d09000 	.word	0x03d09000
 8003388:	003d0900 	.word	0x003d0900
 800338c:	007a1200 	.word	0x007a1200
 8003390:	46000000 	.word	0x46000000
 8003394:	4c742400 	.word	0x4c742400
 8003398:	4a742400 	.word	0x4a742400
 800339c:	4af42400 	.word	0x4af42400

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033a6:	f7ff fe81 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490f      	ldr	r1, [pc, #60]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400
 80033f4:	08007ed4 	.word	0x08007ed4
 80033f8:	24000004 	.word	0x24000004
 80033fc:	24000000 	.word	0x24000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003404:	f7ff ffcc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58024400 	.word	0x58024400
 8003428:	08007ed4 	.word	0x08007ed4

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003430:	f7ff ffb6 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	58024400 	.word	0x58024400
 8003454:	08007ed4 	.word	0x08007ed4

08003458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003460:	2300      	movs	r3, #0
 8003462:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003464:	2300      	movs	r3, #0
 8003466:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03f      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800347c:	d02a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800347e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003482:	d824      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003488:	d018      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800348a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348e:	d81e      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003498:	d007      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349c:	4bab      	ldr	r3, [pc, #684]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4aaa      	ldr	r2, [pc, #680]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034a8:	e015      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2102      	movs	r1, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 f9cf 	bl	8004854 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 fa78 	bl	80049b8 <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034dc:	4b9b      	ldr	r3, [pc, #620]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e8:	4998      	ldr	r1, [pc, #608]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	650b      	str	r3, [r1, #80]	; 0x50
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	2b04      	cmp	r3, #4
 8003506:	d826      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003525 	.word	0x08003525
 8003514:	08003533 	.word	0x08003533
 8003518:	08003545 	.word	0x08003545
 800351c:	0800355d 	.word	0x0800355d
 8003520:	0800355d 	.word	0x0800355d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b89      	ldr	r3, [pc, #548]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a88      	ldr	r2, [pc, #544]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003530:	e015      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f98b 	bl	8004854 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003542:	e00c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fa34 	bl	80049b8 <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003554:	e003      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
      break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800355c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003564:	4b79      	ldr	r3, [pc, #484]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	f023 0207 	bic.w	r2, r3, #7
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	4976      	ldr	r1, [pc, #472]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	650b      	str	r3, [r1, #80]	; 0x50
 8003576:	e001      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	2b00      	cmp	r3, #0
 8003586:	d042      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003590:	d02b      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d825      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003598:	2bc0      	cmp	r3, #192	; 0xc0
 800359a:	d028      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800359c:	2bc0      	cmp	r3, #192	; 0xc0
 800359e:	d821      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d016      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d81d      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d007      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035b0:	e018      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035be:	e017      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f944 	bl	8004854 <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035d0:	e00e      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3324      	adds	r3, #36	; 0x24
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 f9ed 	bl	80049b8 <RCCEx_PLL3_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035e2:	e005      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
      break;
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035f6:	4b55      	ldr	r3, [pc, #340]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	4952      	ldr	r1, [pc, #328]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	650b      	str	r3, [r1, #80]	; 0x50
 8003608:	e001      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d049      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003624:	d030      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003626:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800362a:	d82a      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800362c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003630:	d02c      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003636:	d824      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d018      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d81e      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364c:	d007      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800364e:	e018      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4a3d      	ldr	r2, [pc, #244]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800365c:	e017      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f8f5 	bl	8004854 <RCCEx_PLL2_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800366e:	e00e      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3324      	adds	r3, #36	; 0x24
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f99e 	bl	80049b8 <RCCEx_PLL3_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003680:	e005      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
      break;
 8003686:	e002      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800368c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036a2:	492a      	ldr	r1, [pc, #168]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	658b      	str	r3, [r1, #88]	; 0x58
 80036a8:	e001      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04c      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c4:	d030      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80036c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ca:	d82a      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d0:	d02c      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80036d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d6:	d824      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036dc:	d018      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e2:	d81e      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d007      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036ee:	e018      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036fc:	e017      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f8a5 	bl	8004854 <RCCEx_PLL2_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800370e:	e00e      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f94e 	bl	80049b8 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003720:	e005      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
      break;
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800372c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003742:	4902      	ldr	r1, [pc, #8]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	658b      	str	r3, [r1, #88]	; 0x58
 8003748:	e004      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800374a:	bf00      	nop
 800374c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d032      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	2b30      	cmp	r3, #48	; 0x30
 8003766:	d01c      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003768:	2b30      	cmp	r3, #48	; 0x30
 800376a:	d817      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800376c:	2b20      	cmp	r3, #32
 800376e:	d00c      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d813      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003778:	2b10      	cmp	r3, #16
 800377a:	d10f      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377c:	4baf      	ldr	r3, [pc, #700]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	4aae      	ldr	r2, [pc, #696]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003788:	e00e      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f85f 	bl	8004854 <RCCEx_PLL2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800379a:	e005      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
      break;
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037ae:	4ba3      	ldr	r3, [pc, #652]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	49a0      	ldr	r1, [pc, #640]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037c0:	e001      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d047      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d030      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80037dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e0:	d82a      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e6:	d02c      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80037e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ec:	d824      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d018      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d81e      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003802:	d007      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003804:	e018      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003806:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	4a8c      	ldr	r2, [pc, #560]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003812:	e017      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f81a 	bl	8004854 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003824:	e00e      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 f8c3 	bl	80049b8 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800384a:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	4979      	ldr	r1, [pc, #484]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	650b      	str	r3, [r1, #80]	; 0x50
 800385c:	e001      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d049      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003876:	d02e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387c:	d828      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800387e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003882:	d02a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003888:	d822      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800388a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800388e:	d026      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003890:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003894:	d81c      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389a:	d010      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x466>
 800389c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a0:	d816      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01d      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d111      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ffce 	bl	8004854 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038bc:	e012      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3324      	adds	r3, #36	; 0x24
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f877 	bl	80049b8 <RCCEx_PLL3_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038ce:	e009      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
      break;
 80038d4:	e006      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038d6:	bf00      	nop
 80038d8:	e004      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f6:	4951      	ldr	r1, [pc, #324]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	650b      	str	r3, [r1, #80]	; 0x50
 80038fc:	e001      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d04b      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003918:	d02e      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800391a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391e:	d828      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d02a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392a:	d822      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800392c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003930:	d026      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003936:	d81c      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800393c:	d010      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800393e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003942:	d816      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01d      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394c:	d111      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 ff7d 	bl	8004854 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800395e:	e012      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3324      	adds	r3, #36	; 0x24
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f826 	bl	80049b8 <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003970:	e009      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
      break;
 8003976:	e006      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003978:	bf00      	nop
 800397a:	e004      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800399a:	4928      	ldr	r1, [pc, #160]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	658b      	str	r3, [r1, #88]	; 0x58
 80039a0:	e001      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02f      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ba:	d00e      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x582>
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c0:	d814      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d015      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ca:	d10f      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039d8:	e00c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 ff37 	bl	8004854 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80039f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a0c:	e001      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d033      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d81c      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a67 	.word	0x08003a67
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a4f 	.word	0x08003a4f
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4bb8      	ldr	r3, [pc, #736]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4ab7      	ldr	r2, [pc, #732]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a4c:	e00c      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2102      	movs	r1, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fefd 	bl	8004854 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a5e:	e003      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	75fb      	strb	r3, [r7, #23]
      break;
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a6e:	4bad      	ldr	r3, [pc, #692]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	49aa      	ldr	r1, [pc, #680]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a80:	e001      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8086 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4ba4      	ldr	r3, [pc, #656]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4aa3      	ldr	r2, [pc, #652]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fc98 	bl	80013d4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	e009      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fd fc94 	bl	80013d4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d902      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	75fb      	strb	r3, [r7, #23]
        break;
 8003aba:	e005      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003abc:	4b9a      	ldr	r3, [pc, #616]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d166      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ace:	4b95      	ldr	r3, [pc, #596]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad8:	4053      	eors	r3, r2
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d013      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae2:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aec:	4b8d      	ldr	r3, [pc, #564]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a8c      	ldr	r2, [pc, #560]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af8:	4b8a      	ldr	r3, [pc, #552]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a89      	ldr	r2, [pc, #548]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b04:	4a87      	ldr	r2, [pc, #540]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d115      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd fc5d 	bl	80013d4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1c:	e00b      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fd fc59 	bl	80013d4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d902      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	75fb      	strb	r3, [r7, #23]
            break;
 8003b34:	e005      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ed      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d126      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b58:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b66:	0919      	lsrs	r1, r3, #4
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	496d      	ldr	r1, [pc, #436]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	610b      	str	r3, [r1, #16]
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b74:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4a6a      	ldr	r2, [pc, #424]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b7e:	6113      	str	r3, [r2, #16]
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8e:	4965      	ldr	r1, [pc, #404]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	670b      	str	r3, [r1, #112]	; 0x70
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	75bb      	strb	r3, [r7, #22]
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d07e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb0:	2b28      	cmp	r3, #40	; 0x28
 8003bb2:	d867      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003c8b 	.word	0x08003c8b
 8003bc0:	08003c85 	.word	0x08003c85
 8003bc4:	08003c85 	.word	0x08003c85
 8003bc8:	08003c85 	.word	0x08003c85
 8003bcc:	08003c85 	.word	0x08003c85
 8003bd0:	08003c85 	.word	0x08003c85
 8003bd4:	08003c85 	.word	0x08003c85
 8003bd8:	08003c85 	.word	0x08003c85
 8003bdc:	08003c61 	.word	0x08003c61
 8003be0:	08003c85 	.word	0x08003c85
 8003be4:	08003c85 	.word	0x08003c85
 8003be8:	08003c85 	.word	0x08003c85
 8003bec:	08003c85 	.word	0x08003c85
 8003bf0:	08003c85 	.word	0x08003c85
 8003bf4:	08003c85 	.word	0x08003c85
 8003bf8:	08003c85 	.word	0x08003c85
 8003bfc:	08003c73 	.word	0x08003c73
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003c85 	.word	0x08003c85
 8003c08:	08003c85 	.word	0x08003c85
 8003c0c:	08003c85 	.word	0x08003c85
 8003c10:	08003c85 	.word	0x08003c85
 8003c14:	08003c85 	.word	0x08003c85
 8003c18:	08003c85 	.word	0x08003c85
 8003c1c:	08003c8b 	.word	0x08003c8b
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003c85 	.word	0x08003c85
 8003c28:	08003c85 	.word	0x08003c85
 8003c2c:	08003c85 	.word	0x08003c85
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c85 	.word	0x08003c85
 8003c3c:	08003c8b 	.word	0x08003c8b
 8003c40:	08003c85 	.word	0x08003c85
 8003c44:	08003c85 	.word	0x08003c85
 8003c48:	08003c85 	.word	0x08003c85
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c8b 	.word	0x08003c8b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fdf4 	bl	8004854 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c70:	e00c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3324      	adds	r3, #36	; 0x24
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fe9d 	bl	80049b8 <RCCEx_PLL3_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9e:	4921      	ldr	r1, [pc, #132]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d820      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003d07 	.word	0x08003d07
 8003cc8:	08003cdd 	.word	0x08003cdd
 8003ccc:	08003cef 	.word	0x08003cef
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003d07 	.word	0x08003d07
 8003cd8:	08003d07 	.word	0x08003d07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fdb6 	bl	8004854 <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cec:	e00c      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3324      	adds	r3, #36	; 0x24
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fe5f 	bl	80049b8 <RCCEx_PLL3_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
      break;
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d110      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4902      	ldr	r1, [pc, #8]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	58024800 	.word	0x58024800
 8003d2c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d039      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d820      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d93 	.word	0x08003d93
 8003d54:	08003d69 	.word	0x08003d69
 8003d58:	08003d7b 	.word	0x08003d7b
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd70 	bl	8004854 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d78:	e00c      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3324      	adds	r3, #36	; 0x24
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fe19 	bl	80049b8 <RCCEx_PLL3_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e003      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9a:	4bb7      	ldr	r3, [pc, #732]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	49b3      	ldr	r1, [pc, #716]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	658b      	str	r3, [r1, #88]	; 0x58
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04b      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dca:	d02e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd0:	d828      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d02a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d822      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003de2:	d026      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003de4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003de8:	d81c      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d010      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df4:	d816      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01d      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dfe:	d111      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd24 	bl	8004854 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e10:	e012      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3324      	adds	r3, #36	; 0x24
 8003e16:	2102      	movs	r1, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fdcd 	bl	80049b8 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e22:	e009      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3e:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	498a      	ldr	r1, [pc, #552]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	654b      	str	r3, [r1, #84]	; 0x54
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d04b      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e6e:	d02e      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e74:	d828      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d02a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d822      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e86:	d026      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e8c:	d81c      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e92:	d010      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e98:	d816      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fcd2 	bl	8004854 <RCCEx_PLL2_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003eb4:	e012      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3324      	adds	r3, #36	; 0x24
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fd7b 	bl	80049b8 <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	e006      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e004      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee2:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef0:	4961      	ldr	r1, [pc, #388]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d04b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f12:	d02e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003f14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f18:	d828      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	d02a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	d822      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f2a:	d026      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f30:	d81c      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f36:	d010      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3c:	d816      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f46:	d111      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fc80 	bl	8004854 <RCCEx_PLL2_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f58:	e012      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3324      	adds	r3, #36	; 0x24
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd29 	bl	80049b8 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f70:	e006      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f86:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f94:	4938      	ldr	r1, [pc, #224]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	658b      	str	r3, [r1, #88]	; 0x58
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d10a      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fcfa 	bl	80049b8 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fdc:	4926      	ldr	r1, [pc, #152]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d10a      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3324      	adds	r3, #36	; 0x24
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fcd9 	bl	80049b8 <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004020:	4313      	orrs	r3, r2
 8004022:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d036      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800403a:	d01f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800403c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004040:	d817      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d009      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800404c:	e011      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fbfd 	bl	8004854 <RCCEx_PLL2_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800405e:	e00e      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3324      	adds	r3, #36	; 0x24
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fca6 	bl	80049b8 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004070:	e005      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
      break;
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004078:	58024400 	.word	0x58024400
      break;
 800407c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004084:	4b93      	ldr	r3, [pc, #588]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004092:	4990      	ldr	r1, [pc, #576]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	658b      	str	r3, [r1, #88]	; 0x58
 8004098:	e001      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d033      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b4:	d01c      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80040b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ba:	d816      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c0:	d003      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80040c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c6:	d007      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80040c8:	e00f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ca:	4b82      	ldr	r3, [pc, #520]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4a81      	ldr	r2, [pc, #516]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc6a 	bl	80049b8 <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	4973      	ldr	r1, [pc, #460]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004108:	4313      	orrs	r3, r2
 800410a:	654b      	str	r3, [r1, #84]	; 0x54
 800410c:	e001      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d029      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d007      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412e:	4b69      	ldr	r3, [pc, #420]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	4a68      	ldr	r2, [pc, #416]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800413a:	e00b      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb86 	bl	8004854 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
      break;
 8004152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800415a:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	495b      	ldr	r1, [pc, #364]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800416c:	e001      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	; 0x24
 8004182:	2102      	movs	r1, #2
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fc17 	bl	80049b8 <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d030      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a8:	d017      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80041aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ae:	d811      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d013      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d80b      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c4:	d106      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c6:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a42      	ldr	r2, [pc, #264]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041d2:	e007      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
      break;
 80041d8:	e004      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ea:	4b3a      	ldr	r3, [pc, #232]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f6:	4937      	ldr	r1, [pc, #220]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	654b      	str	r3, [r1, #84]	; 0x54
 80041fc:	e001      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	492e      	ldr	r1, [pc, #184]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800423a:	4926      	ldr	r1, [pc, #152]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004258:	491e      	ldr	r1, [pc, #120]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800426a:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004270:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004274:	6113      	str	r3, [r2, #16]
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004280:	4914      	ldr	r1, [pc, #80]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da08      	bge.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	4906      	ldr	r1, [pc, #24]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80042c0:	7dbb      	ldrb	r3, [r7, #22]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	58024400 	.word	0x58024400

080042d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042dc:	f7ff f860 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	58024400 	.word	0x58024400
 8004300:	08007ed4 	.word	0x08007ed4

08004304 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800430c:	4ba1      	ldr	r3, [pc, #644]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004316:	4b9f      	ldr	r3, [pc, #636]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	0b1b      	lsrs	r3, r3, #12
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004322:	4b9c      	ldr	r3, [pc, #624]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800432e:	4b99      	ldr	r3, [pc, #612]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8111 	beq.w	8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b02      	cmp	r3, #2
 8004356:	f000 8083 	beq.w	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b02      	cmp	r3, #2
 800435e:	f200 80a1 	bhi.w	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d056      	beq.n	800441c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800436e:	e099      	b.n	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004370:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02d      	beq.n	80043d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800437c:	4b85      	ldr	r3, [pc, #532]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	4a84      	ldr	r2, [pc, #528]	; (8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b7b      	ldr	r3, [pc, #492]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043d6:	e087      	b.n	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800441a:	e065      	b.n	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004442:	eddf 5a56 	vldr	s11, [pc, #344]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445e:	e043      	b.n	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b48      	ldr	r3, [pc, #288]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a03 	vldr	s12, [r7, #12]
 8004486:	eddf 5a45 	vldr	s11, [pc, #276]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a2:	e021      	b.n	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b37      	ldr	r3, [pc, #220]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80044e8:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	0a5b      	lsrs	r3, r3, #9
 80044ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004502:	edd7 6a07 	vldr	s13, [r7, #28]
 8004506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450e:	ee17 2a90 	vmov	r2, s15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004530:	edd7 6a07 	vldr	s13, [r7, #28]
 8004534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453c:	ee17 2a90 	vmov	r2, s15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	0e1b      	lsrs	r3, r3, #24
 800454a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800455a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800455e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456a:	ee17 2a90 	vmov	r2, s15
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004572:	e008      	b.n	8004586 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
}
 8004586:	bf00      	nop
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	03d09000 	.word	0x03d09000
 800459c:	46000000 	.word	0x46000000
 80045a0:	4c742400 	.word	0x4c742400
 80045a4:	4a742400 	.word	0x4a742400
 80045a8:	4af42400 	.word	0x4af42400

080045ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b4:	4ba1      	ldr	r3, [pc, #644]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80045be:	4b9f      	ldr	r3, [pc, #636]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	0d1b      	lsrs	r3, r3, #20
 80045c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045ca:	4b9c      	ldr	r3, [pc, #624]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045d6:	4b99      	ldr	r3, [pc, #612]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	08db      	lsrs	r3, r3, #3
 80045dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8111 	beq.w	800481c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f000 8083 	beq.w	8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b02      	cmp	r3, #2
 8004606:	f200 80a1 	bhi.w	800474c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d056      	beq.n	80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004616:	e099      	b.n	800474c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02d      	beq.n	8004680 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004624:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a84      	ldr	r2, [pc, #528]	; (8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800467e:	e087      	b.n	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046c2:	e065      	b.n	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800484c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004706:	e043      	b.n	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b48      	ldr	r3, [pc, #288]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800474a:	e021      	b.n	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800484c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b6:	ee17 2a90 	vmov	r2, s15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e4:	ee17 2a90 	vmov	r2, s15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004806:	edd7 6a07 	vldr	s13, [r7, #28]
 800480a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800480e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004812:	ee17 2a90 	vmov	r2, s15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800481a:	e008      	b.n	800482e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	03d09000 	.word	0x03d09000
 8004844:	46000000 	.word	0x46000000
 8004848:	4c742400 	.word	0x4c742400
 800484c:	4a742400 	.word	0x4a742400
 8004850:	4af42400 	.word	0x4af42400

08004854 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d101      	bne.n	8004872 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e099      	b.n	80049a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004872:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004878:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800487c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487e:	f7fc fda9 	bl	80013d4 <HAL_GetTick>
 8004882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004884:	e008      	b.n	8004898 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004886:	f7fc fda5 	bl	80013d4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e086      	b.n	80049a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004898:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	493f      	ldr	r1, [pc, #252]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	628b      	str	r3, [r1, #40]	; 0x28
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	3b01      	subs	r3, #1
 80048be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	025b      	lsls	r3, r3, #9
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048e8:	4931      	ldr	r1, [pc, #196]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048ee:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	492d      	ldr	r1, [pc, #180]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f023 0220 	bic.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4928      	ldr	r1, [pc, #160]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <RCCEx_PLL2_Config+0x160>)
 8004924:	4013      	ands	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	69d2      	ldr	r2, [r2, #28]
 800492a:	00d2      	lsls	r2, r2, #3
 800492c:	4920      	ldr	r1, [pc, #128]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800494a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004950:	e00f      	b.n	8004972 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d106      	bne.n	8004966 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004964:	e005      	b.n	8004972 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800496c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004970:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 8004978:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800497c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497e:	f7fc fd29 	bl	80013d4 <HAL_GetTick>
 8004982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004984:	e008      	b.n	8004998 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004986:	f7fc fd25 	bl	80013d4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <RCCEx_PLL2_Config+0x15c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	ffff0007 	.word	0xffff0007

080049b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049c6:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d101      	bne.n	80049d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e099      	b.n	8004b0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049d6:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4e      	ldr	r2, [pc, #312]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fc fcf7 	bl	80013d4 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049e8:	e008      	b.n	80049fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049ea:	f7fc fcf3 	bl	80013d4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e086      	b.n	8004b0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049fc:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a08:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	051b      	lsls	r3, r3, #20
 8004a16:	493f      	ldr	r1, [pc, #252]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	025b      	lsls	r3, r3, #9
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a4c:	4931      	ldr	r1, [pc, #196]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	492d      	ldr	r1, [pc, #180]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4928      	ldr	r1, [pc, #160]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <RCCEx_PLL3_Config+0x160>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	69d2      	ldr	r2, [r2, #28]
 8004a8e:	00d2      	lsls	r2, r2, #3
 8004a90:	4920      	ldr	r1, [pc, #128]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a96:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab4:	e00f      	b.n	8004ad6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d106      	bne.n	8004aca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004ac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac8:	e005      	b.n	8004ad6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fc77 	bl	80013d4 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aea:	f7fc fc73 	bl	80013d4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e006      	b.n	8004b0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <RCCEx_PLL3_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	58024400 	.word	0x58024400
 8004b18:	ffff0007 	.word	0xffff0007

08004b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e042      	b.n	8004bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fc f8e7 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2224      	movs	r2, #36	; 0x24
 8004b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f82c 	bl	8004bbc <UART_SetConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e022      	b.n	8004bb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fd80 	bl	800567c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fe07 	bl	80057c0 <UART_CheckIdleState>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	b5b0      	push	{r4, r5, r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4bbf      	ldr	r3, [pc, #764]	; (8004ee8 <UART_SetConfig+0x32c>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4ab5      	ldr	r2, [pc, #724]	; (8004eec <UART_SetConfig+0x330>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c22:	4313      	orrs	r3, r2
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	4bb0      	ldr	r3, [pc, #704]	; (8004ef0 <UART_SetConfig+0x334>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c36:	430b      	orrs	r3, r1
 8004c38:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f023 010f 	bic.w	r1, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4aa7      	ldr	r2, [pc, #668]	; (8004ef4 <UART_SetConfig+0x338>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d176      	bne.n	8004d48 <UART_SetConfig+0x18c>
 8004c5a:	4ba7      	ldr	r3, [pc, #668]	; (8004ef8 <UART_SetConfig+0x33c>)
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c62:	2b28      	cmp	r3, #40	; 0x28
 8004c64:	d86c      	bhi.n	8004d40 <UART_SetConfig+0x184>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <UART_SetConfig+0xb0>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004d11 	.word	0x08004d11
 8004c70:	08004d41 	.word	0x08004d41
 8004c74:	08004d41 	.word	0x08004d41
 8004c78:	08004d41 	.word	0x08004d41
 8004c7c:	08004d41 	.word	0x08004d41
 8004c80:	08004d41 	.word	0x08004d41
 8004c84:	08004d41 	.word	0x08004d41
 8004c88:	08004d41 	.word	0x08004d41
 8004c8c:	08004d19 	.word	0x08004d19
 8004c90:	08004d41 	.word	0x08004d41
 8004c94:	08004d41 	.word	0x08004d41
 8004c98:	08004d41 	.word	0x08004d41
 8004c9c:	08004d41 	.word	0x08004d41
 8004ca0:	08004d41 	.word	0x08004d41
 8004ca4:	08004d41 	.word	0x08004d41
 8004ca8:	08004d41 	.word	0x08004d41
 8004cac:	08004d21 	.word	0x08004d21
 8004cb0:	08004d41 	.word	0x08004d41
 8004cb4:	08004d41 	.word	0x08004d41
 8004cb8:	08004d41 	.word	0x08004d41
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004d41 	.word	0x08004d41
 8004cc4:	08004d41 	.word	0x08004d41
 8004cc8:	08004d41 	.word	0x08004d41
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004d41 	.word	0x08004d41
 8004cd4:	08004d41 	.word	0x08004d41
 8004cd8:	08004d41 	.word	0x08004d41
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004d41 	.word	0x08004d41
 8004ce4:	08004d41 	.word	0x08004d41
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d31 	.word	0x08004d31
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d41 	.word	0x08004d41
 8004cf8:	08004d41 	.word	0x08004d41
 8004cfc:	08004d41 	.word	0x08004d41
 8004d00:	08004d41 	.word	0x08004d41
 8004d04:	08004d41 	.word	0x08004d41
 8004d08:	08004d41 	.word	0x08004d41
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	e222      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1e:	e21e      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d26:	e21a      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2e:	e216      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d30:	2320      	movs	r3, #32
 8004d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d36:	e212      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d3e:	e20e      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d46:	e20a      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6b      	ldr	r2, [pc, #428]	; (8004efc <UART_SetConfig+0x340>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d130      	bne.n	8004db4 <UART_SetConfig+0x1f8>
 8004d52:	4b69      	ldr	r3, [pc, #420]	; (8004ef8 <UART_SetConfig+0x33c>)
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b05      	cmp	r3, #5
 8004d5c:	d826      	bhi.n	8004dac <UART_SetConfig+0x1f0>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x1a8>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d7d 	.word	0x08004d7d
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	08004d8d 	.word	0x08004d8d
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d82:	e1ec      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d8a:	e1e8      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d92:	e1e4      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9a:	e1e0      	b.n	800515e <UART_SetConfig+0x5a2>
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da2:	e1dc      	b.n	800515e <UART_SetConfig+0x5a2>
 8004da4:	2340      	movs	r3, #64	; 0x40
 8004da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004daa:	e1d8      	b.n	800515e <UART_SetConfig+0x5a2>
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db2:	e1d4      	b.n	800515e <UART_SetConfig+0x5a2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a51      	ldr	r2, [pc, #324]	; (8004f00 <UART_SetConfig+0x344>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d130      	bne.n	8004e20 <UART_SetConfig+0x264>
 8004dbe:	4b4e      	ldr	r3, [pc, #312]	; (8004ef8 <UART_SetConfig+0x33c>)
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d826      	bhi.n	8004e18 <UART_SetConfig+0x25c>
 8004dca:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x214>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004de9 	.word	0x08004de9
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	08004df9 	.word	0x08004df9
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dee:	e1b6      	b.n	800515e <UART_SetConfig+0x5a2>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004df6:	e1b2      	b.n	800515e <UART_SetConfig+0x5a2>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dfe:	e1ae      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e06:	e1aa      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e08:	2320      	movs	r3, #32
 8004e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0e:	e1a6      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e10:	2340      	movs	r3, #64	; 0x40
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e16:	e1a2      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e19e      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a37      	ldr	r2, [pc, #220]	; (8004f04 <UART_SetConfig+0x348>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d130      	bne.n	8004e8c <UART_SetConfig+0x2d0>
 8004e2a:	4b33      	ldr	r3, [pc, #204]	; (8004ef8 <UART_SetConfig+0x33c>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d826      	bhi.n	8004e84 <UART_SetConfig+0x2c8>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x280>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e65 	.word	0x08004e65
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e5a:	e180      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e62:	e17c      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e6a:	e178      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e72:	e174      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e74:	2320      	movs	r3, #32
 8004e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7a:	e170      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e82:	e16c      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8a:	e168      	b.n	800515e <UART_SetConfig+0x5a2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <UART_SetConfig+0x34c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d142      	bne.n	8004f1c <UART_SetConfig+0x360>
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <UART_SetConfig+0x33c>)
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d838      	bhi.n	8004f14 <UART_SetConfig+0x358>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x2ec>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004ec1 	.word	0x08004ec1
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ed1 	.word	0x08004ed1
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec6:	e14a      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ece:	e146      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ed6:	e142      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ede:	e13e      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ee6:	e13a      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ee8:	cfff69f3 	.word	0xcfff69f3
 8004eec:	58000c00 	.word	0x58000c00
 8004ef0:	11fff4ff 	.word	0x11fff4ff
 8004ef4:	40011000 	.word	0x40011000
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	40004400 	.word	0x40004400
 8004f00:	40004800 	.word	0x40004800
 8004f04:	40004c00 	.word	0x40004c00
 8004f08:	40005000 	.word	0x40005000
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f12:	e124      	b.n	800515e <UART_SetConfig+0x5a2>
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f1a:	e120      	b.n	800515e <UART_SetConfig+0x5a2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4acc      	ldr	r2, [pc, #816]	; (8005254 <UART_SetConfig+0x698>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d176      	bne.n	8005014 <UART_SetConfig+0x458>
 8004f26:	4bcc      	ldr	r3, [pc, #816]	; (8005258 <UART_SetConfig+0x69c>)
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2e:	2b28      	cmp	r3, #40	; 0x28
 8004f30:	d86c      	bhi.n	800500c <UART_SetConfig+0x450>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x37c>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004fdd 	.word	0x08004fdd
 8004f3c:	0800500d 	.word	0x0800500d
 8004f40:	0800500d 	.word	0x0800500d
 8004f44:	0800500d 	.word	0x0800500d
 8004f48:	0800500d 	.word	0x0800500d
 8004f4c:	0800500d 	.word	0x0800500d
 8004f50:	0800500d 	.word	0x0800500d
 8004f54:	0800500d 	.word	0x0800500d
 8004f58:	08004fe5 	.word	0x08004fe5
 8004f5c:	0800500d 	.word	0x0800500d
 8004f60:	0800500d 	.word	0x0800500d
 8004f64:	0800500d 	.word	0x0800500d
 8004f68:	0800500d 	.word	0x0800500d
 8004f6c:	0800500d 	.word	0x0800500d
 8004f70:	0800500d 	.word	0x0800500d
 8004f74:	0800500d 	.word	0x0800500d
 8004f78:	08004fed 	.word	0x08004fed
 8004f7c:	0800500d 	.word	0x0800500d
 8004f80:	0800500d 	.word	0x0800500d
 8004f84:	0800500d 	.word	0x0800500d
 8004f88:	0800500d 	.word	0x0800500d
 8004f8c:	0800500d 	.word	0x0800500d
 8004f90:	0800500d 	.word	0x0800500d
 8004f94:	0800500d 	.word	0x0800500d
 8004f98:	08004ff5 	.word	0x08004ff5
 8004f9c:	0800500d 	.word	0x0800500d
 8004fa0:	0800500d 	.word	0x0800500d
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	0800500d 	.word	0x0800500d
 8004fac:	0800500d 	.word	0x0800500d
 8004fb0:	0800500d 	.word	0x0800500d
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08004ffd 	.word	0x08004ffd
 8004fbc:	0800500d 	.word	0x0800500d
 8004fc0:	0800500d 	.word	0x0800500d
 8004fc4:	0800500d 	.word	0x0800500d
 8004fc8:	0800500d 	.word	0x0800500d
 8004fcc:	0800500d 	.word	0x0800500d
 8004fd0:	0800500d 	.word	0x0800500d
 8004fd4:	0800500d 	.word	0x0800500d
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e0bc      	b.n	800515e <UART_SetConfig+0x5a2>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	e0b8      	b.n	800515e <UART_SetConfig+0x5a2>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff2:	e0b4      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffa:	e0b0      	b.n	800515e <UART_SetConfig+0x5a2>
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005002:	e0ac      	b.n	800515e <UART_SetConfig+0x5a2>
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500a:	e0a8      	b.n	800515e <UART_SetConfig+0x5a2>
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005012:	e0a4      	b.n	800515e <UART_SetConfig+0x5a2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a90      	ldr	r2, [pc, #576]	; (800525c <UART_SetConfig+0x6a0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d130      	bne.n	8005080 <UART_SetConfig+0x4c4>
 800501e:	4b8e      	ldr	r3, [pc, #568]	; (8005258 <UART_SetConfig+0x69c>)
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b05      	cmp	r3, #5
 8005028:	d826      	bhi.n	8005078 <UART_SetConfig+0x4bc>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0x474>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005049 	.word	0x08005049
 8005034:	08005051 	.word	0x08005051
 8005038:	08005059 	.word	0x08005059
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e086      	b.n	800515e <UART_SetConfig+0x5a2>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e082      	b.n	800515e <UART_SetConfig+0x5a2>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505e:	e07e      	b.n	800515e <UART_SetConfig+0x5a2>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	e07a      	b.n	800515e <UART_SetConfig+0x5a2>
 8005068:	2320      	movs	r3, #32
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e076      	b.n	800515e <UART_SetConfig+0x5a2>
 8005070:	2340      	movs	r3, #64	; 0x40
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e072      	b.n	800515e <UART_SetConfig+0x5a2>
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e06e      	b.n	800515e <UART_SetConfig+0x5a2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a76      	ldr	r2, [pc, #472]	; (8005260 <UART_SetConfig+0x6a4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d130      	bne.n	80050ec <UART_SetConfig+0x530>
 800508a:	4b73      	ldr	r3, [pc, #460]	; (8005258 <UART_SetConfig+0x69c>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b05      	cmp	r3, #5
 8005094:	d826      	bhi.n	80050e4 <UART_SetConfig+0x528>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x4e0>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e050      	b.n	800515e <UART_SetConfig+0x5a2>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e04c      	b.n	800515e <UART_SetConfig+0x5a2>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e048      	b.n	800515e <UART_SetConfig+0x5a2>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e044      	b.n	800515e <UART_SetConfig+0x5a2>
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e040      	b.n	800515e <UART_SetConfig+0x5a2>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	e03c      	b.n	800515e <UART_SetConfig+0x5a2>
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ea:	e038      	b.n	800515e <UART_SetConfig+0x5a2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <UART_SetConfig+0x6a8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d130      	bne.n	8005158 <UART_SetConfig+0x59c>
 80050f6:	4b58      	ldr	r3, [pc, #352]	; (8005258 <UART_SetConfig+0x69c>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d826      	bhi.n	8005150 <UART_SetConfig+0x594>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x54c>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
 8005110:	08005131 	.word	0x08005131
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e01a      	b.n	800515e <UART_SetConfig+0x5a2>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e016      	b.n	800515e <UART_SetConfig+0x5a2>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	e012      	b.n	800515e <UART_SetConfig+0x5a2>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513e:	e00e      	b.n	800515e <UART_SetConfig+0x5a2>
 8005140:	2320      	movs	r3, #32
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e00a      	b.n	800515e <UART_SetConfig+0x5a2>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e006      	b.n	800515e <UART_SetConfig+0x5a2>
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e002      	b.n	800515e <UART_SetConfig+0x5a2>
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a40      	ldr	r2, [pc, #256]	; (8005264 <UART_SetConfig+0x6a8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	f040 80ef 	bne.w	8005348 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800516a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800516e:	2b20      	cmp	r3, #32
 8005170:	dc46      	bgt.n	8005200 <UART_SetConfig+0x644>
 8005172:	2b02      	cmp	r3, #2
 8005174:	f2c0 8081 	blt.w	800527a <UART_SetConfig+0x6be>
 8005178:	3b02      	subs	r3, #2
 800517a:	2b1e      	cmp	r3, #30
 800517c:	d87d      	bhi.n	800527a <UART_SetConfig+0x6be>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x5c8>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005207 	.word	0x08005207
 8005188:	0800527b 	.word	0x0800527b
 800518c:	0800520f 	.word	0x0800520f
 8005190:	0800527b 	.word	0x0800527b
 8005194:	0800527b 	.word	0x0800527b
 8005198:	0800527b 	.word	0x0800527b
 800519c:	0800521f 	.word	0x0800521f
 80051a0:	0800527b 	.word	0x0800527b
 80051a4:	0800527b 	.word	0x0800527b
 80051a8:	0800527b 	.word	0x0800527b
 80051ac:	0800527b 	.word	0x0800527b
 80051b0:	0800527b 	.word	0x0800527b
 80051b4:	0800527b 	.word	0x0800527b
 80051b8:	0800527b 	.word	0x0800527b
 80051bc:	0800522f 	.word	0x0800522f
 80051c0:	0800527b 	.word	0x0800527b
 80051c4:	0800527b 	.word	0x0800527b
 80051c8:	0800527b 	.word	0x0800527b
 80051cc:	0800527b 	.word	0x0800527b
 80051d0:	0800527b 	.word	0x0800527b
 80051d4:	0800527b 	.word	0x0800527b
 80051d8:	0800527b 	.word	0x0800527b
 80051dc:	0800527b 	.word	0x0800527b
 80051e0:	0800527b 	.word	0x0800527b
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	0800527b 	.word	0x0800527b
 80051ec:	0800527b 	.word	0x0800527b
 80051f0:	0800527b 	.word	0x0800527b
 80051f4:	0800527b 	.word	0x0800527b
 80051f8:	0800527b 	.word	0x0800527b
 80051fc:	0800526d 	.word	0x0800526d
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d036      	beq.n	8005272 <UART_SetConfig+0x6b6>
 8005204:	e039      	b.n	800527a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005206:	f7ff f867 	bl	80042d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800520a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800520c:	e03b      	b.n	8005286 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff f876 	bl	8004304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800521c:	e033      	b.n	8005286 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff f9c2 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800522c:	e02b      	b.n	8005286 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <UART_SetConfig+0x69c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <UART_SetConfig+0x69c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <UART_SetConfig+0x6ac>)
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800524c:	e01b      	b.n	8005286 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <UART_SetConfig+0x6ac>)
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005252:	e018      	b.n	8005286 <UART_SetConfig+0x6ca>
 8005254:	40011400 	.word	0x40011400
 8005258:	58024400 	.word	0x58024400
 800525c:	40007800 	.word	0x40007800
 8005260:	40007c00 	.word	0x40007c00
 8005264:	58000c00 	.word	0x58000c00
 8005268:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800526c:	4bc4      	ldr	r3, [pc, #784]	; (8005580 <UART_SetConfig+0x9c4>)
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005270:	e009      	b.n	8005286 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005278:	e005      	b.n	8005286 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 81da 	beq.w	8005642 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	4abc      	ldr	r2, [pc, #752]	; (8005584 <UART_SetConfig+0x9c8>)
 8005294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005298:	461a      	mov	r2, r3
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d305      	bcc.n	80052be <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d903      	bls.n	80052c6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80052c4:	e1bd      	b.n	8005642 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	4618      	mov	r0, r3
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	4aac      	ldr	r2, [pc, #688]	; (8005584 <UART_SetConfig+0x9c8>)
 80052d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f7fb f84f 	bl	8000380 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	020b      	lsls	r3, r1, #8
 80052f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052f8:	0202      	lsls	r2, r0, #8
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	6849      	ldr	r1, [r1, #4]
 80052fe:	0849      	lsrs	r1, r1, #1
 8005300:	4608      	mov	r0, r1
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	1814      	adds	r4, r2, r0
 8005308:	eb43 0501 	adc.w	r5, r3, r1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	461a      	mov	r2, r3
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fb f831 	bl	8000380 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4613      	mov	r3, r2
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532c:	d308      	bcc.n	8005340 <UART_SetConfig+0x784>
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005334:	d204      	bcs.n	8005340 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	e180      	b.n	8005642 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005346:	e17c      	b.n	8005642 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005350:	f040 80bf 	bne.w	80054d2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005354:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005358:	2b20      	cmp	r3, #32
 800535a:	dc49      	bgt.n	80053f0 <UART_SetConfig+0x834>
 800535c:	2b00      	cmp	r3, #0
 800535e:	db7c      	blt.n	800545a <UART_SetConfig+0x89e>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d87a      	bhi.n	800545a <UART_SetConfig+0x89e>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <UART_SetConfig+0x7b0>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053f7 	.word	0x080053f7
 8005370:	080053ff 	.word	0x080053ff
 8005374:	0800545b 	.word	0x0800545b
 8005378:	0800545b 	.word	0x0800545b
 800537c:	08005407 	.word	0x08005407
 8005380:	0800545b 	.word	0x0800545b
 8005384:	0800545b 	.word	0x0800545b
 8005388:	0800545b 	.word	0x0800545b
 800538c:	08005417 	.word	0x08005417
 8005390:	0800545b 	.word	0x0800545b
 8005394:	0800545b 	.word	0x0800545b
 8005398:	0800545b 	.word	0x0800545b
 800539c:	0800545b 	.word	0x0800545b
 80053a0:	0800545b 	.word	0x0800545b
 80053a4:	0800545b 	.word	0x0800545b
 80053a8:	0800545b 	.word	0x0800545b
 80053ac:	08005427 	.word	0x08005427
 80053b0:	0800545b 	.word	0x0800545b
 80053b4:	0800545b 	.word	0x0800545b
 80053b8:	0800545b 	.word	0x0800545b
 80053bc:	0800545b 	.word	0x0800545b
 80053c0:	0800545b 	.word	0x0800545b
 80053c4:	0800545b 	.word	0x0800545b
 80053c8:	0800545b 	.word	0x0800545b
 80053cc:	0800545b 	.word	0x0800545b
 80053d0:	0800545b 	.word	0x0800545b
 80053d4:	0800545b 	.word	0x0800545b
 80053d8:	0800545b 	.word	0x0800545b
 80053dc:	0800545b 	.word	0x0800545b
 80053e0:	0800545b 	.word	0x0800545b
 80053e4:	0800545b 	.word	0x0800545b
 80053e8:	0800545b 	.word	0x0800545b
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d02e      	beq.n	8005452 <UART_SetConfig+0x896>
 80053f4:	e031      	b.n	800545a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f6:	f7fe f803 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80053fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80053fc:	e033      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fe:	f7fe f815 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005402:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005404:	e02f      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe ff7a 	bl	8004304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005414:	e027      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f8c6 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005424:	e01f      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b58      	ldr	r3, [pc, #352]	; (8005588 <UART_SetConfig+0x9cc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005432:	4b55      	ldr	r3, [pc, #340]	; (8005588 <UART_SetConfig+0x9cc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	4a53      	ldr	r2, [pc, #332]	; (800558c <UART_SetConfig+0x9d0>)
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005444:	e00f      	b.n	8005466 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005446:	4b51      	ldr	r3, [pc, #324]	; (800558c <UART_SetConfig+0x9d0>)
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800544a:	e00c      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800544c:	4b4c      	ldr	r3, [pc, #304]	; (8005580 <UART_SetConfig+0x9c4>)
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005450:	e009      	b.n	8005466 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005458:	e005      	b.n	8005466 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80ea 	beq.w	8005642 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	4a44      	ldr	r2, [pc, #272]	; (8005584 <UART_SetConfig+0x9c8>)
 8005474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005478:	461a      	mov	r2, r3
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005480:	005a      	lsls	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	b29b      	uxth	r3, r3
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d916      	bls.n	80054ca <UART_SetConfig+0x90e>
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a2:	d212      	bcs.n	80054ca <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f023 030f 	bic.w	r3, r3, #15
 80054ac:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054bc:	4313      	orrs	r3, r2
 80054be:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	e0bb      	b.n	8005642 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80054d0:	e0b7      	b.n	8005642 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	dc4a      	bgt.n	8005570 <UART_SetConfig+0x9b4>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f2c0 8086 	blt.w	80055ec <UART_SetConfig+0xa30>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	f200 8083 	bhi.w	80055ec <UART_SetConfig+0xa30>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x930>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005577 	.word	0x08005577
 80054f0:	08005591 	.word	0x08005591
 80054f4:	080055ed 	.word	0x080055ed
 80054f8:	080055ed 	.word	0x080055ed
 80054fc:	08005599 	.word	0x08005599
 8005500:	080055ed 	.word	0x080055ed
 8005504:	080055ed 	.word	0x080055ed
 8005508:	080055ed 	.word	0x080055ed
 800550c:	080055a9 	.word	0x080055a9
 8005510:	080055ed 	.word	0x080055ed
 8005514:	080055ed 	.word	0x080055ed
 8005518:	080055ed 	.word	0x080055ed
 800551c:	080055ed 	.word	0x080055ed
 8005520:	080055ed 	.word	0x080055ed
 8005524:	080055ed 	.word	0x080055ed
 8005528:	080055ed 	.word	0x080055ed
 800552c:	080055b9 	.word	0x080055b9
 8005530:	080055ed 	.word	0x080055ed
 8005534:	080055ed 	.word	0x080055ed
 8005538:	080055ed 	.word	0x080055ed
 800553c:	080055ed 	.word	0x080055ed
 8005540:	080055ed 	.word	0x080055ed
 8005544:	080055ed 	.word	0x080055ed
 8005548:	080055ed 	.word	0x080055ed
 800554c:	080055ed 	.word	0x080055ed
 8005550:	080055ed 	.word	0x080055ed
 8005554:	080055ed 	.word	0x080055ed
 8005558:	080055ed 	.word	0x080055ed
 800555c:	080055ed 	.word	0x080055ed
 8005560:	080055ed 	.word	0x080055ed
 8005564:	080055ed 	.word	0x080055ed
 8005568:	080055ed 	.word	0x080055ed
 800556c:	080055df 	.word	0x080055df
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d037      	beq.n	80055e4 <UART_SetConfig+0xa28>
 8005574:	e03a      	b.n	80055ec <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005576:	f7fd ff43 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 800557a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800557c:	e03c      	b.n	80055f8 <UART_SetConfig+0xa3c>
 800557e:	bf00      	nop
 8005580:	003d0900 	.word	0x003d0900
 8005584:	08007eec 	.word	0x08007eec
 8005588:	58024400 	.word	0x58024400
 800558c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fd ff4c 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005594:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005596:	e02f      	b.n	80055f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe feb1 	bl	8004304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a6:	e027      	b.n	80055f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055a8:	f107 0308 	add.w	r3, r7, #8
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe fffd 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055b6:	e01f      	b.n	80055f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <UART_SetConfig+0xab0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <UART_SetConfig+0xab0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	4a28      	ldr	r2, [pc, #160]	; (8005670 <UART_SetConfig+0xab4>)
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055d6:	e00f      	b.n	80055f8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <UART_SetConfig+0xab4>)
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055dc:	e00c      	b.n	80055f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055de:	4b25      	ldr	r3, [pc, #148]	; (8005674 <UART_SetConfig+0xab8>)
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e2:	e009      	b.n	80055f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ea:	e005      	b.n	80055f8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80055f6:	bf00      	nop
    }

    if (pclk != 0U)
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d021      	beq.n	8005642 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <UART_SetConfig+0xabc>)
 8005604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005608:	461a      	mov	r2, r3
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	b29b      	uxth	r3, r3
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d908      	bls.n	800563c <UART_SetConfig+0xa80>
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d204      	bcs.n	800563c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	e002      	b.n	8005642 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800565e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	; 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bdb0      	pop	{r4, r5, r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	03d09000 	.word	0x03d09000
 8005674:	003d0900 	.word	0x003d0900
 8005678:	08007eec 	.word	0x08007eec

0800567c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01a      	beq.n	8005792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577a:	d10a      	bne.n	8005792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d0:	f7fb fe00 	bl	80013d4 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d10e      	bne.n	8005802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f82f 	bl	8005856 <UART_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e025      	b.n	800584e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d10e      	bne.n	800582e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f819 	bl	8005856 <UART_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e00f      	b.n	800584e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005866:	e062      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d05e      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fb fdb0 	bl	80013d4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <UART_WaitOnFlagUntilTimeout+0x30>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11d      	bne.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005894:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e045      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02e      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d126      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00f      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	429a      	cmp	r2, r3
 800594a:	d08d      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_UARTEx_DisableFifoMode+0x16>
 8005968:	2302      	movs	r3, #2
 800596a:	e027      	b.n	80059bc <HAL_UARTEx_DisableFifoMode+0x66>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800599a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e02d      	b.n	8005a3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	; 0x24
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f84f 	bl	8005ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e02d      	b.n	8005ab8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	; 0x24
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f811 	bl	8005ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ae0:	e031      	b.n	8005b46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	0e5b      	lsrs	r3, r3, #25
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	0f5b      	lsrs	r3, r3, #29
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	7b3a      	ldrb	r2, [r7, #12]
 8005b0e:	4911      	ldr	r1, [pc, #68]	; (8005b54 <UARTEx_SetNbDataToProcess+0x94>)
 8005b10:	5c8a      	ldrb	r2, [r1, r2]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b16:	7b3a      	ldrb	r2, [r7, #12]
 8005b18:	490f      	ldr	r1, [pc, #60]	; (8005b58 <UARTEx_SetNbDataToProcess+0x98>)
 8005b1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	7b7a      	ldrb	r2, [r7, #13]
 8005b2c:	4909      	ldr	r1, [pc, #36]	; (8005b54 <UARTEx_SetNbDataToProcess+0x94>)
 8005b2e:	5c8a      	ldrb	r2, [r1, r2]
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b34:	7b7a      	ldrb	r2, [r7, #13]
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <UARTEx_SetNbDataToProcess+0x98>)
 8005b38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	08007f04 	.word	0x08007f04
 8005b58:	08007f0c 	.word	0x08007f0c

08005b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	f107 001c 	add.w	r0, r7, #28
 8005b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d120      	bne.n	8005bb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <USB_CoreInit+0xd4>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa60 	bl	8006070 <USB_CoreReset>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e01a      	b.n	8005bec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa54 	bl	8006070 <USB_CoreReset>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bde:	e005      	b.n	8005bec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d116      	bne.n	8005c20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <USB_CoreInit+0xd8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f043 0206 	orr.w	r2, r3, #6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f043 0220 	orr.w	r2, r3, #32
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c2c:	b004      	add	sp, #16
 8005c2e:	4770      	bx	lr
 8005c30:	ffbdffbf 	.word	0xffbdffbf
 8005c34:	03ee0000 	.word	0x03ee0000

08005c38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 0201 	bic.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
 8005c84:	e00b      	b.n	8005c9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e001      	b.n	8005c9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e003      	b.n	8005ca6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c9e:	2032      	movs	r0, #50	; 0x32
 8005ca0:	f7fb fba4 	bl	80013ec <HAL_Delay>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	e009      	b.n	8005ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3340      	adds	r3, #64	; 0x40
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b0e      	cmp	r3, #14
 8005ce8:	d9f2      	bls.n	8005cd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11c      	bne.n	8005d2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e005      	b.n	8005d36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	4619      	mov	r1, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	461a      	mov	r2, r3
 8005d52:	680b      	ldr	r3, [r1, #0]
 8005d54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10c      	bne.n	8005d76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d62:	2100      	movs	r1, #0
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f949 	bl	8005ffc <USB_SetDevSpeed>
 8005d6a:	e008      	b.n	8005d7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f944 	bl	8005ffc <USB_SetDevSpeed>
 8005d74:	e003      	b.n	8005d7e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d76:	2103      	movs	r1, #3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f93f 	bl	8005ffc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d7e:	2110      	movs	r1, #16
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f8f3 	bl	8005f6c <USB_FlushTxFifo>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f911 	bl	8005fb8 <USB_FlushRxFifo>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	461a      	mov	r2, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	461a      	mov	r2, r3
 8005db4:	2300      	movs	r3, #0
 8005db6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e043      	b.n	8005e52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de0:	d118      	bne.n	8005e14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e013      	b.n	8005e26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e008      	b.n	8005e26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	461a      	mov	r2, r3
 8005e22:	2300      	movs	r3, #0
 8005e24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	461a      	mov	r2, r3
 8005e34:	2300      	movs	r3, #0
 8005e36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	461a      	mov	r2, r3
 8005e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d3b7      	bcc.n	8005dca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	e043      	b.n	8005ee8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e76:	d118      	bne.n	8005eaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e013      	b.n	8005ebc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e008      	b.n	8005ebc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	461a      	mov	r2, r3
 8005edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d3b7      	bcc.n	8005e60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f043 0210 	orr.w	r2, r3, #16
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <USB_DevInit+0x2b4>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f043 0208 	orr.w	r2, r3, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d105      	bne.n	8005f54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <USB_DevInit+0x2b8>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr
 8005f64:	803c3800 	.word	0x803c3800
 8005f68:	40000004 	.word	0x40000004

08005f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <USB_FlushTxFifo+0x48>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e006      	b.n	8005fa6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d0f0      	beq.n	8005f86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	00030d40 	.word	0x00030d40

08005fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <USB_FlushRxFifo+0x40>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d0f0      	beq.n	8005fca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006048:	f023 0303 	bic.w	r3, r3, #3
 800604c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <USB_CoreReset+0x64>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e01b      	b.n	80060c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	daf2      	bge.n	800607c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f043 0201 	orr.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <USB_CoreReset+0x64>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e006      	b.n	80060c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d0f0      	beq.n	80060a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	00030d40 	.word	0x00030d40

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	; (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	2400001c 	.word	0x2400001c

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	; (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	; (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	; (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	; (8006128 <__libc_init_array+0x44>)
 80060f8:	f001 fe84 	bl	8007e04 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	080080d0 	.word	0x080080d0
 8006120:	080080d0 	.word	0x080080d0
 8006124:	080080d0 	.word	0x080080d0
 8006128:	080080d4 	.word	0x080080d4

0800612c <memset>:
 800612c:	4402      	add	r2, r0
 800612e:	4603      	mov	r3, r0
 8006130:	4293      	cmp	r3, r2
 8006132:	d100      	bne.n	8006136 <memset+0xa>
 8006134:	4770      	bx	lr
 8006136:	f803 1b01 	strb.w	r1, [r3], #1
 800613a:	e7f9      	b.n	8006130 <memset+0x4>

0800613c <iprintf>:
 800613c:	b40f      	push	{r0, r1, r2, r3}
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <iprintf+0x2c>)
 8006140:	b513      	push	{r0, r1, r4, lr}
 8006142:	681c      	ldr	r4, [r3, #0]
 8006144:	b124      	cbz	r4, 8006150 <iprintf+0x14>
 8006146:	69a3      	ldr	r3, [r4, #24]
 8006148:	b913      	cbnz	r3, 8006150 <iprintf+0x14>
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fa18 	bl	8006580 <__sinit>
 8006150:	ab05      	add	r3, sp, #20
 8006152:	9a04      	ldr	r2, [sp, #16]
 8006154:	68a1      	ldr	r1, [r4, #8]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	4620      	mov	r0, r4
 800615a:	f000 fc0f 	bl	800697c <_vfiprintf_r>
 800615e:	b002      	add	sp, #8
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	b004      	add	sp, #16
 8006166:	4770      	bx	lr
 8006168:	2400001c 	.word	0x2400001c

0800616c <iscanf>:
 800616c:	b40f      	push	{r0, r1, r2, r3}
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <iscanf+0x2c>)
 8006170:	b513      	push	{r0, r1, r4, lr}
 8006172:	681c      	ldr	r4, [r3, #0]
 8006174:	b124      	cbz	r4, 8006180 <iscanf+0x14>
 8006176:	69a3      	ldr	r3, [r4, #24]
 8006178:	b913      	cbnz	r3, 8006180 <iscanf+0x14>
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fa00 	bl	8006580 <__sinit>
 8006180:	ab05      	add	r3, sp, #20
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	4620      	mov	r0, r4
 800618a:	f001 f85f 	bl	800724c <_vfiscanf_r>
 800618e:	b002      	add	sp, #8
 8006190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006194:	b004      	add	sp, #16
 8006196:	4770      	bx	lr
 8006198:	2400001c 	.word	0x2400001c

0800619c <setvbuf>:
 800619c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061a0:	461d      	mov	r5, r3
 80061a2:	4b5d      	ldr	r3, [pc, #372]	; (8006318 <setvbuf+0x17c>)
 80061a4:	681f      	ldr	r7, [r3, #0]
 80061a6:	4604      	mov	r4, r0
 80061a8:	460e      	mov	r6, r1
 80061aa:	4690      	mov	r8, r2
 80061ac:	b127      	cbz	r7, 80061b8 <setvbuf+0x1c>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	b913      	cbnz	r3, 80061b8 <setvbuf+0x1c>
 80061b2:	4638      	mov	r0, r7
 80061b4:	f000 f9e4 	bl	8006580 <__sinit>
 80061b8:	4b58      	ldr	r3, [pc, #352]	; (800631c <setvbuf+0x180>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d167      	bne.n	800628e <setvbuf+0xf2>
 80061be:	687c      	ldr	r4, [r7, #4]
 80061c0:	f1b8 0f02 	cmp.w	r8, #2
 80061c4:	d006      	beq.n	80061d4 <setvbuf+0x38>
 80061c6:	f1b8 0f01 	cmp.w	r8, #1
 80061ca:	f200 809f 	bhi.w	800630c <setvbuf+0x170>
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	f2c0 809c 	blt.w	800630c <setvbuf+0x170>
 80061d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <setvbuf+0x4a>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	0598      	lsls	r0, r3, #22
 80061de:	d402      	bmi.n	80061e6 <setvbuf+0x4a>
 80061e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e2:	f000 fa88 	bl	80066f6 <__retarget_lock_acquire_recursive>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4638      	mov	r0, r7
 80061ea:	f000 f923 	bl	8006434 <_fflush_r>
 80061ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061f0:	b141      	cbz	r1, 8006204 <setvbuf+0x68>
 80061f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f6:	4299      	cmp	r1, r3
 80061f8:	d002      	beq.n	8006200 <setvbuf+0x64>
 80061fa:	4638      	mov	r0, r7
 80061fc:	f000 faea 	bl	80067d4 <_free_r>
 8006200:	2300      	movs	r3, #0
 8006202:	6363      	str	r3, [r4, #52]	; 0x34
 8006204:	2300      	movs	r3, #0
 8006206:	61a3      	str	r3, [r4, #24]
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	0619      	lsls	r1, r3, #24
 800620e:	d503      	bpl.n	8006218 <setvbuf+0x7c>
 8006210:	6921      	ldr	r1, [r4, #16]
 8006212:	4638      	mov	r0, r7
 8006214:	f000 fade 	bl	80067d4 <_free_r>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	f1b8 0f02 	cmp.w	r8, #2
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	d06c      	beq.n	8006304 <setvbuf+0x168>
 800622a:	ab01      	add	r3, sp, #4
 800622c:	466a      	mov	r2, sp
 800622e:	4621      	mov	r1, r4
 8006230:	4638      	mov	r0, r7
 8006232:	f000 fa62 	bl	80066fa <__swhatbuf_r>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	4318      	orrs	r0, r3
 800623a:	81a0      	strh	r0, [r4, #12]
 800623c:	2d00      	cmp	r5, #0
 800623e:	d130      	bne.n	80062a2 <setvbuf+0x106>
 8006240:	9d00      	ldr	r5, [sp, #0]
 8006242:	4628      	mov	r0, r5
 8006244:	f000 fabe 	bl	80067c4 <malloc>
 8006248:	4606      	mov	r6, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	d155      	bne.n	80062fa <setvbuf+0x15e>
 800624e:	f8dd 9000 	ldr.w	r9, [sp]
 8006252:	45a9      	cmp	r9, r5
 8006254:	d14a      	bne.n	80062ec <setvbuf+0x150>
 8006256:	f04f 35ff 	mov.w	r5, #4294967295
 800625a:	2200      	movs	r2, #0
 800625c:	60a2      	str	r2, [r4, #8]
 800625e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	6122      	str	r2, [r4, #16]
 8006266:	2201      	movs	r2, #1
 8006268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626c:	6162      	str	r2, [r4, #20]
 800626e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	07d2      	lsls	r2, r2, #31
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	d405      	bmi.n	8006286 <setvbuf+0xea>
 800627a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800627e:	d102      	bne.n	8006286 <setvbuf+0xea>
 8006280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006282:	f000 fa39 	bl	80066f8 <__retarget_lock_release_recursive>
 8006286:	4628      	mov	r0, r5
 8006288:	b003      	add	sp, #12
 800628a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <setvbuf+0x184>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d101      	bne.n	8006298 <setvbuf+0xfc>
 8006294:	68bc      	ldr	r4, [r7, #8]
 8006296:	e793      	b.n	80061c0 <setvbuf+0x24>
 8006298:	4b22      	ldr	r3, [pc, #136]	; (8006324 <setvbuf+0x188>)
 800629a:	429c      	cmp	r4, r3
 800629c:	bf08      	it	eq
 800629e:	68fc      	ldreq	r4, [r7, #12]
 80062a0:	e78e      	b.n	80061c0 <setvbuf+0x24>
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	d0cd      	beq.n	8006242 <setvbuf+0xa6>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	b913      	cbnz	r3, 80062b0 <setvbuf+0x114>
 80062aa:	4638      	mov	r0, r7
 80062ac:	f000 f968 	bl	8006580 <__sinit>
 80062b0:	f1b8 0f01 	cmp.w	r8, #1
 80062b4:	bf08      	it	eq
 80062b6:	89a3      	ldrheq	r3, [r4, #12]
 80062b8:	6026      	str	r6, [r4, #0]
 80062ba:	bf04      	itt	eq
 80062bc:	f043 0301 	orreq.w	r3, r3, #1
 80062c0:	81a3      	strheq	r3, [r4, #12]
 80062c2:	89a2      	ldrh	r2, [r4, #12]
 80062c4:	f012 0308 	ands.w	r3, r2, #8
 80062c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80062cc:	d01c      	beq.n	8006308 <setvbuf+0x16c>
 80062ce:	07d3      	lsls	r3, r2, #31
 80062d0:	bf41      	itttt	mi
 80062d2:	2300      	movmi	r3, #0
 80062d4:	426d      	negmi	r5, r5
 80062d6:	60a3      	strmi	r3, [r4, #8]
 80062d8:	61a5      	strmi	r5, [r4, #24]
 80062da:	bf58      	it	pl
 80062dc:	60a5      	strpl	r5, [r4, #8]
 80062de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80062e0:	f015 0501 	ands.w	r5, r5, #1
 80062e4:	d115      	bne.n	8006312 <setvbuf+0x176>
 80062e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80062ea:	e7c8      	b.n	800627e <setvbuf+0xe2>
 80062ec:	4648      	mov	r0, r9
 80062ee:	f000 fa69 	bl	80067c4 <malloc>
 80062f2:	4606      	mov	r6, r0
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0ae      	beq.n	8006256 <setvbuf+0xba>
 80062f8:	464d      	mov	r5, r9
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	e7d0      	b.n	80062a6 <setvbuf+0x10a>
 8006304:	2500      	movs	r5, #0
 8006306:	e7a8      	b.n	800625a <setvbuf+0xbe>
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	e7e8      	b.n	80062de <setvbuf+0x142>
 800630c:	f04f 35ff 	mov.w	r5, #4294967295
 8006310:	e7b9      	b.n	8006286 <setvbuf+0xea>
 8006312:	2500      	movs	r5, #0
 8006314:	e7b7      	b.n	8006286 <setvbuf+0xea>
 8006316:	bf00      	nop
 8006318:	2400001c 	.word	0x2400001c
 800631c:	08007f38 	.word	0x08007f38
 8006320:	08007f58 	.word	0x08007f58
 8006324:	08007f18 	.word	0x08007f18

08006328 <__sflush_r>:
 8006328:	898a      	ldrh	r2, [r1, #12]
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	0710      	lsls	r0, r2, #28
 8006332:	460c      	mov	r4, r1
 8006334:	d458      	bmi.n	80063e8 <__sflush_r+0xc0>
 8006336:	684b      	ldr	r3, [r1, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc05      	bgt.n	8006348 <__sflush_r+0x20>
 800633c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	dc02      	bgt.n	8006348 <__sflush_r+0x20>
 8006342:	2000      	movs	r0, #0
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800634a:	2e00      	cmp	r6, #0
 800634c:	d0f9      	beq.n	8006342 <__sflush_r+0x1a>
 800634e:	2300      	movs	r3, #0
 8006350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006354:	682f      	ldr	r7, [r5, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	d032      	beq.n	80063c0 <__sflush_r+0x98>
 800635a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	075a      	lsls	r2, r3, #29
 8006360:	d505      	bpl.n	800636e <__sflush_r+0x46>
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	1ac0      	subs	r0, r0, r3
 8006366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006368:	b10b      	cbz	r3, 800636e <__sflush_r+0x46>
 800636a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636c:	1ac0      	subs	r0, r0, r3
 800636e:	2300      	movs	r3, #0
 8006370:	4602      	mov	r2, r0
 8006372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006374:	6a21      	ldr	r1, [r4, #32]
 8006376:	4628      	mov	r0, r5
 8006378:	47b0      	blx	r6
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	d106      	bne.n	800638e <__sflush_r+0x66>
 8006380:	6829      	ldr	r1, [r5, #0]
 8006382:	291d      	cmp	r1, #29
 8006384:	d82c      	bhi.n	80063e0 <__sflush_r+0xb8>
 8006386:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <__sflush_r+0x108>)
 8006388:	40ca      	lsrs	r2, r1
 800638a:	07d6      	lsls	r6, r2, #31
 800638c:	d528      	bpl.n	80063e0 <__sflush_r+0xb8>
 800638e:	2200      	movs	r2, #0
 8006390:	6062      	str	r2, [r4, #4]
 8006392:	04d9      	lsls	r1, r3, #19
 8006394:	6922      	ldr	r2, [r4, #16]
 8006396:	6022      	str	r2, [r4, #0]
 8006398:	d504      	bpl.n	80063a4 <__sflush_r+0x7c>
 800639a:	1c42      	adds	r2, r0, #1
 800639c:	d101      	bne.n	80063a2 <__sflush_r+0x7a>
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	b903      	cbnz	r3, 80063a4 <__sflush_r+0x7c>
 80063a2:	6560      	str	r0, [r4, #84]	; 0x54
 80063a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d0ca      	beq.n	8006342 <__sflush_r+0x1a>
 80063ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <__sflush_r+0x92>
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 fa0d 	bl	80067d4 <_free_r>
 80063ba:	2000      	movs	r0, #0
 80063bc:	6360      	str	r0, [r4, #52]	; 0x34
 80063be:	e7c1      	b.n	8006344 <__sflush_r+0x1c>
 80063c0:	6a21      	ldr	r1, [r4, #32]
 80063c2:	2301      	movs	r3, #1
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	1c41      	adds	r1, r0, #1
 80063ca:	d1c7      	bne.n	800635c <__sflush_r+0x34>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0c4      	beq.n	800635c <__sflush_r+0x34>
 80063d2:	2b1d      	cmp	r3, #29
 80063d4:	d001      	beq.n	80063da <__sflush_r+0xb2>
 80063d6:	2b16      	cmp	r3, #22
 80063d8:	d101      	bne.n	80063de <__sflush_r+0xb6>
 80063da:	602f      	str	r7, [r5, #0]
 80063dc:	e7b1      	b.n	8006342 <__sflush_r+0x1a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	e7ad      	b.n	8006344 <__sflush_r+0x1c>
 80063e8:	690f      	ldr	r7, [r1, #16]
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	d0a9      	beq.n	8006342 <__sflush_r+0x1a>
 80063ee:	0793      	lsls	r3, r2, #30
 80063f0:	680e      	ldr	r6, [r1, #0]
 80063f2:	bf08      	it	eq
 80063f4:	694b      	ldreq	r3, [r1, #20]
 80063f6:	600f      	str	r7, [r1, #0]
 80063f8:	bf18      	it	ne
 80063fa:	2300      	movne	r3, #0
 80063fc:	eba6 0807 	sub.w	r8, r6, r7
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	dd9c      	ble.n	8006342 <__sflush_r+0x1a>
 8006408:	6a21      	ldr	r1, [r4, #32]
 800640a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800640c:	4643      	mov	r3, r8
 800640e:	463a      	mov	r2, r7
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	2800      	cmp	r0, #0
 8006416:	dc06      	bgt.n	8006426 <__sflush_r+0xfe>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e78e      	b.n	8006344 <__sflush_r+0x1c>
 8006426:	4407      	add	r7, r0
 8006428:	eba8 0800 	sub.w	r8, r8, r0
 800642c:	e7e9      	b.n	8006402 <__sflush_r+0xda>
 800642e:	bf00      	nop
 8006430:	20400001 	.word	0x20400001

08006434 <_fflush_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b913      	cbnz	r3, 8006444 <_fflush_r+0x10>
 800643e:	2500      	movs	r5, #0
 8006440:	4628      	mov	r0, r5
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	b118      	cbz	r0, 800644e <_fflush_r+0x1a>
 8006446:	6983      	ldr	r3, [r0, #24]
 8006448:	b90b      	cbnz	r3, 800644e <_fflush_r+0x1a>
 800644a:	f000 f899 	bl	8006580 <__sinit>
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <_fflush_r+0x6c>)
 8006450:	429c      	cmp	r4, r3
 8006452:	d11b      	bne.n	800648c <_fflush_r+0x58>
 8006454:	686c      	ldr	r4, [r5, #4]
 8006456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ef      	beq.n	800643e <_fflush_r+0xa>
 800645e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006460:	07d0      	lsls	r0, r2, #31
 8006462:	d404      	bmi.n	800646e <_fflush_r+0x3a>
 8006464:	0599      	lsls	r1, r3, #22
 8006466:	d402      	bmi.n	800646e <_fflush_r+0x3a>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f000 f944 	bl	80066f6 <__retarget_lock_acquire_recursive>
 800646e:	4628      	mov	r0, r5
 8006470:	4621      	mov	r1, r4
 8006472:	f7ff ff59 	bl	8006328 <__sflush_r>
 8006476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006478:	07da      	lsls	r2, r3, #31
 800647a:	4605      	mov	r5, r0
 800647c:	d4e0      	bmi.n	8006440 <_fflush_r+0xc>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	059b      	lsls	r3, r3, #22
 8006482:	d4dd      	bmi.n	8006440 <_fflush_r+0xc>
 8006484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006486:	f000 f937 	bl	80066f8 <__retarget_lock_release_recursive>
 800648a:	e7d9      	b.n	8006440 <_fflush_r+0xc>
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <_fflush_r+0x70>)
 800648e:	429c      	cmp	r4, r3
 8006490:	d101      	bne.n	8006496 <_fflush_r+0x62>
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	e7df      	b.n	8006456 <_fflush_r+0x22>
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <_fflush_r+0x74>)
 8006498:	429c      	cmp	r4, r3
 800649a:	bf08      	it	eq
 800649c:	68ec      	ldreq	r4, [r5, #12]
 800649e:	e7da      	b.n	8006456 <_fflush_r+0x22>
 80064a0:	08007f38 	.word	0x08007f38
 80064a4:	08007f58 	.word	0x08007f58
 80064a8:	08007f18 	.word	0x08007f18

080064ac <fflush>:
 80064ac:	4601      	mov	r1, r0
 80064ae:	b920      	cbnz	r0, 80064ba <fflush+0xe>
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <fflush+0x18>)
 80064b2:	4905      	ldr	r1, [pc, #20]	; (80064c8 <fflush+0x1c>)
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f000 b8fe 	b.w	80066b6 <_fwalk_reent>
 80064ba:	4b04      	ldr	r3, [pc, #16]	; (80064cc <fflush+0x20>)
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	f7ff bfb9 	b.w	8006434 <_fflush_r>
 80064c2:	bf00      	nop
 80064c4:	08007f14 	.word	0x08007f14
 80064c8:	08006435 	.word	0x08006435
 80064cc:	2400001c 	.word	0x2400001c

080064d0 <std>:
 80064d0:	2300      	movs	r3, #0
 80064d2:	b510      	push	{r4, lr}
 80064d4:	4604      	mov	r4, r0
 80064d6:	e9c0 3300 	strd	r3, r3, [r0]
 80064da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064de:	6083      	str	r3, [r0, #8]
 80064e0:	8181      	strh	r1, [r0, #12]
 80064e2:	6643      	str	r3, [r0, #100]	; 0x64
 80064e4:	81c2      	strh	r2, [r0, #14]
 80064e6:	6183      	str	r3, [r0, #24]
 80064e8:	4619      	mov	r1, r3
 80064ea:	2208      	movs	r2, #8
 80064ec:	305c      	adds	r0, #92	; 0x5c
 80064ee:	f7ff fe1d 	bl	800612c <memset>
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <std+0x38>)
 80064f4:	6263      	str	r3, [r4, #36]	; 0x24
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <std+0x3c>)
 80064f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80064fa:	4b05      	ldr	r3, [pc, #20]	; (8006510 <std+0x40>)
 80064fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <std+0x44>)
 8006500:	6224      	str	r4, [r4, #32]
 8006502:	6323      	str	r3, [r4, #48]	; 0x30
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	080076f1 	.word	0x080076f1
 800650c:	08007713 	.word	0x08007713
 8006510:	0800774b 	.word	0x0800774b
 8006514:	0800776f 	.word	0x0800776f

08006518 <_cleanup_r>:
 8006518:	4901      	ldr	r1, [pc, #4]	; (8006520 <_cleanup_r+0x8>)
 800651a:	f000 b8cc 	b.w	80066b6 <_fwalk_reent>
 800651e:	bf00      	nop
 8006520:	08006435 	.word	0x08006435

08006524 <__sfmoreglue>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	1e4a      	subs	r2, r1, #1
 8006528:	2568      	movs	r5, #104	; 0x68
 800652a:	4355      	muls	r5, r2
 800652c:	460e      	mov	r6, r1
 800652e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006532:	f000 f99f 	bl	8006874 <_malloc_r>
 8006536:	4604      	mov	r4, r0
 8006538:	b140      	cbz	r0, 800654c <__sfmoreglue+0x28>
 800653a:	2100      	movs	r1, #0
 800653c:	e9c0 1600 	strd	r1, r6, [r0]
 8006540:	300c      	adds	r0, #12
 8006542:	60a0      	str	r0, [r4, #8]
 8006544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006548:	f7ff fdf0 	bl	800612c <memset>
 800654c:	4620      	mov	r0, r4
 800654e:	bd70      	pop	{r4, r5, r6, pc}

08006550 <__sfp_lock_acquire>:
 8006550:	4801      	ldr	r0, [pc, #4]	; (8006558 <__sfp_lock_acquire+0x8>)
 8006552:	f000 b8d0 	b.w	80066f6 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	240006d0 	.word	0x240006d0

0800655c <__sfp_lock_release>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__sfp_lock_release+0x8>)
 800655e:	f000 b8cb 	b.w	80066f8 <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	240006d0 	.word	0x240006d0

08006568 <__sinit_lock_acquire>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__sinit_lock_acquire+0x8>)
 800656a:	f000 b8c4 	b.w	80066f6 <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	240006cb 	.word	0x240006cb

08006574 <__sinit_lock_release>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sinit_lock_release+0x8>)
 8006576:	f000 b8bf 	b.w	80066f8 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	240006cb 	.word	0x240006cb

08006580 <__sinit>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	f7ff fff0 	bl	8006568 <__sinit_lock_acquire>
 8006588:	69a3      	ldr	r3, [r4, #24]
 800658a:	b11b      	cbz	r3, 8006594 <__sinit+0x14>
 800658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006590:	f7ff bff0 	b.w	8006574 <__sinit_lock_release>
 8006594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006598:	6523      	str	r3, [r4, #80]	; 0x50
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <__sinit+0x68>)
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <__sinit+0x6c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	bf04      	itt	eq
 80065a6:	2301      	moveq	r3, #1
 80065a8:	61a3      	streq	r3, [r4, #24]
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f820 	bl	80065f0 <__sfp>
 80065b0:	6060      	str	r0, [r4, #4]
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 f81c 	bl	80065f0 <__sfp>
 80065b8:	60a0      	str	r0, [r4, #8]
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f818 	bl	80065f0 <__sfp>
 80065c0:	2200      	movs	r2, #0
 80065c2:	60e0      	str	r0, [r4, #12]
 80065c4:	2104      	movs	r1, #4
 80065c6:	6860      	ldr	r0, [r4, #4]
 80065c8:	f7ff ff82 	bl	80064d0 <std>
 80065cc:	68a0      	ldr	r0, [r4, #8]
 80065ce:	2201      	movs	r2, #1
 80065d0:	2109      	movs	r1, #9
 80065d2:	f7ff ff7d 	bl	80064d0 <std>
 80065d6:	68e0      	ldr	r0, [r4, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	2112      	movs	r1, #18
 80065dc:	f7ff ff78 	bl	80064d0 <std>
 80065e0:	2301      	movs	r3, #1
 80065e2:	61a3      	str	r3, [r4, #24]
 80065e4:	e7d2      	b.n	800658c <__sinit+0xc>
 80065e6:	bf00      	nop
 80065e8:	08007f14 	.word	0x08007f14
 80065ec:	08006519 	.word	0x08006519

080065f0 <__sfp>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4607      	mov	r7, r0
 80065f4:	f7ff ffac 	bl	8006550 <__sfp_lock_acquire>
 80065f8:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <__sfp+0x84>)
 80065fa:	681e      	ldr	r6, [r3, #0]
 80065fc:	69b3      	ldr	r3, [r6, #24]
 80065fe:	b913      	cbnz	r3, 8006606 <__sfp+0x16>
 8006600:	4630      	mov	r0, r6
 8006602:	f7ff ffbd 	bl	8006580 <__sinit>
 8006606:	3648      	adds	r6, #72	; 0x48
 8006608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800660c:	3b01      	subs	r3, #1
 800660e:	d503      	bpl.n	8006618 <__sfp+0x28>
 8006610:	6833      	ldr	r3, [r6, #0]
 8006612:	b30b      	cbz	r3, 8006658 <__sfp+0x68>
 8006614:	6836      	ldr	r6, [r6, #0]
 8006616:	e7f7      	b.n	8006608 <__sfp+0x18>
 8006618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800661c:	b9d5      	cbnz	r5, 8006654 <__sfp+0x64>
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <__sfp+0x88>)
 8006620:	60e3      	str	r3, [r4, #12]
 8006622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006626:	6665      	str	r5, [r4, #100]	; 0x64
 8006628:	f000 f864 	bl	80066f4 <__retarget_lock_init_recursive>
 800662c:	f7ff ff96 	bl	800655c <__sfp_lock_release>
 8006630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006638:	6025      	str	r5, [r4, #0]
 800663a:	61a5      	str	r5, [r4, #24]
 800663c:	2208      	movs	r2, #8
 800663e:	4629      	mov	r1, r5
 8006640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006644:	f7ff fd72 	bl	800612c <memset>
 8006648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800664c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006650:	4620      	mov	r0, r4
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006654:	3468      	adds	r4, #104	; 0x68
 8006656:	e7d9      	b.n	800660c <__sfp+0x1c>
 8006658:	2104      	movs	r1, #4
 800665a:	4638      	mov	r0, r7
 800665c:	f7ff ff62 	bl	8006524 <__sfmoreglue>
 8006660:	4604      	mov	r4, r0
 8006662:	6030      	str	r0, [r6, #0]
 8006664:	2800      	cmp	r0, #0
 8006666:	d1d5      	bne.n	8006614 <__sfp+0x24>
 8006668:	f7ff ff78 	bl	800655c <__sfp_lock_release>
 800666c:	230c      	movs	r3, #12
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	e7ee      	b.n	8006650 <__sfp+0x60>
 8006672:	bf00      	nop
 8006674:	08007f14 	.word	0x08007f14
 8006678:	ffff0001 	.word	0xffff0001

0800667c <_fwalk>:
 800667c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006680:	460f      	mov	r7, r1
 8006682:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800668c:	f1b8 0801 	subs.w	r8, r8, #1
 8006690:	d505      	bpl.n	800669e <_fwalk+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d906      	bls.n	80066b2 <_fwalk+0x36>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d002      	beq.n	80066b2 <_fwalk+0x36>
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	4306      	orrs	r6, r0
 80066b2:	3568      	adds	r5, #104	; 0x68
 80066b4:	e7ea      	b.n	800668c <_fwalk+0x10>

080066b6 <_fwalk_reent>:
 80066b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ba:	4606      	mov	r6, r0
 80066bc:	4688      	mov	r8, r1
 80066be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066c2:	2700      	movs	r7, #0
 80066c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c8:	f1b9 0901 	subs.w	r9, r9, #1
 80066cc:	d505      	bpl.n	80066da <_fwalk_reent+0x24>
 80066ce:	6824      	ldr	r4, [r4, #0]
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	d1f7      	bne.n	80066c4 <_fwalk_reent+0xe>
 80066d4:	4638      	mov	r0, r7
 80066d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d907      	bls.n	80066f0 <_fwalk_reent+0x3a>
 80066e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e4:	3301      	adds	r3, #1
 80066e6:	d003      	beq.n	80066f0 <_fwalk_reent+0x3a>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4630      	mov	r0, r6
 80066ec:	47c0      	blx	r8
 80066ee:	4307      	orrs	r7, r0
 80066f0:	3568      	adds	r5, #104	; 0x68
 80066f2:	e7e9      	b.n	80066c8 <_fwalk_reent+0x12>

080066f4 <__retarget_lock_init_recursive>:
 80066f4:	4770      	bx	lr

080066f6 <__retarget_lock_acquire_recursive>:
 80066f6:	4770      	bx	lr

080066f8 <__retarget_lock_release_recursive>:
 80066f8:	4770      	bx	lr

080066fa <__swhatbuf_r>:
 80066fa:	b570      	push	{r4, r5, r6, lr}
 80066fc:	460e      	mov	r6, r1
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	2900      	cmp	r1, #0
 8006704:	b096      	sub	sp, #88	; 0x58
 8006706:	4614      	mov	r4, r2
 8006708:	461d      	mov	r5, r3
 800670a:	da07      	bge.n	800671c <__swhatbuf_r+0x22>
 800670c:	2300      	movs	r3, #0
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	89b3      	ldrh	r3, [r6, #12]
 8006712:	061a      	lsls	r2, r3, #24
 8006714:	d410      	bmi.n	8006738 <__swhatbuf_r+0x3e>
 8006716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800671a:	e00e      	b.n	800673a <__swhatbuf_r+0x40>
 800671c:	466a      	mov	r2, sp
 800671e:	f001 fae3 	bl	8007ce8 <_fstat_r>
 8006722:	2800      	cmp	r0, #0
 8006724:	dbf2      	blt.n	800670c <__swhatbuf_r+0x12>
 8006726:	9a01      	ldr	r2, [sp, #4]
 8006728:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800672c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006730:	425a      	negs	r2, r3
 8006732:	415a      	adcs	r2, r3
 8006734:	602a      	str	r2, [r5, #0]
 8006736:	e7ee      	b.n	8006716 <__swhatbuf_r+0x1c>
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	2000      	movs	r0, #0
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	b016      	add	sp, #88	; 0x58
 8006740:	bd70      	pop	{r4, r5, r6, pc}
	...

08006744 <__smakebuf_r>:
 8006744:	898b      	ldrh	r3, [r1, #12]
 8006746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006748:	079d      	lsls	r5, r3, #30
 800674a:	4606      	mov	r6, r0
 800674c:	460c      	mov	r4, r1
 800674e:	d507      	bpl.n	8006760 <__smakebuf_r+0x1c>
 8006750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	2301      	movs	r3, #1
 800675a:	6163      	str	r3, [r4, #20]
 800675c:	b002      	add	sp, #8
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	ab01      	add	r3, sp, #4
 8006762:	466a      	mov	r2, sp
 8006764:	f7ff ffc9 	bl	80066fa <__swhatbuf_r>
 8006768:	9900      	ldr	r1, [sp, #0]
 800676a:	4605      	mov	r5, r0
 800676c:	4630      	mov	r0, r6
 800676e:	f000 f881 	bl	8006874 <_malloc_r>
 8006772:	b948      	cbnz	r0, 8006788 <__smakebuf_r+0x44>
 8006774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006778:	059a      	lsls	r2, r3, #22
 800677a:	d4ef      	bmi.n	800675c <__smakebuf_r+0x18>
 800677c:	f023 0303 	bic.w	r3, r3, #3
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	e7e3      	b.n	8006750 <__smakebuf_r+0xc>
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <__smakebuf_r+0x7c>)
 800678a:	62b3      	str	r3, [r6, #40]	; 0x28
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	6020      	str	r0, [r4, #0]
 8006790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	6163      	str	r3, [r4, #20]
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	6120      	str	r0, [r4, #16]
 800679e:	b15b      	cbz	r3, 80067b8 <__smakebuf_r+0x74>
 80067a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067a4:	4630      	mov	r0, r6
 80067a6:	f001 fab1 	bl	8007d0c <_isatty_r>
 80067aa:	b128      	cbz	r0, 80067b8 <__smakebuf_r+0x74>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	89a0      	ldrh	r0, [r4, #12]
 80067ba:	4305      	orrs	r5, r0
 80067bc:	81a5      	strh	r5, [r4, #12]
 80067be:	e7cd      	b.n	800675c <__smakebuf_r+0x18>
 80067c0:	08006519 	.word	0x08006519

080067c4 <malloc>:
 80067c4:	4b02      	ldr	r3, [pc, #8]	; (80067d0 <malloc+0xc>)
 80067c6:	4601      	mov	r1, r0
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f000 b853 	b.w	8006874 <_malloc_r>
 80067ce:	bf00      	nop
 80067d0:	2400001c 	.word	0x2400001c

080067d4 <_free_r>:
 80067d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067d6:	2900      	cmp	r1, #0
 80067d8:	d048      	beq.n	800686c <_free_r+0x98>
 80067da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067de:	9001      	str	r0, [sp, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f1a1 0404 	sub.w	r4, r1, #4
 80067e6:	bfb8      	it	lt
 80067e8:	18e4      	addlt	r4, r4, r3
 80067ea:	f001 fabf 	bl	8007d6c <__malloc_lock>
 80067ee:	4a20      	ldr	r2, [pc, #128]	; (8006870 <_free_r+0x9c>)
 80067f0:	9801      	ldr	r0, [sp, #4]
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	4615      	mov	r5, r2
 80067f6:	b933      	cbnz	r3, 8006806 <_free_r+0x32>
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	6014      	str	r4, [r2, #0]
 80067fc:	b003      	add	sp, #12
 80067fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006802:	f001 bab9 	b.w	8007d78 <__malloc_unlock>
 8006806:	42a3      	cmp	r3, r4
 8006808:	d90b      	bls.n	8006822 <_free_r+0x4e>
 800680a:	6821      	ldr	r1, [r4, #0]
 800680c:	1862      	adds	r2, r4, r1
 800680e:	4293      	cmp	r3, r2
 8006810:	bf04      	itt	eq
 8006812:	681a      	ldreq	r2, [r3, #0]
 8006814:	685b      	ldreq	r3, [r3, #4]
 8006816:	6063      	str	r3, [r4, #4]
 8006818:	bf04      	itt	eq
 800681a:	1852      	addeq	r2, r2, r1
 800681c:	6022      	streq	r2, [r4, #0]
 800681e:	602c      	str	r4, [r5, #0]
 8006820:	e7ec      	b.n	80067fc <_free_r+0x28>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x58>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x4e>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1855      	adds	r5, r2, r1
 8006830:	42a5      	cmp	r5, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x78>
 8006834:	6824      	ldr	r4, [r4, #0]
 8006836:	4421      	add	r1, r4
 8006838:	1854      	adds	r4, r2, r1
 800683a:	42a3      	cmp	r3, r4
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1dd      	bne.n	80067fc <_free_r+0x28>
 8006840:	681c      	ldr	r4, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4421      	add	r1, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	e7d7      	b.n	80067fc <_free_r+0x28>
 800684c:	d902      	bls.n	8006854 <_free_r+0x80>
 800684e:	230c      	movs	r3, #12
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	e7d3      	b.n	80067fc <_free_r+0x28>
 8006854:	6825      	ldr	r5, [r4, #0]
 8006856:	1961      	adds	r1, r4, r5
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1949      	addeq	r1, r1, r5
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7c7      	b.n	80067fc <_free_r+0x28>
 800686c:	b003      	add	sp, #12
 800686e:	bd30      	pop	{r4, r5, pc}
 8006870:	24000168 	.word	0x24000168

08006874 <_malloc_r>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	1ccd      	adds	r5, r1, #3
 8006878:	f025 0503 	bic.w	r5, r5, #3
 800687c:	3508      	adds	r5, #8
 800687e:	2d0c      	cmp	r5, #12
 8006880:	bf38      	it	cc
 8006882:	250c      	movcc	r5, #12
 8006884:	2d00      	cmp	r5, #0
 8006886:	4606      	mov	r6, r0
 8006888:	db01      	blt.n	800688e <_malloc_r+0x1a>
 800688a:	42a9      	cmp	r1, r5
 800688c:	d903      	bls.n	8006896 <_malloc_r+0x22>
 800688e:	230c      	movs	r3, #12
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	2000      	movs	r0, #0
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006896:	f001 fa69 	bl	8007d6c <__malloc_lock>
 800689a:	4921      	ldr	r1, [pc, #132]	; (8006920 <_malloc_r+0xac>)
 800689c:	680a      	ldr	r2, [r1, #0]
 800689e:	4614      	mov	r4, r2
 80068a0:	b99c      	cbnz	r4, 80068ca <_malloc_r+0x56>
 80068a2:	4f20      	ldr	r7, [pc, #128]	; (8006924 <_malloc_r+0xb0>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	b923      	cbnz	r3, 80068b2 <_malloc_r+0x3e>
 80068a8:	4621      	mov	r1, r4
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 fed6 	bl	800765c <_sbrk_r>
 80068b0:	6038      	str	r0, [r7, #0]
 80068b2:	4629      	mov	r1, r5
 80068b4:	4630      	mov	r0, r6
 80068b6:	f000 fed1 	bl	800765c <_sbrk_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d123      	bne.n	8006906 <_malloc_r+0x92>
 80068be:	230c      	movs	r3, #12
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	4630      	mov	r0, r6
 80068c4:	f001 fa58 	bl	8007d78 <__malloc_unlock>
 80068c8:	e7e3      	b.n	8006892 <_malloc_r+0x1e>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	1b5b      	subs	r3, r3, r5
 80068ce:	d417      	bmi.n	8006900 <_malloc_r+0x8c>
 80068d0:	2b0b      	cmp	r3, #11
 80068d2:	d903      	bls.n	80068dc <_malloc_r+0x68>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	441c      	add	r4, r3
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	e004      	b.n	80068e6 <_malloc_r+0x72>
 80068dc:	6863      	ldr	r3, [r4, #4]
 80068de:	42a2      	cmp	r2, r4
 80068e0:	bf0c      	ite	eq
 80068e2:	600b      	streq	r3, [r1, #0]
 80068e4:	6053      	strne	r3, [r2, #4]
 80068e6:	4630      	mov	r0, r6
 80068e8:	f001 fa46 	bl	8007d78 <__malloc_unlock>
 80068ec:	f104 000b 	add.w	r0, r4, #11
 80068f0:	1d23      	adds	r3, r4, #4
 80068f2:	f020 0007 	bic.w	r0, r0, #7
 80068f6:	1ac2      	subs	r2, r0, r3
 80068f8:	d0cc      	beq.n	8006894 <_malloc_r+0x20>
 80068fa:	1a1b      	subs	r3, r3, r0
 80068fc:	50a3      	str	r3, [r4, r2]
 80068fe:	e7c9      	b.n	8006894 <_malloc_r+0x20>
 8006900:	4622      	mov	r2, r4
 8006902:	6864      	ldr	r4, [r4, #4]
 8006904:	e7cc      	b.n	80068a0 <_malloc_r+0x2c>
 8006906:	1cc4      	adds	r4, r0, #3
 8006908:	f024 0403 	bic.w	r4, r4, #3
 800690c:	42a0      	cmp	r0, r4
 800690e:	d0e3      	beq.n	80068d8 <_malloc_r+0x64>
 8006910:	1a21      	subs	r1, r4, r0
 8006912:	4630      	mov	r0, r6
 8006914:	f000 fea2 	bl	800765c <_sbrk_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d1dd      	bne.n	80068d8 <_malloc_r+0x64>
 800691c:	e7cf      	b.n	80068be <_malloc_r+0x4a>
 800691e:	bf00      	nop
 8006920:	24000168 	.word	0x24000168
 8006924:	2400016c 	.word	0x2400016c

08006928 <__sfputc_r>:
 8006928:	6893      	ldr	r3, [r2, #8]
 800692a:	3b01      	subs	r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	b410      	push	{r4}
 8006930:	6093      	str	r3, [r2, #8]
 8006932:	da08      	bge.n	8006946 <__sfputc_r+0x1e>
 8006934:	6994      	ldr	r4, [r2, #24]
 8006936:	42a3      	cmp	r3, r4
 8006938:	db01      	blt.n	800693e <__sfputc_r+0x16>
 800693a:	290a      	cmp	r1, #10
 800693c:	d103      	bne.n	8006946 <__sfputc_r+0x1e>
 800693e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006942:	f001 b8ef 	b.w	8007b24 <__swbuf_r>
 8006946:	6813      	ldr	r3, [r2, #0]
 8006948:	1c58      	adds	r0, r3, #1
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	7019      	strb	r1, [r3, #0]
 800694e:	4608      	mov	r0, r1
 8006950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006954:	4770      	bx	lr

08006956 <__sfputs_r>:
 8006956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	4614      	mov	r4, r2
 800695e:	18d5      	adds	r5, r2, r3
 8006960:	42ac      	cmp	r4, r5
 8006962:	d101      	bne.n	8006968 <__sfputs_r+0x12>
 8006964:	2000      	movs	r0, #0
 8006966:	e007      	b.n	8006978 <__sfputs_r+0x22>
 8006968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696c:	463a      	mov	r2, r7
 800696e:	4630      	mov	r0, r6
 8006970:	f7ff ffda 	bl	8006928 <__sfputc_r>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d1f3      	bne.n	8006960 <__sfputs_r+0xa>
 8006978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800697c <_vfiprintf_r>:
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	460d      	mov	r5, r1
 8006982:	b09d      	sub	sp, #116	; 0x74
 8006984:	4614      	mov	r4, r2
 8006986:	4698      	mov	r8, r3
 8006988:	4606      	mov	r6, r0
 800698a:	b118      	cbz	r0, 8006994 <_vfiprintf_r+0x18>
 800698c:	6983      	ldr	r3, [r0, #24]
 800698e:	b90b      	cbnz	r3, 8006994 <_vfiprintf_r+0x18>
 8006990:	f7ff fdf6 	bl	8006580 <__sinit>
 8006994:	4b89      	ldr	r3, [pc, #548]	; (8006bbc <_vfiprintf_r+0x240>)
 8006996:	429d      	cmp	r5, r3
 8006998:	d11b      	bne.n	80069d2 <_vfiprintf_r+0x56>
 800699a:	6875      	ldr	r5, [r6, #4]
 800699c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800699e:	07d9      	lsls	r1, r3, #31
 80069a0:	d405      	bmi.n	80069ae <_vfiprintf_r+0x32>
 80069a2:	89ab      	ldrh	r3, [r5, #12]
 80069a4:	059a      	lsls	r2, r3, #22
 80069a6:	d402      	bmi.n	80069ae <_vfiprintf_r+0x32>
 80069a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069aa:	f7ff fea4 	bl	80066f6 <__retarget_lock_acquire_recursive>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	071b      	lsls	r3, r3, #28
 80069b2:	d501      	bpl.n	80069b8 <_vfiprintf_r+0x3c>
 80069b4:	692b      	ldr	r3, [r5, #16]
 80069b6:	b9eb      	cbnz	r3, 80069f4 <_vfiprintf_r+0x78>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4630      	mov	r0, r6
 80069bc:	f001 f916 	bl	8007bec <__swsetup_r>
 80069c0:	b1c0      	cbz	r0, 80069f4 <_vfiprintf_r+0x78>
 80069c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c4:	07dc      	lsls	r4, r3, #31
 80069c6:	d50e      	bpl.n	80069e6 <_vfiprintf_r+0x6a>
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	b01d      	add	sp, #116	; 0x74
 80069ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d2:	4b7b      	ldr	r3, [pc, #492]	; (8006bc0 <_vfiprintf_r+0x244>)
 80069d4:	429d      	cmp	r5, r3
 80069d6:	d101      	bne.n	80069dc <_vfiprintf_r+0x60>
 80069d8:	68b5      	ldr	r5, [r6, #8]
 80069da:	e7df      	b.n	800699c <_vfiprintf_r+0x20>
 80069dc:	4b79      	ldr	r3, [pc, #484]	; (8006bc4 <_vfiprintf_r+0x248>)
 80069de:	429d      	cmp	r5, r3
 80069e0:	bf08      	it	eq
 80069e2:	68f5      	ldreq	r5, [r6, #12]
 80069e4:	e7da      	b.n	800699c <_vfiprintf_r+0x20>
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	0598      	lsls	r0, r3, #22
 80069ea:	d4ed      	bmi.n	80069c8 <_vfiprintf_r+0x4c>
 80069ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ee:	f7ff fe83 	bl	80066f8 <__retarget_lock_release_recursive>
 80069f2:	e7e9      	b.n	80069c8 <_vfiprintf_r+0x4c>
 80069f4:	2300      	movs	r3, #0
 80069f6:	9309      	str	r3, [sp, #36]	; 0x24
 80069f8:	2320      	movs	r3, #32
 80069fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a02:	2330      	movs	r3, #48	; 0x30
 8006a04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bc8 <_vfiprintf_r+0x24c>
 8006a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a0c:	f04f 0901 	mov.w	r9, #1
 8006a10:	4623      	mov	r3, r4
 8006a12:	469a      	mov	sl, r3
 8006a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a18:	b10a      	cbz	r2, 8006a1e <_vfiprintf_r+0xa2>
 8006a1a:	2a25      	cmp	r2, #37	; 0x25
 8006a1c:	d1f9      	bne.n	8006a12 <_vfiprintf_r+0x96>
 8006a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a22:	d00b      	beq.n	8006a3c <_vfiprintf_r+0xc0>
 8006a24:	465b      	mov	r3, fp
 8006a26:	4622      	mov	r2, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff ff93 	bl	8006956 <__sfputs_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	f000 80aa 	beq.w	8006b8a <_vfiprintf_r+0x20e>
 8006a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a38:	445a      	add	r2, fp
 8006a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80a2 	beq.w	8006b8a <_vfiprintf_r+0x20e>
 8006a46:	2300      	movs	r3, #0
 8006a48:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a50:	f10a 0a01 	add.w	sl, sl, #1
 8006a54:	9304      	str	r3, [sp, #16]
 8006a56:	9307      	str	r3, [sp, #28]
 8006a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a5e:	4654      	mov	r4, sl
 8006a60:	2205      	movs	r2, #5
 8006a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a66:	4858      	ldr	r0, [pc, #352]	; (8006bc8 <_vfiprintf_r+0x24c>)
 8006a68:	f7f9 fc3a 	bl	80002e0 <memchr>
 8006a6c:	9a04      	ldr	r2, [sp, #16]
 8006a6e:	b9d8      	cbnz	r0, 8006aa8 <_vfiprintf_r+0x12c>
 8006a70:	06d1      	lsls	r1, r2, #27
 8006a72:	bf44      	itt	mi
 8006a74:	2320      	movmi	r3, #32
 8006a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7a:	0713      	lsls	r3, r2, #28
 8006a7c:	bf44      	itt	mi
 8006a7e:	232b      	movmi	r3, #43	; 0x2b
 8006a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a84:	f89a 3000 	ldrb.w	r3, [sl]
 8006a88:	2b2a      	cmp	r3, #42	; 0x2a
 8006a8a:	d015      	beq.n	8006ab8 <_vfiprintf_r+0x13c>
 8006a8c:	9a07      	ldr	r2, [sp, #28]
 8006a8e:	4654      	mov	r4, sl
 8006a90:	2000      	movs	r0, #0
 8006a92:	f04f 0c0a 	mov.w	ip, #10
 8006a96:	4621      	mov	r1, r4
 8006a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a9c:	3b30      	subs	r3, #48	; 0x30
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d94e      	bls.n	8006b40 <_vfiprintf_r+0x1c4>
 8006aa2:	b1b0      	cbz	r0, 8006ad2 <_vfiprintf_r+0x156>
 8006aa4:	9207      	str	r2, [sp, #28]
 8006aa6:	e014      	b.n	8006ad2 <_vfiprintf_r+0x156>
 8006aa8:	eba0 0308 	sub.w	r3, r0, r8
 8006aac:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	46a2      	mov	sl, r4
 8006ab6:	e7d2      	b.n	8006a5e <_vfiprintf_r+0xe2>
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	1d19      	adds	r1, r3, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	9103      	str	r1, [sp, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bfbb      	ittet	lt
 8006ac4:	425b      	neglt	r3, r3
 8006ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8006aca:	9307      	strge	r3, [sp, #28]
 8006acc:	9307      	strlt	r3, [sp, #28]
 8006ace:	bfb8      	it	lt
 8006ad0:	9204      	strlt	r2, [sp, #16]
 8006ad2:	7823      	ldrb	r3, [r4, #0]
 8006ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad6:	d10c      	bne.n	8006af2 <_vfiprintf_r+0x176>
 8006ad8:	7863      	ldrb	r3, [r4, #1]
 8006ada:	2b2a      	cmp	r3, #42	; 0x2a
 8006adc:	d135      	bne.n	8006b4a <_vfiprintf_r+0x1ce>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d1a      	adds	r2, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9203      	str	r2, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfb8      	it	lt
 8006aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aee:	3402      	adds	r4, #2
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bd8 <_vfiprintf_r+0x25c>
 8006af6:	7821      	ldrb	r1, [r4, #0]
 8006af8:	2203      	movs	r2, #3
 8006afa:	4650      	mov	r0, sl
 8006afc:	f7f9 fbf0 	bl	80002e0 <memchr>
 8006b00:	b140      	cbz	r0, 8006b14 <_vfiprintf_r+0x198>
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	eba0 000a 	sub.w	r0, r0, sl
 8006b08:	fa03 f000 	lsl.w	r0, r3, r0
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	4303      	orrs	r3, r0
 8006b10:	3401      	adds	r4, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b18:	482c      	ldr	r0, [pc, #176]	; (8006bcc <_vfiprintf_r+0x250>)
 8006b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b1e:	2206      	movs	r2, #6
 8006b20:	f7f9 fbde 	bl	80002e0 <memchr>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d03f      	beq.n	8006ba8 <_vfiprintf_r+0x22c>
 8006b28:	4b29      	ldr	r3, [pc, #164]	; (8006bd0 <_vfiprintf_r+0x254>)
 8006b2a:	bb1b      	cbnz	r3, 8006b74 <_vfiprintf_r+0x1f8>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	3307      	adds	r3, #7
 8006b30:	f023 0307 	bic.w	r3, r3, #7
 8006b34:	3308      	adds	r3, #8
 8006b36:	9303      	str	r3, [sp, #12]
 8006b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3a:	443b      	add	r3, r7
 8006b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3e:	e767      	b.n	8006a10 <_vfiprintf_r+0x94>
 8006b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b44:	460c      	mov	r4, r1
 8006b46:	2001      	movs	r0, #1
 8006b48:	e7a5      	b.n	8006a96 <_vfiprintf_r+0x11a>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	3401      	adds	r4, #1
 8006b4e:	9305      	str	r3, [sp, #20]
 8006b50:	4619      	mov	r1, r3
 8006b52:	f04f 0c0a 	mov.w	ip, #10
 8006b56:	4620      	mov	r0, r4
 8006b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b5c:	3a30      	subs	r2, #48	; 0x30
 8006b5e:	2a09      	cmp	r2, #9
 8006b60:	d903      	bls.n	8006b6a <_vfiprintf_r+0x1ee>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0c5      	beq.n	8006af2 <_vfiprintf_r+0x176>
 8006b66:	9105      	str	r1, [sp, #20]
 8006b68:	e7c3      	b.n	8006af2 <_vfiprintf_r+0x176>
 8006b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6e:	4604      	mov	r4, r0
 8006b70:	2301      	movs	r3, #1
 8006b72:	e7f0      	b.n	8006b56 <_vfiprintf_r+0x1da>
 8006b74:	ab03      	add	r3, sp, #12
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	462a      	mov	r2, r5
 8006b7a:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <_vfiprintf_r+0x258>)
 8006b7c:	a904      	add	r1, sp, #16
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f3af 8000 	nop.w
 8006b84:	4607      	mov	r7, r0
 8006b86:	1c78      	adds	r0, r7, #1
 8006b88:	d1d6      	bne.n	8006b38 <_vfiprintf_r+0x1bc>
 8006b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b8c:	07d9      	lsls	r1, r3, #31
 8006b8e:	d405      	bmi.n	8006b9c <_vfiprintf_r+0x220>
 8006b90:	89ab      	ldrh	r3, [r5, #12]
 8006b92:	059a      	lsls	r2, r3, #22
 8006b94:	d402      	bmi.n	8006b9c <_vfiprintf_r+0x220>
 8006b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b98:	f7ff fdae 	bl	80066f8 <__retarget_lock_release_recursive>
 8006b9c:	89ab      	ldrh	r3, [r5, #12]
 8006b9e:	065b      	lsls	r3, r3, #25
 8006ba0:	f53f af12 	bmi.w	80069c8 <_vfiprintf_r+0x4c>
 8006ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba6:	e711      	b.n	80069cc <_vfiprintf_r+0x50>
 8006ba8:	ab03      	add	r3, sp, #12
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	462a      	mov	r2, r5
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <_vfiprintf_r+0x258>)
 8006bb0:	a904      	add	r1, sp, #16
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f000 f880 	bl	8006cb8 <_printf_i>
 8006bb8:	e7e4      	b.n	8006b84 <_vfiprintf_r+0x208>
 8006bba:	bf00      	nop
 8006bbc:	08007f38 	.word	0x08007f38
 8006bc0:	08007f58 	.word	0x08007f58
 8006bc4:	08007f18 	.word	0x08007f18
 8006bc8:	08007f78 	.word	0x08007f78
 8006bcc:	08007f82 	.word	0x08007f82
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	08006957 	.word	0x08006957
 8006bd8:	08007f7e 	.word	0x08007f7e

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4699      	mov	r9, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfb8      	it	lt
 8006bf0:	4613      	movlt	r3, r2
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc26      	bgt.n	8006c72 <_printf_common+0x96>
 8006c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c28:	1e13      	subs	r3, r2, #0
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d42b      	bmi.n	8006c8c <_printf_common+0xb0>
 8006c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d01e      	beq.n	8006c80 <_printf_common+0xa4>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	68e5      	ldr	r5, [r4, #12]
 8006c46:	6832      	ldr	r2, [r6, #0]
 8006c48:	f003 0306 	and.w	r3, r3, #6
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	bf08      	it	eq
 8006c50:	1aad      	subeq	r5, r5, r2
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	bf0c      	ite	eq
 8006c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c5c:	2500      	movne	r5, #0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bfc4      	itt	gt
 8006c62:	1a9b      	subgt	r3, r3, r2
 8006c64:	18ed      	addgt	r5, r5, r3
 8006c66:	2600      	movs	r6, #0
 8006c68:	341a      	adds	r4, #26
 8006c6a:	42b5      	cmp	r5, r6
 8006c6c:	d11a      	bne.n	8006ca4 <_printf_common+0xc8>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e008      	b.n	8006c84 <_printf_common+0xa8>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4649      	mov	r1, r9
 8006c78:	4638      	mov	r0, r7
 8006c7a:	47c0      	blx	r8
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_printf_common+0xac>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c88:	3501      	adds	r5, #1
 8006c8a:	e7c6      	b.n	8006c1a <_printf_common+0x3e>
 8006c8c:	18e1      	adds	r1, r4, r3
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	2030      	movs	r0, #48	; 0x30
 8006c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c96:	4422      	add	r2, r4
 8006c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	e7c7      	b.n	8006c34 <_printf_common+0x58>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0e6      	beq.n	8006c80 <_printf_common+0xa4>
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7d9      	b.n	8006c6a <_printf_common+0x8e>
	...

08006cb8 <_printf_i>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	4691      	mov	r9, r2
 8006cc0:	7e27      	ldrb	r7, [r4, #24]
 8006cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cc4:	2f78      	cmp	r7, #120	; 0x78
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cce:	d807      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cd0:	2f62      	cmp	r7, #98	; 0x62
 8006cd2:	d80a      	bhi.n	8006cea <_printf_i+0x32>
 8006cd4:	2f00      	cmp	r7, #0
 8006cd6:	f000 80d8 	beq.w	8006e8a <_printf_i+0x1d2>
 8006cda:	2f58      	cmp	r7, #88	; 0x58
 8006cdc:	f000 80a3 	beq.w	8006e26 <_printf_i+0x16e>
 8006ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ce8:	e03a      	b.n	8006d60 <_printf_i+0xa8>
 8006cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cee:	2b15      	cmp	r3, #21
 8006cf0:	d8f6      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cf2:	a001      	add	r0, pc, #4	; (adr r0, 8006cf8 <_printf_i+0x40>)
 8006cf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006ce1 	.word	0x08006ce1
 8006d04:	08006ce1 	.word	0x08006ce1
 8006d08:	08006ce1 	.word	0x08006ce1
 8006d0c:	08006ce1 	.word	0x08006ce1
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006ce1 	.word	0x08006ce1
 8006d18:	08006ce1 	.word	0x08006ce1
 8006d1c:	08006ce1 	.word	0x08006ce1
 8006d20:	08006ce1 	.word	0x08006ce1
 8006d24:	08006e71 	.word	0x08006e71
 8006d28:	08006d95 	.word	0x08006d95
 8006d2c:	08006e53 	.word	0x08006e53
 8006d30:	08006ce1 	.word	0x08006ce1
 8006d34:	08006ce1 	.word	0x08006ce1
 8006d38:	08006e93 	.word	0x08006e93
 8006d3c:	08006ce1 	.word	0x08006ce1
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006ce1 	.word	0x08006ce1
 8006d48:	08006ce1 	.word	0x08006ce1
 8006d4c:	08006e5b 	.word	0x08006e5b
 8006d50:	680b      	ldr	r3, [r1, #0]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	600a      	str	r2, [r1, #0]
 8006d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0a3      	b.n	8006eac <_printf_i+0x1f4>
 8006d64:	6825      	ldr	r5, [r4, #0]
 8006d66:	6808      	ldr	r0, [r1, #0]
 8006d68:	062e      	lsls	r6, r5, #24
 8006d6a:	f100 0304 	add.w	r3, r0, #4
 8006d6e:	d50a      	bpl.n	8006d86 <_printf_i+0xce>
 8006d70:	6805      	ldr	r5, [r0, #0]
 8006d72:	600b      	str	r3, [r1, #0]
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	da03      	bge.n	8006d80 <_printf_i+0xc8>
 8006d78:	232d      	movs	r3, #45	; 0x2d
 8006d7a:	426d      	negs	r5, r5
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d80:	485e      	ldr	r0, [pc, #376]	; (8006efc <_printf_i+0x244>)
 8006d82:	230a      	movs	r3, #10
 8006d84:	e019      	b.n	8006dba <_printf_i+0x102>
 8006d86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d8a:	6805      	ldr	r5, [r0, #0]
 8006d8c:	600b      	str	r3, [r1, #0]
 8006d8e:	bf18      	it	ne
 8006d90:	b22d      	sxthne	r5, r5
 8006d92:	e7ef      	b.n	8006d74 <_printf_i+0xbc>
 8006d94:	680b      	ldr	r3, [r1, #0]
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	1d18      	adds	r0, r3, #4
 8006d9a:	6008      	str	r0, [r1, #0]
 8006d9c:	0628      	lsls	r0, r5, #24
 8006d9e:	d501      	bpl.n	8006da4 <_printf_i+0xec>
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	e002      	b.n	8006daa <_printf_i+0xf2>
 8006da4:	0669      	lsls	r1, r5, #25
 8006da6:	d5fb      	bpl.n	8006da0 <_printf_i+0xe8>
 8006da8:	881d      	ldrh	r5, [r3, #0]
 8006daa:	4854      	ldr	r0, [pc, #336]	; (8006efc <_printf_i+0x244>)
 8006dac:	2f6f      	cmp	r7, #111	; 0x6f
 8006dae:	bf0c      	ite	eq
 8006db0:	2308      	moveq	r3, #8
 8006db2:	230a      	movne	r3, #10
 8006db4:	2100      	movs	r1, #0
 8006db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dba:	6866      	ldr	r6, [r4, #4]
 8006dbc:	60a6      	str	r6, [r4, #8]
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	bfa2      	ittt	ge
 8006dc2:	6821      	ldrge	r1, [r4, #0]
 8006dc4:	f021 0104 	bicge.w	r1, r1, #4
 8006dc8:	6021      	strge	r1, [r4, #0]
 8006dca:	b90d      	cbnz	r5, 8006dd0 <_printf_i+0x118>
 8006dcc:	2e00      	cmp	r6, #0
 8006dce:	d04d      	beq.n	8006e6c <_printf_i+0x1b4>
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dda:	5dc7      	ldrb	r7, [r0, r7]
 8006ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006de0:	462f      	mov	r7, r5
 8006de2:	42bb      	cmp	r3, r7
 8006de4:	460d      	mov	r5, r1
 8006de6:	d9f4      	bls.n	8006dd2 <_printf_i+0x11a>
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d10b      	bne.n	8006e04 <_printf_i+0x14c>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	07df      	lsls	r7, r3, #31
 8006df0:	d508      	bpl.n	8006e04 <_printf_i+0x14c>
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6861      	ldr	r1, [r4, #4]
 8006df6:	4299      	cmp	r1, r3
 8006df8:	bfde      	ittt	le
 8006dfa:	2330      	movle	r3, #48	; 0x30
 8006dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e04:	1b92      	subs	r2, r2, r6
 8006e06:	6122      	str	r2, [r4, #16]
 8006e08:	f8cd a000 	str.w	sl, [sp]
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	aa03      	add	r2, sp, #12
 8006e10:	4621      	mov	r1, r4
 8006e12:	4640      	mov	r0, r8
 8006e14:	f7ff fee2 	bl	8006bdc <_printf_common>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d14c      	bne.n	8006eb6 <_printf_i+0x1fe>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	b004      	add	sp, #16
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e26:	4835      	ldr	r0, [pc, #212]	; (8006efc <_printf_i+0x244>)
 8006e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	680e      	ldr	r6, [r1, #0]
 8006e30:	061f      	lsls	r7, r3, #24
 8006e32:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e36:	600e      	str	r6, [r1, #0]
 8006e38:	d514      	bpl.n	8006e64 <_printf_i+0x1ac>
 8006e3a:	07d9      	lsls	r1, r3, #31
 8006e3c:	bf44      	itt	mi
 8006e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e42:	6023      	strmi	r3, [r4, #0]
 8006e44:	b91d      	cbnz	r5, 8006e4e <_printf_i+0x196>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	f023 0320 	bic.w	r3, r3, #32
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	2310      	movs	r3, #16
 8006e50:	e7b0      	b.n	8006db4 <_printf_i+0xfc>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	f043 0320 	orr.w	r3, r3, #32
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	2378      	movs	r3, #120	; 0x78
 8006e5c:	4828      	ldr	r0, [pc, #160]	; (8006f00 <_printf_i+0x248>)
 8006e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e62:	e7e3      	b.n	8006e2c <_printf_i+0x174>
 8006e64:	065e      	lsls	r6, r3, #25
 8006e66:	bf48      	it	mi
 8006e68:	b2ad      	uxthmi	r5, r5
 8006e6a:	e7e6      	b.n	8006e3a <_printf_i+0x182>
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	e7bb      	b.n	8006de8 <_printf_i+0x130>
 8006e70:	680b      	ldr	r3, [r1, #0]
 8006e72:	6826      	ldr	r6, [r4, #0]
 8006e74:	6960      	ldr	r0, [r4, #20]
 8006e76:	1d1d      	adds	r5, r3, #4
 8006e78:	600d      	str	r5, [r1, #0]
 8006e7a:	0635      	lsls	r5, r6, #24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	d501      	bpl.n	8006e84 <_printf_i+0x1cc>
 8006e80:	6018      	str	r0, [r3, #0]
 8006e82:	e002      	b.n	8006e8a <_printf_i+0x1d2>
 8006e84:	0671      	lsls	r1, r6, #25
 8006e86:	d5fb      	bpl.n	8006e80 <_printf_i+0x1c8>
 8006e88:	8018      	strh	r0, [r3, #0]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	4616      	mov	r6, r2
 8006e90:	e7ba      	b.n	8006e08 <_printf_i+0x150>
 8006e92:	680b      	ldr	r3, [r1, #0]
 8006e94:	1d1a      	adds	r2, r3, #4
 8006e96:	600a      	str	r2, [r1, #0]
 8006e98:	681e      	ldr	r6, [r3, #0]
 8006e9a:	6862      	ldr	r2, [r4, #4]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7f9 fa1e 	bl	80002e0 <memchr>
 8006ea4:	b108      	cbz	r0, 8006eaa <_printf_i+0x1f2>
 8006ea6:	1b80      	subs	r0, r0, r6
 8006ea8:	6060      	str	r0, [r4, #4]
 8006eaa:	6863      	ldr	r3, [r4, #4]
 8006eac:	6123      	str	r3, [r4, #16]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb4:	e7a8      	b.n	8006e08 <_printf_i+0x150>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	47d0      	blx	sl
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d0ab      	beq.n	8006e1c <_printf_i+0x164>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	079b      	lsls	r3, r3, #30
 8006ec8:	d413      	bmi.n	8006ef2 <_printf_i+0x23a>
 8006eca:	68e0      	ldr	r0, [r4, #12]
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	4298      	cmp	r0, r3
 8006ed0:	bfb8      	it	lt
 8006ed2:	4618      	movlt	r0, r3
 8006ed4:	e7a4      	b.n	8006e20 <_printf_i+0x168>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4632      	mov	r2, r6
 8006eda:	4649      	mov	r1, r9
 8006edc:	4640      	mov	r0, r8
 8006ede:	47d0      	blx	sl
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d09b      	beq.n	8006e1c <_printf_i+0x164>
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	68e3      	ldr	r3, [r4, #12]
 8006ee8:	9903      	ldr	r1, [sp, #12]
 8006eea:	1a5b      	subs	r3, r3, r1
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	dcf2      	bgt.n	8006ed6 <_printf_i+0x21e>
 8006ef0:	e7eb      	b.n	8006eca <_printf_i+0x212>
 8006ef2:	2500      	movs	r5, #0
 8006ef4:	f104 0619 	add.w	r6, r4, #25
 8006ef8:	e7f5      	b.n	8006ee6 <_printf_i+0x22e>
 8006efa:	bf00      	nop
 8006efc:	08007f89 	.word	0x08007f89
 8006f00:	08007f9a 	.word	0x08007f9a

08006f04 <__svfiscanf_r>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	461d      	mov	r5, r3
 8006f0a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006f0c:	07df      	lsls	r7, r3, #31
 8006f0e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006f12:	4606      	mov	r6, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	4692      	mov	sl, r2
 8006f18:	d405      	bmi.n	8006f26 <__svfiscanf_r+0x22>
 8006f1a:	898b      	ldrh	r3, [r1, #12]
 8006f1c:	0598      	lsls	r0, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <__svfiscanf_r+0x22>
 8006f20:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006f22:	f7ff fbe8 	bl	80066f6 <__retarget_lock_acquire_recursive>
 8006f26:	2300      	movs	r3, #0
 8006f28:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8006f2c:	4bae      	ldr	r3, [pc, #696]	; (80071e8 <__svfiscanf_r+0x2e4>)
 8006f2e:	93a0      	str	r3, [sp, #640]	; 0x280
 8006f30:	f10d 0804 	add.w	r8, sp, #4
 8006f34:	4bad      	ldr	r3, [pc, #692]	; (80071ec <__svfiscanf_r+0x2e8>)
 8006f36:	4fae      	ldr	r7, [pc, #696]	; (80071f0 <__svfiscanf_r+0x2ec>)
 8006f38:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80071f4 <__svfiscanf_r+0x2f0>
 8006f3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006f40:	93a1      	str	r3, [sp, #644]	; 0x284
 8006f42:	9500      	str	r5, [sp, #0]
 8006f44:	f89a b000 	ldrb.w	fp, [sl]
 8006f48:	f1bb 0f00 	cmp.w	fp, #0
 8006f4c:	f000 8170 	beq.w	8007230 <__svfiscanf_r+0x32c>
 8006f50:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8006f54:	f013 0308 	ands.w	r3, r3, #8
 8006f58:	f10a 0501 	add.w	r5, sl, #1
 8006f5c:	d019      	beq.n	8006f92 <__svfiscanf_r+0x8e>
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dd0f      	ble.n	8006f84 <__svfiscanf_r+0x80>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	5cba      	ldrb	r2, [r7, r2]
 8006f6a:	0711      	lsls	r1, r2, #28
 8006f6c:	d401      	bmi.n	8006f72 <__svfiscanf_r+0x6e>
 8006f6e:	46aa      	mov	sl, r5
 8006f70:	e7e8      	b.n	8006f44 <__svfiscanf_r+0x40>
 8006f72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f74:	3201      	adds	r2, #1
 8006f76:	9245      	str	r2, [sp, #276]	; 0x114
 8006f78:	6862      	ldr	r2, [r4, #4]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	3a01      	subs	r2, #1
 8006f7e:	6062      	str	r2, [r4, #4]
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	e7ec      	b.n	8006f5e <__svfiscanf_r+0x5a>
 8006f84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f86:	4621      	mov	r1, r4
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4798      	blx	r3
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d0e9      	beq.n	8006f64 <__svfiscanf_r+0x60>
 8006f90:	e7ed      	b.n	8006f6e <__svfiscanf_r+0x6a>
 8006f92:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006f96:	f040 8086 	bne.w	80070a6 <__svfiscanf_r+0x1a2>
 8006f9a:	9341      	str	r3, [sp, #260]	; 0x104
 8006f9c:	9343      	str	r3, [sp, #268]	; 0x10c
 8006f9e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa4:	bf02      	ittt	eq
 8006fa6:	2310      	moveq	r3, #16
 8006fa8:	9341      	streq	r3, [sp, #260]	; 0x104
 8006faa:	f10a 0502 	addeq.w	r5, sl, #2
 8006fae:	220a      	movs	r2, #10
 8006fb0:	46aa      	mov	sl, r5
 8006fb2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006fb6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006fba:	2b09      	cmp	r3, #9
 8006fbc:	d91e      	bls.n	8006ffc <__svfiscanf_r+0xf8>
 8006fbe:	488d      	ldr	r0, [pc, #564]	; (80071f4 <__svfiscanf_r+0x2f0>)
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	f7f9 f98d 	bl	80002e0 <memchr>
 8006fc6:	b140      	cbz	r0, 8006fda <__svfiscanf_r+0xd6>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	eba0 0009 	sub.w	r0, r0, r9
 8006fce:	fa03 f000 	lsl.w	r0, r3, r0
 8006fd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fd4:	4318      	orrs	r0, r3
 8006fd6:	9041      	str	r0, [sp, #260]	; 0x104
 8006fd8:	4655      	mov	r5, sl
 8006fda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006fde:	2b78      	cmp	r3, #120	; 0x78
 8006fe0:	d807      	bhi.n	8006ff2 <__svfiscanf_r+0xee>
 8006fe2:	2b57      	cmp	r3, #87	; 0x57
 8006fe4:	d811      	bhi.n	800700a <__svfiscanf_r+0x106>
 8006fe6:	2b25      	cmp	r3, #37	; 0x25
 8006fe8:	d05d      	beq.n	80070a6 <__svfiscanf_r+0x1a2>
 8006fea:	d857      	bhi.n	800709c <__svfiscanf_r+0x198>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80d6 	beq.w	800719e <__svfiscanf_r+0x29a>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	9342      	str	r3, [sp, #264]	; 0x108
 8006ffa:	e08b      	b.n	8007114 <__svfiscanf_r+0x210>
 8006ffc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006ffe:	fb02 1303 	mla	r3, r2, r3, r1
 8007002:	3b30      	subs	r3, #48	; 0x30
 8007004:	9343      	str	r3, [sp, #268]	; 0x10c
 8007006:	4655      	mov	r5, sl
 8007008:	e7d2      	b.n	8006fb0 <__svfiscanf_r+0xac>
 800700a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800700e:	2a20      	cmp	r2, #32
 8007010:	d8ef      	bhi.n	8006ff2 <__svfiscanf_r+0xee>
 8007012:	a101      	add	r1, pc, #4	; (adr r1, 8007018 <__svfiscanf_r+0x114>)
 8007014:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007018:	080070ff 	.word	0x080070ff
 800701c:	08006ff3 	.word	0x08006ff3
 8007020:	08006ff3 	.word	0x08006ff3
 8007024:	0800715d 	.word	0x0800715d
 8007028:	08006ff3 	.word	0x08006ff3
 800702c:	08006ff3 	.word	0x08006ff3
 8007030:	08006ff3 	.word	0x08006ff3
 8007034:	08006ff3 	.word	0x08006ff3
 8007038:	08006ff3 	.word	0x08006ff3
 800703c:	08006ff3 	.word	0x08006ff3
 8007040:	08006ff3 	.word	0x08006ff3
 8007044:	08007173 	.word	0x08007173
 8007048:	08007149 	.word	0x08007149
 800704c:	080070a3 	.word	0x080070a3
 8007050:	080070a3 	.word	0x080070a3
 8007054:	080070a3 	.word	0x080070a3
 8007058:	08006ff3 	.word	0x08006ff3
 800705c:	0800714d 	.word	0x0800714d
 8007060:	08006ff3 	.word	0x08006ff3
 8007064:	08006ff3 	.word	0x08006ff3
 8007068:	08006ff3 	.word	0x08006ff3
 800706c:	08006ff3 	.word	0x08006ff3
 8007070:	08007183 	.word	0x08007183
 8007074:	08007155 	.word	0x08007155
 8007078:	080070f7 	.word	0x080070f7
 800707c:	08006ff3 	.word	0x08006ff3
 8007080:	08006ff3 	.word	0x08006ff3
 8007084:	0800717f 	.word	0x0800717f
 8007088:	08006ff3 	.word	0x08006ff3
 800708c:	08007149 	.word	0x08007149
 8007090:	08006ff3 	.word	0x08006ff3
 8007094:	08006ff3 	.word	0x08006ff3
 8007098:	080070ff 	.word	0x080070ff
 800709c:	3b45      	subs	r3, #69	; 0x45
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d8a7      	bhi.n	8006ff2 <__svfiscanf_r+0xee>
 80070a2:	2305      	movs	r3, #5
 80070a4:	e035      	b.n	8007112 <__svfiscanf_r+0x20e>
 80070a6:	6863      	ldr	r3, [r4, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dd0d      	ble.n	80070c8 <__svfiscanf_r+0x1c4>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	455a      	cmp	r2, fp
 80070b2:	f040 80bd 	bne.w	8007230 <__svfiscanf_r+0x32c>
 80070b6:	3301      	adds	r3, #1
 80070b8:	6862      	ldr	r2, [r4, #4]
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80070be:	3a01      	subs	r2, #1
 80070c0:	3301      	adds	r3, #1
 80070c2:	6062      	str	r2, [r4, #4]
 80070c4:	9345      	str	r3, [sp, #276]	; 0x114
 80070c6:	e752      	b.n	8006f6e <__svfiscanf_r+0x6a>
 80070c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80070ca:	4621      	mov	r1, r4
 80070cc:	4630      	mov	r0, r6
 80070ce:	4798      	blx	r3
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d0eb      	beq.n	80070ac <__svfiscanf_r+0x1a8>
 80070d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070d6:	07da      	lsls	r2, r3, #31
 80070d8:	f140 80a2 	bpl.w	8007220 <__svfiscanf_r+0x31c>
 80070dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80070de:	2800      	cmp	r0, #0
 80070e0:	d066      	beq.n	80071b0 <__svfiscanf_r+0x2ac>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070e8:	bf18      	it	ne
 80070ea:	f04f 30ff 	movne.w	r0, #4294967295
 80070ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80070f8:	f042 0220 	orr.w	r2, r2, #32
 80070fc:	9241      	str	r2, [sp, #260]	; 0x104
 80070fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007104:	9241      	str	r2, [sp, #260]	; 0x104
 8007106:	2210      	movs	r2, #16
 8007108:	2b6f      	cmp	r3, #111	; 0x6f
 800710a:	9242      	str	r2, [sp, #264]	; 0x108
 800710c:	bf34      	ite	cc
 800710e:	2303      	movcc	r3, #3
 8007110:	2304      	movcs	r3, #4
 8007112:	9347      	str	r3, [sp, #284]	; 0x11c
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dd4d      	ble.n	80071b6 <__svfiscanf_r+0x2b2>
 800711a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800711c:	065b      	lsls	r3, r3, #25
 800711e:	d404      	bmi.n	800712a <__svfiscanf_r+0x226>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	5cba      	ldrb	r2, [r7, r2]
 8007126:	0710      	lsls	r0, r2, #28
 8007128:	d44c      	bmi.n	80071c4 <__svfiscanf_r+0x2c0>
 800712a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800712c:	2b02      	cmp	r3, #2
 800712e:	dc63      	bgt.n	80071f8 <__svfiscanf_r+0x2f4>
 8007130:	466b      	mov	r3, sp
 8007132:	4622      	mov	r2, r4
 8007134:	a941      	add	r1, sp, #260	; 0x104
 8007136:	4630      	mov	r0, r6
 8007138:	f000 f8b0 	bl	800729c <_scanf_chars>
 800713c:	2801      	cmp	r0, #1
 800713e:	d077      	beq.n	8007230 <__svfiscanf_r+0x32c>
 8007140:	2802      	cmp	r0, #2
 8007142:	f47f af14 	bne.w	8006f6e <__svfiscanf_r+0x6a>
 8007146:	e7c5      	b.n	80070d4 <__svfiscanf_r+0x1d0>
 8007148:	220a      	movs	r2, #10
 800714a:	e7dd      	b.n	8007108 <__svfiscanf_r+0x204>
 800714c:	2300      	movs	r3, #0
 800714e:	9342      	str	r3, [sp, #264]	; 0x108
 8007150:	2303      	movs	r3, #3
 8007152:	e7de      	b.n	8007112 <__svfiscanf_r+0x20e>
 8007154:	2308      	movs	r3, #8
 8007156:	9342      	str	r3, [sp, #264]	; 0x108
 8007158:	2304      	movs	r3, #4
 800715a:	e7da      	b.n	8007112 <__svfiscanf_r+0x20e>
 800715c:	4629      	mov	r1, r5
 800715e:	4640      	mov	r0, r8
 8007160:	f000 fa8c 	bl	800767c <__sccl>
 8007164:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	9341      	str	r3, [sp, #260]	; 0x104
 800716c:	4605      	mov	r5, r0
 800716e:	2301      	movs	r3, #1
 8007170:	e7cf      	b.n	8007112 <__svfiscanf_r+0x20e>
 8007172:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007178:	9341      	str	r3, [sp, #260]	; 0x104
 800717a:	2300      	movs	r3, #0
 800717c:	e7c9      	b.n	8007112 <__svfiscanf_r+0x20e>
 800717e:	2302      	movs	r3, #2
 8007180:	e7c7      	b.n	8007112 <__svfiscanf_r+0x20e>
 8007182:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007184:	06c3      	lsls	r3, r0, #27
 8007186:	f53f aef2 	bmi.w	8006f6e <__svfiscanf_r+0x6a>
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800718e:	1d19      	adds	r1, r3, #4
 8007190:	9100      	str	r1, [sp, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	07c0      	lsls	r0, r0, #31
 8007196:	bf4c      	ite	mi
 8007198:	801a      	strhmi	r2, [r3, #0]
 800719a:	601a      	strpl	r2, [r3, #0]
 800719c:	e6e7      	b.n	8006f6e <__svfiscanf_r+0x6a>
 800719e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071a0:	07d8      	lsls	r0, r3, #31
 80071a2:	d405      	bmi.n	80071b0 <__svfiscanf_r+0x2ac>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	0599      	lsls	r1, r3, #22
 80071a8:	d402      	bmi.n	80071b0 <__svfiscanf_r+0x2ac>
 80071aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ac:	f7ff faa4 	bl	80066f8 <__retarget_lock_release_recursive>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e79b      	b.n	80070ee <__svfiscanf_r+0x1ea>
 80071b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80071b8:	4621      	mov	r1, r4
 80071ba:	4630      	mov	r0, r6
 80071bc:	4798      	blx	r3
 80071be:	2800      	cmp	r0, #0
 80071c0:	d0ab      	beq.n	800711a <__svfiscanf_r+0x216>
 80071c2:	e787      	b.n	80070d4 <__svfiscanf_r+0x1d0>
 80071c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80071c6:	3201      	adds	r2, #1
 80071c8:	9245      	str	r2, [sp, #276]	; 0x114
 80071ca:	6862      	ldr	r2, [r4, #4]
 80071cc:	3a01      	subs	r2, #1
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	6062      	str	r2, [r4, #4]
 80071d2:	dd02      	ble.n	80071da <__svfiscanf_r+0x2d6>
 80071d4:	3301      	adds	r3, #1
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	e7a2      	b.n	8007120 <__svfiscanf_r+0x21c>
 80071da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80071dc:	4621      	mov	r1, r4
 80071de:	4630      	mov	r0, r6
 80071e0:	4798      	blx	r3
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d09c      	beq.n	8007120 <__svfiscanf_r+0x21c>
 80071e6:	e775      	b.n	80070d4 <__svfiscanf_r+0x1d0>
 80071e8:	080079f5 	.word	0x080079f5
 80071ec:	08007549 	.word	0x08007549
 80071f0:	08007fc7 	.word	0x08007fc7
 80071f4:	08007f7e 	.word	0x08007f7e
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	dc06      	bgt.n	800720a <__svfiscanf_r+0x306>
 80071fc:	466b      	mov	r3, sp
 80071fe:	4622      	mov	r2, r4
 8007200:	a941      	add	r1, sp, #260	; 0x104
 8007202:	4630      	mov	r0, r6
 8007204:	f000 f8a2 	bl	800734c <_scanf_i>
 8007208:	e798      	b.n	800713c <__svfiscanf_r+0x238>
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <__svfiscanf_r+0x344>)
 800720c:	2b00      	cmp	r3, #0
 800720e:	f43f aeae 	beq.w	8006f6e <__svfiscanf_r+0x6a>
 8007212:	466b      	mov	r3, sp
 8007214:	4622      	mov	r2, r4
 8007216:	a941      	add	r1, sp, #260	; 0x104
 8007218:	4630      	mov	r0, r6
 800721a:	f3af 8000 	nop.w
 800721e:	e78d      	b.n	800713c <__svfiscanf_r+0x238>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	0599      	lsls	r1, r3, #22
 8007224:	f53f af5a 	bmi.w	80070dc <__svfiscanf_r+0x1d8>
 8007228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722a:	f7ff fa65 	bl	80066f8 <__retarget_lock_release_recursive>
 800722e:	e755      	b.n	80070dc <__svfiscanf_r+0x1d8>
 8007230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d405      	bmi.n	8007242 <__svfiscanf_r+0x33e>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	059b      	lsls	r3, r3, #22
 800723a:	d402      	bmi.n	8007242 <__svfiscanf_r+0x33e>
 800723c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723e:	f7ff fa5b 	bl	80066f8 <__retarget_lock_release_recursive>
 8007242:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007244:	e753      	b.n	80070ee <__svfiscanf_r+0x1ea>
 8007246:	bf00      	nop
 8007248:	00000000 	.word	0x00000000

0800724c <_vfiscanf_r>:
 800724c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724e:	460c      	mov	r4, r1
 8007250:	4605      	mov	r5, r0
 8007252:	b138      	cbz	r0, 8007264 <_vfiscanf_r+0x18>
 8007254:	6981      	ldr	r1, [r0, #24]
 8007256:	b929      	cbnz	r1, 8007264 <_vfiscanf_r+0x18>
 8007258:	e9cd 2300 	strd	r2, r3, [sp]
 800725c:	f7ff f990 	bl	8006580 <__sinit>
 8007260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007264:	490a      	ldr	r1, [pc, #40]	; (8007290 <_vfiscanf_r+0x44>)
 8007266:	428c      	cmp	r4, r1
 8007268:	d107      	bne.n	800727a <_vfiscanf_r+0x2e>
 800726a:	686c      	ldr	r4, [r5, #4]
 800726c:	4621      	mov	r1, r4
 800726e:	4628      	mov	r0, r5
 8007270:	b003      	add	sp, #12
 8007272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007276:	f7ff be45 	b.w	8006f04 <__svfiscanf_r>
 800727a:	4906      	ldr	r1, [pc, #24]	; (8007294 <_vfiscanf_r+0x48>)
 800727c:	428c      	cmp	r4, r1
 800727e:	d101      	bne.n	8007284 <_vfiscanf_r+0x38>
 8007280:	68ac      	ldr	r4, [r5, #8]
 8007282:	e7f3      	b.n	800726c <_vfiscanf_r+0x20>
 8007284:	4904      	ldr	r1, [pc, #16]	; (8007298 <_vfiscanf_r+0x4c>)
 8007286:	428c      	cmp	r4, r1
 8007288:	bf08      	it	eq
 800728a:	68ec      	ldreq	r4, [r5, #12]
 800728c:	e7ee      	b.n	800726c <_vfiscanf_r+0x20>
 800728e:	bf00      	nop
 8007290:	08007f38 	.word	0x08007f38
 8007294:	08007f58 	.word	0x08007f58
 8007298:	08007f18 	.word	0x08007f18

0800729c <_scanf_chars>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	4615      	mov	r5, r2
 80072a2:	688a      	ldr	r2, [r1, #8]
 80072a4:	4680      	mov	r8, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	b932      	cbnz	r2, 80072b8 <_scanf_chars+0x1c>
 80072aa:	698a      	ldr	r2, [r1, #24]
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2201      	moveq	r2, #1
 80072b2:	f04f 32ff 	movne.w	r2, #4294967295
 80072b6:	608a      	str	r2, [r1, #8]
 80072b8:	6822      	ldr	r2, [r4, #0]
 80072ba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007348 <_scanf_chars+0xac>
 80072be:	06d1      	lsls	r1, r2, #27
 80072c0:	bf5f      	itttt	pl
 80072c2:	681a      	ldrpl	r2, [r3, #0]
 80072c4:	1d11      	addpl	r1, r2, #4
 80072c6:	6019      	strpl	r1, [r3, #0]
 80072c8:	6816      	ldrpl	r6, [r2, #0]
 80072ca:	2700      	movs	r7, #0
 80072cc:	69a0      	ldr	r0, [r4, #24]
 80072ce:	b188      	cbz	r0, 80072f4 <_scanf_chars+0x58>
 80072d0:	2801      	cmp	r0, #1
 80072d2:	d107      	bne.n	80072e4 <_scanf_chars+0x48>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	6963      	ldr	r3, [r4, #20]
 80072da:	5c9b      	ldrb	r3, [r3, r2]
 80072dc:	b953      	cbnz	r3, 80072f4 <_scanf_chars+0x58>
 80072de:	bb27      	cbnz	r7, 800732a <_scanf_chars+0x8e>
 80072e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e4:	2802      	cmp	r0, #2
 80072e6:	d120      	bne.n	800732a <_scanf_chars+0x8e>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	d41a      	bmi.n	800732a <_scanf_chars+0x8e>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	06da      	lsls	r2, r3, #27
 80072f8:	bf5e      	ittt	pl
 80072fa:	682b      	ldrpl	r3, [r5, #0]
 80072fc:	781b      	ldrbpl	r3, [r3, #0]
 80072fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007302:	682a      	ldr	r2, [r5, #0]
 8007304:	686b      	ldr	r3, [r5, #4]
 8007306:	3201      	adds	r2, #1
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	68a2      	ldr	r2, [r4, #8]
 800730c:	3b01      	subs	r3, #1
 800730e:	3a01      	subs	r2, #1
 8007310:	606b      	str	r3, [r5, #4]
 8007312:	3701      	adds	r7, #1
 8007314:	60a2      	str	r2, [r4, #8]
 8007316:	b142      	cbz	r2, 800732a <_scanf_chars+0x8e>
 8007318:	2b00      	cmp	r3, #0
 800731a:	dcd7      	bgt.n	80072cc <_scanf_chars+0x30>
 800731c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007320:	4629      	mov	r1, r5
 8007322:	4640      	mov	r0, r8
 8007324:	4798      	blx	r3
 8007326:	2800      	cmp	r0, #0
 8007328:	d0d0      	beq.n	80072cc <_scanf_chars+0x30>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f013 0310 	ands.w	r3, r3, #16
 8007330:	d105      	bne.n	800733e <_scanf_chars+0xa2>
 8007332:	68e2      	ldr	r2, [r4, #12]
 8007334:	3201      	adds	r2, #1
 8007336:	60e2      	str	r2, [r4, #12]
 8007338:	69a2      	ldr	r2, [r4, #24]
 800733a:	b102      	cbz	r2, 800733e <_scanf_chars+0xa2>
 800733c:	7033      	strb	r3, [r6, #0]
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	441f      	add	r7, r3
 8007342:	6127      	str	r7, [r4, #16]
 8007344:	2000      	movs	r0, #0
 8007346:	e7cb      	b.n	80072e0 <_scanf_chars+0x44>
 8007348:	08007fc7 	.word	0x08007fc7

0800734c <_scanf_i>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	4698      	mov	r8, r3
 8007352:	4b74      	ldr	r3, [pc, #464]	; (8007524 <_scanf_i+0x1d8>)
 8007354:	460c      	mov	r4, r1
 8007356:	4682      	mov	sl, r0
 8007358:	4616      	mov	r6, r2
 800735a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800735e:	b087      	sub	sp, #28
 8007360:	ab03      	add	r3, sp, #12
 8007362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007366:	4b70      	ldr	r3, [pc, #448]	; (8007528 <_scanf_i+0x1dc>)
 8007368:	69a1      	ldr	r1, [r4, #24]
 800736a:	4a70      	ldr	r2, [pc, #448]	; (800752c <_scanf_i+0x1e0>)
 800736c:	2903      	cmp	r1, #3
 800736e:	bf18      	it	ne
 8007370:	461a      	movne	r2, r3
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	9201      	str	r2, [sp, #4]
 8007376:	1e5a      	subs	r2, r3, #1
 8007378:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800737c:	bf88      	it	hi
 800737e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007382:	4627      	mov	r7, r4
 8007384:	bf82      	ittt	hi
 8007386:	eb03 0905 	addhi.w	r9, r3, r5
 800738a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800738e:	60a3      	strhi	r3, [r4, #8]
 8007390:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007394:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007398:	bf98      	it	ls
 800739a:	f04f 0900 	movls.w	r9, #0
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	463d      	mov	r5, r7
 80073a2:	f04f 0b00 	mov.w	fp, #0
 80073a6:	6831      	ldr	r1, [r6, #0]
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	7809      	ldrb	r1, [r1, #0]
 80073ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80073b0:	2202      	movs	r2, #2
 80073b2:	f7f8 ff95 	bl	80002e0 <memchr>
 80073b6:	b328      	cbz	r0, 8007404 <_scanf_i+0xb8>
 80073b8:	f1bb 0f01 	cmp.w	fp, #1
 80073bc:	d159      	bne.n	8007472 <_scanf_i+0x126>
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	b92a      	cbnz	r2, 80073ce <_scanf_i+0x82>
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	2308      	movs	r3, #8
 80073c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ca:	6063      	str	r3, [r4, #4]
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	6822      	ldr	r2, [r4, #0]
 80073d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80073d4:	6022      	str	r2, [r4, #0]
 80073d6:	68a2      	ldr	r2, [r4, #8]
 80073d8:	1e51      	subs	r1, r2, #1
 80073da:	60a1      	str	r1, [r4, #8]
 80073dc:	b192      	cbz	r2, 8007404 <_scanf_i+0xb8>
 80073de:	6832      	ldr	r2, [r6, #0]
 80073e0:	1c51      	adds	r1, r2, #1
 80073e2:	6031      	str	r1, [r6, #0]
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	f805 2b01 	strb.w	r2, [r5], #1
 80073ea:	6872      	ldr	r2, [r6, #4]
 80073ec:	3a01      	subs	r2, #1
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	6072      	str	r2, [r6, #4]
 80073f2:	dc07      	bgt.n	8007404 <_scanf_i+0xb8>
 80073f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80073f8:	4631      	mov	r1, r6
 80073fa:	4650      	mov	r0, sl
 80073fc:	4790      	blx	r2
 80073fe:	2800      	cmp	r0, #0
 8007400:	f040 8085 	bne.w	800750e <_scanf_i+0x1c2>
 8007404:	f10b 0b01 	add.w	fp, fp, #1
 8007408:	f1bb 0f03 	cmp.w	fp, #3
 800740c:	d1cb      	bne.n	80073a6 <_scanf_i+0x5a>
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	b90b      	cbnz	r3, 8007416 <_scanf_i+0xca>
 8007412:	230a      	movs	r3, #10
 8007414:	6063      	str	r3, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	4945      	ldr	r1, [pc, #276]	; (8007530 <_scanf_i+0x1e4>)
 800741a:	6960      	ldr	r0, [r4, #20]
 800741c:	1ac9      	subs	r1, r1, r3
 800741e:	f000 f92d 	bl	800767c <__sccl>
 8007422:	f04f 0b00 	mov.w	fp, #0
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03d      	beq.n	80074aa <_scanf_i+0x15e>
 800742e:	6831      	ldr	r1, [r6, #0]
 8007430:	6960      	ldr	r0, [r4, #20]
 8007432:	f891 c000 	ldrb.w	ip, [r1]
 8007436:	f810 000c 	ldrb.w	r0, [r0, ip]
 800743a:	2800      	cmp	r0, #0
 800743c:	d035      	beq.n	80074aa <_scanf_i+0x15e>
 800743e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007442:	d124      	bne.n	800748e <_scanf_i+0x142>
 8007444:	0510      	lsls	r0, r2, #20
 8007446:	d522      	bpl.n	800748e <_scanf_i+0x142>
 8007448:	f10b 0b01 	add.w	fp, fp, #1
 800744c:	f1b9 0f00 	cmp.w	r9, #0
 8007450:	d003      	beq.n	800745a <_scanf_i+0x10e>
 8007452:	3301      	adds	r3, #1
 8007454:	f109 39ff 	add.w	r9, r9, #4294967295
 8007458:	60a3      	str	r3, [r4, #8]
 800745a:	6873      	ldr	r3, [r6, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	6073      	str	r3, [r6, #4]
 8007462:	dd1b      	ble.n	800749c <_scanf_i+0x150>
 8007464:	6833      	ldr	r3, [r6, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	6033      	str	r3, [r6, #0]
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	3b01      	subs	r3, #1
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	e7d9      	b.n	8007426 <_scanf_i+0xda>
 8007472:	f1bb 0f02 	cmp.w	fp, #2
 8007476:	d1ae      	bne.n	80073d6 <_scanf_i+0x8a>
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800747e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007482:	d1bf      	bne.n	8007404 <_scanf_i+0xb8>
 8007484:	2310      	movs	r3, #16
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800748c:	e7a2      	b.n	80073d4 <_scanf_i+0x88>
 800748e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	780b      	ldrb	r3, [r1, #0]
 8007496:	f805 3b01 	strb.w	r3, [r5], #1
 800749a:	e7de      	b.n	800745a <_scanf_i+0x10e>
 800749c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074a0:	4631      	mov	r1, r6
 80074a2:	4650      	mov	r0, sl
 80074a4:	4798      	blx	r3
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d0df      	beq.n	800746a <_scanf_i+0x11e>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	05d9      	lsls	r1, r3, #23
 80074ae:	d50d      	bpl.n	80074cc <_scanf_i+0x180>
 80074b0:	42bd      	cmp	r5, r7
 80074b2:	d909      	bls.n	80074c8 <_scanf_i+0x17c>
 80074b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80074b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074bc:	4632      	mov	r2, r6
 80074be:	4650      	mov	r0, sl
 80074c0:	4798      	blx	r3
 80074c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80074c6:	464d      	mov	r5, r9
 80074c8:	42bd      	cmp	r5, r7
 80074ca:	d028      	beq.n	800751e <_scanf_i+0x1d2>
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	f012 0210 	ands.w	r2, r2, #16
 80074d2:	d113      	bne.n	80074fc <_scanf_i+0x1b0>
 80074d4:	702a      	strb	r2, [r5, #0]
 80074d6:	6863      	ldr	r3, [r4, #4]
 80074d8:	9e01      	ldr	r6, [sp, #4]
 80074da:	4639      	mov	r1, r7
 80074dc:	4650      	mov	r0, sl
 80074de:	47b0      	blx	r6
 80074e0:	f8d8 3000 	ldr.w	r3, [r8]
 80074e4:	6821      	ldr	r1, [r4, #0]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	f8c8 2000 	str.w	r2, [r8]
 80074ec:	f011 0f20 	tst.w	r1, #32
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	d00f      	beq.n	8007514 <_scanf_i+0x1c8>
 80074f4:	6018      	str	r0, [r3, #0]
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60e3      	str	r3, [r4, #12]
 80074fc:	1bed      	subs	r5, r5, r7
 80074fe:	44ab      	add	fp, r5
 8007500:	6925      	ldr	r5, [r4, #16]
 8007502:	445d      	add	r5, fp
 8007504:	6125      	str	r5, [r4, #16]
 8007506:	2000      	movs	r0, #0
 8007508:	b007      	add	sp, #28
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	f04f 0b00 	mov.w	fp, #0
 8007512:	e7ca      	b.n	80074aa <_scanf_i+0x15e>
 8007514:	07ca      	lsls	r2, r1, #31
 8007516:	bf4c      	ite	mi
 8007518:	8018      	strhmi	r0, [r3, #0]
 800751a:	6018      	strpl	r0, [r3, #0]
 800751c:	e7eb      	b.n	80074f6 <_scanf_i+0x1aa>
 800751e:	2001      	movs	r0, #1
 8007520:	e7f2      	b.n	8007508 <_scanf_i+0x1bc>
 8007522:	bf00      	nop
 8007524:	08007ec8 	.word	0x08007ec8
 8007528:	0800797d 	.word	0x0800797d
 800752c:	08007881 	.word	0x08007881
 8007530:	08007fc4 	.word	0x08007fc4

08007534 <lflush>:
 8007534:	8983      	ldrh	r3, [r0, #12]
 8007536:	f003 0309 	and.w	r3, r3, #9
 800753a:	2b09      	cmp	r3, #9
 800753c:	d101      	bne.n	8007542 <lflush+0xe>
 800753e:	f7fe bfb5 	b.w	80064ac <fflush>
 8007542:	2000      	movs	r0, #0
 8007544:	4770      	bx	lr
	...

08007548 <__srefill_r>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	460c      	mov	r4, r1
 800754c:	4605      	mov	r5, r0
 800754e:	b118      	cbz	r0, 8007558 <__srefill_r+0x10>
 8007550:	6983      	ldr	r3, [r0, #24]
 8007552:	b90b      	cbnz	r3, 8007558 <__srefill_r+0x10>
 8007554:	f7ff f814 	bl	8006580 <__sinit>
 8007558:	4b3b      	ldr	r3, [pc, #236]	; (8007648 <__srefill_r+0x100>)
 800755a:	429c      	cmp	r4, r3
 800755c:	d10a      	bne.n	8007574 <__srefill_r+0x2c>
 800755e:	686c      	ldr	r4, [r5, #4]
 8007560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007564:	2300      	movs	r3, #0
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	069e      	lsls	r6, r3, #26
 800756c:	d50c      	bpl.n	8007588 <__srefill_r+0x40>
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	e066      	b.n	8007642 <__srefill_r+0xfa>
 8007574:	4b35      	ldr	r3, [pc, #212]	; (800764c <__srefill_r+0x104>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d101      	bne.n	800757e <__srefill_r+0x36>
 800757a:	68ac      	ldr	r4, [r5, #8]
 800757c:	e7f0      	b.n	8007560 <__srefill_r+0x18>
 800757e:	4b34      	ldr	r3, [pc, #208]	; (8007650 <__srefill_r+0x108>)
 8007580:	429c      	cmp	r4, r3
 8007582:	bf08      	it	eq
 8007584:	68ec      	ldreq	r4, [r5, #12]
 8007586:	e7eb      	b.n	8007560 <__srefill_r+0x18>
 8007588:	0758      	lsls	r0, r3, #29
 800758a:	d448      	bmi.n	800761e <__srefill_r+0xd6>
 800758c:	06d9      	lsls	r1, r3, #27
 800758e:	d405      	bmi.n	800759c <__srefill_r+0x54>
 8007590:	2309      	movs	r3, #9
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	e7e8      	b.n	800756e <__srefill_r+0x26>
 800759c:	071a      	lsls	r2, r3, #28
 800759e:	d50b      	bpl.n	80075b8 <__srefill_r+0x70>
 80075a0:	4621      	mov	r1, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7fe ff46 	bl	8006434 <_fflush_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d1e0      	bne.n	800756e <__srefill_r+0x26>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	60a0      	str	r0, [r4, #8]
 80075b0:	f023 0308 	bic.w	r3, r3, #8
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	61a0      	str	r0, [r4, #24]
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f043 0304 	orr.w	r3, r3, #4
 80075be:	81a3      	strh	r3, [r4, #12]
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	b91b      	cbnz	r3, 80075cc <__srefill_r+0x84>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f7ff f8bc 	bl	8006744 <__smakebuf_r>
 80075cc:	89a6      	ldrh	r6, [r4, #12]
 80075ce:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80075d2:	07b3      	lsls	r3, r6, #30
 80075d4:	d00f      	beq.n	80075f6 <__srefill_r+0xae>
 80075d6:	2301      	movs	r3, #1
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <__srefill_r+0x10c>)
 80075dc:	491e      	ldr	r1, [pc, #120]	; (8007658 <__srefill_r+0x110>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	f006 0609 	and.w	r6, r6, #9
 80075e4:	f7ff f84a 	bl	800667c <_fwalk>
 80075e8:	2e09      	cmp	r6, #9
 80075ea:	81a7      	strh	r7, [r4, #12]
 80075ec:	d103      	bne.n	80075f6 <__srefill_r+0xae>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7fe fe99 	bl	8006328 <__sflush_r>
 80075f6:	6922      	ldr	r2, [r4, #16]
 80075f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075fa:	6963      	ldr	r3, [r4, #20]
 80075fc:	6a21      	ldr	r1, [r4, #32]
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	4628      	mov	r0, r5
 8007602:	47b0      	blx	r6
 8007604:	2800      	cmp	r0, #0
 8007606:	6060      	str	r0, [r4, #4]
 8007608:	dc1c      	bgt.n	8007644 <__srefill_r+0xfc>
 800760a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760e:	bf17      	itett	ne
 8007610:	2200      	movne	r2, #0
 8007612:	f043 0320 	orreq.w	r3, r3, #32
 8007616:	6062      	strne	r2, [r4, #4]
 8007618:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800761c:	e7bc      	b.n	8007598 <__srefill_r+0x50>
 800761e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007620:	2900      	cmp	r1, #0
 8007622:	d0cd      	beq.n	80075c0 <__srefill_r+0x78>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__srefill_r+0xea>
 800762c:	4628      	mov	r0, r5
 800762e:	f7ff f8d1 	bl	80067d4 <_free_r>
 8007632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007634:	6063      	str	r3, [r4, #4]
 8007636:	2000      	movs	r0, #0
 8007638:	6360      	str	r0, [r4, #52]	; 0x34
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0c0      	beq.n	80075c0 <__srefill_r+0x78>
 800763e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007644:	2000      	movs	r0, #0
 8007646:	e7fc      	b.n	8007642 <__srefill_r+0xfa>
 8007648:	08007f38 	.word	0x08007f38
 800764c:	08007f58 	.word	0x08007f58
 8007650:	08007f18 	.word	0x08007f18
 8007654:	08007f14 	.word	0x08007f14
 8007658:	08007535 	.word	0x08007535

0800765c <_sbrk_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	; (8007678 <_sbrk_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7f9 fccc 	bl	8001004 <_sbrk>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_sbrk_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_sbrk_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	240006d4 	.word	0x240006d4

0800767c <__sccl>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	780b      	ldrb	r3, [r1, #0]
 8007680:	4604      	mov	r4, r0
 8007682:	2b5e      	cmp	r3, #94	; 0x5e
 8007684:	bf0b      	itete	eq
 8007686:	784b      	ldrbeq	r3, [r1, #1]
 8007688:	1c48      	addne	r0, r1, #1
 800768a:	1c88      	addeq	r0, r1, #2
 800768c:	2200      	movne	r2, #0
 800768e:	bf08      	it	eq
 8007690:	2201      	moveq	r2, #1
 8007692:	1e61      	subs	r1, r4, #1
 8007694:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007698:	f801 2f01 	strb.w	r2, [r1, #1]!
 800769c:	42a9      	cmp	r1, r5
 800769e:	d1fb      	bne.n	8007698 <__sccl+0x1c>
 80076a0:	b90b      	cbnz	r3, 80076a6 <__sccl+0x2a>
 80076a2:	3801      	subs	r0, #1
 80076a4:	bd70      	pop	{r4, r5, r6, pc}
 80076a6:	f082 0101 	eor.w	r1, r2, #1
 80076aa:	54e1      	strb	r1, [r4, r3]
 80076ac:	1c42      	adds	r2, r0, #1
 80076ae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80076b2:	2d2d      	cmp	r5, #45	; 0x2d
 80076b4:	f102 36ff 	add.w	r6, r2, #4294967295
 80076b8:	4610      	mov	r0, r2
 80076ba:	d006      	beq.n	80076ca <__sccl+0x4e>
 80076bc:	2d5d      	cmp	r5, #93	; 0x5d
 80076be:	d0f1      	beq.n	80076a4 <__sccl+0x28>
 80076c0:	b90d      	cbnz	r5, 80076c6 <__sccl+0x4a>
 80076c2:	4630      	mov	r0, r6
 80076c4:	e7ee      	b.n	80076a4 <__sccl+0x28>
 80076c6:	462b      	mov	r3, r5
 80076c8:	e7ef      	b.n	80076aa <__sccl+0x2e>
 80076ca:	7816      	ldrb	r6, [r2, #0]
 80076cc:	2e5d      	cmp	r6, #93	; 0x5d
 80076ce:	d0fa      	beq.n	80076c6 <__sccl+0x4a>
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	dcf8      	bgt.n	80076c6 <__sccl+0x4a>
 80076d4:	4618      	mov	r0, r3
 80076d6:	3001      	adds	r0, #1
 80076d8:	4286      	cmp	r6, r0
 80076da:	5421      	strb	r1, [r4, r0]
 80076dc:	dcfb      	bgt.n	80076d6 <__sccl+0x5a>
 80076de:	43d8      	mvns	r0, r3
 80076e0:	4430      	add	r0, r6
 80076e2:	1c5d      	adds	r5, r3, #1
 80076e4:	42b3      	cmp	r3, r6
 80076e6:	bfa8      	it	ge
 80076e8:	2000      	movge	r0, #0
 80076ea:	182b      	adds	r3, r5, r0
 80076ec:	3202      	adds	r2, #2
 80076ee:	e7de      	b.n	80076ae <__sccl+0x32>

080076f0 <__sread>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	460c      	mov	r4, r1
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	f000 fb6a 	bl	8007dd0 <_read_r>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	bfab      	itete	ge
 8007700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007702:	89a3      	ldrhlt	r3, [r4, #12]
 8007704:	181b      	addge	r3, r3, r0
 8007706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800770a:	bfac      	ite	ge
 800770c:	6563      	strge	r3, [r4, #84]	; 0x54
 800770e:	81a3      	strhlt	r3, [r4, #12]
 8007710:	bd10      	pop	{r4, pc}

08007712 <__swrite>:
 8007712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	461f      	mov	r7, r3
 8007718:	898b      	ldrh	r3, [r1, #12]
 800771a:	05db      	lsls	r3, r3, #23
 800771c:	4605      	mov	r5, r0
 800771e:	460c      	mov	r4, r1
 8007720:	4616      	mov	r6, r2
 8007722:	d505      	bpl.n	8007730 <__swrite+0x1e>
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	2302      	movs	r3, #2
 800772a:	2200      	movs	r2, #0
 800772c:	f000 fafe 	bl	8007d2c <_lseek_r>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773a:	81a3      	strh	r3, [r4, #12]
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	4628      	mov	r0, r5
 8007742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	f000 ba3f 	b.w	8007bc8 <_write_r>

0800774a <__sseek>:
 800774a:	b510      	push	{r4, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007752:	f000 faeb 	bl	8007d2c <_lseek_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	bf15      	itete	ne
 800775c:	6560      	strne	r0, [r4, #84]	; 0x54
 800775e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007766:	81a3      	strheq	r3, [r4, #12]
 8007768:	bf18      	it	ne
 800776a:	81a3      	strhne	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__sclose>:
 800776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007772:	f000 baa9 	b.w	8007cc8 <_close_r>
	...

08007778 <_strtol_l.isra.0>:
 8007778:	2b01      	cmp	r3, #1
 800777a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777e:	d001      	beq.n	8007784 <_strtol_l.isra.0+0xc>
 8007780:	2b24      	cmp	r3, #36	; 0x24
 8007782:	d906      	bls.n	8007792 <_strtol_l.isra.0+0x1a>
 8007784:	f7fe fca8 	bl	80060d8 <__errno>
 8007788:	2316      	movs	r3, #22
 800778a:	6003      	str	r3, [r0, #0]
 800778c:	2000      	movs	r0, #0
 800778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007792:	4f3a      	ldr	r7, [pc, #232]	; (800787c <_strtol_l.isra.0+0x104>)
 8007794:	468e      	mov	lr, r1
 8007796:	4676      	mov	r6, lr
 8007798:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800779c:	5de5      	ldrb	r5, [r4, r7]
 800779e:	f015 0508 	ands.w	r5, r5, #8
 80077a2:	d1f8      	bne.n	8007796 <_strtol_l.isra.0+0x1e>
 80077a4:	2c2d      	cmp	r4, #45	; 0x2d
 80077a6:	d134      	bne.n	8007812 <_strtol_l.isra.0+0x9a>
 80077a8:	f89e 4000 	ldrb.w	r4, [lr]
 80077ac:	f04f 0801 	mov.w	r8, #1
 80077b0:	f106 0e02 	add.w	lr, r6, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05c      	beq.n	8007872 <_strtol_l.isra.0+0xfa>
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d10c      	bne.n	80077d6 <_strtol_l.isra.0+0x5e>
 80077bc:	2c30      	cmp	r4, #48	; 0x30
 80077be:	d10a      	bne.n	80077d6 <_strtol_l.isra.0+0x5e>
 80077c0:	f89e 4000 	ldrb.w	r4, [lr]
 80077c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077c8:	2c58      	cmp	r4, #88	; 0x58
 80077ca:	d14d      	bne.n	8007868 <_strtol_l.isra.0+0xf0>
 80077cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80077d0:	2310      	movs	r3, #16
 80077d2:	f10e 0e02 	add.w	lr, lr, #2
 80077d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80077da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077de:	2600      	movs	r6, #0
 80077e0:	fbbc f9f3 	udiv	r9, ip, r3
 80077e4:	4635      	mov	r5, r6
 80077e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80077ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80077ee:	2f09      	cmp	r7, #9
 80077f0:	d818      	bhi.n	8007824 <_strtol_l.isra.0+0xac>
 80077f2:	463c      	mov	r4, r7
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	dd24      	ble.n	8007842 <_strtol_l.isra.0+0xca>
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	db1f      	blt.n	800783c <_strtol_l.isra.0+0xc4>
 80077fc:	45a9      	cmp	r9, r5
 80077fe:	d31d      	bcc.n	800783c <_strtol_l.isra.0+0xc4>
 8007800:	d101      	bne.n	8007806 <_strtol_l.isra.0+0x8e>
 8007802:	45a2      	cmp	sl, r4
 8007804:	db1a      	blt.n	800783c <_strtol_l.isra.0+0xc4>
 8007806:	fb05 4503 	mla	r5, r5, r3, r4
 800780a:	2601      	movs	r6, #1
 800780c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007810:	e7eb      	b.n	80077ea <_strtol_l.isra.0+0x72>
 8007812:	2c2b      	cmp	r4, #43	; 0x2b
 8007814:	bf08      	it	eq
 8007816:	f89e 4000 	ldrbeq.w	r4, [lr]
 800781a:	46a8      	mov	r8, r5
 800781c:	bf08      	it	eq
 800781e:	f106 0e02 	addeq.w	lr, r6, #2
 8007822:	e7c7      	b.n	80077b4 <_strtol_l.isra.0+0x3c>
 8007824:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007828:	2f19      	cmp	r7, #25
 800782a:	d801      	bhi.n	8007830 <_strtol_l.isra.0+0xb8>
 800782c:	3c37      	subs	r4, #55	; 0x37
 800782e:	e7e1      	b.n	80077f4 <_strtol_l.isra.0+0x7c>
 8007830:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007834:	2f19      	cmp	r7, #25
 8007836:	d804      	bhi.n	8007842 <_strtol_l.isra.0+0xca>
 8007838:	3c57      	subs	r4, #87	; 0x57
 800783a:	e7db      	b.n	80077f4 <_strtol_l.isra.0+0x7c>
 800783c:	f04f 36ff 	mov.w	r6, #4294967295
 8007840:	e7e4      	b.n	800780c <_strtol_l.isra.0+0x94>
 8007842:	2e00      	cmp	r6, #0
 8007844:	da05      	bge.n	8007852 <_strtol_l.isra.0+0xda>
 8007846:	2322      	movs	r3, #34	; 0x22
 8007848:	6003      	str	r3, [r0, #0]
 800784a:	4665      	mov	r5, ip
 800784c:	b942      	cbnz	r2, 8007860 <_strtol_l.isra.0+0xe8>
 800784e:	4628      	mov	r0, r5
 8007850:	e79d      	b.n	800778e <_strtol_l.isra.0+0x16>
 8007852:	f1b8 0f00 	cmp.w	r8, #0
 8007856:	d000      	beq.n	800785a <_strtol_l.isra.0+0xe2>
 8007858:	426d      	negs	r5, r5
 800785a:	2a00      	cmp	r2, #0
 800785c:	d0f7      	beq.n	800784e <_strtol_l.isra.0+0xd6>
 800785e:	b10e      	cbz	r6, 8007864 <_strtol_l.isra.0+0xec>
 8007860:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	e7f2      	b.n	800784e <_strtol_l.isra.0+0xd6>
 8007868:	2430      	movs	r4, #48	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1b3      	bne.n	80077d6 <_strtol_l.isra.0+0x5e>
 800786e:	2308      	movs	r3, #8
 8007870:	e7b1      	b.n	80077d6 <_strtol_l.isra.0+0x5e>
 8007872:	2c30      	cmp	r4, #48	; 0x30
 8007874:	d0a4      	beq.n	80077c0 <_strtol_l.isra.0+0x48>
 8007876:	230a      	movs	r3, #10
 8007878:	e7ad      	b.n	80077d6 <_strtol_l.isra.0+0x5e>
 800787a:	bf00      	nop
 800787c:	08007fc7 	.word	0x08007fc7

08007880 <_strtol_r>:
 8007880:	f7ff bf7a 	b.w	8007778 <_strtol_l.isra.0>

08007884 <_strtoul_l.isra.0>:
 8007884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007888:	4e3b      	ldr	r6, [pc, #236]	; (8007978 <_strtoul_l.isra.0+0xf4>)
 800788a:	4686      	mov	lr, r0
 800788c:	468c      	mov	ip, r1
 800788e:	4660      	mov	r0, ip
 8007890:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007894:	5da5      	ldrb	r5, [r4, r6]
 8007896:	f015 0508 	ands.w	r5, r5, #8
 800789a:	d1f8      	bne.n	800788e <_strtoul_l.isra.0+0xa>
 800789c:	2c2d      	cmp	r4, #45	; 0x2d
 800789e:	d134      	bne.n	800790a <_strtoul_l.isra.0+0x86>
 80078a0:	f89c 4000 	ldrb.w	r4, [ip]
 80078a4:	f04f 0801 	mov.w	r8, #1
 80078a8:	f100 0c02 	add.w	ip, r0, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d05e      	beq.n	800796e <_strtoul_l.isra.0+0xea>
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d10c      	bne.n	80078ce <_strtoul_l.isra.0+0x4a>
 80078b4:	2c30      	cmp	r4, #48	; 0x30
 80078b6:	d10a      	bne.n	80078ce <_strtoul_l.isra.0+0x4a>
 80078b8:	f89c 0000 	ldrb.w	r0, [ip]
 80078bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80078c0:	2858      	cmp	r0, #88	; 0x58
 80078c2:	d14f      	bne.n	8007964 <_strtoul_l.isra.0+0xe0>
 80078c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80078c8:	2310      	movs	r3, #16
 80078ca:	f10c 0c02 	add.w	ip, ip, #2
 80078ce:	f04f 37ff 	mov.w	r7, #4294967295
 80078d2:	2500      	movs	r5, #0
 80078d4:	fbb7 f7f3 	udiv	r7, r7, r3
 80078d8:	fb03 f907 	mul.w	r9, r3, r7
 80078dc:	ea6f 0909 	mvn.w	r9, r9
 80078e0:	4628      	mov	r0, r5
 80078e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80078e6:	2e09      	cmp	r6, #9
 80078e8:	d818      	bhi.n	800791c <_strtoul_l.isra.0+0x98>
 80078ea:	4634      	mov	r4, r6
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	dd24      	ble.n	800793a <_strtoul_l.isra.0+0xb6>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	db1f      	blt.n	8007934 <_strtoul_l.isra.0+0xb0>
 80078f4:	4287      	cmp	r7, r0
 80078f6:	d31d      	bcc.n	8007934 <_strtoul_l.isra.0+0xb0>
 80078f8:	d101      	bne.n	80078fe <_strtoul_l.isra.0+0x7a>
 80078fa:	45a1      	cmp	r9, r4
 80078fc:	db1a      	blt.n	8007934 <_strtoul_l.isra.0+0xb0>
 80078fe:	fb00 4003 	mla	r0, r0, r3, r4
 8007902:	2501      	movs	r5, #1
 8007904:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007908:	e7eb      	b.n	80078e2 <_strtoul_l.isra.0+0x5e>
 800790a:	2c2b      	cmp	r4, #43	; 0x2b
 800790c:	bf08      	it	eq
 800790e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007912:	46a8      	mov	r8, r5
 8007914:	bf08      	it	eq
 8007916:	f100 0c02 	addeq.w	ip, r0, #2
 800791a:	e7c7      	b.n	80078ac <_strtoul_l.isra.0+0x28>
 800791c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007920:	2e19      	cmp	r6, #25
 8007922:	d801      	bhi.n	8007928 <_strtoul_l.isra.0+0xa4>
 8007924:	3c37      	subs	r4, #55	; 0x37
 8007926:	e7e1      	b.n	80078ec <_strtoul_l.isra.0+0x68>
 8007928:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800792c:	2e19      	cmp	r6, #25
 800792e:	d804      	bhi.n	800793a <_strtoul_l.isra.0+0xb6>
 8007930:	3c57      	subs	r4, #87	; 0x57
 8007932:	e7db      	b.n	80078ec <_strtoul_l.isra.0+0x68>
 8007934:	f04f 35ff 	mov.w	r5, #4294967295
 8007938:	e7e4      	b.n	8007904 <_strtoul_l.isra.0+0x80>
 800793a:	2d00      	cmp	r5, #0
 800793c:	da07      	bge.n	800794e <_strtoul_l.isra.0+0xca>
 800793e:	2322      	movs	r3, #34	; 0x22
 8007940:	f8ce 3000 	str.w	r3, [lr]
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	b942      	cbnz	r2, 800795c <_strtoul_l.isra.0+0xd8>
 800794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800794e:	f1b8 0f00 	cmp.w	r8, #0
 8007952:	d000      	beq.n	8007956 <_strtoul_l.isra.0+0xd2>
 8007954:	4240      	negs	r0, r0
 8007956:	2a00      	cmp	r2, #0
 8007958:	d0f7      	beq.n	800794a <_strtoul_l.isra.0+0xc6>
 800795a:	b10d      	cbz	r5, 8007960 <_strtoul_l.isra.0+0xdc>
 800795c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	e7f2      	b.n	800794a <_strtoul_l.isra.0+0xc6>
 8007964:	2430      	movs	r4, #48	; 0x30
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1b1      	bne.n	80078ce <_strtoul_l.isra.0+0x4a>
 800796a:	2308      	movs	r3, #8
 800796c:	e7af      	b.n	80078ce <_strtoul_l.isra.0+0x4a>
 800796e:	2c30      	cmp	r4, #48	; 0x30
 8007970:	d0a2      	beq.n	80078b8 <_strtoul_l.isra.0+0x34>
 8007972:	230a      	movs	r3, #10
 8007974:	e7ab      	b.n	80078ce <_strtoul_l.isra.0+0x4a>
 8007976:	bf00      	nop
 8007978:	08007fc7 	.word	0x08007fc7

0800797c <_strtoul_r>:
 800797c:	f7ff bf82 	b.w	8007884 <_strtoul_l.isra.0>

08007980 <__submore>:
 8007980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007984:	460c      	mov	r4, r1
 8007986:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798c:	4299      	cmp	r1, r3
 800798e:	d11d      	bne.n	80079cc <__submore+0x4c>
 8007990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007994:	f7fe ff6e 	bl	8006874 <_malloc_r>
 8007998:	b918      	cbnz	r0, 80079a2 <__submore+0x22>
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80079a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80079ac:	6360      	str	r0, [r4, #52]	; 0x34
 80079ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80079b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80079b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80079ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80079be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80079c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80079c6:	6020      	str	r0, [r4, #0]
 80079c8:	2000      	movs	r0, #0
 80079ca:	e7e8      	b.n	800799e <__submore+0x1e>
 80079cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80079ce:	0077      	lsls	r7, r6, #1
 80079d0:	463a      	mov	r2, r7
 80079d2:	f000 f9d7 	bl	8007d84 <_realloc_r>
 80079d6:	4605      	mov	r5, r0
 80079d8:	2800      	cmp	r0, #0
 80079da:	d0de      	beq.n	800799a <__submore+0x1a>
 80079dc:	eb00 0806 	add.w	r8, r0, r6
 80079e0:	4601      	mov	r1, r0
 80079e2:	4632      	mov	r2, r6
 80079e4:	4640      	mov	r0, r8
 80079e6:	f000 f9b3 	bl	8007d50 <memcpy>
 80079ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80079ee:	f8c4 8000 	str.w	r8, [r4]
 80079f2:	e7e9      	b.n	80079c8 <__submore+0x48>

080079f4 <_ungetc_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4614      	mov	r4, r2
 80079f8:	1c4a      	adds	r2, r1, #1
 80079fa:	4606      	mov	r6, r0
 80079fc:	460d      	mov	r5, r1
 80079fe:	d103      	bne.n	8007a08 <_ungetc_r+0x14>
 8007a00:	f04f 35ff 	mov.w	r5, #4294967295
 8007a04:	4628      	mov	r0, r5
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	b118      	cbz	r0, 8007a12 <_ungetc_r+0x1e>
 8007a0a:	6983      	ldr	r3, [r0, #24]
 8007a0c:	b90b      	cbnz	r3, 8007a12 <_ungetc_r+0x1e>
 8007a0e:	f7fe fdb7 	bl	8006580 <__sinit>
 8007a12:	4b41      	ldr	r3, [pc, #260]	; (8007b18 <_ungetc_r+0x124>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d11d      	bne.n	8007a54 <_ungetc_r+0x60>
 8007a18:	6874      	ldr	r4, [r6, #4]
 8007a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a1c:	07db      	lsls	r3, r3, #31
 8007a1e:	d405      	bmi.n	8007a2c <_ungetc_r+0x38>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	0598      	lsls	r0, r3, #22
 8007a24:	d402      	bmi.n	8007a2c <_ungetc_r+0x38>
 8007a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a28:	f7fe fe65 	bl	80066f6 <__retarget_lock_acquire_recursive>
 8007a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a30:	f023 0320 	bic.w	r3, r3, #32
 8007a34:	0759      	lsls	r1, r3, #29
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	d42d      	bmi.n	8007a98 <_ungetc_r+0xa4>
 8007a3c:	06d3      	lsls	r3, r2, #27
 8007a3e:	d413      	bmi.n	8007a68 <_ungetc_r+0x74>
 8007a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a42:	07dd      	lsls	r5, r3, #31
 8007a44:	d4dc      	bmi.n	8007a00 <_ungetc_r+0xc>
 8007a46:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a4a:	d1d9      	bne.n	8007a00 <_ungetc_r+0xc>
 8007a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a4e:	f7fe fe53 	bl	80066f8 <__retarget_lock_release_recursive>
 8007a52:	e7d5      	b.n	8007a00 <_ungetc_r+0xc>
 8007a54:	4b31      	ldr	r3, [pc, #196]	; (8007b1c <_ungetc_r+0x128>)
 8007a56:	429c      	cmp	r4, r3
 8007a58:	d101      	bne.n	8007a5e <_ungetc_r+0x6a>
 8007a5a:	68b4      	ldr	r4, [r6, #8]
 8007a5c:	e7dd      	b.n	8007a1a <_ungetc_r+0x26>
 8007a5e:	4b30      	ldr	r3, [pc, #192]	; (8007b20 <_ungetc_r+0x12c>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	bf08      	it	eq
 8007a64:	68f4      	ldreq	r4, [r6, #12]
 8007a66:	e7d8      	b.n	8007a1a <_ungetc_r+0x26>
 8007a68:	0710      	lsls	r0, r2, #28
 8007a6a:	d511      	bpl.n	8007a90 <_ungetc_r+0x9c>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7fe fce0 	bl	8006434 <_fflush_r>
 8007a74:	b130      	cbz	r0, 8007a84 <_ungetc_r+0x90>
 8007a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a78:	07d9      	lsls	r1, r3, #31
 8007a7a:	d4c1      	bmi.n	8007a00 <_ungetc_r+0xc>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007a82:	e7e2      	b.n	8007a4a <_ungetc_r+0x56>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	60a0      	str	r0, [r4, #8]
 8007a88:	f023 0308 	bic.w	r3, r3, #8
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	61a0      	str	r0, [r4, #24]
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f043 0304 	orr.w	r3, r3, #4
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9a:	6862      	ldr	r2, [r4, #4]
 8007a9c:	b2ed      	uxtb	r5, r5
 8007a9e:	b1d3      	cbz	r3, 8007ad6 <_ungetc_r+0xe2>
 8007aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	dc05      	bgt.n	8007ab2 <_ungetc_r+0xbe>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ff69 	bl	8007980 <__submore>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1e1      	bne.n	8007a76 <_ungetc_r+0x82>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	1e5a      	subs	r2, r3, #1
 8007ab6:	6022      	str	r2, [r4, #0]
 8007ab8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	d49d      	bmi.n	8007a04 <_ungetc_r+0x10>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	059b      	lsls	r3, r3, #22
 8007acc:	d49a      	bmi.n	8007a04 <_ungetc_r+0x10>
 8007ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad0:	f7fe fe12 	bl	80066f8 <__retarget_lock_release_recursive>
 8007ad4:	e796      	b.n	8007a04 <_ungetc_r+0x10>
 8007ad6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007ad8:	6920      	ldr	r0, [r4, #16]
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f001 0101 	and.w	r1, r1, #1
 8007ae0:	b160      	cbz	r0, 8007afc <_ungetc_r+0x108>
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	d20a      	bcs.n	8007afc <_ungetc_r+0x108>
 8007ae6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8007aea:	42a8      	cmp	r0, r5
 8007aec:	d106      	bne.n	8007afc <_ungetc_r+0x108>
 8007aee:	3b01      	subs	r3, #1
 8007af0:	3201      	adds	r2, #1
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	6062      	str	r2, [r4, #4]
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d184      	bne.n	8007a04 <_ungetc_r+0x10>
 8007afa:	e7e5      	b.n	8007ac8 <_ungetc_r+0xd4>
 8007afc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b04:	6363      	str	r3, [r4, #52]	; 0x34
 8007b06:	2303      	movs	r3, #3
 8007b08:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2301      	movs	r3, #1
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	e7ee      	b.n	8007af6 <_ungetc_r+0x102>
 8007b18:	08007f38 	.word	0x08007f38
 8007b1c:	08007f58 	.word	0x08007f58
 8007b20:	08007f18 	.word	0x08007f18

08007b24 <__swbuf_r>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	460e      	mov	r6, r1
 8007b28:	4614      	mov	r4, r2
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	b118      	cbz	r0, 8007b36 <__swbuf_r+0x12>
 8007b2e:	6983      	ldr	r3, [r0, #24]
 8007b30:	b90b      	cbnz	r3, 8007b36 <__swbuf_r+0x12>
 8007b32:	f7fe fd25 	bl	8006580 <__sinit>
 8007b36:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <__swbuf_r+0x98>)
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	d12b      	bne.n	8007b94 <__swbuf_r+0x70>
 8007b3c:	686c      	ldr	r4, [r5, #4]
 8007b3e:	69a3      	ldr	r3, [r4, #24]
 8007b40:	60a3      	str	r3, [r4, #8]
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	071a      	lsls	r2, r3, #28
 8007b46:	d52f      	bpl.n	8007ba8 <__swbuf_r+0x84>
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	b36b      	cbz	r3, 8007ba8 <__swbuf_r+0x84>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	6963      	ldr	r3, [r4, #20]
 8007b54:	b2f6      	uxtb	r6, r6
 8007b56:	4283      	cmp	r3, r0
 8007b58:	4637      	mov	r7, r6
 8007b5a:	dc04      	bgt.n	8007b66 <__swbuf_r+0x42>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7fe fc68 	bl	8006434 <_fflush_r>
 8007b64:	bb30      	cbnz	r0, 8007bb4 <__swbuf_r+0x90>
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60a3      	str	r3, [r4, #8]
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	6022      	str	r2, [r4, #0]
 8007b72:	701e      	strb	r6, [r3, #0]
 8007b74:	6963      	ldr	r3, [r4, #20]
 8007b76:	3001      	adds	r0, #1
 8007b78:	4283      	cmp	r3, r0
 8007b7a:	d004      	beq.n	8007b86 <__swbuf_r+0x62>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	07db      	lsls	r3, r3, #31
 8007b80:	d506      	bpl.n	8007b90 <__swbuf_r+0x6c>
 8007b82:	2e0a      	cmp	r6, #10
 8007b84:	d104      	bne.n	8007b90 <__swbuf_r+0x6c>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7fe fc53 	bl	8006434 <_fflush_r>
 8007b8e:	b988      	cbnz	r0, 8007bb4 <__swbuf_r+0x90>
 8007b90:	4638      	mov	r0, r7
 8007b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b94:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <__swbuf_r+0x9c>)
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d101      	bne.n	8007b9e <__swbuf_r+0x7a>
 8007b9a:	68ac      	ldr	r4, [r5, #8]
 8007b9c:	e7cf      	b.n	8007b3e <__swbuf_r+0x1a>
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <__swbuf_r+0xa0>)
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	bf08      	it	eq
 8007ba4:	68ec      	ldreq	r4, [r5, #12]
 8007ba6:	e7ca      	b.n	8007b3e <__swbuf_r+0x1a>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f81e 	bl	8007bec <__swsetup_r>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d0cb      	beq.n	8007b4c <__swbuf_r+0x28>
 8007bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8007bb8:	e7ea      	b.n	8007b90 <__swbuf_r+0x6c>
 8007bba:	bf00      	nop
 8007bbc:	08007f38 	.word	0x08007f38
 8007bc0:	08007f58 	.word	0x08007f58
 8007bc4:	08007f18 	.word	0x08007f18

08007bc8 <_write_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_write_r+0x20>)
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7f9 f9c3 	bl	8000f62 <_write>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_write_r+0x1e>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_write_r+0x1e>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	240006d4 	.word	0x240006d4

08007bec <__swsetup_r>:
 8007bec:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <__swsetup_r+0xcc>)
 8007bee:	b570      	push	{r4, r5, r6, lr}
 8007bf0:	681d      	ldr	r5, [r3, #0]
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	b125      	cbz	r5, 8007c02 <__swsetup_r+0x16>
 8007bf8:	69ab      	ldr	r3, [r5, #24]
 8007bfa:	b913      	cbnz	r3, 8007c02 <__swsetup_r+0x16>
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f7fe fcbf 	bl	8006580 <__sinit>
 8007c02:	4b2e      	ldr	r3, [pc, #184]	; (8007cbc <__swsetup_r+0xd0>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	d10f      	bne.n	8007c28 <__swsetup_r+0x3c>
 8007c08:	686c      	ldr	r4, [r5, #4]
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c10:	0719      	lsls	r1, r3, #28
 8007c12:	d42c      	bmi.n	8007c6e <__swsetup_r+0x82>
 8007c14:	06dd      	lsls	r5, r3, #27
 8007c16:	d411      	bmi.n	8007c3c <__swsetup_r+0x50>
 8007c18:	2309      	movs	r3, #9
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295
 8007c26:	e03e      	b.n	8007ca6 <__swsetup_r+0xba>
 8007c28:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <__swsetup_r+0xd4>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d101      	bne.n	8007c32 <__swsetup_r+0x46>
 8007c2e:	68ac      	ldr	r4, [r5, #8]
 8007c30:	e7eb      	b.n	8007c0a <__swsetup_r+0x1e>
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <__swsetup_r+0xd8>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	bf08      	it	eq
 8007c38:	68ec      	ldreq	r4, [r5, #12]
 8007c3a:	e7e6      	b.n	8007c0a <__swsetup_r+0x1e>
 8007c3c:	0758      	lsls	r0, r3, #29
 8007c3e:	d512      	bpl.n	8007c66 <__swsetup_r+0x7a>
 8007c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c42:	b141      	cbz	r1, 8007c56 <__swsetup_r+0x6a>
 8007c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d002      	beq.n	8007c52 <__swsetup_r+0x66>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7fe fdc1 	bl	80067d4 <_free_r>
 8007c52:	2300      	movs	r3, #0
 8007c54:	6363      	str	r3, [r4, #52]	; 0x34
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6063      	str	r3, [r4, #4]
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0308 	orr.w	r3, r3, #8
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	b94b      	cbnz	r3, 8007c86 <__swsetup_r+0x9a>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7c:	d003      	beq.n	8007c86 <__swsetup_r+0x9a>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7fe fd5f 	bl	8006744 <__smakebuf_r>
 8007c86:	89a0      	ldrh	r0, [r4, #12]
 8007c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c8c:	f010 0301 	ands.w	r3, r0, #1
 8007c90:	d00a      	beq.n	8007ca8 <__swsetup_r+0xbc>
 8007c92:	2300      	movs	r3, #0
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	6963      	ldr	r3, [r4, #20]
 8007c98:	425b      	negs	r3, r3
 8007c9a:	61a3      	str	r3, [r4, #24]
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	b943      	cbnz	r3, 8007cb2 <__swsetup_r+0xc6>
 8007ca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ca4:	d1ba      	bne.n	8007c1c <__swsetup_r+0x30>
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	0781      	lsls	r1, r0, #30
 8007caa:	bf58      	it	pl
 8007cac:	6963      	ldrpl	r3, [r4, #20]
 8007cae:	60a3      	str	r3, [r4, #8]
 8007cb0:	e7f4      	b.n	8007c9c <__swsetup_r+0xb0>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e7f7      	b.n	8007ca6 <__swsetup_r+0xba>
 8007cb6:	bf00      	nop
 8007cb8:	2400001c 	.word	0x2400001c
 8007cbc:	08007f38 	.word	0x08007f38
 8007cc0:	08007f58 	.word	0x08007f58
 8007cc4:	08007f18 	.word	0x08007f18

08007cc8 <_close_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d06      	ldr	r5, [pc, #24]	; (8007ce4 <_close_r+0x1c>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7f9 f961 	bl	8000f9a <_close>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_close_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_close_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	240006d4 	.word	0x240006d4

08007ce8 <_fstat_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	; (8007d08 <_fstat_r+0x20>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	f7f9 f95c 	bl	8000fb2 <_fstat>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d102      	bne.n	8007d04 <_fstat_r+0x1c>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b103      	cbz	r3, 8007d04 <_fstat_r+0x1c>
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	240006d4 	.word	0x240006d4

08007d0c <_isatty_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d06      	ldr	r5, [pc, #24]	; (8007d28 <_isatty_r+0x1c>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7f9 f95b 	bl	8000fd2 <_isatty>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_isatty_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_isatty_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	240006d4 	.word	0x240006d4

08007d2c <_lseek_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	; (8007d4c <_lseek_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7f9 f954 	bl	8000fe8 <_lseek>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_lseek_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_lseek_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	240006d4 	.word	0x240006d4

08007d50 <memcpy>:
 8007d50:	440a      	add	r2, r1
 8007d52:	4291      	cmp	r1, r2
 8007d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	4770      	bx	lr
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d66:	4291      	cmp	r1, r2
 8007d68:	d1f9      	bne.n	8007d5e <memcpy+0xe>
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <__malloc_lock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__malloc_lock+0x8>)
 8007d6e:	f7fe bcc2 	b.w	80066f6 <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	240006cc 	.word	0x240006cc

08007d78 <__malloc_unlock>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__malloc_unlock+0x8>)
 8007d7a:	f7fe bcbd 	b.w	80066f8 <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	240006cc 	.word	0x240006cc

08007d84 <_realloc_r>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	4607      	mov	r7, r0
 8007d88:	4614      	mov	r4, r2
 8007d8a:	460e      	mov	r6, r1
 8007d8c:	b921      	cbnz	r1, 8007d98 <_realloc_r+0x14>
 8007d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d92:	4611      	mov	r1, r2
 8007d94:	f7fe bd6e 	b.w	8006874 <_malloc_r>
 8007d98:	b922      	cbnz	r2, 8007da4 <_realloc_r+0x20>
 8007d9a:	f7fe fd1b 	bl	80067d4 <_free_r>
 8007d9e:	4625      	mov	r5, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da4:	f000 f826 	bl	8007df4 <_malloc_usable_size_r>
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d20f      	bcs.n	8007dcc <_realloc_r+0x48>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7fe fd60 	bl	8006874 <_malloc_r>
 8007db4:	4605      	mov	r5, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d0f2      	beq.n	8007da0 <_realloc_r+0x1c>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	f7ff ffc7 	bl	8007d50 <memcpy>
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7fe fd05 	bl	80067d4 <_free_r>
 8007dca:	e7e9      	b.n	8007da0 <_realloc_r+0x1c>
 8007dcc:	4635      	mov	r5, r6
 8007dce:	e7e7      	b.n	8007da0 <_realloc_r+0x1c>

08007dd0 <_read_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d07      	ldr	r5, [pc, #28]	; (8007df0 <_read_r+0x20>)
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4611      	mov	r1, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	602a      	str	r2, [r5, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f7f9 f8a2 	bl	8000f28 <_read>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_read_r+0x1e>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_read_r+0x1e>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	240006d4 	.word	0x240006d4

08007df4 <_malloc_usable_size_r>:
 8007df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df8:	1f18      	subs	r0, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfbc      	itt	lt
 8007dfe:	580b      	ldrlt	r3, [r1, r0]
 8007e00:	18c0      	addlt	r0, r0, r3
 8007e02:	4770      	bx	lr

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
