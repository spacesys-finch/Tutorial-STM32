
SPI_CAP1188_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad4  08004ad4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000028  08004b04  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004b04  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e24d  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f43  00000000  00000000  0002e2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000246ba  00000000  00000000  00031a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acb7  00000000  00000000  000560ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e62b2  00000000  00000000  00060d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  001470a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a88 	.word	0x08004a88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	08004a88 	.word	0x08004a88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051e:	f000 fcdb 	bl	8000ed8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000522:	f000 f853 	bl	80005cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000526:	f000 f93d 	bl	80007a4 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 800052a:	f000 f8b7 	bl	800069c <MX_LPUART1_UART_Init>
	MX_SPI1_Init();
 800052e:	f000 f8fb 	bl	8000728 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* Configure LED2 */
	BSP_LED_Init(LED2);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbc2 	bl	8000cbc <BSP_LED_Init>

	/* Configure User push-button button */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fc36 	bl	8000dac <BSP_PB_Init>

	//Need to initialize GPIO slave select pin high to the touch sensor device
	//note that the chip select for cap1188 is active low!!!
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <main+0xac>)
 8000542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <main+0xac>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0xac>)
 800054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]
	static GPIO_TypeDef *cap1188_cs_port = GPIOC;
	uint32_t cap1188_cs_pin = GPIO_PIN_2;
 8000558:	2304      	movs	r3, #4
 800055a:	607b      	str	r3, [r7, #4]
	GPIO_CONFIG(cap1188_cs_pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL,
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <main+0xb0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2303      	movs	r3, #3
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f99f 	bl	80008ac <GPIO_CONFIG>
			GPIO_SPEED_FREQ_VERY_HIGH, cap1188_cs_port);
	HAL_GPIO_WritePin(cap1188_cs_port, cap1188_cs_pin, GPIO_PIN_SET);
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <main+0xb0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	b291      	uxth	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f881 	bl	8001680 <HAL_GPIO_WritePin>

	/* Wait for User push-button press before starting the Communication */
	while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET) {
 800057e:	e005      	b.n	800058c <main+0x74>
		BSP_LED_Toggle(LED2);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fbfd 	bl	8000d80 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 fd16 	bl	8000fb8 <HAL_Delay>
	while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET) {
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fc7b 	bl	8000e88 <BSP_PB_GetState>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d1f3      	bne.n	8000580 <main+0x68>
	}
	BSP_LED_Off(LED2);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fbdb 	bl	8000d54 <BSP_LED_Off>

	// set up multi touching for SPI////////////////////////////////////////////////////////////////
	cap_1188_spi_write(cap1188_cs_port, cap1188_cs_pin, CAP1188_MULTITOUCH_ADDR,
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <main+0xb0>)
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	222a      	movs	r2, #42	; 0x2a
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f000 f9a2 	bl	80008f0 <cap_1188_spi_write>
			ENABLE_MULTITOUCH);

	// set up led linking for SPI///////////////////////////////////////////////////////////////////////
	cap_1188_spi_write(cap1188_cs_port, cap1188_cs_pin, CAP1188_LED_LINK_ADDR,
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <main+0xb0>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	23ff      	movs	r3, #255	; 0xff
 80005b2:	2272      	movs	r2, #114	; 0x72
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	f000 f99b 	bl	80008f0 <cap_1188_spi_write>
			CAP1188_LED_LINK);

	// If transactions ended successfully will have the LED ON
	BSP_LED_On(LED2);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fbb4 	bl	8000d28 <BSP_LED_On>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005c0:	e7fe      	b.n	80005c0 <main+0xa8>
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	20000008 	.word	0x20000008

080005cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0a8      	sub	sp, #160	; 0xa0
 80005d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d6:	2238      	movs	r2, #56	; 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fa4c 	bl	8004a78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005f0:	463b      	mov	r3, r7
 80005f2:	2254      	movs	r2, #84	; 0x54
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fa3e 	bl	8004a78 <memset>

	/** Configure the main internal regulator output voltage 
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f001 f895 	bl	800172c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2340      	movs	r3, #64	; 0x40
 800060e:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061c:	2304      	movs	r3, #4
 800061e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000622:	2355      	movs	r3, #85	; 0x55
 8000624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800063a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f918 	bl	8001874 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x82>
		Error_Handler();
 800064a:	f000 f9db 	bl	8000a04 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK) {
 8000662:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000666:	2108      	movs	r1, #8
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fc1b 	bl	8001ea4 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xac>
		Error_Handler();
 8000674:	f000 f9c6 	bl	8000a04 <Error_Handler>
	}
	/** Initializes the peripherals clocks 
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000678:	2320      	movs	r3, #32
 800067a:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fe2a 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
		Error_Handler();
 800068e:	f000 f9b9 	bl	8000a04 <Error_Handler>
	}
}
 8000692:	bf00      	nop
 8000694:	37a0      	adds	r7, #160	; 0xa0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <MX_LPUART1_UART_Init+0x88>)
 80006a4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80006d8:	4811      	ldr	r0, [pc, #68]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006da:	f002 fd16 	bl	800310a <HAL_UART_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 80006e4:	f000 f98e 	bl	8000a04 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006ec:	f004 f8bb 	bl	8004866 <HAL_UARTEx_SetTxFifoThreshold>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_LPUART1_UART_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80006f6:	f000 f985 	bl	8000a04 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 80006fe:	f004 f8f0 	bl	80048e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_LPUART1_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000708:	f000 f97c 	bl	8000a04 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_LPUART1_UART_Init+0x84>)
 800070e:	f004 f871 	bl	80047f4 <HAL_UARTEx_DisableFifoMode>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x80>
		Error_Handler();
 8000718:	f000 f974 	bl	8000a04 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000048 	.word	0x20000048
 8000724:	40008000 	.word	0x40008000

08000728 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_SPI1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_SPI1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_SPI1_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI1_Init+0x74>)
 8000742:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000746:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI1_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI1_Init+0x74>)
 800075e:	2238      	movs	r2, #56	; 0x38
 8000760:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI1_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_SPI1_Init+0x74>)
 8000788:	f001 fff4 	bl	8002774 <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000792:	f000 f937 	bl	8000a04 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000d4 	.word	0x200000d4
 80007a0:	40013000 	.word	0x40013000

080007a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a28      	ldr	r2, [pc, #160]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_GPIO_Init+0xbc>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 ff39 	bl	8001680 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_GPIO_Init+0xc0>)
 8000816:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_GPIO_Init+0xc4>)
 8000824:	f000 fd92 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fd83 	bl	800134c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f000 fcb1 	bl	80011b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f000 fcc8 	bl	80011e6 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	10110000 	.word	0x10110000
 8000868:	48000800 	.word	0x48000800

0800086c <HAL_SPI_TxRxCpltCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	/* Turn LED2 on: Transfer in transmission/reception process is complete */
	BSP_LED_On(LED2);
 8000874:	2000      	movs	r0, #0
 8000876:	f000 fa57 	bl	8000d28 <BSP_LED_On>
	wTransferState = TRANSFER_COMPLETE;
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000044 	.word	0x20000044

0800088c <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <HAL_SPI_ErrorCallback+0x1c>)
 8000896:	2202      	movs	r2, #2
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000044 	.word	0x20000044

080008ac <GPIO_CONFIG>:
 *         This parameter can be one of following parameters:
 *           @arg  LED2
 * @retval BSP status
 */
int32_t GPIO_CONFIG(uint32_t Pin, uint32_t Mode, uint32_t Pull, uint32_t Speed,
		GPIO_TypeDef *GPIOx) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure the GPIO_LED pin */
	gpio_init_structure.Pin = Pin;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Mode = Mode;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Pull = Pull;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Speed = Speed;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIOx, &gpio_init_structure);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008d2:	f000 fd3b 	bl	800134c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, Pin, GPIO_PIN_RESET);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008e0:	f000 fece 	bl	8001680 <HAL_GPIO_WritePin>

	return BSP_ERROR_NONE;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <cap_1188_spi_write>:

void cap_1188_spi_write(GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t addr,
		uint8_t val) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	460b      	mov	r3, r1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	4613      	mov	r3, r2
 8000904:	71bb      	strb	r3, [r7, #6]

	uint8_t addr_buffer[] = { addr };
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	773b      	strb	r3, [r7, #28]
	uint8_t tx_buffer[] = { val };
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	763b      	strb	r3, [r7, #24]

	uint8_t rx_buffer[BUFFERSIZE];

	//set up the Chip Select (active low for this device)
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 feb2 	bl	8001680 <HAL_GPIO_WritePin>

	//set the address ///////////////////////////////
	if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) setCap1188AddrBuffer,
 800091c:	f107 0214 	add.w	r2, r7, #20
 8000920:	2301      	movs	r3, #1
 8000922:	4934      	ldr	r1, [pc, #208]	; (80009f4 <cap_1188_spi_write+0x104>)
 8000924:	4834      	ldr	r0, [pc, #208]	; (80009f8 <cap_1188_spi_write+0x108>)
 8000926:	f001 ffb7 	bl	8002898 <HAL_SPI_TransmitReceive_IT>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <cap_1188_spi_write+0x44>
			(uint8_t*) rx_buffer, BUFFERSIZE) != HAL_OK) {
		Error_Handler();
 8000930:	f000 f868 	bl	8000a04 <Error_Handler>
	}
	while (wTransferState == TRANSFER_WAIT) {
 8000934:	bf00      	nop
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <cap_1188_spi_write+0x10c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0fb      	beq.n	8000936 <cap_1188_spi_write+0x46>
	}
	wTransferState = TRANSFER_WAIT;
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <cap_1188_spi_write+0x10c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]

	if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) addr_buffer,
 8000944:	f107 0214 	add.w	r2, r7, #20
 8000948:	f107 011c 	add.w	r1, r7, #28
 800094c:	2301      	movs	r3, #1
 800094e:	482a      	ldr	r0, [pc, #168]	; (80009f8 <cap_1188_spi_write+0x108>)
 8000950:	f001 ffa2 	bl	8002898 <HAL_SPI_TransmitReceive_IT>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <cap_1188_spi_write+0x6e>
			(uint8_t*) rx_buffer, BUFFERSIZE) != HAL_OK) {
		Error_Handler();
 800095a:	f000 f853 	bl	8000a04 <Error_Handler>
	}
	while (wTransferState == TRANSFER_WAIT) {
 800095e:	bf00      	nop
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <cap_1188_spi_write+0x10c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0fb      	beq.n	8000960 <cap_1188_spi_write+0x70>
	}
	wTransferState = TRANSFER_WAIT;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <cap_1188_spi_write+0x10c>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
	/////////////////////////////////////////////////

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	b29b      	uxth	r3, r3
 8000972:	2201      	movs	r2, #1
 8000974:	4619      	mov	r1, r3
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 fe82 	bl	8001680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	b29b      	uxth	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 fe7b 	bl	8001680 <HAL_GPIO_WritePin>

	//set the write command and write the actual value ///
	if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) setCap1188WriteCmd,
 800098a:	f107 0214 	add.w	r2, r7, #20
 800098e:	2301      	movs	r3, #1
 8000990:	491b      	ldr	r1, [pc, #108]	; (8000a00 <cap_1188_spi_write+0x110>)
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <cap_1188_spi_write+0x108>)
 8000994:	f001 ff80 	bl	8002898 <HAL_SPI_TransmitReceive_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <cap_1188_spi_write+0xb2>
			(uint8_t*) rx_buffer, BUFFERSIZE) != HAL_OK) {
		Error_Handler();
 800099e:	f000 f831 	bl	8000a04 <Error_Handler>
	}
	while (wTransferState == TRANSFER_WAIT) {
 80009a2:	bf00      	nop
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <cap_1188_spi_write+0x10c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0fb      	beq.n	80009a4 <cap_1188_spi_write+0xb4>
	}
	wTransferState = TRANSFER_WAIT;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <cap_1188_spi_write+0x10c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]

	if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) tx_buffer,
 80009b2:	f107 0214 	add.w	r2, r7, #20
 80009b6:	f107 0118 	add.w	r1, r7, #24
 80009ba:	2301      	movs	r3, #1
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <cap_1188_spi_write+0x108>)
 80009be:	f001 ff6b 	bl	8002898 <HAL_SPI_TransmitReceive_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <cap_1188_spi_write+0xdc>
			(uint8_t*) rx_buffer, BUFFERSIZE) != HAL_OK) {
		Error_Handler();
 80009c8:	f000 f81c 	bl	8000a04 <Error_Handler>
	}
	while (wTransferState == TRANSFER_WAIT) {
 80009cc:	bf00      	nop
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <cap_1188_spi_write+0x10c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0fb      	beq.n	80009ce <cap_1188_spi_write+0xde>
	}
	wTransferState = TRANSFER_WAIT;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <cap_1188_spi_write+0x10c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
	/////////////////////////////////////////////////

	//reset the chip select back to high
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 fe4b 	bl	8001680 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200000d4 	.word	0x200000d4
 80009fc:	20000044 	.word	0x20000044
 8000a00:	20000004 	.word	0x20000004

08000a04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		/* Toggle LED2 for error */
		BSP_LED_Toggle(LED2);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f9b9 	bl	8000d80 <BSP_LED_Toggle>
		HAL_Delay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fad1 	bl	8000fb8 <HAL_Delay>
		BSP_LED_Toggle(LED2);
 8000a16:	e7f7      	b.n	8000a08 <Error_Handler+0x4>

08000a18 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6093      	str	r3, [r2, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40007000 	.word	0x40007000

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000a6e:	f7ff ffd3 	bl	8000a18 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_UART_MspInit+0x7c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d128      	bne.n	8000af4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0x80>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 fc2c 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40008000 	.word	0x40008000
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <HAL_SPI_MspInit+0xac>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d13f      	bne.n	8000ba6 <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_SPI_MspInit+0xb0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b56:	2318      	movs	r3, #24
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b66:	2305      	movs	r3, #5
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <HAL_SPI_MspInit+0xb4>)
 8000b72:	f000 fbeb 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b76:	2320      	movs	r3, #32
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_SPI_MspInit+0xb4>)
 8000b92:	f000 fbdb 	bl	800134c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2023      	movs	r0, #35	; 0x23
 8000b9c:	f000 fb09 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ba0:	2023      	movs	r0, #35	; 0x23
 8000ba2:	f000 fb20 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f9b4 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <SPI1_IRQHandler+0x10>)
 8000c1e:	f001 feeb 	bl	80029f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000d4 	.word	0x200000d4

08000c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 fd56 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SystemInit+0x28>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <SystemInit+0x28>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SystemInit+0x28>)
 8000c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c56:	609a      	str	r2, [r3, #8]
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c92:	f7ff ffd3 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f003 fecb 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9a:	f7ff fc3d 	bl	8000518 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000cac:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 8000cb0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000cb4:	20000144 	.word	0x20000144

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>
	...

08000cbc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <BSP_LED_Init+0x64>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <BSP_LED_Init+0x64>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <BSP_LED_Init+0x64>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000cde:	2320      	movs	r3, #32
 8000ce0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <BSP_LED_Init+0x68>)
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	f107 020c 	add.w	r2, r7, #12
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb25 	bl	800134c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <BSP_LED_Init+0x68>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fcb6 	bl	8001680 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	20000010 	.word	0x20000010

08000d28 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <BSP_LED_On+0x28>)
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fc9e 	bl	8001680 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000010 	.word	0x20000010

08000d54 <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <BSP_LED_Off+0x28>)
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	2120      	movs	r1, #32
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fc88 	bl	8001680 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000010 	.word	0x20000010

08000d80 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <BSP_LED_Toggle+0x28>)
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	2220      	movs	r2, #32
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fc8a 	bl	80016b0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000010 	.word	0x20000010

08000dac <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <BSP_PB_Init+0xc0>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <BSP_PB_Init+0xc0>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <BSP_PB_Init+0xc0>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10c      	bne.n	8000e02 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <BSP_PB_Init+0xc4>)
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	f107 020c 	add.w	r2, r7, #12
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 faa6 	bl	800134c <HAL_GPIO_Init>
 8000e00:	e02f      	b.n	8000e62 <BSP_PB_Init+0xb6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <BSP_PB_Init+0xc8>)
 8000e04:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <BSP_PB_Init+0xc4>)
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	f107 020c 	add.w	r2, r7, #12
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fa99 	bl	800134c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <BSP_PB_Init+0xcc>)
 8000e20:	1898      	adds	r0, r3, r2
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <BSP_PB_Init+0xd0>)
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f000 fa79 	bl	8001322 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <BSP_PB_Init+0xcc>)
 8000e36:	1898      	adds	r0, r3, r2
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <BSP_PB_Init+0xd4>)
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	461a      	mov	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f000 fa50 	bl	80012e8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e48:	2028      	movs	r0, #40	; 0x28
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <BSP_PB_Init+0xd8>)
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	f000 f9ac 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e5a:	2328      	movs	r3, #40	; 0x28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f9c2 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	20000014 	.word	0x20000014
 8000e74:	10110000 	.word	0x10110000
 8000e78:	20000138 	.word	0x20000138
 8000e7c:	08004ac8 	.word	0x08004ac8
 8000e80:	20000018 	.word	0x20000018
 8000e84:	2000001c 	.word	0x2000001c

08000e88 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <BSP_PB_GetState+0x28>)
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fbd5 	bl	8001650 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000014 	.word	0x20000014

08000eb4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fff0 	bl	8000eb4 <BSP_PB_Callback>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f95a 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f80d 	bl	8000f08 <HAL_InitTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e001      	b.n	8000efe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efa:	f7ff fd9d 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efe:	79fb      	ldrb	r3, [r7, #7]

}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x68>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d022      	beq.n	8000f62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_InitTick+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f966 	bl	8001202 <HAL_SYSTICK_Config>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10f      	bne.n	8000f5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d809      	bhi.n	8000f56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	2200      	movs	r2, #0
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	f000 f932 	bl	80011b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x70>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e004      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000024 	.word	0x20000024
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000020 	.word	0x20000020

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000140 	.word	0x20000140
 8000f9c:	20000024 	.word	0x20000024

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000140 	.word	0x20000140

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d004      	beq.n	8000fdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_Delay+0x40>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fdc:	bf00      	nop
 8000fde:	f7ff ffdf 	bl	8000fa0 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8f7      	bhi.n	8000fde <HAL_Delay+0x26>
  {
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000024 	.word	0x20000024

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <__NVIC_EnableIRQ+0x38>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff29 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff40 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff33 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa4 	bl	8001158 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d00d      	beq.n	800124e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2204      	movs	r2, #4
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e047      	b.n	80012de <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 020e 	bic.w	r2, r2, #14
 800125c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800127c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 021f 	and.w	r2, r3, #31
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800129a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
    }
  }
  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	460b      	mov	r3, r1
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
      break;
 8001306:	e005      	b.n	8001314 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
      break;
 8001312:	bf00      	nop
  }

  return status;
 8001314:	7dfb      	ldrb	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e003      	b.n	800133e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800133c:	2300      	movs	r3, #0
  }
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800135a:	e15a      	b.n	8001612 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 814c 	beq.w	800160c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00b      	beq.n	8001394 <HAL_GPIO_Init+0x48>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	2b11      	cmp	r3, #17
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d130      	bne.n	80013f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ca:	2201      	movs	r2, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 0201 	and.w	r2, r3, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0xea>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b12      	cmp	r3, #18
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0203 	and.w	r2, r3, #3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80a6 	beq.w	800160c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c4:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6613      	str	r3, [r2, #96]	; 0x60
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d8:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001502:	d01f      	beq.n	8001544 <HAL_GPIO_Init+0x1f8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d019      	beq.n	8001540 <HAL_GPIO_Init+0x1f4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x2f0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1f0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x2f4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2fc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e4>
 800152c:	2305      	movs	r3, #5
 800152e:	e00a      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001530:	2306      	movs	r3, #6
 8001532:	e008      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001534:	2304      	movs	r3, #4
 8001536:	e006      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001538:	2303      	movs	r3, #3
 800153a:	e004      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 800153c:	2302      	movs	r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_GPIO_Init+0x1fa>
 8001544:	2300      	movs	r3, #0
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001556:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_GPIO_Init+0x300>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001588:	4a30      	ldr	r2, [pc, #192]	; (800164c <HAL_GPIO_Init+0x300>)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_GPIO_Init+0x300>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_GPIO_Init+0x300>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_GPIO_Init+0x300>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_GPIO_Init+0x300>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_GPIO_Init+0x300>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_GPIO_Init+0x300>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f ae9d 	bne.w	800135c <HAL_GPIO_Init+0x10>
  }
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800
 8001640:	48000c00 	.word	0x48000c00
 8001644:	48001000 	.word	0x48001000
 8001648:	48001400 	.word	0x48001400
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d0:	887a      	ldrh	r2, [r7, #2]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f806 	bl	8001714 <HAL_GPIO_EXTI_Callback>
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d141      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800173a:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d131      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001748:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2232      	movs	r2, #50	; 0x32
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	4a3f      	ldr	r2, [pc, #252]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177e:	e002      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3b01      	subs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001792:	d102      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f2      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d158      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e057      	b.n	800185c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017bc:	e04d      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d141      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d131      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2232      	movs	r2, #50	; 0x32
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180a:	e002      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3b01      	subs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181e:	d102      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f2      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d112      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e011      	b.n	800185c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001848:	e007      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40007000 	.word	0x40007000
 800186c:	2000000c 	.word	0x2000000c
 8001870:	431bde83 	.word	0x431bde83

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e308      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d075      	beq.n	800197e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4ba3      	ldr	r3, [pc, #652]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800189c:	4ba0      	ldr	r3, [pc, #640]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3e>
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_OscConfig+0x44>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d10b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d05b      	beq.n	800197c <HAL_RCC_OscConfig+0x108>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d157      	bne.n	800197c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e2e3      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x74>
 80018da:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a90      	ldr	r2, [pc, #576]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xb0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a8a      	ldr	r2, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xb0>
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a83      	ldr	r2, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb38 	bl	8000fa0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fb34 	bl	8000fa0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2a8      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xc0>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fb24 	bl	8000fa0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fb20 	bl	8000fa0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e294      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0xe8>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198a:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x136>
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_OscConfig+0x13c>
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d11f      	bne.n	80019f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_OscConfig+0x154>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e267      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	4952      	ldr	r1, [pc, #328]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_RCC_OscConfig+0x2b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fa91 	bl	8000f08 <HAL_InitTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d043      	beq.n	8001a74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e253      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff facc 	bl	8000fa0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fac8 	bl	8000fa0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e23c      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
 8001a3e:	e01a      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff faa8 	bl	8000fa0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff faa4 	bl	8000fa0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e218      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1e0>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03c      	beq.n	8001afc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa81 	bl	8000fa0 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa7d 	bl	8000fa0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1f1      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x22e>
 8001ac2:	e01b      	b.n	8001afc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa64 	bl	8000fa0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fa60 	bl	8000fa0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1d4      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ef      	bne.n	8001adc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ab 	beq.w	8001c60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2b4>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e005      	b.n	8001b2a <HAL_RCC_OscConfig+0x2b6>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	20000020 	.word	0x20000020
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4baf      	ldr	r3, [pc, #700]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4aae      	ldr	r2, [pc, #696]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4bac      	ldr	r3, [pc, #688]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4a:	4ba9      	ldr	r3, [pc, #676]	; (8001df0 <HAL_RCC_OscConfig+0x57c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b56:	4ba6      	ldr	r3, [pc, #664]	; (8001df0 <HAL_RCC_OscConfig+0x57c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4aa5      	ldr	r2, [pc, #660]	; (8001df0 <HAL_RCC_OscConfig+0x57c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa1d 	bl	8000fa0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fa19 	bl	8000fa0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e18d      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <HAL_RCC_OscConfig+0x57c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x32e>
 8001b90:	4b96      	ldr	r3, [pc, #600]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a95      	ldr	r2, [pc, #596]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba0:	e024      	b.n	8001bec <HAL_RCC_OscConfig+0x378>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d110      	bne.n	8001bcc <HAL_RCC_OscConfig+0x358>
 8001baa:	4b90      	ldr	r3, [pc, #576]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	4a8e      	ldr	r2, [pc, #568]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bba:	4b8c      	ldr	r3, [pc, #560]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	4a8a      	ldr	r2, [pc, #552]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bca:	e00f      	b.n	8001bec <HAL_RCC_OscConfig+0x378>
 8001bcc:	4b87      	ldr	r3, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a86      	ldr	r2, [pc, #536]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b83      	ldr	r3, [pc, #524]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a82      	ldr	r2, [pc, #520]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9d4 	bl	8000fa0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f9d0 	bl	8000fa0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e142      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ed      	beq.n	8001bfc <HAL_RCC_OscConfig+0x388>
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f9bd 	bl	8000fa0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f9b9 	bl	8000fa0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e12b      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ed      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a64      	ldr	r2, [pc, #400]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01c      	beq.n	8001cae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f98c 	bl	8000fa0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8c:	f7ff f988 	bl	8000fa0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0fc      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ef      	beq.n	8001c8c <HAL_RCC_OscConfig+0x418>
 8001cac:	e01b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cae:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f96f 	bl	8000fa0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc6:	f7ff f96b 	bl	8000fa0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0df      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd8:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80d3 	beq.w	8001e96 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	f000 808d 	beq.w	8001e18 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d15a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a38      	ldr	r2, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f945 	bl	8000fa0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f941 	bl	8000fa0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0b5      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_RCC_OscConfig+0x580>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6a11      	ldr	r1, [r2, #32]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d5a:	0852      	lsrs	r2, r2, #1
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	0552      	lsls	r2, r2, #21
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d66:	0852      	lsrs	r2, r2, #1
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	0652      	lsls	r2, r2, #25
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d72:	06d2      	lsls	r2, r2, #27
 8001d74:	430a      	orrs	r2, r1
 8001d76:	491d      	ldr	r1, [pc, #116]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f904 	bl	8000fa0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f900 	bl	8000fa0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e074      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x528>
 8001dba:	e06c      	b.n	8001e96 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_RCC_OscConfig+0x578>)
 8001dda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8dc 	bl	8000fa0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	e00e      	b.n	8001e0a <HAL_RCC_OscConfig+0x596>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f8d2 	bl	8000fa0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e046      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x62c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x584>
 8001e16:	e03e      	b.n	8001e96 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e039      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_OscConfig+0x62c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d12c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	3b01      	subs	r3, #1
 8001e44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d123      	bne.n	8001e92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d11b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d113      	bne.n	8001e92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e11e      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b91      	ldr	r3, [pc, #580]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 020f 	bic.w	r2, r3, #15
 8001ed2:	498c      	ldr	r1, [pc, #560]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b8a      	ldr	r3, [pc, #552]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e106      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d073      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d129      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	4b81      	ldr	r3, [pc, #516]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0f4      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f10:	f000 f99e 	bl	8002250 <RCC_GetSysClockFreqFromPLLSource>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4a7c      	ldr	r2, [pc, #496]	; (800210c <HAL_RCC_ClockConfig+0x268>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d93f      	bls.n	8001f9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d033      	beq.n	8001f9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d12f      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f46:	4a70      	ldr	r2, [pc, #448]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e024      	b.n	8001f9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0c6      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	4b66      	ldr	r3, [pc, #408]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0be      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f7c:	f000 f8ce 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4a61      	ldr	r2, [pc, #388]	; (800210c <HAL_RCC_ClockConfig+0x268>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d909      	bls.n	8001f9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b5a      	ldr	r3, [pc, #360]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4957      	ldr	r1, [pc, #348]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fff6 	bl	8000fa0 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe fff2 	bl	8000fa0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e095      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a42      	ldr	r2, [pc, #264]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002018:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4936      	ldr	r1, [pc, #216]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
 8002032:	e008      	b.n	8002046 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b80      	cmp	r3, #128	; 0x80
 8002038:	d105      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 8002040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002044:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002046:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d21d      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 020f 	bic.w	r2, r3, #15
 800205c:	4929      	ldr	r1, [pc, #164]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002064:	f7fe ff9c 	bl	8000fa0 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe ff98 	bl	8000fa0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e03b      	b.n	80020fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d1ed      	bne.n	800206c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4917      	ldr	r1, [pc, #92]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490f      	ldr	r1, [pc, #60]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ce:	f000 f825 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020d2:	4601      	mov	r1, r0
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_RCC_ClockConfig+0x26c>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_RCC_ClockConfig+0x270>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x274>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ff08 	bl	8000f08 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	04c4b400 	.word	0x04c4b400
 8002110:	08004ab0 	.word	0x08004ab0
 8002114:	2000000c 	.word	0x2000000c
 8002118:	20000020 	.word	0x20000020

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002122:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d102      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e047      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d102      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e03e      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d136      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3301      	adds	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d10c      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	68d2      	ldr	r2, [r2, #12]
 800217c:	0a12      	lsrs	r2, r2, #8
 800217e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
      break;
 8002188:	e00c      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002194:	68d2      	ldr	r2, [r2, #12]
 8002196:	0a12      	lsrs	r2, r2, #8
 8002198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
      break;
 80021a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e001      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021c4:	693b      	ldr	r3, [r7, #16]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	016e3600 	.word	0x016e3600

080021e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4601      	mov	r1, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	08004ac0 	.word	0x08004ac0

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002228:	f7ff ffda 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 800222c:	4601      	mov	r1, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0adb      	lsrs	r3, r3, #11
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK2Freq+0x28>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	08004ac0 	.word	0x08004ac0

08002250 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d10c      	bne.n	800228e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002274:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227e:	68d2      	ldr	r2, [r2, #12]
 8002280:	0a12      	lsrs	r2, r2, #8
 8002282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
    break;
 800228c:	e00c      	b.n	80022a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002298:	68d2      	ldr	r2, [r2, #12]
 800229a:	0a12      	lsrs	r2, r2, #8
 800229c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    break;
 80022a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0e5b      	lsrs	r3, r3, #25
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	3301      	adds	r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	016e3600 	.word	0x016e3600
 80022d8:	00f42400 	.word	0x00f42400

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e4:	2300      	movs	r3, #0
 80022e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8098 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a39      	ldr	r2, [pc, #228]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002332:	f7fe fe35 	bl	8000fa0 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002338:	e009      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe fe31 	bl	8000fa0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d902      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	74fb      	strb	r3, [r7, #19]
        break;
 800234c:	e005      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ef      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d159      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01e      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d019      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fdf1 	bl	8000fa0 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c0:	e00b      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fded 	bl	8000fa0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d902      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	74fb      	strb	r3, [r7, #19]
            break;
 80023d8:	e006      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ec      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10b      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002404:	e008      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	74bb      	strb	r3, [r7, #18]
 800240a:	e005      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002418:	7c7b      	ldrb	r3, [r7, #17]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4baf      	ldr	r3, [pc, #700]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4aae      	ldr	r2, [pc, #696]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002436:	4ba9      	ldr	r3, [pc, #676]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f023 0203 	bic.w	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	49a5      	ldr	r1, [pc, #660]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002458:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 020c 	bic.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	499d      	ldr	r1, [pc, #628]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247a:	4b98      	ldr	r3, [pc, #608]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4994      	ldr	r1, [pc, #592]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249c:	4b8f      	ldr	r3, [pc, #572]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	498c      	ldr	r1, [pc, #560]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4983      	ldr	r1, [pc, #524]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e0:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	497b      	ldr	r1, [pc, #492]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4972      	ldr	r1, [pc, #456]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002524:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	496a      	ldr	r1, [pc, #424]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	4961      	ldr	r1, [pc, #388]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002568:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800256a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	4959      	ldr	r1, [pc, #356]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4950      	ldr	r1, [pc, #320]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d015      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4948      	ldr	r1, [pc, #288]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ca:	d105      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a42      	ldr	r2, [pc, #264]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	493a      	ldr	r1, [pc, #232]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002602:	d105      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	492c      	ldr	r1, [pc, #176]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263a:	d105      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a26      	ldr	r2, [pc, #152]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002646:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	491e      	ldr	r1, [pc, #120]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002672:	d105      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4910      	ldr	r1, [pc, #64]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026aa:	d105      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4902      	ldr	r1, [pc, #8]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026da:	e001      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80026dc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e8:	d105      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	4917      	ldr	r1, [pc, #92]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d105      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800273c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002758:	d105      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002764:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002766:	7cbb      	ldrb	r3, [r7, #18]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e084      	b.n	8002890 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe f9af 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027c6:	d902      	bls.n	80027ce <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e002      	b.n	80027d4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027dc:	d007      	beq.n	80027ee <HAL_SPI_Init+0x7a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027e6:	d002      	beq.n	80027ee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027fe:	d903      	bls.n	8002808 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
 8002806:	e002      	b.n	800280e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0204 	and.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_SPI_TransmitReceive_IT+0x20>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e091      	b.n	80029dc <HAL_SPI_TransmitReceive_IT+0x144>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028ce:	7dbb      	ldrb	r3, [r7, #22]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d00d      	beq.n	80028f0 <HAL_SPI_TransmitReceive_IT+0x58>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028da:	d106      	bne.n	80028ea <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_SPI_TransmitReceive_IT+0x52>
 80028e4:	7dbb      	ldrb	r3, [r7, #22]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d002      	beq.n	80028f0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ee:	e070      	b.n	80029d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002906:	e064      	b.n	80029d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b04      	cmp	r3, #4
 8002912:	d003      	beq.n	800291c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2205      	movs	r2, #5
 8002918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	887a      	ldrh	r2, [r7, #2]
 8002932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002952:	d906      	bls.n	8002962 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002958:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_SPI_TransmitReceive_IT+0x154>)
 800295e:	651a      	str	r2, [r3, #80]	; 0x50
 8002960:	e005      	b.n	800296e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800296c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002976:	d802      	bhi.n	800297e <HAL_SPI_TransmitReceive_IT+0xe6>
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d908      	bls.n	8002990 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	e007      	b.n	80029a0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80029ae:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d008      	beq.n	80029d0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e000      	b.n	80029d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80029d0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	08002d87 	.word	0x08002d87
 80029ec:	08002ded 	.word	0x08002ded
 80029f0:	08002c37 	.word	0x08002c37
 80029f4:	08002cf5 	.word	0x08002cf5

080029f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
    return;
 8002a3a:	e0d8      	b.n	8002bee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x66>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	09db      	lsrs	r3, r3, #7
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
    return;
 8002a5c:	e0c7      	b.n	8002bee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_SPI_IRQHandler+0x8c>
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80b5 	beq.w	8002bee <HAL_SPI_IRQHandler+0x1f6>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80ae 	beq.w	8002bee <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d023      	beq.n	8002ae6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d011      	beq.n	8002ace <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	e00b      	b.n	8002ae6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
        return;
 8002ae4:	e083      	b.n	8002bee <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d014      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00c      	beq.n	8002b42 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f043 0208 	orr.w	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d050      	beq.n	8002bec <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b58:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <HAL_SPI_IRQHandler+0x17e>
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d034      	beq.n	8002be0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0203 	bic.w	r2, r2, #3
 8002b84:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d011      	beq.n	8002bb2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_SPI_IRQHandler+0x1fc>)
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fb3d 	bl	800121a <HAL_DMA_Abort_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_SPI_IRQHandler+0x1fc>)
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fb27 	bl	800121a <HAL_DMA_Abort_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002bde:	e003      	b.n	8002be8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd fe53 	bl	800088c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002be6:	e000      	b.n	8002bea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002be8:	bf00      	nop
    return;
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
  }
}
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	08002c0d 	.word	0x08002c0d

08002bf8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7fd fe2f 	bl	800088c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d923      	bls.n	8002c92 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	b292      	uxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b02      	subs	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d11f      	bne.n	8002cc0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e016      	b.n	8002cc0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f103 020c 	add.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9cd 	bl	8003086 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d912      	bls.n	8002d2c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b02      	subs	r3, #2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2a:	e012      	b.n	8002d52 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	7812      	ldrb	r2, [r2, #0]
 8002d38:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f984 	bl	8003086 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10f      	bne.n	8002de4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f951 	bl	8003086 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d110      	bne.n	8002e44 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e30:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f921 	bl	8003086 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e5c:	e04c      	b.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d048      	beq.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e66:	f7fe f89b 	bl	8000fa0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d902      	bls.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d13d      	bne.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e94:	d111      	bne.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9e:	d004      	beq.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea8:	d107      	bne.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec2:	d10f      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e00f      	b.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d1a3      	bne.n	8002e5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f2e:	e057      	b.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f36:	d106      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d048      	beq.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f4e:	f7fe f827 	bl	8000fa0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d902      	bls.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d13d      	bne.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7c:	d111      	bne.n	8002fa2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f86:	d004      	beq.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d107      	bne.n	8002fa2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	d10f      	bne.n	8002fcc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e008      	b.n	8002ff2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d19f      	bne.n	8002f30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af02      	add	r7, sp, #8
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff84 	bl	8002f20 <SPI_WaitFifoStateUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e027      	b.n	800307e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff07 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e014      	b.n	800307e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff ff5d 	bl	8002f20 <SPI_WaitFifoStateUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e000      	b.n	800307e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800308e:	f7fd ff87 	bl	8000fa0 <HAL_GetTick>
 8003092:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0220 	bic.w	r2, r2, #32
 80030a2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ffa6 	bl	8002ffa <SPI_EndRxTxTransaction>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d107      	bne.n	80030e4 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff fd8b 	bl	8002bf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80030e2:	e00e      	b.n	8003102 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd fbbd 	bl	800086c <HAL_SPI_TxRxCpltCallback>
}
 80030f2:	e006      	b.n	8003102 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fbc5 	bl	800088c <HAL_SPI_ErrorCallback>
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e042      	b.n	80031a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fca6 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f82f 	bl	80031b0 <UART_SetConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e022      	b.n	80031a2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f001 fa11 	bl	800458c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003178:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003188:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f001 fa98 	bl	80046d0 <UART_CheckIdleState>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	0000      	movs	r0, r0
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031b4:	b08a      	sub	sp, #40	; 0x28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4313      	orrs	r3, r2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	4313      	orrs	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4baa      	ldr	r3, [pc, #680]	; (8003498 <UART_SetConfig+0x2e8>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a9f      	ldr	r2, [pc, #636]	; (800349c <UART_SetConfig+0x2ec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003236:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003240:	430b      	orrs	r3, r1
 8003242:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f023 010f 	bic.w	r1, r3, #15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a90      	ldr	r2, [pc, #576]	; (80034a0 <UART_SetConfig+0x2f0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d126      	bne.n	80032b2 <UART_SetConfig+0x102>
 8003264:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <UART_SetConfig+0x2f4>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b03      	cmp	r3, #3
 8003270:	d81a      	bhi.n	80032a8 <UART_SetConfig+0xf8>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <UART_SetConfig+0xc8>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	08003299 	.word	0x08003299
 8003280:	08003291 	.word	0x08003291
 8003284:	080032a1 	.word	0x080032a1
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e116      	b.n	80034be <UART_SetConfig+0x30e>
 8003290:	2302      	movs	r3, #2
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e112      	b.n	80034be <UART_SetConfig+0x30e>
 8003298:	2304      	movs	r3, #4
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e10e      	b.n	80034be <UART_SetConfig+0x30e>
 80032a0:	2308      	movs	r3, #8
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e10a      	b.n	80034be <UART_SetConfig+0x30e>
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	bf00      	nop
 80032b0:	e105      	b.n	80034be <UART_SetConfig+0x30e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7c      	ldr	r2, [pc, #496]	; (80034a8 <UART_SetConfig+0x2f8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d138      	bne.n	800332e <UART_SetConfig+0x17e>
 80032bc:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <UART_SetConfig+0x2f4>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d82c      	bhi.n	8003324 <UART_SetConfig+0x174>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x120>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	08003305 	.word	0x08003305
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003325 	.word	0x08003325
 80032dc:	08003325 	.word	0x08003325
 80032e0:	08003315 	.word	0x08003315
 80032e4:	08003325 	.word	0x08003325
 80032e8:	08003325 	.word	0x08003325
 80032ec:	08003325 	.word	0x08003325
 80032f0:	0800330d 	.word	0x0800330d
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003325 	.word	0x08003325
 80032fc:	08003325 	.word	0x08003325
 8003300:	0800331d 	.word	0x0800331d
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e0d8      	b.n	80034be <UART_SetConfig+0x30e>
 800330c:	2302      	movs	r3, #2
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e0d4      	b.n	80034be <UART_SetConfig+0x30e>
 8003314:	2304      	movs	r3, #4
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e0d0      	b.n	80034be <UART_SetConfig+0x30e>
 800331c:	2308      	movs	r3, #8
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e0cc      	b.n	80034be <UART_SetConfig+0x30e>
 8003324:	2310      	movs	r3, #16
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	bf00      	nop
 800332c:	e0c7      	b.n	80034be <UART_SetConfig+0x30e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5e      	ldr	r2, [pc, #376]	; (80034ac <UART_SetConfig+0x2fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d125      	bne.n	8003384 <UART_SetConfig+0x1d4>
 8003338:	4b5a      	ldr	r3, [pc, #360]	; (80034a4 <UART_SetConfig+0x2f4>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003342:	2b10      	cmp	r3, #16
 8003344:	d011      	beq.n	800336a <UART_SetConfig+0x1ba>
 8003346:	2b10      	cmp	r3, #16
 8003348:	d802      	bhi.n	8003350 <UART_SetConfig+0x1a0>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <UART_SetConfig+0x1aa>
 800334e:	e014      	b.n	800337a <UART_SetConfig+0x1ca>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d006      	beq.n	8003362 <UART_SetConfig+0x1b2>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d00c      	beq.n	8003372 <UART_SetConfig+0x1c2>
 8003358:	e00f      	b.n	800337a <UART_SetConfig+0x1ca>
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003360:	e0ad      	b.n	80034be <UART_SetConfig+0x30e>
 8003362:	2302      	movs	r3, #2
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003368:	e0a9      	b.n	80034be <UART_SetConfig+0x30e>
 800336a:	2304      	movs	r3, #4
 800336c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003370:	e0a5      	b.n	80034be <UART_SetConfig+0x30e>
 8003372:	2308      	movs	r3, #8
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003378:	e0a1      	b.n	80034be <UART_SetConfig+0x30e>
 800337a:	2310      	movs	r3, #16
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003380:	bf00      	nop
 8003382:	e09c      	b.n	80034be <UART_SetConfig+0x30e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <UART_SetConfig+0x300>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d125      	bne.n	80033da <UART_SetConfig+0x22a>
 800338e:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <UART_SetConfig+0x2f4>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d011      	beq.n	80033c0 <UART_SetConfig+0x210>
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d802      	bhi.n	80033a6 <UART_SetConfig+0x1f6>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <UART_SetConfig+0x200>
 80033a4:	e014      	b.n	80033d0 <UART_SetConfig+0x220>
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d006      	beq.n	80033b8 <UART_SetConfig+0x208>
 80033aa:	2bc0      	cmp	r3, #192	; 0xc0
 80033ac:	d00c      	beq.n	80033c8 <UART_SetConfig+0x218>
 80033ae:	e00f      	b.n	80033d0 <UART_SetConfig+0x220>
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e082      	b.n	80034be <UART_SetConfig+0x30e>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033be:	e07e      	b.n	80034be <UART_SetConfig+0x30e>
 80033c0:	2304      	movs	r3, #4
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c6:	e07a      	b.n	80034be <UART_SetConfig+0x30e>
 80033c8:	2308      	movs	r3, #8
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e076      	b.n	80034be <UART_SetConfig+0x30e>
 80033d0:	2310      	movs	r3, #16
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	bf00      	nop
 80033d8:	e071      	b.n	80034be <UART_SetConfig+0x30e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <UART_SetConfig+0x304>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d129      	bne.n	8003438 <UART_SetConfig+0x288>
 80033e4:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <UART_SetConfig+0x2f4>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d014      	beq.n	800341e <UART_SetConfig+0x26e>
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f8:	d802      	bhi.n	8003400 <UART_SetConfig+0x250>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <UART_SetConfig+0x25e>
 80033fe:	e016      	b.n	800342e <UART_SetConfig+0x27e>
 8003400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003404:	d007      	beq.n	8003416 <UART_SetConfig+0x266>
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d00c      	beq.n	8003426 <UART_SetConfig+0x276>
 800340c:	e00f      	b.n	800342e <UART_SetConfig+0x27e>
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003414:	e053      	b.n	80034be <UART_SetConfig+0x30e>
 8003416:	2302      	movs	r3, #2
 8003418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341c:	e04f      	b.n	80034be <UART_SetConfig+0x30e>
 800341e:	2304      	movs	r3, #4
 8003420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003424:	e04b      	b.n	80034be <UART_SetConfig+0x30e>
 8003426:	2308      	movs	r3, #8
 8003428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342c:	e047      	b.n	80034be <UART_SetConfig+0x30e>
 800342e:	2310      	movs	r3, #16
 8003430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003434:	bf00      	nop
 8003436:	e042      	b.n	80034be <UART_SetConfig+0x30e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <UART_SetConfig+0x2ec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d13a      	bne.n	80034b8 <UART_SetConfig+0x308>
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <UART_SetConfig+0x2f4>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d014      	beq.n	800347c <UART_SetConfig+0x2cc>
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d802      	bhi.n	800345e <UART_SetConfig+0x2ae>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <UART_SetConfig+0x2bc>
 800345c:	e016      	b.n	800348c <UART_SetConfig+0x2dc>
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003462:	d007      	beq.n	8003474 <UART_SetConfig+0x2c4>
 8003464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003468:	d00c      	beq.n	8003484 <UART_SetConfig+0x2d4>
 800346a:	e00f      	b.n	800348c <UART_SetConfig+0x2dc>
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e024      	b.n	80034be <UART_SetConfig+0x30e>
 8003474:	2302      	movs	r3, #2
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e020      	b.n	80034be <UART_SetConfig+0x30e>
 800347c:	2304      	movs	r3, #4
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e01c      	b.n	80034be <UART_SetConfig+0x30e>
 8003484:	2308      	movs	r3, #8
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e018      	b.n	80034be <UART_SetConfig+0x30e>
 800348c:	2310      	movs	r3, #16
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	bf00      	nop
 8003494:	e013      	b.n	80034be <UART_SetConfig+0x30e>
 8003496:	bf00      	nop
 8003498:	cfff69f3 	.word	0xcfff69f3
 800349c:	40008000 	.word	0x40008000
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40004400 	.word	0x40004400
 80034ac:	40004800 	.word	0x40004800
 80034b0:	40004c00 	.word	0x40004c00
 80034b4:	40005000 	.word	0x40005000
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a86      	ldr	r2, [pc, #536]	; (80036dc <UART_SetConfig+0x52c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	f040 8422 	bne.w	8003d0e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	f200 8173 	bhi.w	80037ba <UART_SetConfig+0x60a>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x32c>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003501 	.word	0x08003501
 80034e0:	080037bb 	.word	0x080037bb
 80034e4:	080035a3 	.word	0x080035a3
 80034e8:	080037bb 	.word	0x080037bb
 80034ec:	0800363b 	.word	0x0800363b
 80034f0:	080037bb 	.word	0x080037bb
 80034f4:	080037bb 	.word	0x080037bb
 80034f8:	080037bb 	.word	0x080037bb
 80034fc:	0800370d 	.word	0x0800370d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003500:	f7fe fe7a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d044      	beq.n	8003598 <UART_SetConfig+0x3e8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b01      	cmp	r3, #1
 8003514:	d03e      	beq.n	8003594 <UART_SetConfig+0x3e4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b02      	cmp	r3, #2
 800351c:	d038      	beq.n	8003590 <UART_SetConfig+0x3e0>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b03      	cmp	r3, #3
 8003524:	d032      	beq.n	800358c <UART_SetConfig+0x3dc>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b04      	cmp	r3, #4
 800352c:	d02c      	beq.n	8003588 <UART_SetConfig+0x3d8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b05      	cmp	r3, #5
 8003534:	d026      	beq.n	8003584 <UART_SetConfig+0x3d4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b06      	cmp	r3, #6
 800353c:	d020      	beq.n	8003580 <UART_SetConfig+0x3d0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b07      	cmp	r3, #7
 8003544:	d01a      	beq.n	800357c <UART_SetConfig+0x3cc>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b08      	cmp	r3, #8
 800354c:	d014      	beq.n	8003578 <UART_SetConfig+0x3c8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b09      	cmp	r3, #9
 8003554:	d00e      	beq.n	8003574 <UART_SetConfig+0x3c4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d008      	beq.n	8003570 <UART_SetConfig+0x3c0>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b0b      	cmp	r3, #11
 8003564:	d102      	bne.n	800356c <UART_SetConfig+0x3bc>
 8003566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356a:	e016      	b.n	800359a <UART_SetConfig+0x3ea>
 800356c:	2301      	movs	r3, #1
 800356e:	e014      	b.n	800359a <UART_SetConfig+0x3ea>
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	e012      	b.n	800359a <UART_SetConfig+0x3ea>
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	e010      	b.n	800359a <UART_SetConfig+0x3ea>
 8003578:	2320      	movs	r3, #32
 800357a:	e00e      	b.n	800359a <UART_SetConfig+0x3ea>
 800357c:	2310      	movs	r3, #16
 800357e:	e00c      	b.n	800359a <UART_SetConfig+0x3ea>
 8003580:	230c      	movs	r3, #12
 8003582:	e00a      	b.n	800359a <UART_SetConfig+0x3ea>
 8003584:	230a      	movs	r3, #10
 8003586:	e008      	b.n	800359a <UART_SetConfig+0x3ea>
 8003588:	2308      	movs	r3, #8
 800358a:	e006      	b.n	800359a <UART_SetConfig+0x3ea>
 800358c:	2306      	movs	r3, #6
 800358e:	e004      	b.n	800359a <UART_SetConfig+0x3ea>
 8003590:	2304      	movs	r3, #4
 8003592:	e002      	b.n	800359a <UART_SetConfig+0x3ea>
 8003594:	2302      	movs	r3, #2
 8003596:	e000      	b.n	800359a <UART_SetConfig+0x3ea>
 8003598:	2301      	movs	r3, #1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	617b      	str	r3, [r7, #20]
        break;
 80035a0:	e10e      	b.n	80037c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d044      	beq.n	8003634 <UART_SetConfig+0x484>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d03e      	beq.n	8003630 <UART_SetConfig+0x480>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d038      	beq.n	800362c <UART_SetConfig+0x47c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d032      	beq.n	8003628 <UART_SetConfig+0x478>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d02c      	beq.n	8003624 <UART_SetConfig+0x474>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d026      	beq.n	8003620 <UART_SetConfig+0x470>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d020      	beq.n	800361c <UART_SetConfig+0x46c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b07      	cmp	r3, #7
 80035e0:	d01a      	beq.n	8003618 <UART_SetConfig+0x468>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d014      	beq.n	8003614 <UART_SetConfig+0x464>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d00e      	beq.n	8003610 <UART_SetConfig+0x460>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x45c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b0b      	cmp	r3, #11
 8003600:	d102      	bne.n	8003608 <UART_SetConfig+0x458>
 8003602:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003606:	e016      	b.n	8003636 <UART_SetConfig+0x486>
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <UART_SetConfig+0x530>)
 800360a:	e014      	b.n	8003636 <UART_SetConfig+0x486>
 800360c:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <UART_SetConfig+0x534>)
 800360e:	e012      	b.n	8003636 <UART_SetConfig+0x486>
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <UART_SetConfig+0x538>)
 8003612:	e010      	b.n	8003636 <UART_SetConfig+0x486>
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <UART_SetConfig+0x53c>)
 8003616:	e00e      	b.n	8003636 <UART_SetConfig+0x486>
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <UART_SetConfig+0x540>)
 800361a:	e00c      	b.n	8003636 <UART_SetConfig+0x486>
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <UART_SetConfig+0x544>)
 800361e:	e00a      	b.n	8003636 <UART_SetConfig+0x486>
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <UART_SetConfig+0x548>)
 8003622:	e008      	b.n	8003636 <UART_SetConfig+0x486>
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <UART_SetConfig+0x54c>)
 8003626:	e006      	b.n	8003636 <UART_SetConfig+0x486>
 8003628:	4b35      	ldr	r3, [pc, #212]	; (8003700 <UART_SetConfig+0x550>)
 800362a:	e004      	b.n	8003636 <UART_SetConfig+0x486>
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <UART_SetConfig+0x554>)
 800362e:	e002      	b.n	8003636 <UART_SetConfig+0x486>
 8003630:	4b35      	ldr	r3, [pc, #212]	; (8003708 <UART_SetConfig+0x558>)
 8003632:	e000      	b.n	8003636 <UART_SetConfig+0x486>
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <UART_SetConfig+0x530>)
 8003636:	617b      	str	r3, [r7, #20]
        break;
 8003638:	e0c2      	b.n	80037c0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800363a:	f7fe fd6f 	bl	800211c <HAL_RCC_GetSysClockFreq>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d044      	beq.n	80036d2 <UART_SetConfig+0x522>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	2b01      	cmp	r3, #1
 800364e:	d03e      	beq.n	80036ce <UART_SetConfig+0x51e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b02      	cmp	r3, #2
 8003656:	d038      	beq.n	80036ca <UART_SetConfig+0x51a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2b03      	cmp	r3, #3
 800365e:	d032      	beq.n	80036c6 <UART_SetConfig+0x516>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b04      	cmp	r3, #4
 8003666:	d02c      	beq.n	80036c2 <UART_SetConfig+0x512>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2b05      	cmp	r3, #5
 800366e:	d026      	beq.n	80036be <UART_SetConfig+0x50e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2b06      	cmp	r3, #6
 8003676:	d020      	beq.n	80036ba <UART_SetConfig+0x50a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b07      	cmp	r3, #7
 800367e:	d01a      	beq.n	80036b6 <UART_SetConfig+0x506>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b08      	cmp	r3, #8
 8003686:	d014      	beq.n	80036b2 <UART_SetConfig+0x502>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2b09      	cmp	r3, #9
 800368e:	d00e      	beq.n	80036ae <UART_SetConfig+0x4fe>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b0a      	cmp	r3, #10
 8003696:	d008      	beq.n	80036aa <UART_SetConfig+0x4fa>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b0b      	cmp	r3, #11
 800369e:	d102      	bne.n	80036a6 <UART_SetConfig+0x4f6>
 80036a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a4:	e016      	b.n	80036d4 <UART_SetConfig+0x524>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e014      	b.n	80036d4 <UART_SetConfig+0x524>
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	e012      	b.n	80036d4 <UART_SetConfig+0x524>
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	e010      	b.n	80036d4 <UART_SetConfig+0x524>
 80036b2:	2320      	movs	r3, #32
 80036b4:	e00e      	b.n	80036d4 <UART_SetConfig+0x524>
 80036b6:	2310      	movs	r3, #16
 80036b8:	e00c      	b.n	80036d4 <UART_SetConfig+0x524>
 80036ba:	230c      	movs	r3, #12
 80036bc:	e00a      	b.n	80036d4 <UART_SetConfig+0x524>
 80036be:	230a      	movs	r3, #10
 80036c0:	e008      	b.n	80036d4 <UART_SetConfig+0x524>
 80036c2:	2308      	movs	r3, #8
 80036c4:	e006      	b.n	80036d4 <UART_SetConfig+0x524>
 80036c6:	2306      	movs	r3, #6
 80036c8:	e004      	b.n	80036d4 <UART_SetConfig+0x524>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e002      	b.n	80036d4 <UART_SetConfig+0x524>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e000      	b.n	80036d4 <UART_SetConfig+0x524>
 80036d2:	2301      	movs	r3, #1
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
        break;
 80036da:	e071      	b.n	80037c0 <UART_SetConfig+0x610>
 80036dc:	40008000 	.word	0x40008000
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	0001e848 	.word	0x0001e848
 80036e8:	0003d090 	.word	0x0003d090
 80036ec:	0007a120 	.word	0x0007a120
 80036f0:	000f4240 	.word	0x000f4240
 80036f4:	00145855 	.word	0x00145855
 80036f8:	00186a00 	.word	0x00186a00
 80036fc:	001e8480 	.word	0x001e8480
 8003700:	0028b0aa 	.word	0x0028b0aa
 8003704:	003d0900 	.word	0x003d0900
 8003708:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d04e      	beq.n	80037b2 <UART_SetConfig+0x602>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b01      	cmp	r3, #1
 800371a:	d047      	beq.n	80037ac <UART_SetConfig+0x5fc>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b02      	cmp	r3, #2
 8003722:	d040      	beq.n	80037a6 <UART_SetConfig+0x5f6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b03      	cmp	r3, #3
 800372a:	d039      	beq.n	80037a0 <UART_SetConfig+0x5f0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b04      	cmp	r3, #4
 8003732:	d032      	beq.n	800379a <UART_SetConfig+0x5ea>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b05      	cmp	r3, #5
 800373a:	d02b      	beq.n	8003794 <UART_SetConfig+0x5e4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	2b06      	cmp	r3, #6
 8003742:	d024      	beq.n	800378e <UART_SetConfig+0x5de>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b07      	cmp	r3, #7
 800374a:	d01d      	beq.n	8003788 <UART_SetConfig+0x5d8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b08      	cmp	r3, #8
 8003752:	d016      	beq.n	8003782 <UART_SetConfig+0x5d2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2b09      	cmp	r3, #9
 800375a:	d00f      	beq.n	800377c <UART_SetConfig+0x5cc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b0a      	cmp	r3, #10
 8003762:	d008      	beq.n	8003776 <UART_SetConfig+0x5c6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b0b      	cmp	r3, #11
 800376a:	d101      	bne.n	8003770 <UART_SetConfig+0x5c0>
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	e022      	b.n	80037b6 <UART_SetConfig+0x606>
 8003770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003774:	e01f      	b.n	80037b6 <UART_SetConfig+0x606>
 8003776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377a:	e01c      	b.n	80037b6 <UART_SetConfig+0x606>
 800377c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003780:	e019      	b.n	80037b6 <UART_SetConfig+0x606>
 8003782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003786:	e016      	b.n	80037b6 <UART_SetConfig+0x606>
 8003788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800378c:	e013      	b.n	80037b6 <UART_SetConfig+0x606>
 800378e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x606>
 8003794:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x606>
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	e00a      	b.n	80037b6 <UART_SetConfig+0x606>
 80037a0:	f241 5355 	movw	r3, #5461	; 0x1555
 80037a4:	e007      	b.n	80037b6 <UART_SetConfig+0x606>
 80037a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037aa:	e004      	b.n	80037b6 <UART_SetConfig+0x606>
 80037ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b0:	e001      	b.n	80037b6 <UART_SetConfig+0x606>
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	617b      	str	r3, [r7, #20]
        break;
 80037b8:	e002      	b.n	80037c0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	76fb      	strb	r3, [r7, #27]
        break;
 80037be:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 86b7 	beq.w	8004536 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d305      	bcc.n	80037e4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d903      	bls.n	80037ec <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	f000 bea5 	b.w	8004536 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80037ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	f200 8277 	bhi.w	8003ce4 <UART_SetConfig+0xb34>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x64c>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003ce5 	.word	0x08003ce5
 8003804:	0800395f 	.word	0x0800395f
 8003808:	08003ce5 	.word	0x08003ce5
 800380c:	08003a55 	.word	0x08003a55
 8003810:	08003ce5 	.word	0x08003ce5
 8003814:	08003ce5 	.word	0x08003ce5
 8003818:	08003ce5 	.word	0x08003ce5
 800381c:	08003b93 	.word	0x08003b93
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fcea 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003824:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4618      	mov	r0, r3
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d067      	beq.n	8003906 <UART_SetConfig+0x756>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b01      	cmp	r3, #1
 800383c:	d05e      	beq.n	80038fc <UART_SetConfig+0x74c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b02      	cmp	r3, #2
 8003844:	d055      	beq.n	80038f2 <UART_SetConfig+0x742>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b03      	cmp	r3, #3
 800384c:	d04c      	beq.n	80038e8 <UART_SetConfig+0x738>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b04      	cmp	r3, #4
 8003854:	d043      	beq.n	80038de <UART_SetConfig+0x72e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b05      	cmp	r3, #5
 800385c:	d03a      	beq.n	80038d4 <UART_SetConfig+0x724>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b06      	cmp	r3, #6
 8003864:	d031      	beq.n	80038ca <UART_SetConfig+0x71a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b07      	cmp	r3, #7
 800386c:	d028      	beq.n	80038c0 <UART_SetConfig+0x710>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b08      	cmp	r3, #8
 8003874:	d01f      	beq.n	80038b6 <UART_SetConfig+0x706>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	2b09      	cmp	r3, #9
 800387c:	d016      	beq.n	80038ac <UART_SetConfig+0x6fc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d00d      	beq.n	80038a2 <UART_SetConfig+0x6f2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b0b      	cmp	r3, #11
 800388c:	d104      	bne.n	8003898 <UART_SetConfig+0x6e8>
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003892:	f04f 0400 	mov.w	r4, #0
 8003896:	e03a      	b.n	800390e <UART_SetConfig+0x75e>
 8003898:	f04f 0301 	mov.w	r3, #1
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	e035      	b.n	800390e <UART_SetConfig+0x75e>
 80038a2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80038a6:	f04f 0400 	mov.w	r4, #0
 80038aa:	e030      	b.n	800390e <UART_SetConfig+0x75e>
 80038ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038b0:	f04f 0400 	mov.w	r4, #0
 80038b4:	e02b      	b.n	800390e <UART_SetConfig+0x75e>
 80038b6:	f04f 0320 	mov.w	r3, #32
 80038ba:	f04f 0400 	mov.w	r4, #0
 80038be:	e026      	b.n	800390e <UART_SetConfig+0x75e>
 80038c0:	f04f 0310 	mov.w	r3, #16
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	e021      	b.n	800390e <UART_SetConfig+0x75e>
 80038ca:	f04f 030c 	mov.w	r3, #12
 80038ce:	f04f 0400 	mov.w	r4, #0
 80038d2:	e01c      	b.n	800390e <UART_SetConfig+0x75e>
 80038d4:	f04f 030a 	mov.w	r3, #10
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	e017      	b.n	800390e <UART_SetConfig+0x75e>
 80038de:	f04f 0308 	mov.w	r3, #8
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	e012      	b.n	800390e <UART_SetConfig+0x75e>
 80038e8:	f04f 0306 	mov.w	r3, #6
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	e00d      	b.n	800390e <UART_SetConfig+0x75e>
 80038f2:	f04f 0304 	mov.w	r3, #4
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	e008      	b.n	800390e <UART_SetConfig+0x75e>
 80038fc:	f04f 0302 	mov.w	r3, #2
 8003900:	f04f 0400 	mov.w	r4, #0
 8003904:	e003      	b.n	800390e <UART_SetConfig+0x75e>
 8003906:	f04f 0301 	mov.w	r3, #1
 800390a:	f04f 0400 	mov.w	r4, #0
 800390e:	461a      	mov	r2, r3
 8003910:	4623      	mov	r3, r4
 8003912:	f7fc fc81 	bl	8000218 <__aeabi_uldivmod>
 8003916:	4603      	mov	r3, r0
 8003918:	460c      	mov	r4, r1
 800391a:	4619      	mov	r1, r3
 800391c:	4622      	mov	r2, r4
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f04f 0400 	mov.w	r4, #0
 8003926:	0214      	lsls	r4, r2, #8
 8003928:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800392c:	020b      	lsls	r3, r1, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6852      	ldr	r2, [r2, #4]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	4611      	mov	r1, r2
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	eb13 0b01 	adds.w	fp, r3, r1
 800393e:	eb44 0c02 	adc.w	ip, r4, r2
 8003942:	4658      	mov	r0, fp
 8003944:	4661      	mov	r1, ip
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f04f 0400 	mov.w	r4, #0
 800394e:	461a      	mov	r2, r3
 8003950:	4623      	mov	r3, r4
 8003952:	f7fc fc61 	bl	8000218 <__aeabi_uldivmod>
 8003956:	4603      	mov	r3, r0
 8003958:	460c      	mov	r4, r1
 800395a:	61fb      	str	r3, [r7, #28]
            break;
 800395c:	e1c5      	b.n	8003cea <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d05b      	beq.n	8003a1e <UART_SetConfig+0x86e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b01      	cmp	r3, #1
 800396c:	d053      	beq.n	8003a16 <UART_SetConfig+0x866>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b02      	cmp	r3, #2
 8003974:	d04b      	beq.n	8003a0e <UART_SetConfig+0x85e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b03      	cmp	r3, #3
 800397c:	d043      	beq.n	8003a06 <UART_SetConfig+0x856>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b04      	cmp	r3, #4
 8003984:	d03b      	beq.n	80039fe <UART_SetConfig+0x84e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b05      	cmp	r3, #5
 800398c:	d033      	beq.n	80039f6 <UART_SetConfig+0x846>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b06      	cmp	r3, #6
 8003994:	d02b      	beq.n	80039ee <UART_SetConfig+0x83e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	2b07      	cmp	r3, #7
 800399c:	d023      	beq.n	80039e6 <UART_SetConfig+0x836>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d01b      	beq.n	80039de <UART_SetConfig+0x82e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b09      	cmp	r3, #9
 80039ac:	d013      	beq.n	80039d6 <UART_SetConfig+0x826>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b0a      	cmp	r3, #10
 80039b4:	d00b      	beq.n	80039ce <UART_SetConfig+0x81e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b0b      	cmp	r3, #11
 80039bc:	d103      	bne.n	80039c6 <UART_SetConfig+0x816>
 80039be:	4bae      	ldr	r3, [pc, #696]	; (8003c78 <UART_SetConfig+0xac8>)
 80039c0:	f04f 0400 	mov.w	r4, #0
 80039c4:	e02e      	b.n	8003a24 <UART_SetConfig+0x874>
 80039c6:	4bad      	ldr	r3, [pc, #692]	; (8003c7c <UART_SetConfig+0xacc>)
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	e02a      	b.n	8003a24 <UART_SetConfig+0x874>
 80039ce:	4bac      	ldr	r3, [pc, #688]	; (8003c80 <UART_SetConfig+0xad0>)
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	e026      	b.n	8003a24 <UART_SetConfig+0x874>
 80039d6:	4bab      	ldr	r3, [pc, #684]	; (8003c84 <UART_SetConfig+0xad4>)
 80039d8:	f04f 0400 	mov.w	r4, #0
 80039dc:	e022      	b.n	8003a24 <UART_SetConfig+0x874>
 80039de:	4baa      	ldr	r3, [pc, #680]	; (8003c88 <UART_SetConfig+0xad8>)
 80039e0:	f04f 0400 	mov.w	r4, #0
 80039e4:	e01e      	b.n	8003a24 <UART_SetConfig+0x874>
 80039e6:	4ba9      	ldr	r3, [pc, #676]	; (8003c8c <UART_SetConfig+0xadc>)
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	e01a      	b.n	8003a24 <UART_SetConfig+0x874>
 80039ee:	a49e      	add	r4, pc, #632	; (adr r4, 8003c68 <UART_SetConfig+0xab8>)
 80039f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80039f4:	e016      	b.n	8003a24 <UART_SetConfig+0x874>
 80039f6:	4ba6      	ldr	r3, [pc, #664]	; (8003c90 <UART_SetConfig+0xae0>)
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	e012      	b.n	8003a24 <UART_SetConfig+0x874>
 80039fe:	4ba5      	ldr	r3, [pc, #660]	; (8003c94 <UART_SetConfig+0xae4>)
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	e00e      	b.n	8003a24 <UART_SetConfig+0x874>
 8003a06:	a49a      	add	r4, pc, #616	; (adr r4, 8003c70 <UART_SetConfig+0xac0>)
 8003a08:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a0c:	e00a      	b.n	8003a24 <UART_SetConfig+0x874>
 8003a0e:	4ba2      	ldr	r3, [pc, #648]	; (8003c98 <UART_SetConfig+0xae8>)
 8003a10:	f04f 0400 	mov.w	r4, #0
 8003a14:	e006      	b.n	8003a24 <UART_SetConfig+0x874>
 8003a16:	4ba1      	ldr	r3, [pc, #644]	; (8003c9c <UART_SetConfig+0xaec>)
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	e002      	b.n	8003a24 <UART_SetConfig+0x874>
 8003a1e:	4b97      	ldr	r3, [pc, #604]	; (8003c7c <UART_SetConfig+0xacc>)
 8003a20:	f04f 0400 	mov.w	r4, #0
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6852      	ldr	r2, [r2, #4]
 8003a28:	0852      	lsrs	r2, r2, #1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	eb13 0b01 	adds.w	fp, r3, r1
 8003a34:	eb44 0c02 	adc.w	ip, r4, r2
 8003a38:	4658      	mov	r0, fp
 8003a3a:	4661      	mov	r1, ip
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	461a      	mov	r2, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	f7fc fbe6 	bl	8000218 <__aeabi_uldivmod>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	61fb      	str	r3, [r7, #28]
            break;
 8003a52:	e14a      	b.n	8003cea <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003a54:	f7fe fb62 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8003a58:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d067      	beq.n	8003b3a <UART_SetConfig+0x98a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d05e      	beq.n	8003b30 <UART_SetConfig+0x980>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d055      	beq.n	8003b26 <UART_SetConfig+0x976>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d04c      	beq.n	8003b1c <UART_SetConfig+0x96c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d043      	beq.n	8003b12 <UART_SetConfig+0x962>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d03a      	beq.n	8003b08 <UART_SetConfig+0x958>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d031      	beq.n	8003afe <UART_SetConfig+0x94e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b07      	cmp	r3, #7
 8003aa0:	d028      	beq.n	8003af4 <UART_SetConfig+0x944>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d01f      	beq.n	8003aea <UART_SetConfig+0x93a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d016      	beq.n	8003ae0 <UART_SetConfig+0x930>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b0a      	cmp	r3, #10
 8003ab8:	d00d      	beq.n	8003ad6 <UART_SetConfig+0x926>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b0b      	cmp	r3, #11
 8003ac0:	d104      	bne.n	8003acc <UART_SetConfig+0x91c>
 8003ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	e03a      	b.n	8003b42 <UART_SetConfig+0x992>
 8003acc:	f04f 0301 	mov.w	r3, #1
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	e035      	b.n	8003b42 <UART_SetConfig+0x992>
 8003ad6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	e030      	b.n	8003b42 <UART_SetConfig+0x992>
 8003ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	e02b      	b.n	8003b42 <UART_SetConfig+0x992>
 8003aea:	f04f 0320 	mov.w	r3, #32
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	e026      	b.n	8003b42 <UART_SetConfig+0x992>
 8003af4:	f04f 0310 	mov.w	r3, #16
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	e021      	b.n	8003b42 <UART_SetConfig+0x992>
 8003afe:	f04f 030c 	mov.w	r3, #12
 8003b02:	f04f 0400 	mov.w	r4, #0
 8003b06:	e01c      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b08:	f04f 030a 	mov.w	r3, #10
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	e017      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b12:	f04f 0308 	mov.w	r3, #8
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	e012      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b1c:	f04f 0306 	mov.w	r3, #6
 8003b20:	f04f 0400 	mov.w	r4, #0
 8003b24:	e00d      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b26:	f04f 0304 	mov.w	r3, #4
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	e008      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b30:	f04f 0302 	mov.w	r3, #2
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	e003      	b.n	8003b42 <UART_SetConfig+0x992>
 8003b3a:	f04f 0301 	mov.w	r3, #1
 8003b3e:	f04f 0400 	mov.w	r4, #0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4623      	mov	r3, r4
 8003b46:	f7fc fb67 	bl	8000218 <__aeabi_uldivmod>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4622      	mov	r2, r4
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f04f 0400 	mov.w	r4, #0
 8003b5a:	0214      	lsls	r4, r2, #8
 8003b5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b60:	020b      	lsls	r3, r1, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	eb13 0b01 	adds.w	fp, r3, r1
 8003b72:	eb44 0c02 	adc.w	ip, r4, r2
 8003b76:	4658      	mov	r0, fp
 8003b78:	4661      	mov	r1, ip
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f04f 0400 	mov.w	r4, #0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4623      	mov	r3, r4
 8003b86:	f7fc fb47 	bl	8000218 <__aeabi_uldivmod>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	61fb      	str	r3, [r7, #28]
            break;
 8003b90:	e0ab      	b.n	8003cea <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8088 	beq.w	8003cac <UART_SetConfig+0xafc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d05b      	beq.n	8003c5c <UART_SetConfig+0xaac>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d052      	beq.n	8003c52 <UART_SetConfig+0xaa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d04a      	beq.n	8003c4a <UART_SetConfig+0xa9a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d041      	beq.n	8003c40 <UART_SetConfig+0xa90>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d039      	beq.n	8003c38 <UART_SetConfig+0xa88>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b06      	cmp	r3, #6
 8003bca:	d031      	beq.n	8003c30 <UART_SetConfig+0xa80>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2b07      	cmp	r3, #7
 8003bd2:	d028      	beq.n	8003c26 <UART_SetConfig+0xa76>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d01f      	beq.n	8003c1c <UART_SetConfig+0xa6c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d016      	beq.n	8003c12 <UART_SetConfig+0xa62>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2b0a      	cmp	r3, #10
 8003bea:	d00d      	beq.n	8003c08 <UART_SetConfig+0xa58>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b0b      	cmp	r3, #11
 8003bf2:	d104      	bne.n	8003bfe <UART_SetConfig+0xa4e>
 8003bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf8:	f04f 0400 	mov.w	r4, #0
 8003bfc:	e05a      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003bfe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	e055      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	e050      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c16:	f04f 0400 	mov.w	r4, #0
 8003c1a:	e04b      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c20:	f04f 0400 	mov.w	r4, #0
 8003c24:	e046      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c2a:	f04f 0400 	mov.w	r4, #0
 8003c2e:	e041      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <UART_SetConfig+0xaf0>)
 8003c32:	f04f 0400 	mov.w	r4, #0
 8003c36:	e03d      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <UART_SetConfig+0xaf4>)
 8003c3a:	f04f 0400 	mov.w	r4, #0
 8003c3e:	e039      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	e034      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <UART_SetConfig+0xaf8>)
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	e030      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c56:	f04f 0400 	mov.w	r4, #0
 8003c5a:	e02b      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c60:	f04f 0400 	mov.w	r4, #0
 8003c64:	e026      	b.n	8003cb4 <UART_SetConfig+0xb04>
 8003c66:	bf00      	nop
 8003c68:	14585500 	.word	0x14585500
 8003c6c:	00000000 	.word	0x00000000
 8003c70:	28b0aa00 	.word	0x28b0aa00
 8003c74:	00000000 	.word	0x00000000
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	f4240000 	.word	0xf4240000
 8003c80:	01e84800 	.word	0x01e84800
 8003c84:	03d09000 	.word	0x03d09000
 8003c88:	07a12000 	.word	0x07a12000
 8003c8c:	0f424000 	.word	0x0f424000
 8003c90:	186a0000 	.word	0x186a0000
 8003c94:	1e848000 	.word	0x1e848000
 8003c98:	3d090000 	.word	0x3d090000
 8003c9c:	7a120000 	.word	0x7a120000
 8003ca0:	000aaa00 	.word	0x000aaa00
 8003ca4:	000ccc00 	.word	0x000ccc00
 8003ca8:	00155500 	.word	0x00155500
 8003cac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6852      	ldr	r2, [r2, #4]
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	eb13 0b01 	adds.w	fp, r3, r1
 8003cc4:	eb44 0c02 	adc.w	ip, r4, r2
 8003cc8:	4658      	mov	r0, fp
 8003cca:	4661      	mov	r1, ip
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f7fc fa9e 	bl	8000218 <__aeabi_uldivmod>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	61fb      	str	r3, [r7, #28]
            break;
 8003ce2:	e002      	b.n	8003cea <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	76fb      	strb	r3, [r7, #27]
            break;
 8003ce8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf0:	d309      	bcc.n	8003d06 <UART_SetConfig+0xb56>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf8:	d205      	bcs.n	8003d06 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	f000 bc18 	b.w	8004536 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	76fb      	strb	r3, [r7, #27]
 8003d0a:	f000 bc14 	b.w	8004536 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	f040 8204 	bne.w	8004122 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8003d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	f200 81df 	bhi.w	80040e2 <UART_SetConfig+0xf32>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0xb7c>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003e09 	.word	0x08003e09
 8003d34:	08003ec1 	.word	0x08003ec1
 8003d38:	080040e3 	.word	0x080040e3
 8003d3c:	08003f69 	.word	0x08003f69
 8003d40:	080040e3 	.word	0x080040e3
 8003d44:	080040e3 	.word	0x080040e3
 8003d48:	080040e3 	.word	0x080040e3
 8003d4c:	08004021 	.word	0x08004021
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7fe fa52 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003d54:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d044      	beq.n	8003de8 <UART_SetConfig+0xc38>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d03e      	beq.n	8003de4 <UART_SetConfig+0xc34>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d038      	beq.n	8003de0 <UART_SetConfig+0xc30>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d032      	beq.n	8003ddc <UART_SetConfig+0xc2c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d02c      	beq.n	8003dd8 <UART_SetConfig+0xc28>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d026      	beq.n	8003dd4 <UART_SetConfig+0xc24>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d020      	beq.n	8003dd0 <UART_SetConfig+0xc20>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	d01a      	beq.n	8003dcc <UART_SetConfig+0xc1c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d014      	beq.n	8003dc8 <UART_SetConfig+0xc18>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d00e      	beq.n	8003dc4 <UART_SetConfig+0xc14>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b0a      	cmp	r3, #10
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0xc10>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b0b      	cmp	r3, #11
 8003db4:	d102      	bne.n	8003dbc <UART_SetConfig+0xc0c>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e016      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e014      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	e012      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	e010      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e00e      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	e00c      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	e00a      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	e008      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	e006      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003ddc:	2306      	movs	r3, #6
 8003dde:	e004      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e002      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e000      	b.n	8003dea <UART_SetConfig+0xc3a>
 8003de8:	2301      	movs	r3, #1
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	61fb      	str	r3, [r7, #28]
        break;
 8003e06:	e16f      	b.n	80040e8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e08:	f7fe fa0c 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003e0c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <UART_SetConfig+0xcf0>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d03e      	beq.n	8003e9c <UART_SetConfig+0xcec>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d038      	beq.n	8003e98 <UART_SetConfig+0xce8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d032      	beq.n	8003e94 <UART_SetConfig+0xce4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d02c      	beq.n	8003e90 <UART_SetConfig+0xce0>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d026      	beq.n	8003e8c <UART_SetConfig+0xcdc>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d020      	beq.n	8003e88 <UART_SetConfig+0xcd8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2b07      	cmp	r3, #7
 8003e4c:	d01a      	beq.n	8003e84 <UART_SetConfig+0xcd4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d014      	beq.n	8003e80 <UART_SetConfig+0xcd0>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b09      	cmp	r3, #9
 8003e5c:	d00e      	beq.n	8003e7c <UART_SetConfig+0xccc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b0a      	cmp	r3, #10
 8003e64:	d008      	beq.n	8003e78 <UART_SetConfig+0xcc8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b0b      	cmp	r3, #11
 8003e6c:	d102      	bne.n	8003e74 <UART_SetConfig+0xcc4>
 8003e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e72:	e016      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e014      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	e012      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e7c:	2340      	movs	r3, #64	; 0x40
 8003e7e:	e010      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e80:	2320      	movs	r3, #32
 8003e82:	e00e      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e84:	2310      	movs	r3, #16
 8003e86:	e00c      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e88:	230c      	movs	r3, #12
 8003e8a:	e00a      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	e008      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e90:	2308      	movs	r3, #8
 8003e92:	e006      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e94:	2306      	movs	r3, #6
 8003e96:	e004      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e002      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e000      	b.n	8003ea2 <UART_SetConfig+0xcf2>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	61fb      	str	r3, [r7, #28]
        break;
 8003ebe:	e113      	b.n	80040e8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d043      	beq.n	8003f50 <UART_SetConfig+0xda0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d03d      	beq.n	8003f4c <UART_SetConfig+0xd9c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d037      	beq.n	8003f48 <UART_SetConfig+0xd98>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d031      	beq.n	8003f44 <UART_SetConfig+0xd94>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d02b      	beq.n	8003f40 <UART_SetConfig+0xd90>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d025      	beq.n	8003f3c <UART_SetConfig+0xd8c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d01f      	beq.n	8003f38 <UART_SetConfig+0xd88>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	d019      	beq.n	8003f34 <UART_SetConfig+0xd84>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d013      	beq.n	8003f30 <UART_SetConfig+0xd80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d00d      	beq.n	8003f2c <UART_SetConfig+0xd7c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b0a      	cmp	r3, #10
 8003f16:	d007      	beq.n	8003f28 <UART_SetConfig+0xd78>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b0b      	cmp	r3, #11
 8003f1e:	d101      	bne.n	8003f24 <UART_SetConfig+0xd74>
 8003f20:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <UART_SetConfig+0xfa8>)
 8003f22:	e016      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f24:	4b8d      	ldr	r3, [pc, #564]	; (800415c <UART_SetConfig+0xfac>)
 8003f26:	e014      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f28:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <UART_SetConfig+0xfb0>)
 8003f2a:	e012      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f2c:	4b8d      	ldr	r3, [pc, #564]	; (8004164 <UART_SetConfig+0xfb4>)
 8003f2e:	e010      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f30:	4b8d      	ldr	r3, [pc, #564]	; (8004168 <UART_SetConfig+0xfb8>)
 8003f32:	e00e      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f34:	4b8d      	ldr	r3, [pc, #564]	; (800416c <UART_SetConfig+0xfbc>)
 8003f36:	e00c      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f38:	4b8d      	ldr	r3, [pc, #564]	; (8004170 <UART_SetConfig+0xfc0>)
 8003f3a:	e00a      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f3c:	4b8d      	ldr	r3, [pc, #564]	; (8004174 <UART_SetConfig+0xfc4>)
 8003f3e:	e008      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f40:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <UART_SetConfig+0xfc8>)
 8003f42:	e006      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f44:	4b8d      	ldr	r3, [pc, #564]	; (800417c <UART_SetConfig+0xfcc>)
 8003f46:	e004      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f48:	4b8d      	ldr	r3, [pc, #564]	; (8004180 <UART_SetConfig+0xfd0>)
 8003f4a:	e002      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f4c:	4b8d      	ldr	r3, [pc, #564]	; (8004184 <UART_SetConfig+0xfd4>)
 8003f4e:	e000      	b.n	8003f52 <UART_SetConfig+0xda2>
 8003f50:	4b82      	ldr	r3, [pc, #520]	; (800415c <UART_SetConfig+0xfac>)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6852      	ldr	r2, [r2, #4]
 8003f56:	0852      	lsrs	r2, r2, #1
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	61fb      	str	r3, [r7, #28]
        break;
 8003f66:	e0bf      	b.n	80040e8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f68:	f7fe f8d8 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8003f6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d044      	beq.n	8004000 <UART_SetConfig+0xe50>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d03e      	beq.n	8003ffc <UART_SetConfig+0xe4c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d038      	beq.n	8003ff8 <UART_SetConfig+0xe48>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d032      	beq.n	8003ff4 <UART_SetConfig+0xe44>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d02c      	beq.n	8003ff0 <UART_SetConfig+0xe40>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d026      	beq.n	8003fec <UART_SetConfig+0xe3c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d020      	beq.n	8003fe8 <UART_SetConfig+0xe38>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b07      	cmp	r3, #7
 8003fac:	d01a      	beq.n	8003fe4 <UART_SetConfig+0xe34>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d014      	beq.n	8003fe0 <UART_SetConfig+0xe30>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d00e      	beq.n	8003fdc <UART_SetConfig+0xe2c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b0a      	cmp	r3, #10
 8003fc4:	d008      	beq.n	8003fd8 <UART_SetConfig+0xe28>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b0b      	cmp	r3, #11
 8003fcc:	d102      	bne.n	8003fd4 <UART_SetConfig+0xe24>
 8003fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fd2:	e016      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e014      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	e012      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e00e      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	e00c      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fe8:	230c      	movs	r3, #12
 8003fea:	e00a      	b.n	8004002 <UART_SetConfig+0xe52>
 8003fec:	230a      	movs	r3, #10
 8003fee:	e008      	b.n	8004002 <UART_SetConfig+0xe52>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	e006      	b.n	8004002 <UART_SetConfig+0xe52>
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	e004      	b.n	8004002 <UART_SetConfig+0xe52>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e002      	b.n	8004002 <UART_SetConfig+0xe52>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e000      	b.n	8004002 <UART_SetConfig+0xe52>
 8004000:	2301      	movs	r3, #1
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	005a      	lsls	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	441a      	add	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	61fb      	str	r3, [r7, #28]
        break;
 800401e:	e063      	b.n	80040e8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04f      	beq.n	80040c8 <UART_SetConfig+0xf18>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d048      	beq.n	80040c2 <UART_SetConfig+0xf12>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b02      	cmp	r3, #2
 8004036:	d041      	beq.n	80040bc <UART_SetConfig+0xf0c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b03      	cmp	r3, #3
 800403e:	d03a      	beq.n	80040b6 <UART_SetConfig+0xf06>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b04      	cmp	r3, #4
 8004046:	d033      	beq.n	80040b0 <UART_SetConfig+0xf00>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b05      	cmp	r3, #5
 800404e:	d02c      	beq.n	80040aa <UART_SetConfig+0xefa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	2b06      	cmp	r3, #6
 8004056:	d025      	beq.n	80040a4 <UART_SetConfig+0xef4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2b07      	cmp	r3, #7
 800405e:	d01e      	beq.n	800409e <UART_SetConfig+0xeee>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b08      	cmp	r3, #8
 8004066:	d017      	beq.n	8004098 <UART_SetConfig+0xee8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b09      	cmp	r3, #9
 800406e:	d010      	beq.n	8004092 <UART_SetConfig+0xee2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b0a      	cmp	r3, #10
 8004076:	d009      	beq.n	800408c <UART_SetConfig+0xedc>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b0b      	cmp	r3, #11
 800407e:	d102      	bne.n	8004086 <UART_SetConfig+0xed6>
 8004080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004084:	e022      	b.n	80040cc <UART_SetConfig+0xf1c>
 8004086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408a:	e01f      	b.n	80040cc <UART_SetConfig+0xf1c>
 800408c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004090:	e01c      	b.n	80040cc <UART_SetConfig+0xf1c>
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	e019      	b.n	80040cc <UART_SetConfig+0xf1c>
 8004098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800409c:	e016      	b.n	80040cc <UART_SetConfig+0xf1c>
 800409e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a2:	e013      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040a4:	f241 5354 	movw	r3, #5460	; 0x1554
 80040a8:	e010      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040aa:	f641 1398 	movw	r3, #6552	; 0x1998
 80040ae:	e00d      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b4:	e00a      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040b6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80040ba:	e007      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040c0:	e004      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c6:	e001      	b.n	80040cc <UART_SetConfig+0xf1c>
 80040c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6852      	ldr	r2, [r2, #4]
 80040d0:	0852      	lsrs	r2, r2, #1
 80040d2:	441a      	add	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	b29b      	uxth	r3, r3
 80040de:	61fb      	str	r3, [r7, #28]
        break;
 80040e0:	e002      	b.n	80040e8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	76fb      	strb	r3, [r7, #27]
        break;
 80040e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d916      	bls.n	800411c <UART_SetConfig+0xf6c>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d212      	bcs.n	800411c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f023 030f 	bic.w	r3, r3, #15
 80040fe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	b29a      	uxth	r2, r3
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	4313      	orrs	r3, r2
 8004110:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	89fa      	ldrh	r2, [r7, #14]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e20c      	b.n	8004536 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e209      	b.n	8004536 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004126:	2b08      	cmp	r3, #8
 8004128:	f200 81f4 	bhi.w	8004514 <UART_SetConfig+0x1364>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <UART_SetConfig+0xf84>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004189 	.word	0x08004189
 8004138:	0800423f 	.word	0x0800423f
 800413c:	080042f5 	.word	0x080042f5
 8004140:	08004515 	.word	0x08004515
 8004144:	0800439f 	.word	0x0800439f
 8004148:	08004515 	.word	0x08004515
 800414c:	08004515 	.word	0x08004515
 8004150:	08004515 	.word	0x08004515
 8004154:	08004455 	.word	0x08004455
 8004158:	0001e848 	.word	0x0001e848
 800415c:	01e84800 	.word	0x01e84800
 8004160:	0003d090 	.word	0x0003d090
 8004164:	0007a120 	.word	0x0007a120
 8004168:	000f4240 	.word	0x000f4240
 800416c:	001e8480 	.word	0x001e8480
 8004170:	0028b0aa 	.word	0x0028b0aa
 8004174:	0030d400 	.word	0x0030d400
 8004178:	003d0900 	.word	0x003d0900
 800417c:	00516154 	.word	0x00516154
 8004180:	007a1200 	.word	0x007a1200
 8004184:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe f836 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 800418c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <UART_SetConfig+0x1070>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b01      	cmp	r3, #1
 800419c:	d03e      	beq.n	800421c <UART_SetConfig+0x106c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d038      	beq.n	8004218 <UART_SetConfig+0x1068>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d032      	beq.n	8004214 <UART_SetConfig+0x1064>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d02c      	beq.n	8004210 <UART_SetConfig+0x1060>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d026      	beq.n	800420c <UART_SetConfig+0x105c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d020      	beq.n	8004208 <UART_SetConfig+0x1058>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d01a      	beq.n	8004204 <UART_SetConfig+0x1054>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d014      	beq.n	8004200 <UART_SetConfig+0x1050>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b09      	cmp	r3, #9
 80041dc:	d00e      	beq.n	80041fc <UART_SetConfig+0x104c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b0a      	cmp	r3, #10
 80041e4:	d008      	beq.n	80041f8 <UART_SetConfig+0x1048>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b0b      	cmp	r3, #11
 80041ec:	d102      	bne.n	80041f4 <UART_SetConfig+0x1044>
 80041ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f2:	e016      	b.n	8004222 <UART_SetConfig+0x1072>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e014      	b.n	8004222 <UART_SetConfig+0x1072>
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	e012      	b.n	8004222 <UART_SetConfig+0x1072>
 80041fc:	2340      	movs	r3, #64	; 0x40
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x1072>
 8004200:	2320      	movs	r3, #32
 8004202:	e00e      	b.n	8004222 <UART_SetConfig+0x1072>
 8004204:	2310      	movs	r3, #16
 8004206:	e00c      	b.n	8004222 <UART_SetConfig+0x1072>
 8004208:	230c      	movs	r3, #12
 800420a:	e00a      	b.n	8004222 <UART_SetConfig+0x1072>
 800420c:	230a      	movs	r3, #10
 800420e:	e008      	b.n	8004222 <UART_SetConfig+0x1072>
 8004210:	2308      	movs	r3, #8
 8004212:	e006      	b.n	8004222 <UART_SetConfig+0x1072>
 8004214:	2306      	movs	r3, #6
 8004216:	e004      	b.n	8004222 <UART_SetConfig+0x1072>
 8004218:	2304      	movs	r3, #4
 800421a:	e002      	b.n	8004222 <UART_SetConfig+0x1072>
 800421c:	2302      	movs	r3, #2
 800421e:	e000      	b.n	8004222 <UART_SetConfig+0x1072>
 8004220:	2301      	movs	r3, #1
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e16d      	b.n	800451a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423e:	f7fd fff1 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8004242:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d044      	beq.n	80042d6 <UART_SetConfig+0x1126>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b01      	cmp	r3, #1
 8004252:	d03e      	beq.n	80042d2 <UART_SetConfig+0x1122>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b02      	cmp	r3, #2
 800425a:	d038      	beq.n	80042ce <UART_SetConfig+0x111e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b03      	cmp	r3, #3
 8004262:	d032      	beq.n	80042ca <UART_SetConfig+0x111a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b04      	cmp	r3, #4
 800426a:	d02c      	beq.n	80042c6 <UART_SetConfig+0x1116>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b05      	cmp	r3, #5
 8004272:	d026      	beq.n	80042c2 <UART_SetConfig+0x1112>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b06      	cmp	r3, #6
 800427a:	d020      	beq.n	80042be <UART_SetConfig+0x110e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b07      	cmp	r3, #7
 8004282:	d01a      	beq.n	80042ba <UART_SetConfig+0x110a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b08      	cmp	r3, #8
 800428a:	d014      	beq.n	80042b6 <UART_SetConfig+0x1106>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b09      	cmp	r3, #9
 8004292:	d00e      	beq.n	80042b2 <UART_SetConfig+0x1102>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2b0a      	cmp	r3, #10
 800429a:	d008      	beq.n	80042ae <UART_SetConfig+0x10fe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b0b      	cmp	r3, #11
 80042a2:	d102      	bne.n	80042aa <UART_SetConfig+0x10fa>
 80042a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a8:	e016      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e014      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	e012      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	e010      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042b6:	2320      	movs	r3, #32
 80042b8:	e00e      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042ba:	2310      	movs	r3, #16
 80042bc:	e00c      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042be:	230c      	movs	r3, #12
 80042c0:	e00a      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042c2:	230a      	movs	r3, #10
 80042c4:	e008      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042c6:	2308      	movs	r3, #8
 80042c8:	e006      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e004      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e002      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e000      	b.n	80042d8 <UART_SetConfig+0x1128>
 80042d6:	2301      	movs	r3, #1
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	fbb2 f2f3 	udiv	r2, r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	61fb      	str	r3, [r7, #28]
        break;
 80042f2:	e112      	b.n	800451a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d044      	beq.n	8004386 <UART_SetConfig+0x11d6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b01      	cmp	r3, #1
 8004302:	d03e      	beq.n	8004382 <UART_SetConfig+0x11d2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b02      	cmp	r3, #2
 800430a:	d038      	beq.n	800437e <UART_SetConfig+0x11ce>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b03      	cmp	r3, #3
 8004312:	d032      	beq.n	800437a <UART_SetConfig+0x11ca>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b04      	cmp	r3, #4
 800431a:	d02c      	beq.n	8004376 <UART_SetConfig+0x11c6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b05      	cmp	r3, #5
 8004322:	d026      	beq.n	8004372 <UART_SetConfig+0x11c2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b06      	cmp	r3, #6
 800432a:	d020      	beq.n	800436e <UART_SetConfig+0x11be>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b07      	cmp	r3, #7
 8004332:	d01a      	beq.n	800436a <UART_SetConfig+0x11ba>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b08      	cmp	r3, #8
 800433a:	d014      	beq.n	8004366 <UART_SetConfig+0x11b6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b09      	cmp	r3, #9
 8004342:	d00e      	beq.n	8004362 <UART_SetConfig+0x11b2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2b0a      	cmp	r3, #10
 800434a:	d008      	beq.n	800435e <UART_SetConfig+0x11ae>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	2b0b      	cmp	r3, #11
 8004352:	d102      	bne.n	800435a <UART_SetConfig+0x11aa>
 8004354:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004358:	e016      	b.n	8004388 <UART_SetConfig+0x11d8>
 800435a:	4b81      	ldr	r3, [pc, #516]	; (8004560 <UART_SetConfig+0x13b0>)
 800435c:	e014      	b.n	8004388 <UART_SetConfig+0x11d8>
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <UART_SetConfig+0x13b4>)
 8004360:	e012      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004362:	4b81      	ldr	r3, [pc, #516]	; (8004568 <UART_SetConfig+0x13b8>)
 8004364:	e010      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004366:	4b81      	ldr	r3, [pc, #516]	; (800456c <UART_SetConfig+0x13bc>)
 8004368:	e00e      	b.n	8004388 <UART_SetConfig+0x11d8>
 800436a:	4b81      	ldr	r3, [pc, #516]	; (8004570 <UART_SetConfig+0x13c0>)
 800436c:	e00c      	b.n	8004388 <UART_SetConfig+0x11d8>
 800436e:	4b81      	ldr	r3, [pc, #516]	; (8004574 <UART_SetConfig+0x13c4>)
 8004370:	e00a      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004372:	4b81      	ldr	r3, [pc, #516]	; (8004578 <UART_SetConfig+0x13c8>)
 8004374:	e008      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004376:	4b81      	ldr	r3, [pc, #516]	; (800457c <UART_SetConfig+0x13cc>)
 8004378:	e006      	b.n	8004388 <UART_SetConfig+0x11d8>
 800437a:	4b81      	ldr	r3, [pc, #516]	; (8004580 <UART_SetConfig+0x13d0>)
 800437c:	e004      	b.n	8004388 <UART_SetConfig+0x11d8>
 800437e:	4b81      	ldr	r3, [pc, #516]	; (8004584 <UART_SetConfig+0x13d4>)
 8004380:	e002      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <UART_SetConfig+0x13d8>)
 8004384:	e000      	b.n	8004388 <UART_SetConfig+0x11d8>
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <UART_SetConfig+0x13b0>)
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6852      	ldr	r2, [r2, #4]
 800438c:	0852      	lsrs	r2, r2, #1
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	b29b      	uxth	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
        break;
 800439c:	e0bd      	b.n	800451a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7fd febd 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80043a2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d044      	beq.n	8004436 <UART_SetConfig+0x1286>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d03e      	beq.n	8004432 <UART_SetConfig+0x1282>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d038      	beq.n	800442e <UART_SetConfig+0x127e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d032      	beq.n	800442a <UART_SetConfig+0x127a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d02c      	beq.n	8004426 <UART_SetConfig+0x1276>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d026      	beq.n	8004422 <UART_SetConfig+0x1272>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d020      	beq.n	800441e <UART_SetConfig+0x126e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b07      	cmp	r3, #7
 80043e2:	d01a      	beq.n	800441a <UART_SetConfig+0x126a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d014      	beq.n	8004416 <UART_SetConfig+0x1266>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	d00e      	beq.n	8004412 <UART_SetConfig+0x1262>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2b0a      	cmp	r3, #10
 80043fa:	d008      	beq.n	800440e <UART_SetConfig+0x125e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b0b      	cmp	r3, #11
 8004402:	d102      	bne.n	800440a <UART_SetConfig+0x125a>
 8004404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004408:	e016      	b.n	8004438 <UART_SetConfig+0x1288>
 800440a:	2301      	movs	r3, #1
 800440c:	e014      	b.n	8004438 <UART_SetConfig+0x1288>
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	e012      	b.n	8004438 <UART_SetConfig+0x1288>
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	e010      	b.n	8004438 <UART_SetConfig+0x1288>
 8004416:	2320      	movs	r3, #32
 8004418:	e00e      	b.n	8004438 <UART_SetConfig+0x1288>
 800441a:	2310      	movs	r3, #16
 800441c:	e00c      	b.n	8004438 <UART_SetConfig+0x1288>
 800441e:	230c      	movs	r3, #12
 8004420:	e00a      	b.n	8004438 <UART_SetConfig+0x1288>
 8004422:	230a      	movs	r3, #10
 8004424:	e008      	b.n	8004438 <UART_SetConfig+0x1288>
 8004426:	2308      	movs	r3, #8
 8004428:	e006      	b.n	8004438 <UART_SetConfig+0x1288>
 800442a:	2306      	movs	r3, #6
 800442c:	e004      	b.n	8004438 <UART_SetConfig+0x1288>
 800442e:	2304      	movs	r3, #4
 8004430:	e002      	b.n	8004438 <UART_SetConfig+0x1288>
 8004432:	2302      	movs	r3, #2
 8004434:	e000      	b.n	8004438 <UART_SetConfig+0x1288>
 8004436:	2301      	movs	r3, #1
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	fbb2 f2f3 	udiv	r2, r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	61fb      	str	r3, [r7, #28]
        break;
 8004452:	e062      	b.n	800451a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04e      	beq.n	80044fa <UART_SetConfig+0x134a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b01      	cmp	r3, #1
 8004462:	d047      	beq.n	80044f4 <UART_SetConfig+0x1344>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b02      	cmp	r3, #2
 800446a:	d040      	beq.n	80044ee <UART_SetConfig+0x133e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b03      	cmp	r3, #3
 8004472:	d039      	beq.n	80044e8 <UART_SetConfig+0x1338>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b04      	cmp	r3, #4
 800447a:	d032      	beq.n	80044e2 <UART_SetConfig+0x1332>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b05      	cmp	r3, #5
 8004482:	d02b      	beq.n	80044dc <UART_SetConfig+0x132c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b06      	cmp	r3, #6
 800448a:	d024      	beq.n	80044d6 <UART_SetConfig+0x1326>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b07      	cmp	r3, #7
 8004492:	d01d      	beq.n	80044d0 <UART_SetConfig+0x1320>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b08      	cmp	r3, #8
 800449a:	d016      	beq.n	80044ca <UART_SetConfig+0x131a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d00f      	beq.n	80044c4 <UART_SetConfig+0x1314>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b0a      	cmp	r3, #10
 80044aa:	d008      	beq.n	80044be <UART_SetConfig+0x130e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b0b      	cmp	r3, #11
 80044b2:	d101      	bne.n	80044b8 <UART_SetConfig+0x1308>
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	e022      	b.n	80044fe <UART_SetConfig+0x134e>
 80044b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044bc:	e01f      	b.n	80044fe <UART_SetConfig+0x134e>
 80044be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044c2:	e01c      	b.n	80044fe <UART_SetConfig+0x134e>
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	e019      	b.n	80044fe <UART_SetConfig+0x134e>
 80044ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ce:	e016      	b.n	80044fe <UART_SetConfig+0x134e>
 80044d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044d4:	e013      	b.n	80044fe <UART_SetConfig+0x134e>
 80044d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80044da:	e010      	b.n	80044fe <UART_SetConfig+0x134e>
 80044dc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80044e0:	e00d      	b.n	80044fe <UART_SetConfig+0x134e>
 80044e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e6:	e00a      	b.n	80044fe <UART_SetConfig+0x134e>
 80044e8:	f241 5355 	movw	r3, #5461	; 0x1555
 80044ec:	e007      	b.n	80044fe <UART_SetConfig+0x134e>
 80044ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044f2:	e004      	b.n	80044fe <UART_SetConfig+0x134e>
 80044f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044f8:	e001      	b.n	80044fe <UART_SetConfig+0x134e>
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6852      	ldr	r2, [r2, #4]
 8004502:	0852      	lsrs	r2, r2, #1
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	b29b      	uxth	r3, r3
 8004510:	61fb      	str	r3, [r7, #28]
        break;
 8004512:	e002      	b.n	800451a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	76fb      	strb	r3, [r7, #27]
        break;
 8004518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d908      	bls.n	8004532 <UART_SetConfig+0x1382>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d204      	bcs.n	8004532 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e001      	b.n	8004536 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004552:	7efb      	ldrb	r3, [r7, #27]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800455e:	bf00      	nop
 8004560:	00f42400 	.word	0x00f42400
 8004564:	0001e848 	.word	0x0001e848
 8004568:	0003d090 	.word	0x0003d090
 800456c:	0007a120 	.word	0x0007a120
 8004570:	000f4240 	.word	0x000f4240
 8004574:	00145855 	.word	0x00145855
 8004578:	00186a00 	.word	0x00186a00
 800457c:	001e8480 	.word	0x001e8480
 8004580:	0028b0aa 	.word	0x0028b0aa
 8004584:	003d0900 	.word	0x003d0900
 8004588:	007a1200 	.word	0x007a1200

0800458c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468a:	d10a      	bne.n	80046a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046e0:	f7fc fc5e 	bl	8000fa0 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d10e      	bne.n	8004712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f82c 	bl	8004760 <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e022      	b.n	8004758 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d10e      	bne.n	800473e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f816 	bl	8004760 <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e00c      	b.n	8004758 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004770:	e02c      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d028      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7fc fc11 	bl	8000fa0 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <UART_WaitOnFlagUntilTimeout+0x30>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11d      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800479e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e00f      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d0c3      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UARTEx_DisableFifoMode+0x16>
 8004806:	2302      	movs	r3, #2
 8004808:	e027      	b.n	800485a <HAL_UARTEx_DisableFifoMode+0x66>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800487a:	2302      	movs	r3, #2
 800487c:	e02d      	b.n	80048da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	; 0x24
 800488a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f850 	bl	8004960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e02d      	b.n	8004956 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f812 	bl	8004960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <UARTEx_SetNbDataToProcess+0xc8>)
 800496a:	f107 0314 	add.w	r3, r7, #20
 800496e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004972:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004976:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <UARTEx_SetNbDataToProcess+0xcc>)
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004980:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800499c:	e03d      	b.n	8004a1a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800499e:	2308      	movs	r3, #8
 80049a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049a2:	2308      	movs	r3, #8
 80049a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	0e5b      	lsrs	r3, r3, #25
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	0f5b      	lsrs	r3, r3, #29
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80049c6:	7fbb      	ldrb	r3, [r7, #30]
 80049c8:	7f3a      	ldrb	r2, [r7, #28]
 80049ca:	f107 0120 	add.w	r1, r7, #32
 80049ce:	440a      	add	r2, r1
 80049d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	7f3a      	ldrb	r2, [r7, #28]
 80049da:	f107 0120 	add.w	r1, r7, #32
 80049de:	440a      	add	r2, r1
 80049e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80049e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
 80049f2:	7f7a      	ldrb	r2, [r7, #29]
 80049f4:	f107 0120 	add.w	r1, r7, #32
 80049f8:	440a      	add	r2, r1
 80049fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	7f7a      	ldrb	r2, [r7, #29]
 8004a04:	f107 0120 	add.w	r1, r7, #32
 8004a08:	440a      	add	r2, r1
 8004a0a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	08004aa0 	.word	0x08004aa0
 8004a2c:	08004aa8 	.word	0x08004aa8

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4e0d      	ldr	r6, [pc, #52]	; (8004a68 <__libc_init_array+0x38>)
 8004a34:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a36:	1ba4      	subs	r4, r4, r6
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	42a5      	cmp	r5, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	4e0b      	ldr	r6, [pc, #44]	; (8004a70 <__libc_init_array+0x40>)
 8004a42:	4c0c      	ldr	r4, [pc, #48]	; (8004a74 <__libc_init_array+0x44>)
 8004a44:	f000 f820 	bl	8004a88 <_init>
 8004a48:	1ba4      	subs	r4, r4, r6
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	42a5      	cmp	r5, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a58:	4798      	blx	r3
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a62:	4798      	blx	r3
 8004a64:	3501      	adds	r5, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08004ad4 	.word	0x08004ad4
 8004a6c:	08004ad4 	.word	0x08004ad4
 8004a70:	08004ad4 	.word	0x08004ad4
 8004a74:	08004ad8 	.word	0x08004ad8

08004a78 <memset>:
 8004a78:	4402      	add	r2, r0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d100      	bne.n	8004a82 <memset+0xa>
 8004a80:	4770      	bx	lr
 8004a82:	f803 1b01 	strb.w	r1, [r3], #1
 8004a86:	e7f9      	b.n	8004a7c <memset+0x4>

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
