
UART_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005028  08005028  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001e0  08005210  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005210  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd1d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec7  00000000  00000000  0002df2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a77  00000000  00000000  00031270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009125  00000000  00000000  00056ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8375  00000000  00000000  0005fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  00148181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  00148200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d50 	.word	0x08004d50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08004d50 	.word	0x08004d50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fb43 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f82f 	bl	800062c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 faf2 	bl	8000bb8 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f8dc 	bl	8000790 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d8:	f000 f890 	bl	80006fc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x54>)
 80005de:	f002 fe0f 	bl	8003200 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <main+0x58>)
 80005e4:	f002 fe0c 	bl	8003200 <iprintf>

  char str[20];

  setvbuf(stdin, NULL, _IONBF, 0);
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x5c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6858      	ldr	r0, [r3, #4]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2202      	movs	r2, #2
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fe34 	bl	8003260 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("\n\r Enter your name:\n\r");
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x60>)
 80005fa:	f002 fe01 	bl	8003200 <iprintf>

	scanf("%s",str);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x64>)
 8000604:	f002 fe14 	bl	8003230 <iscanf>

	printf("\n\r Your name is: %s \n\r",str);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x68>)
 800060e:	f002 fdf7 	bl	8003200 <iprintf>
	printf("\n\r Enter your name:\n\r");
 8000612:	e7f1      	b.n	80005f8 <main+0x38>
 8000614:	08004d68 	.word	0x08004d68
 8000618:	08004db8 	.word	0x08004db8
 800061c:	20000010 	.word	0x20000010
 8000620:	08004de0 	.word	0x08004de0
 8000624:	08004df8 	.word	0x08004df8
 8000628:	08004dfc 	.word	0x08004dfc

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0a8      	sub	sp, #160	; 0xa0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fdd8 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2254      	movs	r2, #84	; 0x54
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fdca 	bl	80031f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fe71 	bl	8001344 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000682:	2355      	movs	r3, #85	; 0x55
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff04 	bl	80014ac <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006aa:	f000 f905 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c6:	2104      	movs	r1, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa07 	bl	8001adc <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006d4:	f000 f8f0 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006d8:	2320      	movs	r3, #32
 80006da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fc16 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f8e3 	bl	80008b8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	37a0      	adds	r7, #160	; 0xa0
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_LPUART1_UART_Init+0x90>)
 8000704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f001 fe34 	bl	80023ac <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8b5 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	f002 fc59 	bl	8003008 <HAL_UARTEx_SetTxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800075c:	f000 f8ac 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f002 fc8e 	bl	8003084 <HAL_UARTEx_SetRxFifoThreshold>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800076e:	f000 f8a3 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f002 fc0f 	bl	8002f96 <HAL_UARTEx_DisableFifoMode>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800077e:	f000 f89b 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000208 	.word	0x20000208
 800078c:	40008000 	.word	0x40008000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a28      	ldr	r2, [pc, #160]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0320 	orr.w	r3, r3, #32
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_GPIO_Init+0xd4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 fd43 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_GPIO_Init+0xd8>)
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_GPIO_Init+0xdc>)
 8000828:	f000 fbb4 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f000 fba5 	bl	8000f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f000 fb6b 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 fb82 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	10110000 	.word	0x10110000
 800086c:	48000800 	.word	0x48000800

08000870 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000878:	1d39      	adds	r1, r7, #4
 800087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087e:	2201      	movs	r2, #1
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <__io_putchar+0x20>)
 8000882:	f001 fde3 	bl	800244c <HAL_UART_Transmit>

  return ch;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000208 	.word	0x20000208

08000894 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&hlpuart1, &ch, 1, 0xFFFF);
 800089a:	1df9      	adds	r1, r7, #7
 800089c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a0:	2201      	movs	r2, #1
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <__io_getchar+0x20>)
 80008a4:	f001 fe68 	bl	8002578 <HAL_UART_Receive>

	return ch;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000208 	.word	0x20000208

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
    /* Toggle LED2 for error */
    BSP_LED_Toggle(LED2);
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 f9b1 	bl	8000c24 <BSP_LED_Toggle>
    HAL_Delay(500);
 80008c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c6:	f000 fa33 	bl	8000d30 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 80008ca:	e7f7      	b.n	80008bc <Error_Handler+0x4>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000902:	f000 fdc3 	bl	800148c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x7c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d128      	bne.n	8000988 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x80>)
 8000938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_UART_MspInit+0x80>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0x80>)
 8000944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x80>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x80>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x80>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000966:	230c      	movs	r3, #12
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000976:	230c      	movs	r3, #12
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fb06 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40008000 	.word	0x40008000
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f982 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009fc:	f000 fc7e 	bl	80012fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a16:	f7ff ff3d 	bl	8000894 <__io_getchar>
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
	}

return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff09 	bl	8000870 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
	}
	return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x50>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x16>
		heap_end = &end;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <_sbrk+0x50>)
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <_sbrk+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <_sbrk+0x50>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <_sbrk+0x50>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	466a      	mov	r2, sp
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d907      	bls.n	8000b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b0a:	f002 fb47 	bl	800319c <__errno>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	230c      	movs	r3, #12
 8000b12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e006      	b.n	8000b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <_sbrk+0x50>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <_sbrk+0x50>)
 8000b24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001fc 	.word	0x200001fc
 8000b34:	200002a0 	.word	0x200002a0

08000b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SystemInit+0x28>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <SystemInit+0x28>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SystemInit+0x28>)
 8000b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b52:	609a      	str	r2, [r3, #8]
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490e      	ldr	r1, [pc, #56]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0b      	ldr	r4, [pc, #44]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8e:	f7ff ffd3 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f002 fb09 	bl	80031a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fd13 	bl	80005c0 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000ba8:	08005030 	.word	0x08005030
  ldr r2, =_sbss
 8000bac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000bb0:	200002a0 	.word	0x200002a0

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <BSP_LED_Init+0x64>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <BSP_LED_Init+0x64>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <BSP_LED_Init+0x64>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000bda:	2320      	movs	r3, #32
 8000bdc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <BSP_LED_Init+0x68>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	f107 020c 	add.w	r2, r7, #12
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f9cb 	bl	8000f94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <BSP_LED_Init+0x68>)
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	2120      	movs	r1, #32
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fb44 	bl	8001298 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	20000004 	.word	0x20000004

08000c24 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <BSP_LED_Toggle+0x28>)
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	2220      	movs	r2, #32
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fb44 	bl	80012c8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f95a 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f80d 	bl	8000c80 <HAL_InitTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	e001      	b.n	8000c76 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c72:	f7ff fe2b 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c76:	79fb      	ldrb	r3, [r7, #7]

}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_InitTick+0x68>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d022      	beq.n	8000cda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_InitTick+0x6c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_InitTick+0x68>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f966 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10f      	bne.n	8000cd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d809      	bhi.n	8000cce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc2:	f000 f932 	bl	8000f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_InitTick+0x70>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e007      	b.n	8000cde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e004      	b.n	8000cde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e001      	b.n	8000cde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <HAL_IncTick+0x1c>)
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000298 	.word	0x20000298
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000298 	.word	0x20000298

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d004      	beq.n	8000d54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_Delay+0x40>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d54:	bf00      	nop
 8000d56:	f7ff ffdf 	bl	8000d18 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d8f7      	bhi.n	8000d56 <HAL_Delay+0x26>
  {
  }
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff40 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff33 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa4 	bl	8000ed0 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fa2:	e15a      	b.n	800125a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 814c 	beq.w	8001254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d00b      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	2b11      	cmp	r3, #17
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b12      	cmp	r3, #18
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0xea>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a6 	beq.w	8001254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_GPIO_Init+0x2e4>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	4a5a      	ldr	r2, [pc, #360]	; (8001278 <HAL_GPIO_Init+0x2e4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6613      	str	r3, [r2, #96]	; 0x60
 8001114:	4b58      	ldr	r3, [pc, #352]	; (8001278 <HAL_GPIO_Init+0x2e4>)
 8001116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001120:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114a:	d01f      	beq.n	800118c <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d019      	beq.n	8001188 <HAL_GPIO_Init+0x1f4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d013      	beq.n	8001184 <HAL_GPIO_Init+0x1f0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_GPIO_Init+0x2f4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a49      	ldr	r2, [pc, #292]	; (800128c <HAL_GPIO_Init+0x2f8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_GPIO_Init+0x2fc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001174:	2305      	movs	r3, #5
 8001176:	e00a      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001178:	2306      	movs	r3, #6
 800117a:	e008      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 800117c:	2304      	movs	r3, #4
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001180:	2303      	movs	r3, #3
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 800118c:	2300      	movs	r3, #0
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119e:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x2e8>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ac:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_GPIO_Init+0x300>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d0:	4a30      	ldr	r2, [pc, #192]	; (8001294 <HAL_GPIO_Init+0x300>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x300>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <HAL_GPIO_Init+0x300>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x300>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_GPIO_Init+0x300>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x300>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_GPIO_Init+0x300>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f ae9d 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	48001000 	.word	0x48001000
 8001290:	48001400 	.word	0x48001400
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43d9      	mvns	r1, r3
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	400b      	ands	r3, r1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f806 	bl	800132c <HAL_GPIO_EXTI_Callback>
  }
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d141      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d131      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001366:	4a46      	ldr	r2, [pc, #280]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800136c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001378:	4a41      	ldr	r2, [pc, #260]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2232      	movs	r2, #50	; 0x32
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a3f      	ldr	r2, [pc, #252]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	e002      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d102      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f2      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d158      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e057      	b.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ca:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013d4:	e04d      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013dc:	d141      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d131      	bne.n	8001450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2232      	movs	r2, #50	; 0x32
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	e002      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3b01      	subs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001436:	d102      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f2      	bne.n	8001424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d112      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e011      	b.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001460:	e007      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001470:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40007000 	.word	0x40007000
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6093      	str	r3, [r2, #8]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e308      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d075      	beq.n	80015b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ca:	4ba3      	ldr	r3, [pc, #652]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d4:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d102      	bne.n	80014ea <HAL_RCC_OscConfig+0x3e>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_OscConfig+0x44>
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d10b      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d05b      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d157      	bne.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e2e3      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x74>
 8001512:	4b91      	ldr	r3, [pc, #580]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a90      	ldr	r2, [pc, #576]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b8b      	ldr	r3, [pc, #556]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a8a      	ldr	r2, [pc, #552]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a87      	ldr	r2, [pc, #540]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001544:	4b84      	ldr	r3, [pc, #528]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a83      	ldr	r2, [pc, #524]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a80      	ldr	r2, [pc, #512]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbd8 	bl	8000d18 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fbd4 	bl	8000d18 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e2a8      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xc0>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fbc4 	bl	8000d18 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fbc0 	bl	8000d18 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e294      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015cc:	4b62      	ldr	r3, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d102      	bne.n	80015e2 <HAL_RCC_OscConfig+0x136>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d002      	beq.n	80015e8 <HAL_RCC_OscConfig+0x13c>
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11f      	bne.n	8001628 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x154>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e267      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	4952      	ldr	r1, [pc, #328]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001614:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x2b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb31 	bl	8000c80 <HAL_InitTick>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d043      	beq.n	80016ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e253      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb6c 	bl	8000d18 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fb68 	bl	8000d18 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e23c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	061b      	lsls	r3, r3, #24
 8001670:	4939      	ldr	r1, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
 8001676:	e01a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a36      	ldr	r2, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fb48 	bl	8000d18 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fb44 	bl	8000d18 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e218      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1e0>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03c      	beq.n	8001734 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01c      	beq.n	80016fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fb21 	bl	8000d18 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fb1d 	bl	8000d18 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1f1      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0ef      	beq.n	80016da <HAL_RCC_OscConfig+0x22e>
 80016fa:	e01b      	b.n	8001734 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fb04 	bl	8000d18 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fb00 	bl	8000d18 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1d4      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ef      	bne.n	8001714 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ab 	beq.w	8001898 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_RCC_OscConfig+0x2b4>
 8001752:	2301      	movs	r3, #1
 8001754:	e005      	b.n	8001762 <HAL_RCC_OscConfig+0x2b6>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	20000008 	.word	0x20000008
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4baf      	ldr	r3, [pc, #700]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	4aae      	ldr	r2, [pc, #696]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
 8001772:	4bac      	ldr	r3, [pc, #688]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	4ba9      	ldr	r3, [pc, #676]	; (8001a28 <HAL_RCC_OscConfig+0x57c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d118      	bne.n	80017c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800178e:	4ba6      	ldr	r3, [pc, #664]	; (8001a28 <HAL_RCC_OscConfig+0x57c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4aa5      	ldr	r2, [pc, #660]	; (8001a28 <HAL_RCC_OscConfig+0x57c>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff fabd 	bl	8000d18 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff fab9 	bl	8000d18 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e18d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b4:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x57c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_RCC_OscConfig+0x32e>
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a95      	ldr	r2, [pc, #596]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	e024      	b.n	8001824 <HAL_RCC_OscConfig+0x378>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d110      	bne.n	8001804 <HAL_RCC_OscConfig+0x358>
 80017e2:	4b90      	ldr	r3, [pc, #576]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	4a8e      	ldr	r2, [pc, #568]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f2:	4b8c      	ldr	r3, [pc, #560]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	4a8a      	ldr	r2, [pc, #552]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001802:	e00f      	b.n	8001824 <HAL_RCC_OscConfig+0x378>
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a86      	ldr	r2, [pc, #536]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001814:	4b83      	ldr	r3, [pc, #524]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a82      	ldr	r2, [pc, #520]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d016      	beq.n	800185a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fa74 	bl	8000d18 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fa70 	bl	8000d18 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e142      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ed      	beq.n	8001834 <HAL_RCC_OscConfig+0x388>
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fa5d 	bl	8000d18 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff fa59 	bl	8000d18 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e12b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ed      	bne.n	8001862 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a64      	ldr	r2, [pc, #400]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03c      	beq.n	800191e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018ac:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	4a5c      	ldr	r2, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa2c 	bl	8000d18 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c4:	f7ff fa28 	bl	8000d18 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0fc      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80018d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ef      	beq.n	80018c4 <HAL_RCC_OscConfig+0x418>
 80018e4:	e01b      	b.n	800191e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80018e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fa0f 	bl	8000d18 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fe:	f7ff fa0b 	bl	8000d18 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0df      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80d3 	beq.w	8001ace <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001928:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b0c      	cmp	r3, #12
 8001932:	f000 808d 	beq.w	8001a50 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d15a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f9e5 	bl	8000d18 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff f9e1 	bl	8000d18 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0b5      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x580>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a11      	ldr	r1, [r2, #32]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001980:	3a01      	subs	r2, #1
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800198a:	0212      	lsls	r2, r2, #8
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	3a01      	subs	r2, #1
 8001996:	0552      	lsls	r2, r2, #21
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0652      	lsls	r2, r2, #25
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019aa:	06d2      	lsls	r2, r2, #27
 80019ac:	430a      	orrs	r2, r1
 80019ae:	491d      	ldr	r1, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9a4 	bl	8000d18 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9a0 	bl	8000d18 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e074      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x528>
 80019f2:	e06c      	b.n	8001ace <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f97c 	bl	8000d18 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a22:	e00e      	b.n	8001a42 <HAL_RCC_OscConfig+0x596>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f972 	bl	8000d18 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e046      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0x62c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x584>
 8001a4e:	e03e      	b.n	8001ace <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e039      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_OscConfig+0x62c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d12c      	bne.n	8001aca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d123      	bne.n	8001aca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11b      	bne.n	8001aca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d113      	bne.n	8001aca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e11e      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b91      	ldr	r3, [pc, #580]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	498c      	ldr	r1, [pc, #560]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e106      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d073      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d129      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b38:	4b81      	ldr	r3, [pc, #516]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0f4      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b48:	f000 f99e 	bl	8001e88 <RCC_GetSysClockFreqFromPLLSource>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <HAL_RCC_ClockConfig+0x268>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d93f      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b56:	4b7a      	ldr	r3, [pc, #488]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d033      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d12f      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b7e:	4a70      	ldr	r2, [pc, #448]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e024      	b.n	8001bd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0c6      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0be      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bb4:	f000 f8ce 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_RCC_ClockConfig+0x268>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d909      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bca:	4a5d      	ldr	r2, [pc, #372]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4957      	ldr	r1, [pc, #348]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7ff f896 	bl	8000d18 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f892 	bl	8000d18 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e095      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c48:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c50:	4a3b      	ldr	r2, [pc, #236]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4936      	ldr	r1, [pc, #216]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b80      	cmp	r3, #128	; 0x80
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d21d      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 020f 	bic.w	r2, r3, #15
 8001c94:	4929      	ldr	r1, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f83c 	bl	8000d18 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f838 	bl	8000d18 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e03b      	b.n	8001d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1ed      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4917      	ldr	r1, [pc, #92]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490f      	ldr	r1, [pc, #60]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d06:	f000 f825 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_RCC_ClockConfig+0x26c>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffa8 	bl	8000c80 <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	04c4b400 	.word	0x04c4b400
 8001d48:	08004e20 	.word	0x08004e20
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e047      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e03e      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d136      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db2:	68d2      	ldr	r2, [r2, #12]
 8001db4:	0a12      	lsrs	r2, r2, #8
 8001db6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
      break;
 8001dc0:	e00c      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	0a12      	lsrs	r2, r2, #8
 8001dd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
      break;
 8001dda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0e5b      	lsrs	r3, r3, #25
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e001      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dfc:	693b      	ldr	r3, [r7, #16]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	016e3600 	.word	0x016e3600

08001e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08004e30 	.word	0x08004e30

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e60:	f7ff ffda 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004e30 	.word	0x08004e30

08001e88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d10c      	bne.n	8001ec6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eb6:	68d2      	ldr	r2, [r2, #12]
 8001eb8:	0a12      	lsrs	r2, r2, #8
 8001eba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
    break;
 8001ec4:	e00c      	b.n	8001ee0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ed0:	68d2      	ldr	r2, [r2, #12]
 8001ed2:	0a12      	lsrs	r2, r2, #8
 8001ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    break;
 8001ede:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0e5b      	lsrs	r3, r3, #25
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	016e3600 	.word	0x016e3600
 8001f10:	00f42400 	.word	0x00f42400

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8098 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a3f      	ldr	r2, [pc, #252]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fed5 	bl	8000d18 <HAL_GetTick>
 8001f6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f70:	e009      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe fed1 	bl	8000d18 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d902      	bls.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	74fb      	strb	r3, [r7, #19]
        break;
 8001f84:	e005      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ef      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f92:	7cfb      	ldrb	r3, [r7, #19]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d159      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01e      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d019      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe91 	bl	8000d18 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	e00b      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fe8d 	bl	8000d18 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d902      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	74fb      	strb	r3, [r7, #19]
            break;
 8002010:	e006      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ec      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203c:	e008      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	74bb      	strb	r3, [r7, #18]
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4baf      	ldr	r3, [pc, #700]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4aae      	ldr	r2, [pc, #696]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4ba9      	ldr	r3, [pc, #676]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	49a5      	ldr	r1, [pc, #660]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002090:	4ba0      	ldr	r3, [pc, #640]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 020c 	bic.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	499d      	ldr	r1, [pc, #628]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b2:	4b98      	ldr	r3, [pc, #608]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4994      	ldr	r1, [pc, #592]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	498c      	ldr	r1, [pc, #560]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f6:	4b87      	ldr	r3, [pc, #540]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4983      	ldr	r1, [pc, #524]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002118:	4b7e      	ldr	r3, [pc, #504]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	497b      	ldr	r1, [pc, #492]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4972      	ldr	r1, [pc, #456]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	496a      	ldr	r1, [pc, #424]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	4961      	ldr	r1, [pc, #388]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	4959      	ldr	r1, [pc, #356]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	4950      	ldr	r1, [pc, #320]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4948      	ldr	r1, [pc, #288]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	493a      	ldr	r1, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223a:	d105      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	492c      	ldr	r1, [pc, #176]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	491e      	ldr	r1, [pc, #120]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4910      	ldr	r1, [pc, #64]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d018      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4902      	ldr	r1, [pc, #8]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002312:	e001      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002314:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002320:	d105      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	4917      	ldr	r1, [pc, #92]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d105      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	4909      	ldr	r1, [pc, #36]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002390:	d105      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800239e:	7cbb      	ldrb	r3, [r7, #18]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e042      	b.n	8002444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fa9f 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2224      	movs	r2, #36	; 0x24
 80023da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f996 	bl	8002720 <UART_SetConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e022      	b.n	8002444 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fc58 	bl	8002cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fcdf 	bl	8002e00 <UART_CheckIdleState>
 8002442:	4603      	mov	r3, r0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002462:	2b20      	cmp	r3, #32
 8002464:	f040 8083 	bne.w	800256e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Transmit+0x28>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07b      	b.n	8002570 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_UART_Transmit+0x3a>
 8002482:	2302      	movs	r3, #2
 8002484:	e074      	b.n	8002570 <HAL_UART_Transmit+0x124>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2221      	movs	r2, #33	; 0x21
 800249a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249e:	f7fe fc3b 	bl	8000d18 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d108      	bne.n	80024d0 <HAL_UART_Transmit+0x84>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e003      	b.n	80024d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80024e0:	e02c      	b.n	800253c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fcd2 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e039      	b.n	8002570 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3302      	adds	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e007      	b.n	800252a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1cc      	bne.n	80024e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2200      	movs	r2, #0
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fc9f 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e006      	b.n	8002570 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	2b20      	cmp	r3, #32
 8002590:	f040 80c0 	bne.w	8002714 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_Receive+0x28>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Receive+0x3a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0b1      	b.n	8002716 <HAL_UART_Receive+0x19e>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2222      	movs	r2, #34	; 0x22
 80025c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fba2 	bl	8000d18 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	88fa      	ldrh	r2, [r7, #6]
 80025e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ee:	d10e      	bne.n	800260e <HAL_UART_Receive+0x96>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_UART_Receive+0x8c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002602:	e02d      	b.n	8002660 <HAL_UART_Receive+0xe8>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800260c:	e028      	b.n	8002660 <HAL_UART_Receive+0xe8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_UART_Receive+0xba>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <HAL_UART_Receive+0xb0>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	22ff      	movs	r2, #255	; 0xff
 8002622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002626:	e01b      	b.n	8002660 <HAL_UART_Receive+0xe8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	227f      	movs	r2, #127	; 0x7f
 800262c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002630:	e016      	b.n	8002660 <HAL_UART_Receive+0xe8>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800263a:	d10d      	bne.n	8002658 <HAL_UART_Receive+0xe0>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <HAL_UART_Receive+0xd6>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	227f      	movs	r2, #127	; 0x7f
 8002648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800264c:	e008      	b.n	8002660 <HAL_UART_Receive+0xe8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	223f      	movs	r2, #63	; 0x3f
 8002652:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002656:	e003      	b.n	8002660 <HAL_UART_Receive+0xe8>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002666:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002670:	d108      	bne.n	8002684 <HAL_UART_Receive+0x10c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e003      	b.n	800268c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002694:	e032      	b.n	80026fc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2120      	movs	r1, #32
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fbf8 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e032      	b.n	8002716 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b29a      	uxth	r2, r3
 80026be:	8a7b      	ldrh	r3, [r7, #18]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3302      	adds	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e00c      	b.n	80026ea <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	8a7b      	ldrh	r3, [r7, #18]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1c6      	bne.n	8002696 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002714:	2302      	movs	r3, #2
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002720:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4313      	orrs	r3, r2
 8002744:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <UART_SetConfig+0x2f4>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	69f9      	ldr	r1, [r7, #28]
 8002756:	430b      	orrs	r3, r1
 8002758:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4aa7      	ldr	r2, [pc, #668]	; (8002a18 <UART_SetConfig+0x2f8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002794:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	69f9      	ldr	r1, [r7, #28]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f023 010f 	bic.w	r1, r3, #15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a97      	ldr	r2, [pc, #604]	; (8002a1c <UART_SetConfig+0x2fc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d122      	bne.n	8002808 <UART_SetConfig+0xe8>
 80027c2:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <UART_SetConfig+0x300>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d817      	bhi.n	8002800 <UART_SetConfig+0xe0>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <UART_SetConfig+0xb8>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	080027ef 	.word	0x080027ef
 80027e4:	080027fb 	.word	0x080027fb
 80027e8:	2301      	movs	r3, #1
 80027ea:	76fb      	strb	r3, [r7, #27]
 80027ec:	e0e8      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80027ee:	2302      	movs	r3, #2
 80027f0:	76fb      	strb	r3, [r7, #27]
 80027f2:	e0e5      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80027f4:	2304      	movs	r3, #4
 80027f6:	76fb      	strb	r3, [r7, #27]
 80027f8:	e0e2      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80027fa:	2308      	movs	r3, #8
 80027fc:	76fb      	strb	r3, [r7, #27]
 80027fe:	e0df      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002800:	2310      	movs	r3, #16
 8002802:	76fb      	strb	r3, [r7, #27]
 8002804:	bf00      	nop
 8002806:	e0db      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a85      	ldr	r2, [pc, #532]	; (8002a24 <UART_SetConfig+0x304>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d134      	bne.n	800287c <UART_SetConfig+0x15c>
 8002812:	4b83      	ldr	r3, [pc, #524]	; (8002a20 <UART_SetConfig+0x300>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d829      	bhi.n	8002874 <UART_SetConfig+0x154>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <UART_SetConfig+0x108>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800285d 	.word	0x0800285d
 800282c:	08002875 	.word	0x08002875
 8002830:	08002875 	.word	0x08002875
 8002834:	08002875 	.word	0x08002875
 8002838:	08002869 	.word	0x08002869
 800283c:	08002875 	.word	0x08002875
 8002840:	08002875 	.word	0x08002875
 8002844:	08002875 	.word	0x08002875
 8002848:	08002863 	.word	0x08002863
 800284c:	08002875 	.word	0x08002875
 8002850:	08002875 	.word	0x08002875
 8002854:	08002875 	.word	0x08002875
 8002858:	0800286f 	.word	0x0800286f
 800285c:	2300      	movs	r3, #0
 800285e:	76fb      	strb	r3, [r7, #27]
 8002860:	e0ae      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002862:	2302      	movs	r3, #2
 8002864:	76fb      	strb	r3, [r7, #27]
 8002866:	e0ab      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002868:	2304      	movs	r3, #4
 800286a:	76fb      	strb	r3, [r7, #27]
 800286c:	e0a8      	b.n	80029c0 <UART_SetConfig+0x2a0>
 800286e:	2308      	movs	r3, #8
 8002870:	76fb      	strb	r3, [r7, #27]
 8002872:	e0a5      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002874:	2310      	movs	r3, #16
 8002876:	76fb      	strb	r3, [r7, #27]
 8002878:	bf00      	nop
 800287a:	e0a1      	b.n	80029c0 <UART_SetConfig+0x2a0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <UART_SetConfig+0x308>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d120      	bne.n	80028c8 <UART_SetConfig+0x1a8>
 8002886:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <UART_SetConfig+0x300>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002890:	2b10      	cmp	r3, #16
 8002892:	d00f      	beq.n	80028b4 <UART_SetConfig+0x194>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d802      	bhi.n	800289e <UART_SetConfig+0x17e>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <UART_SetConfig+0x188>
 800289c:	e010      	b.n	80028c0 <UART_SetConfig+0x1a0>
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d005      	beq.n	80028ae <UART_SetConfig+0x18e>
 80028a2:	2b30      	cmp	r3, #48	; 0x30
 80028a4:	d009      	beq.n	80028ba <UART_SetConfig+0x19a>
 80028a6:	e00b      	b.n	80028c0 <UART_SetConfig+0x1a0>
 80028a8:	2300      	movs	r3, #0
 80028aa:	76fb      	strb	r3, [r7, #27]
 80028ac:	e088      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028ae:	2302      	movs	r3, #2
 80028b0:	76fb      	strb	r3, [r7, #27]
 80028b2:	e085      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028b4:	2304      	movs	r3, #4
 80028b6:	76fb      	strb	r3, [r7, #27]
 80028b8:	e082      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028ba:	2308      	movs	r3, #8
 80028bc:	76fb      	strb	r3, [r7, #27]
 80028be:	e07f      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028c0:	2310      	movs	r3, #16
 80028c2:	76fb      	strb	r3, [r7, #27]
 80028c4:	bf00      	nop
 80028c6:	e07b      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <UART_SetConfig+0x30c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d120      	bne.n	8002914 <UART_SetConfig+0x1f4>
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <UART_SetConfig+0x300>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d00f      	beq.n	8002900 <UART_SetConfig+0x1e0>
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d802      	bhi.n	80028ea <UART_SetConfig+0x1ca>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <UART_SetConfig+0x1d4>
 80028e8:	e010      	b.n	800290c <UART_SetConfig+0x1ec>
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d005      	beq.n	80028fa <UART_SetConfig+0x1da>
 80028ee:	2bc0      	cmp	r3, #192	; 0xc0
 80028f0:	d009      	beq.n	8002906 <UART_SetConfig+0x1e6>
 80028f2:	e00b      	b.n	800290c <UART_SetConfig+0x1ec>
 80028f4:	2300      	movs	r3, #0
 80028f6:	76fb      	strb	r3, [r7, #27]
 80028f8:	e062      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80028fa:	2302      	movs	r3, #2
 80028fc:	76fb      	strb	r3, [r7, #27]
 80028fe:	e05f      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002900:	2304      	movs	r3, #4
 8002902:	76fb      	strb	r3, [r7, #27]
 8002904:	e05c      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002906:	2308      	movs	r3, #8
 8002908:	76fb      	strb	r3, [r7, #27]
 800290a:	e059      	b.n	80029c0 <UART_SetConfig+0x2a0>
 800290c:	2310      	movs	r3, #16
 800290e:	76fb      	strb	r3, [r7, #27]
 8002910:	bf00      	nop
 8002912:	e055      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a45      	ldr	r2, [pc, #276]	; (8002a30 <UART_SetConfig+0x310>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d124      	bne.n	8002968 <UART_SetConfig+0x248>
 800291e:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <UART_SetConfig+0x300>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292c:	d012      	beq.n	8002954 <UART_SetConfig+0x234>
 800292e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002932:	d802      	bhi.n	800293a <UART_SetConfig+0x21a>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <UART_SetConfig+0x228>
 8002938:	e012      	b.n	8002960 <UART_SetConfig+0x240>
 800293a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293e:	d006      	beq.n	800294e <UART_SetConfig+0x22e>
 8002940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002944:	d009      	beq.n	800295a <UART_SetConfig+0x23a>
 8002946:	e00b      	b.n	8002960 <UART_SetConfig+0x240>
 8002948:	2300      	movs	r3, #0
 800294a:	76fb      	strb	r3, [r7, #27]
 800294c:	e038      	b.n	80029c0 <UART_SetConfig+0x2a0>
 800294e:	2302      	movs	r3, #2
 8002950:	76fb      	strb	r3, [r7, #27]
 8002952:	e035      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002954:	2304      	movs	r3, #4
 8002956:	76fb      	strb	r3, [r7, #27]
 8002958:	e032      	b.n	80029c0 <UART_SetConfig+0x2a0>
 800295a:	2308      	movs	r3, #8
 800295c:	76fb      	strb	r3, [r7, #27]
 800295e:	e02f      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002960:	2310      	movs	r3, #16
 8002962:	76fb      	strb	r3, [r7, #27]
 8002964:	bf00      	nop
 8002966:	e02b      	b.n	80029c0 <UART_SetConfig+0x2a0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <UART_SetConfig+0x2f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d124      	bne.n	80029bc <UART_SetConfig+0x29c>
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <UART_SetConfig+0x300>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d012      	beq.n	80029a8 <UART_SetConfig+0x288>
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d802      	bhi.n	800298e <UART_SetConfig+0x26e>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <UART_SetConfig+0x27c>
 800298c:	e012      	b.n	80029b4 <UART_SetConfig+0x294>
 800298e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002992:	d006      	beq.n	80029a2 <UART_SetConfig+0x282>
 8002994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002998:	d009      	beq.n	80029ae <UART_SetConfig+0x28e>
 800299a:	e00b      	b.n	80029b4 <UART_SetConfig+0x294>
 800299c:	2300      	movs	r3, #0
 800299e:	76fb      	strb	r3, [r7, #27]
 80029a0:	e00e      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80029a2:	2302      	movs	r3, #2
 80029a4:	76fb      	strb	r3, [r7, #27]
 80029a6:	e00b      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80029a8:	2304      	movs	r3, #4
 80029aa:	76fb      	strb	r3, [r7, #27]
 80029ac:	e008      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80029ae:	2308      	movs	r3, #8
 80029b0:	76fb      	strb	r3, [r7, #27]
 80029b2:	e005      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80029b4:	2310      	movs	r3, #16
 80029b6:	76fb      	strb	r3, [r7, #27]
 80029b8:	bf00      	nop
 80029ba:	e001      	b.n	80029c0 <UART_SetConfig+0x2a0>
 80029bc:	2310      	movs	r3, #16
 80029be:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <UART_SetConfig+0x2f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f040 80a1 	bne.w	8002b0e <UART_SetConfig+0x3ee>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029cc:	7efb      	ldrb	r3, [r7, #27]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d836      	bhi.n	8002a40 <UART_SetConfig+0x320>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <UART_SetConfig+0x2b8>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	08002a41 	.word	0x08002a41
 80029e0:	08002a05 	.word	0x08002a05
 80029e4:	08002a41 	.word	0x08002a41
 80029e8:	08002a0b 	.word	0x08002a0b
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	08002a41 	.word	0x08002a41
 80029f4:	08002a41 	.word	0x08002a41
 80029f8:	08002a39 	.word	0x08002a39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fa18 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002a00:	6178      	str	r0, [r7, #20]
        break;
 8002a02:	e022      	b.n	8002a4a <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <UART_SetConfig+0x314>)
 8002a06:	617b      	str	r3, [r7, #20]
        break;
 8002a08:	e01f      	b.n	8002a4a <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a0a:	f7ff f9a3 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8002a0e:	6178      	str	r0, [r7, #20]
        break;
 8002a10:	e01b      	b.n	8002a4a <UART_SetConfig+0x32a>
 8002a12:	bf00      	nop
 8002a14:	cfff69f3 	.word	0xcfff69f3
 8002a18:	40008000 	.word	0x40008000
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40004400 	.word	0x40004400
 8002a28:	40004800 	.word	0x40004800
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40005000 	.word	0x40005000
 8002a34:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3c:	617b      	str	r3, [r7, #20]
        break;
 8002a3e:	e004      	b.n	8002a4a <UART_SetConfig+0x32a>
      default:
        pclk = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	76bb      	strb	r3, [r7, #26]
        break;
 8002a48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 811d 	beq.w	8002c8c <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	4a97      	ldr	r2, [pc, #604]	; (8002cb4 <UART_SetConfig+0x594>)
 8002a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d305      	bcc.n	8002a82 <UART_SetConfig+0x362>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d902      	bls.n	8002a88 <UART_SetConfig+0x368>
      {
        ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	76bb      	strb	r3, [r7, #26]
 8002a86:	e101      	b.n	8002c8c <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	4a87      	ldr	r2, [pc, #540]	; (8002cb4 <UART_SetConfig+0x594>)
 8002a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	f7fd fc0c 	bl	80002c0 <__aeabi_uldivmod>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	4619      	mov	r1, r3
 8002aae:	4622      	mov	r2, r4
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f04f 0400 	mov.w	r4, #0
 8002ab8:	0214      	lsls	r4, r2, #8
 8002aba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002abe:	020b      	lsls	r3, r1, #8
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6852      	ldr	r2, [r2, #4]
 8002ac4:	0852      	lsrs	r2, r2, #1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	eb13 0b01 	adds.w	fp, r3, r1
 8002ad0:	eb44 0c02 	adc.w	ip, r4, r2
 8002ad4:	4658      	mov	r0, fp
 8002ad6:	4661      	mov	r1, ip
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f04f 0400 	mov.w	r4, #0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f7fd fbec 	bl	80002c0 <__aeabi_uldivmod>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af4:	d308      	bcc.n	8002b08 <UART_SetConfig+0x3e8>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afc:	d204      	bcs.n	8002b08 <UART_SetConfig+0x3e8>
        {
          huart->Instance->BRR = usartdiv;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e0c1      	b.n	8002c8c <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	76bb      	strb	r3, [r7, #26]
 8002b0c:	e0be      	b.n	8002c8c <UART_SetConfig+0x56c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b16:	d164      	bne.n	8002be2 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8002b18:	7efb      	ldrb	r3, [r7, #27]
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d827      	bhi.n	8002b6e <UART_SetConfig+0x44e>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <UART_SetConfig+0x404>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b49 	.word	0x08002b49
 8002b28:	08002b51 	.word	0x08002b51
 8002b2c:	08002b59 	.word	0x08002b59
 8002b30:	08002b6f 	.word	0x08002b6f
 8002b34:	08002b5f 	.word	0x08002b5f
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002b6f 	.word	0x08002b6f
 8002b40:	08002b6f 	.word	0x08002b6f
 8002b44:	08002b67 	.word	0x08002b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b48:	f7ff f972 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	6178      	str	r0, [r7, #20]
        break;
 8002b4e:	e013      	b.n	8002b78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7ff f984 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8002b54:	6178      	str	r0, [r7, #20]
        break;
 8002b56:	e00f      	b.n	8002b78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b58:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <UART_SetConfig+0x598>)
 8002b5a:	617b      	str	r3, [r7, #20]
        break;
 8002b5c:	e00c      	b.n	8002b78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5e:	f7ff f8f9 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8002b62:	6178      	str	r0, [r7, #20]
        break;
 8002b64:	e008      	b.n	8002b78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	617b      	str	r3, [r7, #20]
        break;
 8002b6c:	e004      	b.n	8002b78 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	76bb      	strb	r3, [r7, #26]
        break;
 8002b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8086 	beq.w	8002c8c <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <UART_SetConfig+0x594>)
 8002b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b92:	005a      	lsls	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	d916      	bls.n	8002bdc <UART_SetConfig+0x4bc>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d212      	bcs.n	8002bdc <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f023 030f 	bic.w	r3, r3, #15
 8002bbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	89fa      	ldrh	r2, [r7, #14]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e057      	b.n	8002c8c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	76bb      	strb	r3, [r7, #26]
 8002be0:	e054      	b.n	8002c8c <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002be2:	7efb      	ldrb	r3, [r7, #27]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d828      	bhi.n	8002c3a <UART_SetConfig+0x51a>
 8002be8:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <UART_SetConfig+0x4d0>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002c3b 	.word	0x08002c3b
 8002c00:	08002c2b 	.word	0x08002c2b
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c3b 	.word	0x08002c3b
 8002c0c:	08002c3b 	.word	0x08002c3b
 8002c10:	08002c33 	.word	0x08002c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c14:	f7ff f90c 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002c18:	6178      	str	r0, [r7, #20]
        break;
 8002c1a:	e013      	b.n	8002c44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c1c:	f7ff f91e 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8002c20:	6178      	str	r0, [r7, #20]
        break;
 8002c22:	e00f      	b.n	8002c44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <UART_SetConfig+0x598>)
 8002c26:	617b      	str	r3, [r7, #20]
        break;
 8002c28:	e00c      	b.n	8002c44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2a:	f7ff f893 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8002c2e:	6178      	str	r0, [r7, #20]
        break;
 8002c30:	e008      	b.n	8002c44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	617b      	str	r3, [r7, #20]
        break;
 8002c38:	e004      	b.n	8002c44 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	76bb      	strb	r3, [r7, #26]
        break;
 8002c42:	bf00      	nop
    }

    if (pclk != 0U)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <UART_SetConfig+0x594>)
 8002c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c54:	461a      	mov	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	d908      	bls.n	8002c88 <UART_SetConfig+0x568>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d204      	bcs.n	8002c88 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	e001      	b.n	8002c8c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002ca8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002cb4:	08004e38 	.word	0x08004e38
 8002cb8:	00f42400 	.word	0x00f42400

08002cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01a      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dba:	d10a      	bne.n	8002dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e10:	f7fd ff82 	bl	8000d18 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d10e      	bne.n	8002e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f82f 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e025      	b.n	8002e8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d10e      	bne.n	8002e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f819 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e00f      	b.n	8002e8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea6:	e062      	b.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d05e      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fd ff32 	bl	8000d18 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ed4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e045      	b.n	8002f8e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d02e      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1e:	d126      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e00f      	b.n	8002f8e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d08d      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_UARTEx_DisableFifoMode+0x16>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e027      	b.n	8002ffc <HAL_UARTEx_DisableFifoMode+0x66>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002fda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e02d      	b.n	800307c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f84f 	bl	8003100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e02d      	b.n	80030f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f811 	bl	8003100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310c:	2b00      	cmp	r3, #0
 800310e:	d108      	bne.n	8003122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003120:	e031      	b.n	8003186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003122:	2308      	movs	r3, #8
 8003124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003126:	2308      	movs	r3, #8
 8003128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	0e5b      	lsrs	r3, r3, #25
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	0f5b      	lsrs	r3, r3, #29
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	7b3a      	ldrb	r2, [r7, #12]
 800314e:	4911      	ldr	r1, [pc, #68]	; (8003194 <UARTEx_SetNbDataToProcess+0x94>)
 8003150:	5c8a      	ldrb	r2, [r1, r2]
 8003152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003156:	7b3a      	ldrb	r2, [r7, #12]
 8003158:	490f      	ldr	r1, [pc, #60]	; (8003198 <UARTEx_SetNbDataToProcess+0x98>)
 800315a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800315c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	7b7a      	ldrb	r2, [r7, #13]
 800316c:	4909      	ldr	r1, [pc, #36]	; (8003194 <UARTEx_SetNbDataToProcess+0x94>)
 800316e:	5c8a      	ldrb	r2, [r1, r2]
 8003170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003174:	7b7a      	ldrb	r2, [r7, #13]
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <UARTEx_SetNbDataToProcess+0x98>)
 8003178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800317a:	fb93 f3f2 	sdiv	r3, r3, r2
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	08004e50 	.word	0x08004e50
 8003198:	08004e58 	.word	0x08004e58

0800319c <__errno>:
 800319c:	4b01      	ldr	r3, [pc, #4]	; (80031a4 <__errno+0x8>)
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000010 	.word	0x20000010

080031a8 <__libc_init_array>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4e0d      	ldr	r6, [pc, #52]	; (80031e0 <__libc_init_array+0x38>)
 80031ac:	4c0d      	ldr	r4, [pc, #52]	; (80031e4 <__libc_init_array+0x3c>)
 80031ae:	1ba4      	subs	r4, r4, r6
 80031b0:	10a4      	asrs	r4, r4, #2
 80031b2:	2500      	movs	r5, #0
 80031b4:	42a5      	cmp	r5, r4
 80031b6:	d109      	bne.n	80031cc <__libc_init_array+0x24>
 80031b8:	4e0b      	ldr	r6, [pc, #44]	; (80031e8 <__libc_init_array+0x40>)
 80031ba:	4c0c      	ldr	r4, [pc, #48]	; (80031ec <__libc_init_array+0x44>)
 80031bc:	f001 fdc8 	bl	8004d50 <_init>
 80031c0:	1ba4      	subs	r4, r4, r6
 80031c2:	10a4      	asrs	r4, r4, #2
 80031c4:	2500      	movs	r5, #0
 80031c6:	42a5      	cmp	r5, r4
 80031c8:	d105      	bne.n	80031d6 <__libc_init_array+0x2e>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d0:	4798      	blx	r3
 80031d2:	3501      	adds	r5, #1
 80031d4:	e7ee      	b.n	80031b4 <__libc_init_array+0xc>
 80031d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031da:	4798      	blx	r3
 80031dc:	3501      	adds	r5, #1
 80031de:	e7f2      	b.n	80031c6 <__libc_init_array+0x1e>
 80031e0:	08005028 	.word	0x08005028
 80031e4:	08005028 	.word	0x08005028
 80031e8:	08005028 	.word	0x08005028
 80031ec:	0800502c 	.word	0x0800502c

080031f0 <memset>:
 80031f0:	4402      	add	r2, r0
 80031f2:	4603      	mov	r3, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <iprintf>:
 8003200:	b40f      	push	{r0, r1, r2, r3}
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <iprintf+0x2c>)
 8003204:	b513      	push	{r0, r1, r4, lr}
 8003206:	681c      	ldr	r4, [r3, #0]
 8003208:	b124      	cbz	r4, 8003214 <iprintf+0x14>
 800320a:	69a3      	ldr	r3, [r4, #24]
 800320c:	b913      	cbnz	r3, 8003214 <iprintf+0x14>
 800320e:	4620      	mov	r0, r4
 8003210:	f000 f9d6 	bl	80035c0 <__sinit>
 8003214:	ab05      	add	r3, sp, #20
 8003216:	9a04      	ldr	r2, [sp, #16]
 8003218:	68a1      	ldr	r1, [r4, #8]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	4620      	mov	r0, r4
 800321e:	f000 fbb3 	bl	8003988 <_vfiprintf_r>
 8003222:	b002      	add	sp, #8
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003228:	b004      	add	sp, #16
 800322a:	4770      	bx	lr
 800322c:	20000010 	.word	0x20000010

08003230 <iscanf>:
 8003230:	b40f      	push	{r0, r1, r2, r3}
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <iscanf+0x2c>)
 8003234:	b513      	push	{r0, r1, r4, lr}
 8003236:	681c      	ldr	r4, [r3, #0]
 8003238:	b124      	cbz	r4, 8003244 <iscanf+0x14>
 800323a:	69a3      	ldr	r3, [r4, #24]
 800323c:	b913      	cbnz	r3, 8003244 <iscanf+0x14>
 800323e:	4620      	mov	r0, r4
 8003240:	f000 f9be 	bl	80035c0 <__sinit>
 8003244:	ab05      	add	r3, sp, #20
 8003246:	9a04      	ldr	r2, [sp, #16]
 8003248:	6861      	ldr	r1, [r4, #4]
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	4620      	mov	r0, r4
 800324e:	f000 ff89 	bl	8004164 <_vfiscanf_r>
 8003252:	b002      	add	sp, #8
 8003254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003258:	b004      	add	sp, #16
 800325a:	4770      	bx	lr
 800325c:	20000010 	.word	0x20000010

08003260 <setvbuf>:
 8003260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003264:	461d      	mov	r5, r3
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <setvbuf+0x14c>)
 8003268:	681e      	ldr	r6, [r3, #0]
 800326a:	4604      	mov	r4, r0
 800326c:	460f      	mov	r7, r1
 800326e:	4690      	mov	r8, r2
 8003270:	b126      	cbz	r6, 800327c <setvbuf+0x1c>
 8003272:	69b3      	ldr	r3, [r6, #24]
 8003274:	b913      	cbnz	r3, 800327c <setvbuf+0x1c>
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f9a2 	bl	80035c0 <__sinit>
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <setvbuf+0x150>)
 800327e:	429c      	cmp	r4, r3
 8003280:	d152      	bne.n	8003328 <setvbuf+0xc8>
 8003282:	6874      	ldr	r4, [r6, #4]
 8003284:	f1b8 0f02 	cmp.w	r8, #2
 8003288:	d006      	beq.n	8003298 <setvbuf+0x38>
 800328a:	f1b8 0f01 	cmp.w	r8, #1
 800328e:	f200 8089 	bhi.w	80033a4 <setvbuf+0x144>
 8003292:	2d00      	cmp	r5, #0
 8003294:	f2c0 8086 	blt.w	80033a4 <setvbuf+0x144>
 8003298:	4621      	mov	r1, r4
 800329a:	4630      	mov	r0, r6
 800329c:	f000 f914 	bl	80034c8 <_fflush_r>
 80032a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a2:	b141      	cbz	r1, 80032b6 <setvbuf+0x56>
 80032a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032a8:	4299      	cmp	r1, r3
 80032aa:	d002      	beq.n	80032b2 <setvbuf+0x52>
 80032ac:	4630      	mov	r0, r6
 80032ae:	f000 fa99 	bl	80037e4 <_free_r>
 80032b2:	2300      	movs	r3, #0
 80032b4:	6363      	str	r3, [r4, #52]	; 0x34
 80032b6:	2300      	movs	r3, #0
 80032b8:	61a3      	str	r3, [r4, #24]
 80032ba:	6063      	str	r3, [r4, #4]
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	d503      	bpl.n	80032ca <setvbuf+0x6a>
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 fa8d 	bl	80037e4 <_free_r>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032d0:	f023 0303 	bic.w	r3, r3, #3
 80032d4:	f1b8 0f02 	cmp.w	r8, #2
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	d05d      	beq.n	8003398 <setvbuf+0x138>
 80032dc:	ab01      	add	r3, sp, #4
 80032de:	466a      	mov	r2, sp
 80032e0:	4621      	mov	r1, r4
 80032e2:	4630      	mov	r0, r6
 80032e4:	f000 fa12 	bl	800370c <__swhatbuf_r>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	4318      	orrs	r0, r3
 80032ec:	81a0      	strh	r0, [r4, #12]
 80032ee:	bb2d      	cbnz	r5, 800333c <setvbuf+0xdc>
 80032f0:	9d00      	ldr	r5, [sp, #0]
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 fa6e 	bl	80037d4 <malloc>
 80032f8:	4607      	mov	r7, r0
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d14e      	bne.n	800339c <setvbuf+0x13c>
 80032fe:	f8dd 9000 	ldr.w	r9, [sp]
 8003302:	45a9      	cmp	r9, r5
 8003304:	d13c      	bne.n	8003380 <setvbuf+0x120>
 8003306:	f04f 30ff 	mov.w	r0, #4294967295
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	60a3      	str	r3, [r4, #8]
 8003316:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	2301      	movs	r3, #1
 8003320:	6163      	str	r3, [r4, #20]
 8003322:	b003      	add	sp, #12
 8003324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <setvbuf+0x154>)
 800332a:	429c      	cmp	r4, r3
 800332c:	d101      	bne.n	8003332 <setvbuf+0xd2>
 800332e:	68b4      	ldr	r4, [r6, #8]
 8003330:	e7a8      	b.n	8003284 <setvbuf+0x24>
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <setvbuf+0x158>)
 8003334:	429c      	cmp	r4, r3
 8003336:	bf08      	it	eq
 8003338:	68f4      	ldreq	r4, [r6, #12]
 800333a:	e7a3      	b.n	8003284 <setvbuf+0x24>
 800333c:	2f00      	cmp	r7, #0
 800333e:	d0d8      	beq.n	80032f2 <setvbuf+0x92>
 8003340:	69b3      	ldr	r3, [r6, #24]
 8003342:	b913      	cbnz	r3, 800334a <setvbuf+0xea>
 8003344:	4630      	mov	r0, r6
 8003346:	f000 f93b 	bl	80035c0 <__sinit>
 800334a:	f1b8 0f01 	cmp.w	r8, #1
 800334e:	bf08      	it	eq
 8003350:	89a3      	ldrheq	r3, [r4, #12]
 8003352:	6027      	str	r7, [r4, #0]
 8003354:	bf04      	itt	eq
 8003356:	f043 0301 	orreq.w	r3, r3, #1
 800335a:	81a3      	strheq	r3, [r4, #12]
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f013 0008 	ands.w	r0, r3, #8
 8003362:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003366:	d01b      	beq.n	80033a0 <setvbuf+0x140>
 8003368:	f013 0001 	ands.w	r0, r3, #1
 800336c:	bf18      	it	ne
 800336e:	426d      	negne	r5, r5
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	bf1d      	ittte	ne
 8003376:	60a3      	strne	r3, [r4, #8]
 8003378:	61a5      	strne	r5, [r4, #24]
 800337a:	4618      	movne	r0, r3
 800337c:	60a5      	streq	r5, [r4, #8]
 800337e:	e7d0      	b.n	8003322 <setvbuf+0xc2>
 8003380:	4648      	mov	r0, r9
 8003382:	f000 fa27 	bl	80037d4 <malloc>
 8003386:	4607      	mov	r7, r0
 8003388:	2800      	cmp	r0, #0
 800338a:	d0bc      	beq.n	8003306 <setvbuf+0xa6>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	464d      	mov	r5, r9
 8003396:	e7d3      	b.n	8003340 <setvbuf+0xe0>
 8003398:	2000      	movs	r0, #0
 800339a:	e7b6      	b.n	800330a <setvbuf+0xaa>
 800339c:	46a9      	mov	r9, r5
 800339e:	e7f5      	b.n	800338c <setvbuf+0x12c>
 80033a0:	60a0      	str	r0, [r4, #8]
 80033a2:	e7be      	b.n	8003322 <setvbuf+0xc2>
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	e7bb      	b.n	8003322 <setvbuf+0xc2>
 80033aa:	bf00      	nop
 80033ac:	20000010 	.word	0x20000010
 80033b0:	08004e84 	.word	0x08004e84
 80033b4:	08004ea4 	.word	0x08004ea4
 80033b8:	08004e64 	.word	0x08004e64

080033bc <__sflush_r>:
 80033bc:	898a      	ldrh	r2, [r1, #12]
 80033be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	4605      	mov	r5, r0
 80033c4:	0710      	lsls	r0, r2, #28
 80033c6:	460c      	mov	r4, r1
 80033c8:	d458      	bmi.n	800347c <__sflush_r+0xc0>
 80033ca:	684b      	ldr	r3, [r1, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dc05      	bgt.n	80033dc <__sflush_r+0x20>
 80033d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	dc02      	bgt.n	80033dc <__sflush_r+0x20>
 80033d6:	2000      	movs	r0, #0
 80033d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033de:	2e00      	cmp	r6, #0
 80033e0:	d0f9      	beq.n	80033d6 <__sflush_r+0x1a>
 80033e2:	2300      	movs	r3, #0
 80033e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033e8:	682f      	ldr	r7, [r5, #0]
 80033ea:	6a21      	ldr	r1, [r4, #32]
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	d032      	beq.n	8003456 <__sflush_r+0x9a>
 80033f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	075a      	lsls	r2, r3, #29
 80033f6:	d505      	bpl.n	8003404 <__sflush_r+0x48>
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	1ac0      	subs	r0, r0, r3
 80033fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033fe:	b10b      	cbz	r3, 8003404 <__sflush_r+0x48>
 8003400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003402:	1ac0      	subs	r0, r0, r3
 8003404:	2300      	movs	r3, #0
 8003406:	4602      	mov	r2, r0
 8003408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800340a:	6a21      	ldr	r1, [r4, #32]
 800340c:	4628      	mov	r0, r5
 800340e:	47b0      	blx	r6
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	d106      	bne.n	8003424 <__sflush_r+0x68>
 8003416:	6829      	ldr	r1, [r5, #0]
 8003418:	291d      	cmp	r1, #29
 800341a:	d848      	bhi.n	80034ae <__sflush_r+0xf2>
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <__sflush_r+0x108>)
 800341e:	40ca      	lsrs	r2, r1
 8003420:	07d6      	lsls	r6, r2, #31
 8003422:	d544      	bpl.n	80034ae <__sflush_r+0xf2>
 8003424:	2200      	movs	r2, #0
 8003426:	6062      	str	r2, [r4, #4]
 8003428:	04d9      	lsls	r1, r3, #19
 800342a:	6922      	ldr	r2, [r4, #16]
 800342c:	6022      	str	r2, [r4, #0]
 800342e:	d504      	bpl.n	800343a <__sflush_r+0x7e>
 8003430:	1c42      	adds	r2, r0, #1
 8003432:	d101      	bne.n	8003438 <__sflush_r+0x7c>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b903      	cbnz	r3, 800343a <__sflush_r+0x7e>
 8003438:	6560      	str	r0, [r4, #84]	; 0x54
 800343a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800343c:	602f      	str	r7, [r5, #0]
 800343e:	2900      	cmp	r1, #0
 8003440:	d0c9      	beq.n	80033d6 <__sflush_r+0x1a>
 8003442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003446:	4299      	cmp	r1, r3
 8003448:	d002      	beq.n	8003450 <__sflush_r+0x94>
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f9ca 	bl	80037e4 <_free_r>
 8003450:	2000      	movs	r0, #0
 8003452:	6360      	str	r0, [r4, #52]	; 0x34
 8003454:	e7c0      	b.n	80033d8 <__sflush_r+0x1c>
 8003456:	2301      	movs	r3, #1
 8003458:	4628      	mov	r0, r5
 800345a:	47b0      	blx	r6
 800345c:	1c41      	adds	r1, r0, #1
 800345e:	d1c8      	bne.n	80033f2 <__sflush_r+0x36>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0c5      	beq.n	80033f2 <__sflush_r+0x36>
 8003466:	2b1d      	cmp	r3, #29
 8003468:	d001      	beq.n	800346e <__sflush_r+0xb2>
 800346a:	2b16      	cmp	r3, #22
 800346c:	d101      	bne.n	8003472 <__sflush_r+0xb6>
 800346e:	602f      	str	r7, [r5, #0]
 8003470:	e7b1      	b.n	80033d6 <__sflush_r+0x1a>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	e7ad      	b.n	80033d8 <__sflush_r+0x1c>
 800347c:	690f      	ldr	r7, [r1, #16]
 800347e:	2f00      	cmp	r7, #0
 8003480:	d0a9      	beq.n	80033d6 <__sflush_r+0x1a>
 8003482:	0793      	lsls	r3, r2, #30
 8003484:	680e      	ldr	r6, [r1, #0]
 8003486:	bf08      	it	eq
 8003488:	694b      	ldreq	r3, [r1, #20]
 800348a:	600f      	str	r7, [r1, #0]
 800348c:	bf18      	it	ne
 800348e:	2300      	movne	r3, #0
 8003490:	eba6 0807 	sub.w	r8, r6, r7
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	f1b8 0f00 	cmp.w	r8, #0
 800349a:	dd9c      	ble.n	80033d6 <__sflush_r+0x1a>
 800349c:	4643      	mov	r3, r8
 800349e:	463a      	mov	r2, r7
 80034a0:	6a21      	ldr	r1, [r4, #32]
 80034a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b0      	blx	r6
 80034a8:	2800      	cmp	r0, #0
 80034aa:	dc06      	bgt.n	80034ba <__sflush_r+0xfe>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	e78e      	b.n	80033d8 <__sflush_r+0x1c>
 80034ba:	4407      	add	r7, r0
 80034bc:	eba8 0800 	sub.w	r8, r8, r0
 80034c0:	e7e9      	b.n	8003496 <__sflush_r+0xda>
 80034c2:	bf00      	nop
 80034c4:	20400001 	.word	0x20400001

080034c8 <_fflush_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	690b      	ldr	r3, [r1, #16]
 80034cc:	4605      	mov	r5, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	b1db      	cbz	r3, 800350a <_fflush_r+0x42>
 80034d2:	b118      	cbz	r0, 80034dc <_fflush_r+0x14>
 80034d4:	6983      	ldr	r3, [r0, #24]
 80034d6:	b90b      	cbnz	r3, 80034dc <_fflush_r+0x14>
 80034d8:	f000 f872 	bl	80035c0 <__sinit>
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <_fflush_r+0x48>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d109      	bne.n	80034f6 <_fflush_r+0x2e>
 80034e2:	686c      	ldr	r4, [r5, #4]
 80034e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e8:	b17b      	cbz	r3, 800350a <_fflush_r+0x42>
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034f2:	f7ff bf63 	b.w	80033bc <__sflush_r>
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_fflush_r+0x4c>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	d101      	bne.n	8003500 <_fflush_r+0x38>
 80034fc:	68ac      	ldr	r4, [r5, #8]
 80034fe:	e7f1      	b.n	80034e4 <_fflush_r+0x1c>
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <_fflush_r+0x50>)
 8003502:	429c      	cmp	r4, r3
 8003504:	bf08      	it	eq
 8003506:	68ec      	ldreq	r4, [r5, #12]
 8003508:	e7ec      	b.n	80034e4 <_fflush_r+0x1c>
 800350a:	2000      	movs	r0, #0
 800350c:	bd38      	pop	{r3, r4, r5, pc}
 800350e:	bf00      	nop
 8003510:	08004e84 	.word	0x08004e84
 8003514:	08004ea4 	.word	0x08004ea4
 8003518:	08004e64 	.word	0x08004e64

0800351c <fflush>:
 800351c:	4601      	mov	r1, r0
 800351e:	b920      	cbnz	r0, 800352a <fflush+0xe>
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <fflush+0x18>)
 8003522:	4905      	ldr	r1, [pc, #20]	; (8003538 <fflush+0x1c>)
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	f000 b8d3 	b.w	80036d0 <_fwalk_reent>
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <fflush+0x20>)
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	f7ff bfcb 	b.w	80034c8 <_fflush_r>
 8003532:	bf00      	nop
 8003534:	08004e60 	.word	0x08004e60
 8003538:	080034c9 	.word	0x080034c9
 800353c:	20000010 	.word	0x20000010

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	6083      	str	r3, [r0, #8]
 800354c:	8181      	strh	r1, [r0, #12]
 800354e:	6643      	str	r3, [r0, #100]	; 0x64
 8003550:	81c2      	strh	r2, [r0, #14]
 8003552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	; 0x5c
 800355e:	f7ff fe47 	bl	80031f0 <memset>
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <std+0x38>)
 8003564:	6263      	str	r3, [r4, #36]	; 0x24
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <std+0x3c>)
 8003568:	62a3      	str	r3, [r4, #40]	; 0x28
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <std+0x40>)
 800356c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x44>)
 8003570:	6224      	str	r4, [r4, #32]
 8003572:	6323      	str	r3, [r4, #48]	; 0x30
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	08004615 	.word	0x08004615
 800357c:	08004637 	.word	0x08004637
 8003580:	0800466f 	.word	0x0800466f
 8003584:	08004693 	.word	0x08004693

08003588 <_cleanup_r>:
 8003588:	4901      	ldr	r1, [pc, #4]	; (8003590 <_cleanup_r+0x8>)
 800358a:	f000 b8a1 	b.w	80036d0 <_fwalk_reent>
 800358e:	bf00      	nop
 8003590:	080034c9 	.word	0x080034c9

08003594 <__sfmoreglue>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	1e4a      	subs	r2, r1, #1
 8003598:	2568      	movs	r5, #104	; 0x68
 800359a:	4355      	muls	r5, r2
 800359c:	460e      	mov	r6, r1
 800359e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a2:	f000 f96d 	bl	8003880 <_malloc_r>
 80035a6:	4604      	mov	r4, r0
 80035a8:	b140      	cbz	r0, 80035bc <__sfmoreglue+0x28>
 80035aa:	2100      	movs	r1, #0
 80035ac:	e9c0 1600 	strd	r1, r6, [r0]
 80035b0:	300c      	adds	r0, #12
 80035b2:	60a0      	str	r0, [r4, #8]
 80035b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035b8:	f7ff fe1a 	bl	80031f0 <memset>
 80035bc:	4620      	mov	r0, r4
 80035be:	bd70      	pop	{r4, r5, r6, pc}

080035c0 <__sinit>:
 80035c0:	6983      	ldr	r3, [r0, #24]
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
 80035c6:	bb33      	cbnz	r3, 8003616 <__sinit+0x56>
 80035c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035cc:	6503      	str	r3, [r0, #80]	; 0x50
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <__sinit+0x58>)
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <__sinit+0x5c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6282      	str	r2, [r0, #40]	; 0x28
 80035d6:	4298      	cmp	r0, r3
 80035d8:	bf04      	itt	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	6183      	streq	r3, [r0, #24]
 80035de:	f000 f81f 	bl	8003620 <__sfp>
 80035e2:	6060      	str	r0, [r4, #4]
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f81b 	bl	8003620 <__sfp>
 80035ea:	60a0      	str	r0, [r4, #8]
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 f817 	bl	8003620 <__sfp>
 80035f2:	2200      	movs	r2, #0
 80035f4:	60e0      	str	r0, [r4, #12]
 80035f6:	2104      	movs	r1, #4
 80035f8:	6860      	ldr	r0, [r4, #4]
 80035fa:	f7ff ffa1 	bl	8003540 <std>
 80035fe:	2201      	movs	r2, #1
 8003600:	2109      	movs	r1, #9
 8003602:	68a0      	ldr	r0, [r4, #8]
 8003604:	f7ff ff9c 	bl	8003540 <std>
 8003608:	2202      	movs	r2, #2
 800360a:	2112      	movs	r1, #18
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	f7ff ff97 	bl	8003540 <std>
 8003612:	2301      	movs	r3, #1
 8003614:	61a3      	str	r3, [r4, #24]
 8003616:	bd10      	pop	{r4, pc}
 8003618:	08004e60 	.word	0x08004e60
 800361c:	08003589 	.word	0x08003589

08003620 <__sfp>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <__sfp+0x70>)
 8003624:	681e      	ldr	r6, [r3, #0]
 8003626:	69b3      	ldr	r3, [r6, #24]
 8003628:	4607      	mov	r7, r0
 800362a:	b913      	cbnz	r3, 8003632 <__sfp+0x12>
 800362c:	4630      	mov	r0, r6
 800362e:	f7ff ffc7 	bl	80035c0 <__sinit>
 8003632:	3648      	adds	r6, #72	; 0x48
 8003634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003638:	3b01      	subs	r3, #1
 800363a:	d503      	bpl.n	8003644 <__sfp+0x24>
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	b133      	cbz	r3, 800364e <__sfp+0x2e>
 8003640:	6836      	ldr	r6, [r6, #0]
 8003642:	e7f7      	b.n	8003634 <__sfp+0x14>
 8003644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003648:	b16d      	cbz	r5, 8003666 <__sfp+0x46>
 800364a:	3468      	adds	r4, #104	; 0x68
 800364c:	e7f4      	b.n	8003638 <__sfp+0x18>
 800364e:	2104      	movs	r1, #4
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ff9f 	bl	8003594 <__sfmoreglue>
 8003656:	6030      	str	r0, [r6, #0]
 8003658:	2800      	cmp	r0, #0
 800365a:	d1f1      	bne.n	8003640 <__sfp+0x20>
 800365c:	230c      	movs	r3, #12
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4604      	mov	r4, r0
 8003662:	4620      	mov	r0, r4
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <__sfp+0x74>)
 8003668:	6665      	str	r5, [r4, #100]	; 0x64
 800366a:	e9c4 5500 	strd	r5, r5, [r4]
 800366e:	60a5      	str	r5, [r4, #8]
 8003670:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003674:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003678:	2208      	movs	r2, #8
 800367a:	4629      	mov	r1, r5
 800367c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003680:	f7ff fdb6 	bl	80031f0 <memset>
 8003684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800368c:	e7e9      	b.n	8003662 <__sfp+0x42>
 800368e:	bf00      	nop
 8003690:	08004e60 	.word	0x08004e60
 8003694:	ffff0001 	.word	0xffff0001

08003698 <_fwalk>:
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	4688      	mov	r8, r1
 800369e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036a2:	2600      	movs	r6, #0
 80036a4:	b914      	cbnz	r4, 80036ac <_fwalk+0x14>
 80036a6:	4630      	mov	r0, r6
 80036a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ac:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036b0:	3f01      	subs	r7, #1
 80036b2:	d501      	bpl.n	80036b8 <_fwalk+0x20>
 80036b4:	6824      	ldr	r4, [r4, #0]
 80036b6:	e7f5      	b.n	80036a4 <_fwalk+0xc>
 80036b8:	89ab      	ldrh	r3, [r5, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d906      	bls.n	80036cc <_fwalk+0x34>
 80036be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c2:	3301      	adds	r3, #1
 80036c4:	d002      	beq.n	80036cc <_fwalk+0x34>
 80036c6:	4628      	mov	r0, r5
 80036c8:	47c0      	blx	r8
 80036ca:	4306      	orrs	r6, r0
 80036cc:	3568      	adds	r5, #104	; 0x68
 80036ce:	e7ef      	b.n	80036b0 <_fwalk+0x18>

080036d0 <_fwalk_reent>:
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4680      	mov	r8, r0
 80036d6:	4689      	mov	r9, r1
 80036d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036dc:	2600      	movs	r6, #0
 80036de:	b914      	cbnz	r4, 80036e6 <_fwalk_reent+0x16>
 80036e0:	4630      	mov	r0, r6
 80036e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036ea:	3f01      	subs	r7, #1
 80036ec:	d501      	bpl.n	80036f2 <_fwalk_reent+0x22>
 80036ee:	6824      	ldr	r4, [r4, #0]
 80036f0:	e7f5      	b.n	80036de <_fwalk_reent+0xe>
 80036f2:	89ab      	ldrh	r3, [r5, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d907      	bls.n	8003708 <_fwalk_reent+0x38>
 80036f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036fc:	3301      	adds	r3, #1
 80036fe:	d003      	beq.n	8003708 <_fwalk_reent+0x38>
 8003700:	4629      	mov	r1, r5
 8003702:	4640      	mov	r0, r8
 8003704:	47c8      	blx	r9
 8003706:	4306      	orrs	r6, r0
 8003708:	3568      	adds	r5, #104	; 0x68
 800370a:	e7ee      	b.n	80036ea <_fwalk_reent+0x1a>

0800370c <__swhatbuf_r>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	460e      	mov	r6, r1
 8003710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003714:	2900      	cmp	r1, #0
 8003716:	b096      	sub	sp, #88	; 0x58
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	da07      	bge.n	800372e <__swhatbuf_r+0x22>
 800371e:	2300      	movs	r3, #0
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	89b3      	ldrh	r3, [r6, #12]
 8003724:	061a      	lsls	r2, r3, #24
 8003726:	d410      	bmi.n	800374a <__swhatbuf_r+0x3e>
 8003728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372c:	e00e      	b.n	800374c <__swhatbuf_r+0x40>
 800372e:	466a      	mov	r2, sp
 8003730:	f001 fa5a 	bl	8004be8 <_fstat_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	dbf2      	blt.n	800371e <__swhatbuf_r+0x12>
 8003738:	9a01      	ldr	r2, [sp, #4]
 800373a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800373e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003742:	425a      	negs	r2, r3
 8003744:	415a      	adcs	r2, r3
 8003746:	602a      	str	r2, [r5, #0]
 8003748:	e7ee      	b.n	8003728 <__swhatbuf_r+0x1c>
 800374a:	2340      	movs	r3, #64	; 0x40
 800374c:	2000      	movs	r0, #0
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	b016      	add	sp, #88	; 0x58
 8003752:	bd70      	pop	{r4, r5, r6, pc}

08003754 <__smakebuf_r>:
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003758:	079d      	lsls	r5, r3, #30
 800375a:	4606      	mov	r6, r0
 800375c:	460c      	mov	r4, r1
 800375e:	d507      	bpl.n	8003770 <__smakebuf_r+0x1c>
 8003760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	2301      	movs	r3, #1
 800376a:	6163      	str	r3, [r4, #20]
 800376c:	b002      	add	sp, #8
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	ab01      	add	r3, sp, #4
 8003772:	466a      	mov	r2, sp
 8003774:	f7ff ffca 	bl	800370c <__swhatbuf_r>
 8003778:	9900      	ldr	r1, [sp, #0]
 800377a:	4605      	mov	r5, r0
 800377c:	4630      	mov	r0, r6
 800377e:	f000 f87f 	bl	8003880 <_malloc_r>
 8003782:	b948      	cbnz	r0, 8003798 <__smakebuf_r+0x44>
 8003784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003788:	059a      	lsls	r2, r3, #22
 800378a:	d4ef      	bmi.n	800376c <__smakebuf_r+0x18>
 800378c:	f023 0303 	bic.w	r3, r3, #3
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	e7e3      	b.n	8003760 <__smakebuf_r+0xc>
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <__smakebuf_r+0x7c>)
 800379a:	62b3      	str	r3, [r6, #40]	; 0x28
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	6020      	str	r0, [r4, #0]
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	81a3      	strh	r3, [r4, #12]
 80037a6:	9b00      	ldr	r3, [sp, #0]
 80037a8:	6163      	str	r3, [r4, #20]
 80037aa:	9b01      	ldr	r3, [sp, #4]
 80037ac:	6120      	str	r0, [r4, #16]
 80037ae:	b15b      	cbz	r3, 80037c8 <__smakebuf_r+0x74>
 80037b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b4:	4630      	mov	r0, r6
 80037b6:	f001 fa29 	bl	8004c0c <_isatty_r>
 80037ba:	b128      	cbz	r0, 80037c8 <__smakebuf_r+0x74>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	431d      	orrs	r5, r3
 80037cc:	81a5      	strh	r5, [r4, #12]
 80037ce:	e7cd      	b.n	800376c <__smakebuf_r+0x18>
 80037d0:	08003589 	.word	0x08003589

080037d4 <malloc>:
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <malloc+0xc>)
 80037d6:	4601      	mov	r1, r0
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	f000 b851 	b.w	8003880 <_malloc_r>
 80037de:	bf00      	nop
 80037e0:	20000010 	.word	0x20000010

080037e4 <_free_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4605      	mov	r5, r0
 80037e8:	2900      	cmp	r1, #0
 80037ea:	d045      	beq.n	8003878 <_free_r+0x94>
 80037ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f0:	1f0c      	subs	r4, r1, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bfb8      	it	lt
 80037f6:	18e4      	addlt	r4, r4, r3
 80037f8:	f001 fa59 	bl	8004cae <__malloc_lock>
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <_free_r+0x98>)
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	4610      	mov	r0, r2
 8003802:	b933      	cbnz	r3, 8003812 <_free_r+0x2e>
 8003804:	6063      	str	r3, [r4, #4]
 8003806:	6014      	str	r4, [r2, #0]
 8003808:	4628      	mov	r0, r5
 800380a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800380e:	f001 ba4f 	b.w	8004cb0 <__malloc_unlock>
 8003812:	42a3      	cmp	r3, r4
 8003814:	d90c      	bls.n	8003830 <_free_r+0x4c>
 8003816:	6821      	ldr	r1, [r4, #0]
 8003818:	1862      	adds	r2, r4, r1
 800381a:	4293      	cmp	r3, r2
 800381c:	bf04      	itt	eq
 800381e:	681a      	ldreq	r2, [r3, #0]
 8003820:	685b      	ldreq	r3, [r3, #4]
 8003822:	6063      	str	r3, [r4, #4]
 8003824:	bf04      	itt	eq
 8003826:	1852      	addeq	r2, r2, r1
 8003828:	6022      	streq	r2, [r4, #0]
 800382a:	6004      	str	r4, [r0, #0]
 800382c:	e7ec      	b.n	8003808 <_free_r+0x24>
 800382e:	4613      	mov	r3, r2
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	b10a      	cbz	r2, 8003838 <_free_r+0x54>
 8003834:	42a2      	cmp	r2, r4
 8003836:	d9fa      	bls.n	800382e <_free_r+0x4a>
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	1858      	adds	r0, r3, r1
 800383c:	42a0      	cmp	r0, r4
 800383e:	d10b      	bne.n	8003858 <_free_r+0x74>
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	4401      	add	r1, r0
 8003844:	1858      	adds	r0, r3, r1
 8003846:	4282      	cmp	r2, r0
 8003848:	6019      	str	r1, [r3, #0]
 800384a:	d1dd      	bne.n	8003808 <_free_r+0x24>
 800384c:	6810      	ldr	r0, [r2, #0]
 800384e:	6852      	ldr	r2, [r2, #4]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	4401      	add	r1, r0
 8003854:	6019      	str	r1, [r3, #0]
 8003856:	e7d7      	b.n	8003808 <_free_r+0x24>
 8003858:	d902      	bls.n	8003860 <_free_r+0x7c>
 800385a:	230c      	movs	r3, #12
 800385c:	602b      	str	r3, [r5, #0]
 800385e:	e7d3      	b.n	8003808 <_free_r+0x24>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428a      	cmp	r2, r1
 8003866:	bf04      	itt	eq
 8003868:	6811      	ldreq	r1, [r2, #0]
 800386a:	6852      	ldreq	r2, [r2, #4]
 800386c:	6062      	str	r2, [r4, #4]
 800386e:	bf04      	itt	eq
 8003870:	1809      	addeq	r1, r1, r0
 8003872:	6021      	streq	r1, [r4, #0]
 8003874:	605c      	str	r4, [r3, #4]
 8003876:	e7c7      	b.n	8003808 <_free_r+0x24>
 8003878:	bd38      	pop	{r3, r4, r5, pc}
 800387a:	bf00      	nop
 800387c:	20000200 	.word	0x20000200

08003880 <_malloc_r>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	1ccd      	adds	r5, r1, #3
 8003884:	f025 0503 	bic.w	r5, r5, #3
 8003888:	3508      	adds	r5, #8
 800388a:	2d0c      	cmp	r5, #12
 800388c:	bf38      	it	cc
 800388e:	250c      	movcc	r5, #12
 8003890:	2d00      	cmp	r5, #0
 8003892:	4606      	mov	r6, r0
 8003894:	db01      	blt.n	800389a <_malloc_r+0x1a>
 8003896:	42a9      	cmp	r1, r5
 8003898:	d903      	bls.n	80038a2 <_malloc_r+0x22>
 800389a:	230c      	movs	r3, #12
 800389c:	6033      	str	r3, [r6, #0]
 800389e:	2000      	movs	r0, #0
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	f001 fa04 	bl	8004cae <__malloc_lock>
 80038a6:	4a21      	ldr	r2, [pc, #132]	; (800392c <_malloc_r+0xac>)
 80038a8:	6814      	ldr	r4, [r2, #0]
 80038aa:	4621      	mov	r1, r4
 80038ac:	b991      	cbnz	r1, 80038d4 <_malloc_r+0x54>
 80038ae:	4c20      	ldr	r4, [pc, #128]	; (8003930 <_malloc_r+0xb0>)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	b91b      	cbnz	r3, 80038bc <_malloc_r+0x3c>
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 fe6b 	bl	8004590 <_sbrk_r>
 80038ba:	6020      	str	r0, [r4, #0]
 80038bc:	4629      	mov	r1, r5
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 fe66 	bl	8004590 <_sbrk_r>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d124      	bne.n	8003912 <_malloc_r+0x92>
 80038c8:	230c      	movs	r3, #12
 80038ca:	6033      	str	r3, [r6, #0]
 80038cc:	4630      	mov	r0, r6
 80038ce:	f001 f9ef 	bl	8004cb0 <__malloc_unlock>
 80038d2:	e7e4      	b.n	800389e <_malloc_r+0x1e>
 80038d4:	680b      	ldr	r3, [r1, #0]
 80038d6:	1b5b      	subs	r3, r3, r5
 80038d8:	d418      	bmi.n	800390c <_malloc_r+0x8c>
 80038da:	2b0b      	cmp	r3, #11
 80038dc:	d90f      	bls.n	80038fe <_malloc_r+0x7e>
 80038de:	600b      	str	r3, [r1, #0]
 80038e0:	50cd      	str	r5, [r1, r3]
 80038e2:	18cc      	adds	r4, r1, r3
 80038e4:	4630      	mov	r0, r6
 80038e6:	f001 f9e3 	bl	8004cb0 <__malloc_unlock>
 80038ea:	f104 000b 	add.w	r0, r4, #11
 80038ee:	1d23      	adds	r3, r4, #4
 80038f0:	f020 0007 	bic.w	r0, r0, #7
 80038f4:	1ac3      	subs	r3, r0, r3
 80038f6:	d0d3      	beq.n	80038a0 <_malloc_r+0x20>
 80038f8:	425a      	negs	r2, r3
 80038fa:	50e2      	str	r2, [r4, r3]
 80038fc:	e7d0      	b.n	80038a0 <_malloc_r+0x20>
 80038fe:	428c      	cmp	r4, r1
 8003900:	684b      	ldr	r3, [r1, #4]
 8003902:	bf16      	itet	ne
 8003904:	6063      	strne	r3, [r4, #4]
 8003906:	6013      	streq	r3, [r2, #0]
 8003908:	460c      	movne	r4, r1
 800390a:	e7eb      	b.n	80038e4 <_malloc_r+0x64>
 800390c:	460c      	mov	r4, r1
 800390e:	6849      	ldr	r1, [r1, #4]
 8003910:	e7cc      	b.n	80038ac <_malloc_r+0x2c>
 8003912:	1cc4      	adds	r4, r0, #3
 8003914:	f024 0403 	bic.w	r4, r4, #3
 8003918:	42a0      	cmp	r0, r4
 800391a:	d005      	beq.n	8003928 <_malloc_r+0xa8>
 800391c:	1a21      	subs	r1, r4, r0
 800391e:	4630      	mov	r0, r6
 8003920:	f000 fe36 	bl	8004590 <_sbrk_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d0cf      	beq.n	80038c8 <_malloc_r+0x48>
 8003928:	6025      	str	r5, [r4, #0]
 800392a:	e7db      	b.n	80038e4 <_malloc_r+0x64>
 800392c:	20000200 	.word	0x20000200
 8003930:	20000204 	.word	0x20000204

08003934 <__sfputc_r>:
 8003934:	6893      	ldr	r3, [r2, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	b410      	push	{r4}
 800393c:	6093      	str	r3, [r2, #8]
 800393e:	da08      	bge.n	8003952 <__sfputc_r+0x1e>
 8003940:	6994      	ldr	r4, [r2, #24]
 8003942:	42a3      	cmp	r3, r4
 8003944:	db01      	blt.n	800394a <__sfputc_r+0x16>
 8003946:	290a      	cmp	r1, #10
 8003948:	d103      	bne.n	8003952 <__sfputc_r+0x1e>
 800394a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800394e:	f001 b869 	b.w	8004a24 <__swbuf_r>
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	1c58      	adds	r0, r3, #1
 8003956:	6010      	str	r0, [r2, #0]
 8003958:	7019      	strb	r1, [r3, #0]
 800395a:	4608      	mov	r0, r1
 800395c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003960:	4770      	bx	lr

08003962 <__sfputs_r>:
 8003962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003964:	4606      	mov	r6, r0
 8003966:	460f      	mov	r7, r1
 8003968:	4614      	mov	r4, r2
 800396a:	18d5      	adds	r5, r2, r3
 800396c:	42ac      	cmp	r4, r5
 800396e:	d101      	bne.n	8003974 <__sfputs_r+0x12>
 8003970:	2000      	movs	r0, #0
 8003972:	e007      	b.n	8003984 <__sfputs_r+0x22>
 8003974:	463a      	mov	r2, r7
 8003976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397a:	4630      	mov	r0, r6
 800397c:	f7ff ffda 	bl	8003934 <__sfputc_r>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d1f3      	bne.n	800396c <__sfputs_r+0xa>
 8003984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003988 <_vfiprintf_r>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	460c      	mov	r4, r1
 800398e:	b09d      	sub	sp, #116	; 0x74
 8003990:	4617      	mov	r7, r2
 8003992:	461d      	mov	r5, r3
 8003994:	4606      	mov	r6, r0
 8003996:	b118      	cbz	r0, 80039a0 <_vfiprintf_r+0x18>
 8003998:	6983      	ldr	r3, [r0, #24]
 800399a:	b90b      	cbnz	r3, 80039a0 <_vfiprintf_r+0x18>
 800399c:	f7ff fe10 	bl	80035c0 <__sinit>
 80039a0:	4b7c      	ldr	r3, [pc, #496]	; (8003b94 <_vfiprintf_r+0x20c>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	d158      	bne.n	8003a58 <_vfiprintf_r+0xd0>
 80039a6:	6874      	ldr	r4, [r6, #4]
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	0718      	lsls	r0, r3, #28
 80039ac:	d55e      	bpl.n	8003a6c <_vfiprintf_r+0xe4>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05b      	beq.n	8003a6c <_vfiprintf_r+0xe4>
 80039b4:	2300      	movs	r3, #0
 80039b6:	9309      	str	r3, [sp, #36]	; 0x24
 80039b8:	2320      	movs	r3, #32
 80039ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039be:	2330      	movs	r3, #48	; 0x30
 80039c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c4:	9503      	str	r5, [sp, #12]
 80039c6:	f04f 0b01 	mov.w	fp, #1
 80039ca:	46b8      	mov	r8, r7
 80039cc:	4645      	mov	r5, r8
 80039ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039d2:	b10b      	cbz	r3, 80039d8 <_vfiprintf_r+0x50>
 80039d4:	2b25      	cmp	r3, #37	; 0x25
 80039d6:	d154      	bne.n	8003a82 <_vfiprintf_r+0xfa>
 80039d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80039dc:	d00b      	beq.n	80039f6 <_vfiprintf_r+0x6e>
 80039de:	4653      	mov	r3, sl
 80039e0:	463a      	mov	r2, r7
 80039e2:	4621      	mov	r1, r4
 80039e4:	4630      	mov	r0, r6
 80039e6:	f7ff ffbc 	bl	8003962 <__sfputs_r>
 80039ea:	3001      	adds	r0, #1
 80039ec:	f000 80c2 	beq.w	8003b74 <_vfiprintf_r+0x1ec>
 80039f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f2:	4453      	add	r3, sl
 80039f4:	9309      	str	r3, [sp, #36]	; 0x24
 80039f6:	f898 3000 	ldrb.w	r3, [r8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80ba 	beq.w	8003b74 <_vfiprintf_r+0x1ec>
 8003a00:	2300      	movs	r3, #0
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	9307      	str	r3, [sp, #28]
 8003a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a12:	931a      	str	r3, [sp, #104]	; 0x68
 8003a14:	46a8      	mov	r8, r5
 8003a16:	2205      	movs	r2, #5
 8003a18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003a1c:	485e      	ldr	r0, [pc, #376]	; (8003b98 <_vfiprintf_r+0x210>)
 8003a1e:	f7fc fbff 	bl	8000220 <memchr>
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	bb78      	cbnz	r0, 8003a86 <_vfiprintf_r+0xfe>
 8003a26:	06d9      	lsls	r1, r3, #27
 8003a28:	bf44      	itt	mi
 8003a2a:	2220      	movmi	r2, #32
 8003a2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a30:	071a      	lsls	r2, r3, #28
 8003a32:	bf44      	itt	mi
 8003a34:	222b      	movmi	r2, #43	; 0x2b
 8003a36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3a:	782a      	ldrb	r2, [r5, #0]
 8003a3c:	2a2a      	cmp	r2, #42	; 0x2a
 8003a3e:	d02a      	beq.n	8003a96 <_vfiprintf_r+0x10e>
 8003a40:	9a07      	ldr	r2, [sp, #28]
 8003a42:	46a8      	mov	r8, r5
 8003a44:	2000      	movs	r0, #0
 8003a46:	250a      	movs	r5, #10
 8003a48:	4641      	mov	r1, r8
 8003a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4e:	3b30      	subs	r3, #48	; 0x30
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d969      	bls.n	8003b28 <_vfiprintf_r+0x1a0>
 8003a54:	b360      	cbz	r0, 8003ab0 <_vfiprintf_r+0x128>
 8003a56:	e024      	b.n	8003aa2 <_vfiprintf_r+0x11a>
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <_vfiprintf_r+0x214>)
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d101      	bne.n	8003a62 <_vfiprintf_r+0xda>
 8003a5e:	68b4      	ldr	r4, [r6, #8]
 8003a60:	e7a2      	b.n	80039a8 <_vfiprintf_r+0x20>
 8003a62:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <_vfiprintf_r+0x218>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	bf08      	it	eq
 8003a68:	68f4      	ldreq	r4, [r6, #12]
 8003a6a:	e79d      	b.n	80039a8 <_vfiprintf_r+0x20>
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f001 f83c 	bl	8004aec <__swsetup_r>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d09d      	beq.n	80039b4 <_vfiprintf_r+0x2c>
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b01d      	add	sp, #116	; 0x74
 8003a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a82:	46a8      	mov	r8, r5
 8003a84:	e7a2      	b.n	80039cc <_vfiprintf_r+0x44>
 8003a86:	4a44      	ldr	r2, [pc, #272]	; (8003b98 <_vfiprintf_r+0x210>)
 8003a88:	1a80      	subs	r0, r0, r2
 8003a8a:	fa0b f000 	lsl.w	r0, fp, r0
 8003a8e:	4318      	orrs	r0, r3
 8003a90:	9004      	str	r0, [sp, #16]
 8003a92:	4645      	mov	r5, r8
 8003a94:	e7be      	b.n	8003a14 <_vfiprintf_r+0x8c>
 8003a96:	9a03      	ldr	r2, [sp, #12]
 8003a98:	1d11      	adds	r1, r2, #4
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	9103      	str	r1, [sp, #12]
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	db01      	blt.n	8003aa6 <_vfiprintf_r+0x11e>
 8003aa2:	9207      	str	r2, [sp, #28]
 8003aa4:	e004      	b.n	8003ab0 <_vfiprintf_r+0x128>
 8003aa6:	4252      	negs	r2, r2
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	9207      	str	r2, [sp, #28]
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	f898 3000 	ldrb.w	r3, [r8]
 8003ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab6:	d10e      	bne.n	8003ad6 <_vfiprintf_r+0x14e>
 8003ab8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003abc:	2b2a      	cmp	r3, #42	; 0x2a
 8003abe:	d138      	bne.n	8003b32 <_vfiprintf_r+0x1aa>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad0:	f108 0802 	add.w	r8, r8, #2
 8003ad4:	9305      	str	r3, [sp, #20]
 8003ad6:	4d33      	ldr	r5, [pc, #204]	; (8003ba4 <_vfiprintf_r+0x21c>)
 8003ad8:	f898 1000 	ldrb.w	r1, [r8]
 8003adc:	2203      	movs	r2, #3
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f7fc fb9e 	bl	8000220 <memchr>
 8003ae4:	b140      	cbz	r0, 8003af8 <_vfiprintf_r+0x170>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	1b40      	subs	r0, r0, r5
 8003aea:	fa03 f000 	lsl.w	r0, r3, r0
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	4303      	orrs	r3, r0
 8003af2:	f108 0801 	add.w	r8, r8, #1
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	f898 1000 	ldrb.w	r1, [r8]
 8003afc:	482a      	ldr	r0, [pc, #168]	; (8003ba8 <_vfiprintf_r+0x220>)
 8003afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b02:	2206      	movs	r2, #6
 8003b04:	f108 0701 	add.w	r7, r8, #1
 8003b08:	f7fc fb8a 	bl	8000220 <memchr>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d037      	beq.n	8003b80 <_vfiprintf_r+0x1f8>
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <_vfiprintf_r+0x224>)
 8003b12:	bb1b      	cbnz	r3, 8003b5c <_vfiprintf_r+0x1d4>
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	3307      	adds	r3, #7
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b22:	444b      	add	r3, r9
 8003b24:	9309      	str	r3, [sp, #36]	; 0x24
 8003b26:	e750      	b.n	80039ca <_vfiprintf_r+0x42>
 8003b28:	fb05 3202 	mla	r2, r5, r2, r3
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	4688      	mov	r8, r1
 8003b30:	e78a      	b.n	8003a48 <_vfiprintf_r+0xc0>
 8003b32:	2300      	movs	r3, #0
 8003b34:	f108 0801 	add.w	r8, r8, #1
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	250a      	movs	r5, #10
 8003b3e:	4640      	mov	r0, r8
 8003b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b44:	3a30      	subs	r2, #48	; 0x30
 8003b46:	2a09      	cmp	r2, #9
 8003b48:	d903      	bls.n	8003b52 <_vfiprintf_r+0x1ca>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0c3      	beq.n	8003ad6 <_vfiprintf_r+0x14e>
 8003b4e:	9105      	str	r1, [sp, #20]
 8003b50:	e7c1      	b.n	8003ad6 <_vfiprintf_r+0x14e>
 8003b52:	fb05 2101 	mla	r1, r5, r1, r2
 8003b56:	2301      	movs	r3, #1
 8003b58:	4680      	mov	r8, r0
 8003b5a:	e7f0      	b.n	8003b3e <_vfiprintf_r+0x1b6>
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4622      	mov	r2, r4
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <_vfiprintf_r+0x228>)
 8003b64:	a904      	add	r1, sp, #16
 8003b66:	4630      	mov	r0, r6
 8003b68:	f3af 8000 	nop.w
 8003b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b70:	4681      	mov	r9, r0
 8003b72:	d1d5      	bne.n	8003b20 <_vfiprintf_r+0x198>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	065b      	lsls	r3, r3, #25
 8003b78:	f53f af7e 	bmi.w	8003a78 <_vfiprintf_r+0xf0>
 8003b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7e:	e77d      	b.n	8003a7c <_vfiprintf_r+0xf4>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4622      	mov	r2, r4
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <_vfiprintf_r+0x228>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 f888 	bl	8003ca0 <_printf_i>
 8003b90:	e7ec      	b.n	8003b6c <_vfiprintf_r+0x1e4>
 8003b92:	bf00      	nop
 8003b94:	08004e84 	.word	0x08004e84
 8003b98:	08004ec4 	.word	0x08004ec4
 8003b9c:	08004ea4 	.word	0x08004ea4
 8003ba0:	08004e64 	.word	0x08004e64
 8003ba4:	08004eca 	.word	0x08004eca
 8003ba8:	08004ece 	.word	0x08004ece
 8003bac:	00000000 	.word	0x00000000
 8003bb0:	08003963 	.word	0x08003963

08003bb4 <_printf_common>:
 8003bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb8:	4691      	mov	r9, r2
 8003bba:	461f      	mov	r7, r3
 8003bbc:	688a      	ldr	r2, [r1, #8]
 8003bbe:	690b      	ldr	r3, [r1, #16]
 8003bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bfb8      	it	lt
 8003bc8:	4613      	movlt	r3, r2
 8003bca:	f8c9 3000 	str.w	r3, [r9]
 8003bce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	b112      	cbz	r2, 8003bde <_printf_common+0x2a>
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f8c9 3000 	str.w	r3, [r9]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	0699      	lsls	r1, r3, #26
 8003be2:	bf42      	ittt	mi
 8003be4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003be8:	3302      	addmi	r3, #2
 8003bea:	f8c9 3000 	strmi.w	r3, [r9]
 8003bee:	6825      	ldr	r5, [r4, #0]
 8003bf0:	f015 0506 	ands.w	r5, r5, #6
 8003bf4:	d107      	bne.n	8003c06 <_printf_common+0x52>
 8003bf6:	f104 0a19 	add.w	sl, r4, #25
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	42ab      	cmp	r3, r5
 8003c04:	dc28      	bgt.n	8003c58 <_printf_common+0xa4>
 8003c06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	3300      	adds	r3, #0
 8003c0e:	bf18      	it	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	0692      	lsls	r2, r2, #26
 8003c14:	d42d      	bmi.n	8003c72 <_printf_common+0xbe>
 8003c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	47c0      	blx	r8
 8003c20:	3001      	adds	r0, #1
 8003c22:	d020      	beq.n	8003c66 <_printf_common+0xb2>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	68e5      	ldr	r5, [r4, #12]
 8003c28:	f8d9 2000 	ldr.w	r2, [r9]
 8003c2c:	f003 0306 	and.w	r3, r3, #6
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	bf08      	it	eq
 8003c34:	1aad      	subeq	r5, r5, r2
 8003c36:	68a3      	ldr	r3, [r4, #8]
 8003c38:	6922      	ldr	r2, [r4, #16]
 8003c3a:	bf0c      	ite	eq
 8003c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c40:	2500      	movne	r5, #0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bfc4      	itt	gt
 8003c46:	1a9b      	subgt	r3, r3, r2
 8003c48:	18ed      	addgt	r5, r5, r3
 8003c4a:	f04f 0900 	mov.w	r9, #0
 8003c4e:	341a      	adds	r4, #26
 8003c50:	454d      	cmp	r5, r9
 8003c52:	d11a      	bne.n	8003c8a <_printf_common+0xd6>
 8003c54:	2000      	movs	r0, #0
 8003c56:	e008      	b.n	8003c6a <_printf_common+0xb6>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4652      	mov	r2, sl
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4630      	mov	r0, r6
 8003c60:	47c0      	blx	r8
 8003c62:	3001      	adds	r0, #1
 8003c64:	d103      	bne.n	8003c6e <_printf_common+0xba>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	3501      	adds	r5, #1
 8003c70:	e7c3      	b.n	8003bfa <_printf_common+0x46>
 8003c72:	18e1      	adds	r1, r4, r3
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	2030      	movs	r0, #48	; 0x30
 8003c78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c7c:	4422      	add	r2, r4
 8003c7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c86:	3302      	adds	r3, #2
 8003c88:	e7c5      	b.n	8003c16 <_printf_common+0x62>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4639      	mov	r1, r7
 8003c90:	4630      	mov	r0, r6
 8003c92:	47c0      	blx	r8
 8003c94:	3001      	adds	r0, #1
 8003c96:	d0e6      	beq.n	8003c66 <_printf_common+0xb2>
 8003c98:	f109 0901 	add.w	r9, r9, #1
 8003c9c:	e7d8      	b.n	8003c50 <_printf_common+0x9c>
	...

08003ca0 <_printf_i>:
 8003ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ca8:	460c      	mov	r4, r1
 8003caa:	7e09      	ldrb	r1, [r1, #24]
 8003cac:	b085      	sub	sp, #20
 8003cae:	296e      	cmp	r1, #110	; 0x6e
 8003cb0:	4617      	mov	r7, r2
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	4698      	mov	r8, r3
 8003cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cb8:	f000 80b3 	beq.w	8003e22 <_printf_i+0x182>
 8003cbc:	d822      	bhi.n	8003d04 <_printf_i+0x64>
 8003cbe:	2963      	cmp	r1, #99	; 0x63
 8003cc0:	d036      	beq.n	8003d30 <_printf_i+0x90>
 8003cc2:	d80a      	bhi.n	8003cda <_printf_i+0x3a>
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	f000 80b9 	beq.w	8003e3c <_printf_i+0x19c>
 8003cca:	2958      	cmp	r1, #88	; 0x58
 8003ccc:	f000 8083 	beq.w	8003dd6 <_printf_i+0x136>
 8003cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003cd8:	e032      	b.n	8003d40 <_printf_i+0xa0>
 8003cda:	2964      	cmp	r1, #100	; 0x64
 8003cdc:	d001      	beq.n	8003ce2 <_printf_i+0x42>
 8003cde:	2969      	cmp	r1, #105	; 0x69
 8003ce0:	d1f6      	bne.n	8003cd0 <_printf_i+0x30>
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	6813      	ldr	r3, [r2, #0]
 8003ce6:	0605      	lsls	r5, r0, #24
 8003ce8:	f103 0104 	add.w	r1, r3, #4
 8003cec:	d52a      	bpl.n	8003d44 <_printf_i+0xa4>
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da03      	bge.n	8003cfe <_printf_i+0x5e>
 8003cf6:	222d      	movs	r2, #45	; 0x2d
 8003cf8:	425b      	negs	r3, r3
 8003cfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cfe:	486f      	ldr	r0, [pc, #444]	; (8003ebc <_printf_i+0x21c>)
 8003d00:	220a      	movs	r2, #10
 8003d02:	e039      	b.n	8003d78 <_printf_i+0xd8>
 8003d04:	2973      	cmp	r1, #115	; 0x73
 8003d06:	f000 809d 	beq.w	8003e44 <_printf_i+0x1a4>
 8003d0a:	d808      	bhi.n	8003d1e <_printf_i+0x7e>
 8003d0c:	296f      	cmp	r1, #111	; 0x6f
 8003d0e:	d020      	beq.n	8003d52 <_printf_i+0xb2>
 8003d10:	2970      	cmp	r1, #112	; 0x70
 8003d12:	d1dd      	bne.n	8003cd0 <_printf_i+0x30>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	f043 0320 	orr.w	r3, r3, #32
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	e003      	b.n	8003d26 <_printf_i+0x86>
 8003d1e:	2975      	cmp	r1, #117	; 0x75
 8003d20:	d017      	beq.n	8003d52 <_printf_i+0xb2>
 8003d22:	2978      	cmp	r1, #120	; 0x78
 8003d24:	d1d4      	bne.n	8003cd0 <_printf_i+0x30>
 8003d26:	2378      	movs	r3, #120	; 0x78
 8003d28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d2c:	4864      	ldr	r0, [pc, #400]	; (8003ec0 <_printf_i+0x220>)
 8003d2e:	e055      	b.n	8003ddc <_printf_i+0x13c>
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	1d19      	adds	r1, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6011      	str	r1, [r2, #0]
 8003d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d40:	2301      	movs	r3, #1
 8003d42:	e08c      	b.n	8003e5e <_printf_i+0x1be>
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6011      	str	r1, [r2, #0]
 8003d48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d4c:	bf18      	it	ne
 8003d4e:	b21b      	sxthne	r3, r3
 8003d50:	e7cf      	b.n	8003cf2 <_printf_i+0x52>
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	6825      	ldr	r5, [r4, #0]
 8003d56:	1d18      	adds	r0, r3, #4
 8003d58:	6010      	str	r0, [r2, #0]
 8003d5a:	0628      	lsls	r0, r5, #24
 8003d5c:	d501      	bpl.n	8003d62 <_printf_i+0xc2>
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	e002      	b.n	8003d68 <_printf_i+0xc8>
 8003d62:	0668      	lsls	r0, r5, #25
 8003d64:	d5fb      	bpl.n	8003d5e <_printf_i+0xbe>
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	4854      	ldr	r0, [pc, #336]	; (8003ebc <_printf_i+0x21c>)
 8003d6a:	296f      	cmp	r1, #111	; 0x6f
 8003d6c:	bf14      	ite	ne
 8003d6e:	220a      	movne	r2, #10
 8003d70:	2208      	moveq	r2, #8
 8003d72:	2100      	movs	r1, #0
 8003d74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d78:	6865      	ldr	r5, [r4, #4]
 8003d7a:	60a5      	str	r5, [r4, #8]
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	f2c0 8095 	blt.w	8003eac <_printf_i+0x20c>
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	f021 0104 	bic.w	r1, r1, #4
 8003d88:	6021      	str	r1, [r4, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13d      	bne.n	8003e0a <_printf_i+0x16a>
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	f040 808e 	bne.w	8003eb0 <_printf_i+0x210>
 8003d94:	4665      	mov	r5, ip
 8003d96:	2a08      	cmp	r2, #8
 8003d98:	d10b      	bne.n	8003db2 <_printf_i+0x112>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d508      	bpl.n	8003db2 <_printf_i+0x112>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	6862      	ldr	r2, [r4, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	bfde      	ittt	le
 8003da8:	2330      	movle	r3, #48	; 0x30
 8003daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db2:	ebac 0305 	sub.w	r3, ip, r5
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	f8cd 8000 	str.w	r8, [sp]
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	aa03      	add	r2, sp, #12
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7ff fef6 	bl	8003bb4 <_printf_common>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d14d      	bne.n	8003e68 <_printf_i+0x1c8>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	b005      	add	sp, #20
 8003dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	4839      	ldr	r0, [pc, #228]	; (8003ebc <_printf_i+0x21c>)
 8003dd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ddc:	6813      	ldr	r3, [r2, #0]
 8003dde:	6821      	ldr	r1, [r4, #0]
 8003de0:	1d1d      	adds	r5, r3, #4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6015      	str	r5, [r2, #0]
 8003de6:	060a      	lsls	r2, r1, #24
 8003de8:	d50b      	bpl.n	8003e02 <_printf_i+0x162>
 8003dea:	07ca      	lsls	r2, r1, #31
 8003dec:	bf44      	itt	mi
 8003dee:	f041 0120 	orrmi.w	r1, r1, #32
 8003df2:	6021      	strmi	r1, [r4, #0]
 8003df4:	b91b      	cbnz	r3, 8003dfe <_printf_i+0x15e>
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	f022 0220 	bic.w	r2, r2, #32
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	2210      	movs	r2, #16
 8003e00:	e7b7      	b.n	8003d72 <_printf_i+0xd2>
 8003e02:	064d      	lsls	r5, r1, #25
 8003e04:	bf48      	it	mi
 8003e06:	b29b      	uxthmi	r3, r3
 8003e08:	e7ef      	b.n	8003dea <_printf_i+0x14a>
 8003e0a:	4665      	mov	r5, ip
 8003e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e10:	fb02 3311 	mls	r3, r2, r1, r3
 8003e14:	5cc3      	ldrb	r3, [r0, r3]
 8003e16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d1f5      	bne.n	8003e0c <_printf_i+0x16c>
 8003e20:	e7b9      	b.n	8003d96 <_printf_i+0xf6>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	6825      	ldr	r5, [r4, #0]
 8003e26:	6961      	ldr	r1, [r4, #20]
 8003e28:	1d18      	adds	r0, r3, #4
 8003e2a:	6010      	str	r0, [r2, #0]
 8003e2c:	0628      	lsls	r0, r5, #24
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	d501      	bpl.n	8003e36 <_printf_i+0x196>
 8003e32:	6019      	str	r1, [r3, #0]
 8003e34:	e002      	b.n	8003e3c <_printf_i+0x19c>
 8003e36:	066a      	lsls	r2, r5, #25
 8003e38:	d5fb      	bpl.n	8003e32 <_printf_i+0x192>
 8003e3a:	8019      	strh	r1, [r3, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	4665      	mov	r5, ip
 8003e42:	e7b9      	b.n	8003db8 <_printf_i+0x118>
 8003e44:	6813      	ldr	r3, [r2, #0]
 8003e46:	1d19      	adds	r1, r3, #4
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	681d      	ldr	r5, [r3, #0]
 8003e4c:	6862      	ldr	r2, [r4, #4]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4628      	mov	r0, r5
 8003e52:	f7fc f9e5 	bl	8000220 <memchr>
 8003e56:	b108      	cbz	r0, 8003e5c <_printf_i+0x1bc>
 8003e58:	1b40      	subs	r0, r0, r5
 8003e5a:	6060      	str	r0, [r4, #4]
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	6123      	str	r3, [r4, #16]
 8003e60:	2300      	movs	r3, #0
 8003e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e66:	e7a7      	b.n	8003db8 <_printf_i+0x118>
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	462a      	mov	r2, r5
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	4630      	mov	r0, r6
 8003e70:	47c0      	blx	r8
 8003e72:	3001      	adds	r0, #1
 8003e74:	d0aa      	beq.n	8003dcc <_printf_i+0x12c>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	079b      	lsls	r3, r3, #30
 8003e7a:	d413      	bmi.n	8003ea4 <_printf_i+0x204>
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	4298      	cmp	r0, r3
 8003e82:	bfb8      	it	lt
 8003e84:	4618      	movlt	r0, r3
 8003e86:	e7a3      	b.n	8003dd0 <_printf_i+0x130>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	464a      	mov	r2, r9
 8003e8c:	4639      	mov	r1, r7
 8003e8e:	4630      	mov	r0, r6
 8003e90:	47c0      	blx	r8
 8003e92:	3001      	adds	r0, #1
 8003e94:	d09a      	beq.n	8003dcc <_printf_i+0x12c>
 8003e96:	3501      	adds	r5, #1
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	9a03      	ldr	r2, [sp, #12]
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	42ab      	cmp	r3, r5
 8003ea0:	dcf2      	bgt.n	8003e88 <_printf_i+0x1e8>
 8003ea2:	e7eb      	b.n	8003e7c <_printf_i+0x1dc>
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	f104 0919 	add.w	r9, r4, #25
 8003eaa:	e7f5      	b.n	8003e98 <_printf_i+0x1f8>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ac      	bne.n	8003e0a <_printf_i+0x16a>
 8003eb0:	7803      	ldrb	r3, [r0, #0]
 8003eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eba:	e76c      	b.n	8003d96 <_printf_i+0xf6>
 8003ebc:	08004ed5 	.word	0x08004ed5
 8003ec0:	08004ee6 	.word	0x08004ee6

08003ec4 <__svfiscanf_r>:
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003ecc:	460c      	mov	r4, r1
 8003ece:	2100      	movs	r1, #0
 8003ed0:	9144      	str	r1, [sp, #272]	; 0x110
 8003ed2:	9145      	str	r1, [sp, #276]	; 0x114
 8003ed4:	499f      	ldr	r1, [pc, #636]	; (8004154 <__svfiscanf_r+0x290>)
 8003ed6:	91a0      	str	r1, [sp, #640]	; 0x280
 8003ed8:	f10d 0804 	add.w	r8, sp, #4
 8003edc:	499e      	ldr	r1, [pc, #632]	; (8004158 <__svfiscanf_r+0x294>)
 8003ede:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800415c <__svfiscanf_r+0x298>
 8003ee2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	4692      	mov	sl, r2
 8003eea:	91a1      	str	r1, [sp, #644]	; 0x284
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	270a      	movs	r7, #10
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 812a 	beq.w	800414e <__svfiscanf_r+0x28a>
 8003efa:	4655      	mov	r5, sl
 8003efc:	f000 fe9a 	bl	8004c34 <__locale_ctype_ptr>
 8003f00:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003f04:	4458      	add	r0, fp
 8003f06:	7843      	ldrb	r3, [r0, #1]
 8003f08:	f013 0308 	ands.w	r3, r3, #8
 8003f0c:	d01c      	beq.n	8003f48 <__svfiscanf_r+0x84>
 8003f0e:	6863      	ldr	r3, [r4, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dd12      	ble.n	8003f3a <__svfiscanf_r+0x76>
 8003f14:	f000 fe8e 	bl	8004c34 <__locale_ctype_ptr>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	4410      	add	r0, r2
 8003f1e:	7842      	ldrb	r2, [r0, #1]
 8003f20:	0712      	lsls	r2, r2, #28
 8003f22:	d401      	bmi.n	8003f28 <__svfiscanf_r+0x64>
 8003f24:	46aa      	mov	sl, r5
 8003f26:	e7e3      	b.n	8003ef0 <__svfiscanf_r+0x2c>
 8003f28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f2a:	3201      	adds	r2, #1
 8003f2c:	9245      	str	r2, [sp, #276]	; 0x114
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	3301      	adds	r3, #1
 8003f32:	3a01      	subs	r2, #1
 8003f34:	6062      	str	r2, [r4, #4]
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	e7e9      	b.n	8003f0e <__svfiscanf_r+0x4a>
 8003f3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4630      	mov	r0, r6
 8003f40:	4798      	blx	r3
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d0e6      	beq.n	8003f14 <__svfiscanf_r+0x50>
 8003f46:	e7ed      	b.n	8003f24 <__svfiscanf_r+0x60>
 8003f48:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003f4c:	f040 8082 	bne.w	8004054 <__svfiscanf_r+0x190>
 8003f50:	9343      	str	r3, [sp, #268]	; 0x10c
 8003f52:	9341      	str	r3, [sp, #260]	; 0x104
 8003f54:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003f58:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5a:	d103      	bne.n	8003f64 <__svfiscanf_r+0xa0>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	9341      	str	r3, [sp, #260]	; 0x104
 8003f60:	f10a 0502 	add.w	r5, sl, #2
 8003f64:	46aa      	mov	sl, r5
 8003f66:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003f6a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003f6e:	2a09      	cmp	r2, #9
 8003f70:	d922      	bls.n	8003fb8 <__svfiscanf_r+0xf4>
 8003f72:	2203      	movs	r2, #3
 8003f74:	4879      	ldr	r0, [pc, #484]	; (800415c <__svfiscanf_r+0x298>)
 8003f76:	f7fc f953 	bl	8000220 <memchr>
 8003f7a:	b138      	cbz	r0, 8003f8c <__svfiscanf_r+0xc8>
 8003f7c:	eba0 0309 	sub.w	r3, r0, r9
 8003f80:	2001      	movs	r0, #1
 8003f82:	4098      	lsls	r0, r3
 8003f84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f86:	4318      	orrs	r0, r3
 8003f88:	9041      	str	r0, [sp, #260]	; 0x104
 8003f8a:	46aa      	mov	sl, r5
 8003f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f90:	2b67      	cmp	r3, #103	; 0x67
 8003f92:	f10a 0501 	add.w	r5, sl, #1
 8003f96:	d82b      	bhi.n	8003ff0 <__svfiscanf_r+0x12c>
 8003f98:	2b65      	cmp	r3, #101	; 0x65
 8003f9a:	f080 809f 	bcs.w	80040dc <__svfiscanf_r+0x218>
 8003f9e:	2b47      	cmp	r3, #71	; 0x47
 8003fa0:	d810      	bhi.n	8003fc4 <__svfiscanf_r+0x100>
 8003fa2:	2b45      	cmp	r3, #69	; 0x45
 8003fa4:	f080 809a 	bcs.w	80040dc <__svfiscanf_r+0x218>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d06c      	beq.n	8004086 <__svfiscanf_r+0x1c2>
 8003fac:	2b25      	cmp	r3, #37	; 0x25
 8003fae:	d051      	beq.n	8004054 <__svfiscanf_r+0x190>
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8003fb4:	9742      	str	r7, [sp, #264]	; 0x108
 8003fb6:	e027      	b.n	8004008 <__svfiscanf_r+0x144>
 8003fb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003fba:	fb07 1303 	mla	r3, r7, r3, r1
 8003fbe:	3b30      	subs	r3, #48	; 0x30
 8003fc0:	9343      	str	r3, [sp, #268]	; 0x10c
 8003fc2:	e7cf      	b.n	8003f64 <__svfiscanf_r+0xa0>
 8003fc4:	2b5b      	cmp	r3, #91	; 0x5b
 8003fc6:	d06a      	beq.n	800409e <__svfiscanf_r+0x1da>
 8003fc8:	d80c      	bhi.n	8003fe4 <__svfiscanf_r+0x120>
 8003fca:	2b58      	cmp	r3, #88	; 0x58
 8003fcc:	d1f0      	bne.n	8003fb0 <__svfiscanf_r+0xec>
 8003fce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd4:	9241      	str	r2, [sp, #260]	; 0x104
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	9242      	str	r2, [sp, #264]	; 0x108
 8003fda:	2b6e      	cmp	r3, #110	; 0x6e
 8003fdc:	bf8c      	ite	hi
 8003fde:	2304      	movhi	r3, #4
 8003fe0:	2303      	movls	r3, #3
 8003fe2:	e010      	b.n	8004006 <__svfiscanf_r+0x142>
 8003fe4:	2b63      	cmp	r3, #99	; 0x63
 8003fe6:	d065      	beq.n	80040b4 <__svfiscanf_r+0x1f0>
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d1e1      	bne.n	8003fb0 <__svfiscanf_r+0xec>
 8003fec:	9742      	str	r7, [sp, #264]	; 0x108
 8003fee:	e7f4      	b.n	8003fda <__svfiscanf_r+0x116>
 8003ff0:	2b70      	cmp	r3, #112	; 0x70
 8003ff2:	d04b      	beq.n	800408c <__svfiscanf_r+0x1c8>
 8003ff4:	d826      	bhi.n	8004044 <__svfiscanf_r+0x180>
 8003ff6:	2b6e      	cmp	r3, #110	; 0x6e
 8003ff8:	d062      	beq.n	80040c0 <__svfiscanf_r+0x1fc>
 8003ffa:	d84c      	bhi.n	8004096 <__svfiscanf_r+0x1d2>
 8003ffc:	2b69      	cmp	r3, #105	; 0x69
 8003ffe:	d1d7      	bne.n	8003fb0 <__svfiscanf_r+0xec>
 8004000:	2300      	movs	r3, #0
 8004002:	9342      	str	r3, [sp, #264]	; 0x108
 8004004:	2303      	movs	r3, #3
 8004006:	9347      	str	r3, [sp, #284]	; 0x11c
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dd68      	ble.n	80040e0 <__svfiscanf_r+0x21c>
 800400e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004010:	0659      	lsls	r1, r3, #25
 8004012:	d407      	bmi.n	8004024 <__svfiscanf_r+0x160>
 8004014:	f000 fe0e 	bl	8004c34 <__locale_ctype_ptr>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	4410      	add	r0, r2
 800401e:	7842      	ldrb	r2, [r0, #1]
 8004020:	0712      	lsls	r2, r2, #28
 8004022:	d464      	bmi.n	80040ee <__svfiscanf_r+0x22a>
 8004024:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004026:	2b02      	cmp	r3, #2
 8004028:	dc73      	bgt.n	8004112 <__svfiscanf_r+0x24e>
 800402a:	466b      	mov	r3, sp
 800402c:	4622      	mov	r2, r4
 800402e:	a941      	add	r1, sp, #260	; 0x104
 8004030:	4630      	mov	r0, r6
 8004032:	f000 f8bf 	bl	80041b4 <_scanf_chars>
 8004036:	2801      	cmp	r0, #1
 8004038:	f000 8089 	beq.w	800414e <__svfiscanf_r+0x28a>
 800403c:	2802      	cmp	r0, #2
 800403e:	f47f af71 	bne.w	8003f24 <__svfiscanf_r+0x60>
 8004042:	e01d      	b.n	8004080 <__svfiscanf_r+0x1bc>
 8004044:	2b75      	cmp	r3, #117	; 0x75
 8004046:	d0d1      	beq.n	8003fec <__svfiscanf_r+0x128>
 8004048:	2b78      	cmp	r3, #120	; 0x78
 800404a:	d0c0      	beq.n	8003fce <__svfiscanf_r+0x10a>
 800404c:	2b73      	cmp	r3, #115	; 0x73
 800404e:	d1af      	bne.n	8003fb0 <__svfiscanf_r+0xec>
 8004050:	2302      	movs	r3, #2
 8004052:	e7d8      	b.n	8004006 <__svfiscanf_r+0x142>
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dd0c      	ble.n	8004074 <__svfiscanf_r+0x1b0>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	455a      	cmp	r2, fp
 8004060:	d175      	bne.n	800414e <__svfiscanf_r+0x28a>
 8004062:	3301      	adds	r3, #1
 8004064:	6862      	ldr	r2, [r4, #4]
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800406a:	3a01      	subs	r2, #1
 800406c:	3301      	adds	r3, #1
 800406e:	6062      	str	r2, [r4, #4]
 8004070:	9345      	str	r3, [sp, #276]	; 0x114
 8004072:	e757      	b.n	8003f24 <__svfiscanf_r+0x60>
 8004074:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004076:	4621      	mov	r1, r4
 8004078:	4630      	mov	r0, r6
 800407a:	4798      	blx	r3
 800407c:	2800      	cmp	r0, #0
 800407e:	d0ec      	beq.n	800405a <__svfiscanf_r+0x196>
 8004080:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004082:	2800      	cmp	r0, #0
 8004084:	d159      	bne.n	800413a <__svfiscanf_r+0x276>
 8004086:	f04f 30ff 	mov.w	r0, #4294967295
 800408a:	e05c      	b.n	8004146 <__svfiscanf_r+0x282>
 800408c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800408e:	f042 0220 	orr.w	r2, r2, #32
 8004092:	9241      	str	r2, [sp, #260]	; 0x104
 8004094:	e79b      	b.n	8003fce <__svfiscanf_r+0x10a>
 8004096:	2308      	movs	r3, #8
 8004098:	9342      	str	r3, [sp, #264]	; 0x108
 800409a:	2304      	movs	r3, #4
 800409c:	e7b3      	b.n	8004006 <__svfiscanf_r+0x142>
 800409e:	4629      	mov	r1, r5
 80040a0:	4640      	mov	r0, r8
 80040a2:	f000 fa85 	bl	80045b0 <__sccl>
 80040a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	9341      	str	r3, [sp, #260]	; 0x104
 80040ae:	4605      	mov	r5, r0
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7a8      	b.n	8004006 <__svfiscanf_r+0x142>
 80040b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ba:	9341      	str	r3, [sp, #260]	; 0x104
 80040bc:	2300      	movs	r3, #0
 80040be:	e7a2      	b.n	8004006 <__svfiscanf_r+0x142>
 80040c0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80040c2:	06c3      	lsls	r3, r0, #27
 80040c4:	f53f af2e 	bmi.w	8003f24 <__svfiscanf_r+0x60>
 80040c8:	9b00      	ldr	r3, [sp, #0]
 80040ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	9100      	str	r1, [sp, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	07c0      	lsls	r0, r0, #31
 80040d4:	bf4c      	ite	mi
 80040d6:	801a      	strhmi	r2, [r3, #0]
 80040d8:	601a      	strpl	r2, [r3, #0]
 80040da:	e723      	b.n	8003f24 <__svfiscanf_r+0x60>
 80040dc:	2305      	movs	r3, #5
 80040de:	e792      	b.n	8004006 <__svfiscanf_r+0x142>
 80040e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80040e2:	4621      	mov	r1, r4
 80040e4:	4630      	mov	r0, r6
 80040e6:	4798      	blx	r3
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d090      	beq.n	800400e <__svfiscanf_r+0x14a>
 80040ec:	e7c8      	b.n	8004080 <__svfiscanf_r+0x1bc>
 80040ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040f0:	3201      	adds	r2, #1
 80040f2:	9245      	str	r2, [sp, #276]	; 0x114
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	3a01      	subs	r2, #1
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	6062      	str	r2, [r4, #4]
 80040fc:	dd02      	ble.n	8004104 <__svfiscanf_r+0x240>
 80040fe:	3301      	adds	r3, #1
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	e787      	b.n	8004014 <__svfiscanf_r+0x150>
 8004104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004106:	4621      	mov	r1, r4
 8004108:	4630      	mov	r0, r6
 800410a:	4798      	blx	r3
 800410c:	2800      	cmp	r0, #0
 800410e:	d081      	beq.n	8004014 <__svfiscanf_r+0x150>
 8004110:	e7b6      	b.n	8004080 <__svfiscanf_r+0x1bc>
 8004112:	2b04      	cmp	r3, #4
 8004114:	dc06      	bgt.n	8004124 <__svfiscanf_r+0x260>
 8004116:	466b      	mov	r3, sp
 8004118:	4622      	mov	r2, r4
 800411a:	a941      	add	r1, sp, #260	; 0x104
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f8ad 	bl	800427c <_scanf_i>
 8004122:	e788      	b.n	8004036 <__svfiscanf_r+0x172>
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <__svfiscanf_r+0x29c>)
 8004126:	2b00      	cmp	r3, #0
 8004128:	f43f aefc 	beq.w	8003f24 <__svfiscanf_r+0x60>
 800412c:	466b      	mov	r3, sp
 800412e:	4622      	mov	r2, r4
 8004130:	a941      	add	r1, sp, #260	; 0x104
 8004132:	4630      	mov	r0, r6
 8004134:	f3af 8000 	nop.w
 8004138:	e77d      	b.n	8004036 <__svfiscanf_r+0x172>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004140:	bf18      	it	ne
 8004142:	f04f 30ff 	movne.w	r0, #4294967295
 8004146:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004150:	e7f9      	b.n	8004146 <__svfiscanf_r+0x282>
 8004152:	bf00      	nop
 8004154:	08004941 	.word	0x08004941
 8004158:	08004479 	.word	0x08004479
 800415c:	08004eca 	.word	0x08004eca
 8004160:	00000000 	.word	0x00000000

08004164 <_vfiscanf_r>:
 8004164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	4616      	mov	r6, r2
 800416c:	461f      	mov	r7, r3
 800416e:	4605      	mov	r5, r0
 8004170:	b118      	cbz	r0, 800417a <_vfiscanf_r+0x16>
 8004172:	6983      	ldr	r3, [r0, #24]
 8004174:	b90b      	cbnz	r3, 800417a <_vfiscanf_r+0x16>
 8004176:	f7ff fa23 	bl	80035c0 <__sinit>
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <_vfiscanf_r+0x44>)
 800417c:	429c      	cmp	r4, r3
 800417e:	d108      	bne.n	8004192 <_vfiscanf_r+0x2e>
 8004180:	686c      	ldr	r4, [r5, #4]
 8004182:	463b      	mov	r3, r7
 8004184:	4632      	mov	r2, r6
 8004186:	4621      	mov	r1, r4
 8004188:	4628      	mov	r0, r5
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f7ff be99 	b.w	8003ec4 <__svfiscanf_r>
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <_vfiscanf_r+0x48>)
 8004194:	429c      	cmp	r4, r3
 8004196:	d101      	bne.n	800419c <_vfiscanf_r+0x38>
 8004198:	68ac      	ldr	r4, [r5, #8]
 800419a:	e7f2      	b.n	8004182 <_vfiscanf_r+0x1e>
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <_vfiscanf_r+0x4c>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	bf08      	it	eq
 80041a2:	68ec      	ldreq	r4, [r5, #12]
 80041a4:	e7ed      	b.n	8004182 <_vfiscanf_r+0x1e>
 80041a6:	bf00      	nop
 80041a8:	08004e84 	.word	0x08004e84
 80041ac:	08004ea4 	.word	0x08004ea4
 80041b0:	08004e64 	.word	0x08004e64

080041b4 <_scanf_chars>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	4615      	mov	r5, r2
 80041ba:	688a      	ldr	r2, [r1, #8]
 80041bc:	4680      	mov	r8, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	b932      	cbnz	r2, 80041d0 <_scanf_chars+0x1c>
 80041c2:	698a      	ldr	r2, [r1, #24]
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	bf14      	ite	ne
 80041c8:	f04f 32ff 	movne.w	r2, #4294967295
 80041cc:	2201      	moveq	r2, #1
 80041ce:	608a      	str	r2, [r1, #8]
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	06d1      	lsls	r1, r2, #27
 80041d4:	bf5f      	itttt	pl
 80041d6:	681a      	ldrpl	r2, [r3, #0]
 80041d8:	1d11      	addpl	r1, r2, #4
 80041da:	6019      	strpl	r1, [r3, #0]
 80041dc:	6817      	ldrpl	r7, [r2, #0]
 80041de:	2600      	movs	r6, #0
 80041e0:	69a3      	ldr	r3, [r4, #24]
 80041e2:	b1db      	cbz	r3, 800421c <_scanf_chars+0x68>
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <_scanf_chars+0x44>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	6962      	ldr	r2, [r4, #20]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	b9a3      	cbnz	r3, 800421c <_scanf_chars+0x68>
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	d132      	bne.n	800425c <_scanf_chars+0xa8>
 80041f6:	e006      	b.n	8004206 <_scanf_chars+0x52>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d007      	beq.n	800420c <_scanf_chars+0x58>
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	d12d      	bne.n	800425c <_scanf_chars+0xa8>
 8004200:	69a3      	ldr	r3, [r4, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d12a      	bne.n	800425c <_scanf_chars+0xa8>
 8004206:	2001      	movs	r0, #1
 8004208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420c:	f000 fd12 	bl	8004c34 <__locale_ctype_ptr>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4418      	add	r0, r3
 8004216:	7843      	ldrb	r3, [r0, #1]
 8004218:	071b      	lsls	r3, r3, #28
 800421a:	d4ef      	bmi.n	80041fc <_scanf_chars+0x48>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	06da      	lsls	r2, r3, #27
 8004220:	bf5e      	ittt	pl
 8004222:	682b      	ldrpl	r3, [r5, #0]
 8004224:	781b      	ldrbpl	r3, [r3, #0]
 8004226:	703b      	strbpl	r3, [r7, #0]
 8004228:	682a      	ldr	r2, [r5, #0]
 800422a:	686b      	ldr	r3, [r5, #4]
 800422c:	f102 0201 	add.w	r2, r2, #1
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	68a2      	ldr	r2, [r4, #8]
 8004234:	f103 33ff 	add.w	r3, r3, #4294967295
 8004238:	f102 32ff 	add.w	r2, r2, #4294967295
 800423c:	606b      	str	r3, [r5, #4]
 800423e:	f106 0601 	add.w	r6, r6, #1
 8004242:	bf58      	it	pl
 8004244:	3701      	addpl	r7, #1
 8004246:	60a2      	str	r2, [r4, #8]
 8004248:	b142      	cbz	r2, 800425c <_scanf_chars+0xa8>
 800424a:	2b00      	cmp	r3, #0
 800424c:	dcc8      	bgt.n	80041e0 <_scanf_chars+0x2c>
 800424e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004252:	4629      	mov	r1, r5
 8004254:	4640      	mov	r0, r8
 8004256:	4798      	blx	r3
 8004258:	2800      	cmp	r0, #0
 800425a:	d0c1      	beq.n	80041e0 <_scanf_chars+0x2c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f013 0310 	ands.w	r3, r3, #16
 8004262:	d105      	bne.n	8004270 <_scanf_chars+0xbc>
 8004264:	68e2      	ldr	r2, [r4, #12]
 8004266:	3201      	adds	r2, #1
 8004268:	60e2      	str	r2, [r4, #12]
 800426a:	69a2      	ldr	r2, [r4, #24]
 800426c:	b102      	cbz	r2, 8004270 <_scanf_chars+0xbc>
 800426e:	703b      	strb	r3, [r7, #0]
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	441e      	add	r6, r3
 8004274:	6126      	str	r6, [r4, #16]
 8004276:	2000      	movs	r0, #0
 8004278:	e7c6      	b.n	8004208 <_scanf_chars+0x54>
	...

0800427c <_scanf_i>:
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	469a      	mov	sl, r3
 8004282:	4b74      	ldr	r3, [pc, #464]	; (8004454 <_scanf_i+0x1d8>)
 8004284:	460c      	mov	r4, r1
 8004286:	4683      	mov	fp, r0
 8004288:	4616      	mov	r6, r2
 800428a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800428e:	b087      	sub	sp, #28
 8004290:	ab03      	add	r3, sp, #12
 8004292:	68a7      	ldr	r7, [r4, #8]
 8004294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004298:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <_scanf_i+0x1dc>)
 800429a:	69a1      	ldr	r1, [r4, #24]
 800429c:	4a6f      	ldr	r2, [pc, #444]	; (800445c <_scanf_i+0x1e0>)
 800429e:	2903      	cmp	r1, #3
 80042a0:	bf08      	it	eq
 80042a2:	461a      	moveq	r2, r3
 80042a4:	1e7b      	subs	r3, r7, #1
 80042a6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80042aa:	bf84      	itt	hi
 80042ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80042b0:	60a3      	strhi	r3, [r4, #8]
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80042ba:	bf88      	it	hi
 80042bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80042c0:	f104 091c 	add.w	r9, r4, #28
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bf8c      	ite	hi
 80042c8:	197f      	addhi	r7, r7, r5
 80042ca:	2700      	movls	r7, #0
 80042cc:	464b      	mov	r3, r9
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	6831      	ldr	r1, [r6, #0]
 80042d6:	ab03      	add	r3, sp, #12
 80042d8:	2202      	movs	r2, #2
 80042da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80042de:	7809      	ldrb	r1, [r1, #0]
 80042e0:	f7fb ff9e 	bl	8000220 <memchr>
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	b330      	cbz	r0, 8004336 <_scanf_i+0xba>
 80042e8:	f1b8 0f01 	cmp.w	r8, #1
 80042ec:	d15a      	bne.n	80043a4 <_scanf_i+0x128>
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	b92a      	cbnz	r2, 80042fe <_scanf_i+0x82>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	2108      	movs	r1, #8
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	6061      	str	r1, [r4, #4]
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004304:	6022      	str	r2, [r4, #0]
 8004306:	68a2      	ldr	r2, [r4, #8]
 8004308:	1e51      	subs	r1, r2, #1
 800430a:	60a1      	str	r1, [r4, #8]
 800430c:	b19a      	cbz	r2, 8004336 <_scanf_i+0xba>
 800430e:	6832      	ldr	r2, [r6, #0]
 8004310:	1c51      	adds	r1, r2, #1
 8004312:	6031      	str	r1, [r6, #0]
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	1c5d      	adds	r5, r3, #1
 800431a:	6873      	ldr	r3, [r6, #4]
 800431c:	3b01      	subs	r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	6073      	str	r3, [r6, #4]
 8004322:	dc07      	bgt.n	8004334 <_scanf_i+0xb8>
 8004324:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004328:	4631      	mov	r1, r6
 800432a:	4658      	mov	r0, fp
 800432c:	4798      	blx	r3
 800432e:	2800      	cmp	r0, #0
 8004330:	f040 8086 	bne.w	8004440 <_scanf_i+0x1c4>
 8004334:	462b      	mov	r3, r5
 8004336:	f108 0801 	add.w	r8, r8, #1
 800433a:	f1b8 0f03 	cmp.w	r8, #3
 800433e:	d1c8      	bne.n	80042d2 <_scanf_i+0x56>
 8004340:	6862      	ldr	r2, [r4, #4]
 8004342:	b90a      	cbnz	r2, 8004348 <_scanf_i+0xcc>
 8004344:	220a      	movs	r2, #10
 8004346:	6062      	str	r2, [r4, #4]
 8004348:	6862      	ldr	r2, [r4, #4]
 800434a:	4945      	ldr	r1, [pc, #276]	; (8004460 <_scanf_i+0x1e4>)
 800434c:	6960      	ldr	r0, [r4, #20]
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	1a89      	subs	r1, r1, r2
 8004352:	f000 f92d 	bl	80045b0 <__sccl>
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	461d      	mov	r5, r3
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03a      	beq.n	80043dc <_scanf_i+0x160>
 8004366:	6831      	ldr	r1, [r6, #0]
 8004368:	6960      	ldr	r0, [r4, #20]
 800436a:	f891 c000 	ldrb.w	ip, [r1]
 800436e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004372:	2800      	cmp	r0, #0
 8004374:	d032      	beq.n	80043dc <_scanf_i+0x160>
 8004376:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800437a:	d121      	bne.n	80043c0 <_scanf_i+0x144>
 800437c:	0510      	lsls	r0, r2, #20
 800437e:	d51f      	bpl.n	80043c0 <_scanf_i+0x144>
 8004380:	f108 0801 	add.w	r8, r8, #1
 8004384:	b117      	cbz	r7, 800438c <_scanf_i+0x110>
 8004386:	3301      	adds	r3, #1
 8004388:	3f01      	subs	r7, #1
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	6873      	ldr	r3, [r6, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	6073      	str	r3, [r6, #4]
 8004394:	dd1b      	ble.n	80043ce <_scanf_i+0x152>
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	e7dc      	b.n	800435e <_scanf_i+0xe2>
 80043a4:	f1b8 0f02 	cmp.w	r8, #2
 80043a8:	d1ad      	bne.n	8004306 <_scanf_i+0x8a>
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80043b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043b4:	d1bf      	bne.n	8004336 <_scanf_i+0xba>
 80043b6:	2110      	movs	r1, #16
 80043b8:	6061      	str	r1, [r4, #4]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043be:	e7a1      	b.n	8004304 <_scanf_i+0x88>
 80043c0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80043c4:	6022      	str	r2, [r4, #0]
 80043c6:	780b      	ldrb	r3, [r1, #0]
 80043c8:	702b      	strb	r3, [r5, #0]
 80043ca:	3501      	adds	r5, #1
 80043cc:	e7de      	b.n	800438c <_scanf_i+0x110>
 80043ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043d2:	4631      	mov	r1, r6
 80043d4:	4658      	mov	r0, fp
 80043d6:	4798      	blx	r3
 80043d8:	2800      	cmp	r0, #0
 80043da:	d0df      	beq.n	800439c <_scanf_i+0x120>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	05d9      	lsls	r1, r3, #23
 80043e0:	d50c      	bpl.n	80043fc <_scanf_i+0x180>
 80043e2:	454d      	cmp	r5, r9
 80043e4:	d908      	bls.n	80043f8 <_scanf_i+0x17c>
 80043e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043ee:	4632      	mov	r2, r6
 80043f0:	4658      	mov	r0, fp
 80043f2:	4798      	blx	r3
 80043f4:	1e6f      	subs	r7, r5, #1
 80043f6:	463d      	mov	r5, r7
 80043f8:	454d      	cmp	r5, r9
 80043fa:	d029      	beq.n	8004450 <_scanf_i+0x1d4>
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	f012 0210 	ands.w	r2, r2, #16
 8004402:	d113      	bne.n	800442c <_scanf_i+0x1b0>
 8004404:	702a      	strb	r2, [r5, #0]
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	9e00      	ldr	r6, [sp, #0]
 800440a:	4649      	mov	r1, r9
 800440c:	4658      	mov	r0, fp
 800440e:	47b0      	blx	r6
 8004410:	f8da 3000 	ldr.w	r3, [sl]
 8004414:	6821      	ldr	r1, [r4, #0]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	f8ca 2000 	str.w	r2, [sl]
 800441c:	f011 0f20 	tst.w	r1, #32
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	d010      	beq.n	8004446 <_scanf_i+0x1ca>
 8004424:	6018      	str	r0, [r3, #0]
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60e3      	str	r3, [r4, #12]
 800442c:	eba5 0509 	sub.w	r5, r5, r9
 8004430:	44a8      	add	r8, r5
 8004432:	6925      	ldr	r5, [r4, #16]
 8004434:	4445      	add	r5, r8
 8004436:	6125      	str	r5, [r4, #16]
 8004438:	2000      	movs	r0, #0
 800443a:	b007      	add	sp, #28
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	f04f 0800 	mov.w	r8, #0
 8004444:	e7ca      	b.n	80043dc <_scanf_i+0x160>
 8004446:	07ca      	lsls	r2, r1, #31
 8004448:	bf4c      	ite	mi
 800444a:	8018      	strhmi	r0, [r3, #0]
 800444c:	6018      	strpl	r0, [r3, #0]
 800444e:	e7ea      	b.n	8004426 <_scanf_i+0x1aa>
 8004450:	2001      	movs	r0, #1
 8004452:	e7f2      	b.n	800443a <_scanf_i+0x1be>
 8004454:	08004e14 	.word	0x08004e14
 8004458:	08004791 	.word	0x08004791
 800445c:	080048a9 	.word	0x080048a9
 8004460:	08004f07 	.word	0x08004f07

08004464 <lflush>:
 8004464:	8983      	ldrh	r3, [r0, #12]
 8004466:	f003 0309 	and.w	r3, r3, #9
 800446a:	2b09      	cmp	r3, #9
 800446c:	d101      	bne.n	8004472 <lflush+0xe>
 800446e:	f7ff b855 	b.w	800351c <fflush>
 8004472:	2000      	movs	r0, #0
 8004474:	4770      	bx	lr
	...

08004478 <__srefill_r>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	460c      	mov	r4, r1
 800447c:	4605      	mov	r5, r0
 800447e:	b118      	cbz	r0, 8004488 <__srefill_r+0x10>
 8004480:	6983      	ldr	r3, [r0, #24]
 8004482:	b90b      	cbnz	r3, 8004488 <__srefill_r+0x10>
 8004484:	f7ff f89c 	bl	80035c0 <__sinit>
 8004488:	4b3c      	ldr	r3, [pc, #240]	; (800457c <__srefill_r+0x104>)
 800448a:	429c      	cmp	r4, r3
 800448c:	d10a      	bne.n	80044a4 <__srefill_r+0x2c>
 800448e:	686c      	ldr	r4, [r5, #4]
 8004490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	b293      	uxth	r3, r2
 800449a:	069e      	lsls	r6, r3, #26
 800449c:	d50c      	bpl.n	80044b8 <__srefill_r+0x40>
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	e067      	b.n	8004574 <__srefill_r+0xfc>
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <__srefill_r+0x108>)
 80044a6:	429c      	cmp	r4, r3
 80044a8:	d101      	bne.n	80044ae <__srefill_r+0x36>
 80044aa:	68ac      	ldr	r4, [r5, #8]
 80044ac:	e7f0      	b.n	8004490 <__srefill_r+0x18>
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <__srefill_r+0x10c>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	bf08      	it	eq
 80044b4:	68ec      	ldreq	r4, [r5, #12]
 80044b6:	e7eb      	b.n	8004490 <__srefill_r+0x18>
 80044b8:	0758      	lsls	r0, r3, #29
 80044ba:	d449      	bmi.n	8004550 <__srefill_r+0xd8>
 80044bc:	06d9      	lsls	r1, r3, #27
 80044be:	d405      	bmi.n	80044cc <__srefill_r+0x54>
 80044c0:	2309      	movs	r3, #9
 80044c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	81a2      	strh	r2, [r4, #12]
 80044ca:	e7e8      	b.n	800449e <__srefill_r+0x26>
 80044cc:	071a      	lsls	r2, r3, #28
 80044ce:	d50b      	bpl.n	80044e8 <__srefill_r+0x70>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7fe fff8 	bl	80034c8 <_fflush_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1e0      	bne.n	800449e <__srefill_r+0x26>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	60a0      	str	r0, [r4, #8]
 80044e0:	f023 0308 	bic.w	r3, r3, #8
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	61a0      	str	r0, [r4, #24]
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	b91b      	cbnz	r3, 80044fc <__srefill_r+0x84>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f7ff f92c 	bl	8003754 <__smakebuf_r>
 80044fc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004500:	b2be      	uxth	r6, r7
 8004502:	07b3      	lsls	r3, r6, #30
 8004504:	d00f      	beq.n	8004526 <__srefill_r+0xae>
 8004506:	2301      	movs	r3, #1
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <__srefill_r+0x110>)
 800450c:	491f      	ldr	r1, [pc, #124]	; (800458c <__srefill_r+0x114>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	f006 0609 	and.w	r6, r6, #9
 8004514:	f7ff f8c0 	bl	8003698 <_fwalk>
 8004518:	2e09      	cmp	r6, #9
 800451a:	81a7      	strh	r7, [r4, #12]
 800451c:	d103      	bne.n	8004526 <__srefill_r+0xae>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f7fe ff4b 	bl	80033bc <__sflush_r>
 8004526:	6922      	ldr	r2, [r4, #16]
 8004528:	6022      	str	r2, [r4, #0]
 800452a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800452c:	6963      	ldr	r3, [r4, #20]
 800452e:	6a21      	ldr	r1, [r4, #32]
 8004530:	4628      	mov	r0, r5
 8004532:	47b0      	blx	r6
 8004534:	2800      	cmp	r0, #0
 8004536:	6060      	str	r0, [r4, #4]
 8004538:	dc1d      	bgt.n	8004576 <__srefill_r+0xfe>
 800453a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800453e:	bf17      	itett	ne
 8004540:	2200      	movne	r2, #0
 8004542:	f043 0320 	orreq.w	r3, r3, #32
 8004546:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800454a:	6062      	strne	r2, [r4, #4]
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	e7a6      	b.n	800449e <__srefill_r+0x26>
 8004550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004552:	2900      	cmp	r1, #0
 8004554:	d0cc      	beq.n	80044f0 <__srefill_r+0x78>
 8004556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800455a:	4299      	cmp	r1, r3
 800455c:	d002      	beq.n	8004564 <__srefill_r+0xec>
 800455e:	4628      	mov	r0, r5
 8004560:	f7ff f940 	bl	80037e4 <_free_r>
 8004564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	2000      	movs	r0, #0
 800456a:	6360      	str	r0, [r4, #52]	; 0x34
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0bf      	beq.n	80044f0 <__srefill_r+0x78>
 8004570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004576:	2000      	movs	r0, #0
 8004578:	e7fc      	b.n	8004574 <__srefill_r+0xfc>
 800457a:	bf00      	nop
 800457c:	08004e84 	.word	0x08004e84
 8004580:	08004ea4 	.word	0x08004ea4
 8004584:	08004e64 	.word	0x08004e64
 8004588:	08004e60 	.word	0x08004e60
 800458c:	08004465 	.word	0x08004465

08004590 <_sbrk_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4c06      	ldr	r4, [pc, #24]	; (80045ac <_sbrk_r+0x1c>)
 8004594:	2300      	movs	r3, #0
 8004596:	4605      	mov	r5, r0
 8004598:	4608      	mov	r0, r1
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	f7fc faa0 	bl	8000ae0 <_sbrk>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_sbrk_r+0x1a>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_sbrk_r+0x1a>
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	2000029c 	.word	0x2000029c

080045b0 <__sccl>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	780b      	ldrb	r3, [r1, #0]
 80045b4:	2b5e      	cmp	r3, #94	; 0x5e
 80045b6:	bf13      	iteet	ne
 80045b8:	1c4a      	addne	r2, r1, #1
 80045ba:	1c8a      	addeq	r2, r1, #2
 80045bc:	784b      	ldrbeq	r3, [r1, #1]
 80045be:	2100      	movne	r1, #0
 80045c0:	bf08      	it	eq
 80045c2:	2101      	moveq	r1, #1
 80045c4:	1e44      	subs	r4, r0, #1
 80045c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80045ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80045ce:	42ac      	cmp	r4, r5
 80045d0:	d1fb      	bne.n	80045ca <__sccl+0x1a>
 80045d2:	b913      	cbnz	r3, 80045da <__sccl+0x2a>
 80045d4:	3a01      	subs	r2, #1
 80045d6:	4610      	mov	r0, r2
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	f081 0401 	eor.w	r4, r1, #1
 80045de:	54c4      	strb	r4, [r0, r3]
 80045e0:	1c51      	adds	r1, r2, #1
 80045e2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80045e6:	2d2d      	cmp	r5, #45	; 0x2d
 80045e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80045ec:	460a      	mov	r2, r1
 80045ee:	d006      	beq.n	80045fe <__sccl+0x4e>
 80045f0:	2d5d      	cmp	r5, #93	; 0x5d
 80045f2:	d0f0      	beq.n	80045d6 <__sccl+0x26>
 80045f4:	b90d      	cbnz	r5, 80045fa <__sccl+0x4a>
 80045f6:	4632      	mov	r2, r6
 80045f8:	e7ed      	b.n	80045d6 <__sccl+0x26>
 80045fa:	462b      	mov	r3, r5
 80045fc:	e7ef      	b.n	80045de <__sccl+0x2e>
 80045fe:	780e      	ldrb	r6, [r1, #0]
 8004600:	2e5d      	cmp	r6, #93	; 0x5d
 8004602:	d0fa      	beq.n	80045fa <__sccl+0x4a>
 8004604:	42b3      	cmp	r3, r6
 8004606:	dcf8      	bgt.n	80045fa <__sccl+0x4a>
 8004608:	3301      	adds	r3, #1
 800460a:	429e      	cmp	r6, r3
 800460c:	54c4      	strb	r4, [r0, r3]
 800460e:	dcfb      	bgt.n	8004608 <__sccl+0x58>
 8004610:	3102      	adds	r1, #2
 8004612:	e7e6      	b.n	80045e2 <__sccl+0x32>

08004614 <__sread>:
 8004614:	b510      	push	{r4, lr}
 8004616:	460c      	mov	r4, r1
 8004618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461c:	f000 fb70 	bl	8004d00 <_read_r>
 8004620:	2800      	cmp	r0, #0
 8004622:	bfab      	itete	ge
 8004624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004626:	89a3      	ldrhlt	r3, [r4, #12]
 8004628:	181b      	addge	r3, r3, r0
 800462a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800462e:	bfac      	ite	ge
 8004630:	6563      	strge	r3, [r4, #84]	; 0x54
 8004632:	81a3      	strhlt	r3, [r4, #12]
 8004634:	bd10      	pop	{r4, pc}

08004636 <__swrite>:
 8004636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	461f      	mov	r7, r3
 800463c:	898b      	ldrh	r3, [r1, #12]
 800463e:	05db      	lsls	r3, r3, #23
 8004640:	4605      	mov	r5, r0
 8004642:	460c      	mov	r4, r1
 8004644:	4616      	mov	r6, r2
 8004646:	d505      	bpl.n	8004654 <__swrite+0x1e>
 8004648:	2302      	movs	r3, #2
 800464a:	2200      	movs	r2, #0
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	f000 fafe 	bl	8004c50 <_lseek_r>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800465a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	4632      	mov	r2, r6
 8004662:	463b      	mov	r3, r7
 8004664:	4628      	mov	r0, r5
 8004666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466a:	f000 ba2d 	b.w	8004ac8 <_write_r>

0800466e <__sseek>:
 800466e:	b510      	push	{r4, lr}
 8004670:	460c      	mov	r4, r1
 8004672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004676:	f000 faeb 	bl	8004c50 <_lseek_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	bf15      	itete	ne
 8004680:	6560      	strne	r0, [r4, #84]	; 0x54
 8004682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800468a:	81a3      	strheq	r3, [r4, #12]
 800468c:	bf18      	it	ne
 800468e:	81a3      	strhne	r3, [r4, #12]
 8004690:	bd10      	pop	{r4, pc}

08004692 <__sclose>:
 8004692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004696:	f000 ba97 	b.w	8004bc8 <_close_r>

0800469a <_strtol_l.isra.0>:
 800469a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469e:	4680      	mov	r8, r0
 80046a0:	4689      	mov	r9, r1
 80046a2:	4692      	mov	sl, r2
 80046a4:	461e      	mov	r6, r3
 80046a6:	460f      	mov	r7, r1
 80046a8:	463d      	mov	r5, r7
 80046aa:	9808      	ldr	r0, [sp, #32]
 80046ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046b0:	f000 fabc 	bl	8004c2c <__locale_ctype_ptr_l>
 80046b4:	4420      	add	r0, r4
 80046b6:	7843      	ldrb	r3, [r0, #1]
 80046b8:	f013 0308 	ands.w	r3, r3, #8
 80046bc:	d132      	bne.n	8004724 <_strtol_l.isra.0+0x8a>
 80046be:	2c2d      	cmp	r4, #45	; 0x2d
 80046c0:	d132      	bne.n	8004728 <_strtol_l.isra.0+0x8e>
 80046c2:	787c      	ldrb	r4, [r7, #1]
 80046c4:	1cbd      	adds	r5, r7, #2
 80046c6:	2201      	movs	r2, #1
 80046c8:	2e00      	cmp	r6, #0
 80046ca:	d05d      	beq.n	8004788 <_strtol_l.isra.0+0xee>
 80046cc:	2e10      	cmp	r6, #16
 80046ce:	d109      	bne.n	80046e4 <_strtol_l.isra.0+0x4a>
 80046d0:	2c30      	cmp	r4, #48	; 0x30
 80046d2:	d107      	bne.n	80046e4 <_strtol_l.isra.0+0x4a>
 80046d4:	782b      	ldrb	r3, [r5, #0]
 80046d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80046da:	2b58      	cmp	r3, #88	; 0x58
 80046dc:	d14f      	bne.n	800477e <_strtol_l.isra.0+0xe4>
 80046de:	786c      	ldrb	r4, [r5, #1]
 80046e0:	2610      	movs	r6, #16
 80046e2:	3502      	adds	r5, #2
 80046e4:	2a00      	cmp	r2, #0
 80046e6:	bf14      	ite	ne
 80046e8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80046ec:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80046f0:	2700      	movs	r7, #0
 80046f2:	fbb1 fcf6 	udiv	ip, r1, r6
 80046f6:	4638      	mov	r0, r7
 80046f8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80046fc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004700:	2b09      	cmp	r3, #9
 8004702:	d817      	bhi.n	8004734 <_strtol_l.isra.0+0x9a>
 8004704:	461c      	mov	r4, r3
 8004706:	42a6      	cmp	r6, r4
 8004708:	dd23      	ble.n	8004752 <_strtol_l.isra.0+0xb8>
 800470a:	1c7b      	adds	r3, r7, #1
 800470c:	d007      	beq.n	800471e <_strtol_l.isra.0+0x84>
 800470e:	4584      	cmp	ip, r0
 8004710:	d31c      	bcc.n	800474c <_strtol_l.isra.0+0xb2>
 8004712:	d101      	bne.n	8004718 <_strtol_l.isra.0+0x7e>
 8004714:	45a6      	cmp	lr, r4
 8004716:	db19      	blt.n	800474c <_strtol_l.isra.0+0xb2>
 8004718:	fb00 4006 	mla	r0, r0, r6, r4
 800471c:	2701      	movs	r7, #1
 800471e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004722:	e7eb      	b.n	80046fc <_strtol_l.isra.0+0x62>
 8004724:	462f      	mov	r7, r5
 8004726:	e7bf      	b.n	80046a8 <_strtol_l.isra.0+0xe>
 8004728:	2c2b      	cmp	r4, #43	; 0x2b
 800472a:	bf04      	itt	eq
 800472c:	1cbd      	addeq	r5, r7, #2
 800472e:	787c      	ldrbeq	r4, [r7, #1]
 8004730:	461a      	mov	r2, r3
 8004732:	e7c9      	b.n	80046c8 <_strtol_l.isra.0+0x2e>
 8004734:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004738:	2b19      	cmp	r3, #25
 800473a:	d801      	bhi.n	8004740 <_strtol_l.isra.0+0xa6>
 800473c:	3c37      	subs	r4, #55	; 0x37
 800473e:	e7e2      	b.n	8004706 <_strtol_l.isra.0+0x6c>
 8004740:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004744:	2b19      	cmp	r3, #25
 8004746:	d804      	bhi.n	8004752 <_strtol_l.isra.0+0xb8>
 8004748:	3c57      	subs	r4, #87	; 0x57
 800474a:	e7dc      	b.n	8004706 <_strtol_l.isra.0+0x6c>
 800474c:	f04f 37ff 	mov.w	r7, #4294967295
 8004750:	e7e5      	b.n	800471e <_strtol_l.isra.0+0x84>
 8004752:	1c7b      	adds	r3, r7, #1
 8004754:	d108      	bne.n	8004768 <_strtol_l.isra.0+0xce>
 8004756:	2322      	movs	r3, #34	; 0x22
 8004758:	f8c8 3000 	str.w	r3, [r8]
 800475c:	4608      	mov	r0, r1
 800475e:	f1ba 0f00 	cmp.w	sl, #0
 8004762:	d107      	bne.n	8004774 <_strtol_l.isra.0+0xda>
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	b102      	cbz	r2, 800476c <_strtol_l.isra.0+0xd2>
 800476a:	4240      	negs	r0, r0
 800476c:	f1ba 0f00 	cmp.w	sl, #0
 8004770:	d0f8      	beq.n	8004764 <_strtol_l.isra.0+0xca>
 8004772:	b10f      	cbz	r7, 8004778 <_strtol_l.isra.0+0xde>
 8004774:	f105 39ff 	add.w	r9, r5, #4294967295
 8004778:	f8ca 9000 	str.w	r9, [sl]
 800477c:	e7f2      	b.n	8004764 <_strtol_l.isra.0+0xca>
 800477e:	2430      	movs	r4, #48	; 0x30
 8004780:	2e00      	cmp	r6, #0
 8004782:	d1af      	bne.n	80046e4 <_strtol_l.isra.0+0x4a>
 8004784:	2608      	movs	r6, #8
 8004786:	e7ad      	b.n	80046e4 <_strtol_l.isra.0+0x4a>
 8004788:	2c30      	cmp	r4, #48	; 0x30
 800478a:	d0a3      	beq.n	80046d4 <_strtol_l.isra.0+0x3a>
 800478c:	260a      	movs	r6, #10
 800478e:	e7a9      	b.n	80046e4 <_strtol_l.isra.0+0x4a>

08004790 <_strtol_r>:
 8004790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004792:	4c06      	ldr	r4, [pc, #24]	; (80047ac <_strtol_r+0x1c>)
 8004794:	4d06      	ldr	r5, [pc, #24]	; (80047b0 <_strtol_r+0x20>)
 8004796:	6824      	ldr	r4, [r4, #0]
 8004798:	6a24      	ldr	r4, [r4, #32]
 800479a:	2c00      	cmp	r4, #0
 800479c:	bf08      	it	eq
 800479e:	462c      	moveq	r4, r5
 80047a0:	9400      	str	r4, [sp, #0]
 80047a2:	f7ff ff7a 	bl	800469a <_strtol_l.isra.0>
 80047a6:	b003      	add	sp, #12
 80047a8:	bd30      	pop	{r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	20000010 	.word	0x20000010
 80047b0:	20000074 	.word	0x20000074

080047b4 <_strtoul_l.isra.0>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	4680      	mov	r8, r0
 80047ba:	4689      	mov	r9, r1
 80047bc:	4692      	mov	sl, r2
 80047be:	461e      	mov	r6, r3
 80047c0:	460f      	mov	r7, r1
 80047c2:	463d      	mov	r5, r7
 80047c4:	9808      	ldr	r0, [sp, #32]
 80047c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047ca:	f000 fa2f 	bl	8004c2c <__locale_ctype_ptr_l>
 80047ce:	4420      	add	r0, r4
 80047d0:	7843      	ldrb	r3, [r0, #1]
 80047d2:	f013 0308 	ands.w	r3, r3, #8
 80047d6:	d130      	bne.n	800483a <_strtoul_l.isra.0+0x86>
 80047d8:	2c2d      	cmp	r4, #45	; 0x2d
 80047da:	d130      	bne.n	800483e <_strtoul_l.isra.0+0x8a>
 80047dc:	787c      	ldrb	r4, [r7, #1]
 80047de:	1cbd      	adds	r5, r7, #2
 80047e0:	2101      	movs	r1, #1
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	d05c      	beq.n	80048a0 <_strtoul_l.isra.0+0xec>
 80047e6:	2e10      	cmp	r6, #16
 80047e8:	d109      	bne.n	80047fe <_strtoul_l.isra.0+0x4a>
 80047ea:	2c30      	cmp	r4, #48	; 0x30
 80047ec:	d107      	bne.n	80047fe <_strtoul_l.isra.0+0x4a>
 80047ee:	782b      	ldrb	r3, [r5, #0]
 80047f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80047f4:	2b58      	cmp	r3, #88	; 0x58
 80047f6:	d14e      	bne.n	8004896 <_strtoul_l.isra.0+0xe2>
 80047f8:	786c      	ldrb	r4, [r5, #1]
 80047fa:	2610      	movs	r6, #16
 80047fc:	3502      	adds	r5, #2
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	2300      	movs	r3, #0
 8004804:	fbb2 f2f6 	udiv	r2, r2, r6
 8004808:	fb06 fc02 	mul.w	ip, r6, r2
 800480c:	ea6f 0c0c 	mvn.w	ip, ip
 8004810:	4618      	mov	r0, r3
 8004812:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004816:	2f09      	cmp	r7, #9
 8004818:	d817      	bhi.n	800484a <_strtoul_l.isra.0+0x96>
 800481a:	463c      	mov	r4, r7
 800481c:	42a6      	cmp	r6, r4
 800481e:	dd23      	ble.n	8004868 <_strtoul_l.isra.0+0xb4>
 8004820:	2b00      	cmp	r3, #0
 8004822:	db1e      	blt.n	8004862 <_strtoul_l.isra.0+0xae>
 8004824:	4282      	cmp	r2, r0
 8004826:	d31c      	bcc.n	8004862 <_strtoul_l.isra.0+0xae>
 8004828:	d101      	bne.n	800482e <_strtoul_l.isra.0+0x7a>
 800482a:	45a4      	cmp	ip, r4
 800482c:	db19      	blt.n	8004862 <_strtoul_l.isra.0+0xae>
 800482e:	fb00 4006 	mla	r0, r0, r6, r4
 8004832:	2301      	movs	r3, #1
 8004834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004838:	e7eb      	b.n	8004812 <_strtoul_l.isra.0+0x5e>
 800483a:	462f      	mov	r7, r5
 800483c:	e7c1      	b.n	80047c2 <_strtoul_l.isra.0+0xe>
 800483e:	2c2b      	cmp	r4, #43	; 0x2b
 8004840:	bf04      	itt	eq
 8004842:	1cbd      	addeq	r5, r7, #2
 8004844:	787c      	ldrbeq	r4, [r7, #1]
 8004846:	4619      	mov	r1, r3
 8004848:	e7cb      	b.n	80047e2 <_strtoul_l.isra.0+0x2e>
 800484a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800484e:	2f19      	cmp	r7, #25
 8004850:	d801      	bhi.n	8004856 <_strtoul_l.isra.0+0xa2>
 8004852:	3c37      	subs	r4, #55	; 0x37
 8004854:	e7e2      	b.n	800481c <_strtoul_l.isra.0+0x68>
 8004856:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800485a:	2f19      	cmp	r7, #25
 800485c:	d804      	bhi.n	8004868 <_strtoul_l.isra.0+0xb4>
 800485e:	3c57      	subs	r4, #87	; 0x57
 8004860:	e7dc      	b.n	800481c <_strtoul_l.isra.0+0x68>
 8004862:	f04f 33ff 	mov.w	r3, #4294967295
 8004866:	e7e5      	b.n	8004834 <_strtoul_l.isra.0+0x80>
 8004868:	2b00      	cmp	r3, #0
 800486a:	da09      	bge.n	8004880 <_strtoul_l.isra.0+0xcc>
 800486c:	2322      	movs	r3, #34	; 0x22
 800486e:	f8c8 3000 	str.w	r3, [r8]
 8004872:	f04f 30ff 	mov.w	r0, #4294967295
 8004876:	f1ba 0f00 	cmp.w	sl, #0
 800487a:	d107      	bne.n	800488c <_strtoul_l.isra.0+0xd8>
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	b101      	cbz	r1, 8004884 <_strtoul_l.isra.0+0xd0>
 8004882:	4240      	negs	r0, r0
 8004884:	f1ba 0f00 	cmp.w	sl, #0
 8004888:	d0f8      	beq.n	800487c <_strtoul_l.isra.0+0xc8>
 800488a:	b10b      	cbz	r3, 8004890 <_strtoul_l.isra.0+0xdc>
 800488c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004890:	f8ca 9000 	str.w	r9, [sl]
 8004894:	e7f2      	b.n	800487c <_strtoul_l.isra.0+0xc8>
 8004896:	2430      	movs	r4, #48	; 0x30
 8004898:	2e00      	cmp	r6, #0
 800489a:	d1b0      	bne.n	80047fe <_strtoul_l.isra.0+0x4a>
 800489c:	2608      	movs	r6, #8
 800489e:	e7ae      	b.n	80047fe <_strtoul_l.isra.0+0x4a>
 80048a0:	2c30      	cmp	r4, #48	; 0x30
 80048a2:	d0a4      	beq.n	80047ee <_strtoul_l.isra.0+0x3a>
 80048a4:	260a      	movs	r6, #10
 80048a6:	e7aa      	b.n	80047fe <_strtoul_l.isra.0+0x4a>

080048a8 <_strtoul_r>:
 80048a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048aa:	4c06      	ldr	r4, [pc, #24]	; (80048c4 <_strtoul_r+0x1c>)
 80048ac:	4d06      	ldr	r5, [pc, #24]	; (80048c8 <_strtoul_r+0x20>)
 80048ae:	6824      	ldr	r4, [r4, #0]
 80048b0:	6a24      	ldr	r4, [r4, #32]
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	bf08      	it	eq
 80048b6:	462c      	moveq	r4, r5
 80048b8:	9400      	str	r4, [sp, #0]
 80048ba:	f7ff ff7b 	bl	80047b4 <_strtoul_l.isra.0>
 80048be:	b003      	add	sp, #12
 80048c0:	bd30      	pop	{r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	20000010 	.word	0x20000010
 80048c8:	20000074 	.word	0x20000074

080048cc <__submore>:
 80048cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	460c      	mov	r4, r1
 80048d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80048d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d8:	4299      	cmp	r1, r3
 80048da:	d11d      	bne.n	8004918 <__submore+0x4c>
 80048dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048e0:	f7fe ffce 	bl	8003880 <_malloc_r>
 80048e4:	b918      	cbnz	r0, 80048ee <__submore+0x22>
 80048e6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80048f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80048f8:	6360      	str	r0, [r4, #52]	; 0x34
 80048fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80048fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004902:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004906:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800490a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800490e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004912:	6020      	str	r0, [r4, #0]
 8004914:	2000      	movs	r0, #0
 8004916:	e7e8      	b.n	80048ea <__submore+0x1e>
 8004918:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800491a:	0077      	lsls	r7, r6, #1
 800491c:	463a      	mov	r2, r7
 800491e:	f000 f9c8 	bl	8004cb2 <_realloc_r>
 8004922:	4605      	mov	r5, r0
 8004924:	2800      	cmp	r0, #0
 8004926:	d0de      	beq.n	80048e6 <__submore+0x1a>
 8004928:	eb00 0806 	add.w	r8, r0, r6
 800492c:	4601      	mov	r1, r0
 800492e:	4632      	mov	r2, r6
 8004930:	4640      	mov	r0, r8
 8004932:	f000 f9b1 	bl	8004c98 <memcpy>
 8004936:	f8c4 8000 	str.w	r8, [r4]
 800493a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800493e:	e7e9      	b.n	8004914 <__submore+0x48>

08004940 <_ungetc_r>:
 8004940:	1c4b      	adds	r3, r1, #1
 8004942:	b570      	push	{r4, r5, r6, lr}
 8004944:	4606      	mov	r6, r0
 8004946:	460d      	mov	r5, r1
 8004948:	4614      	mov	r4, r2
 800494a:	d103      	bne.n	8004954 <_ungetc_r+0x14>
 800494c:	f04f 35ff 	mov.w	r5, #4294967295
 8004950:	4628      	mov	r0, r5
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	b118      	cbz	r0, 800495e <_ungetc_r+0x1e>
 8004956:	6983      	ldr	r3, [r0, #24]
 8004958:	b90b      	cbnz	r3, 800495e <_ungetc_r+0x1e>
 800495a:	f7fe fe31 	bl	80035c0 <__sinit>
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <_ungetc_r+0xd8>)
 8004960:	429c      	cmp	r4, r3
 8004962:	d12c      	bne.n	80049be <_ungetc_r+0x7e>
 8004964:	6874      	ldr	r4, [r6, #4]
 8004966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496a:	f023 0320 	bic.w	r3, r3, #32
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	b29b      	uxth	r3, r3
 8004972:	0759      	lsls	r1, r3, #29
 8004974:	d413      	bmi.n	800499e <_ungetc_r+0x5e>
 8004976:	06da      	lsls	r2, r3, #27
 8004978:	d5e8      	bpl.n	800494c <_ungetc_r+0xc>
 800497a:	071b      	lsls	r3, r3, #28
 800497c:	d50b      	bpl.n	8004996 <_ungetc_r+0x56>
 800497e:	4621      	mov	r1, r4
 8004980:	4630      	mov	r0, r6
 8004982:	f7fe fda1 	bl	80034c8 <_fflush_r>
 8004986:	2800      	cmp	r0, #0
 8004988:	d1e0      	bne.n	800494c <_ungetc_r+0xc>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	60a0      	str	r0, [r4, #8]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	61a0      	str	r0, [r4, #24]
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a0:	6862      	ldr	r2, [r4, #4]
 80049a2:	b2ed      	uxtb	r5, r5
 80049a4:	b1e3      	cbz	r3, 80049e0 <_ungetc_r+0xa0>
 80049a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049a8:	4293      	cmp	r3, r2
 80049aa:	dd12      	ble.n	80049d2 <_ungetc_r+0x92>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	3301      	adds	r3, #1
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	e7c8      	b.n	8004950 <_ungetc_r+0x10>
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <_ungetc_r+0xdc>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d101      	bne.n	80049c8 <_ungetc_r+0x88>
 80049c4:	68b4      	ldr	r4, [r6, #8]
 80049c6:	e7ce      	b.n	8004966 <_ungetc_r+0x26>
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <_ungetc_r+0xe0>)
 80049ca:	429c      	cmp	r4, r3
 80049cc:	bf08      	it	eq
 80049ce:	68f4      	ldreq	r4, [r6, #12]
 80049d0:	e7c9      	b.n	8004966 <_ungetc_r+0x26>
 80049d2:	4621      	mov	r1, r4
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff ff79 	bl	80048cc <__submore>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d0e6      	beq.n	80049ac <_ungetc_r+0x6c>
 80049de:	e7b5      	b.n	800494c <_ungetc_r+0xc>
 80049e0:	6921      	ldr	r1, [r4, #16]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	b151      	cbz	r1, 80049fc <_ungetc_r+0xbc>
 80049e6:	4299      	cmp	r1, r3
 80049e8:	d208      	bcs.n	80049fc <_ungetc_r+0xbc>
 80049ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80049ee:	42a9      	cmp	r1, r5
 80049f0:	d104      	bne.n	80049fc <_ungetc_r+0xbc>
 80049f2:	3b01      	subs	r3, #1
 80049f4:	3201      	adds	r2, #1
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	6062      	str	r2, [r4, #4]
 80049fa:	e7a9      	b.n	8004950 <_ungetc_r+0x10>
 80049fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a04:	6363      	str	r3, [r4, #52]	; 0x34
 8004a06:	2303      	movs	r3, #3
 8004a08:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7d1      	b.n	80049ba <_ungetc_r+0x7a>
 8004a16:	bf00      	nop
 8004a18:	08004e84 	.word	0x08004e84
 8004a1c:	08004ea4 	.word	0x08004ea4
 8004a20:	08004e64 	.word	0x08004e64

08004a24 <__swbuf_r>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	460e      	mov	r6, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	b118      	cbz	r0, 8004a36 <__swbuf_r+0x12>
 8004a2e:	6983      	ldr	r3, [r0, #24]
 8004a30:	b90b      	cbnz	r3, 8004a36 <__swbuf_r+0x12>
 8004a32:	f7fe fdc5 	bl	80035c0 <__sinit>
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <__swbuf_r+0x98>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	d12a      	bne.n	8004a92 <__swbuf_r+0x6e>
 8004a3c:	686c      	ldr	r4, [r5, #4]
 8004a3e:	69a3      	ldr	r3, [r4, #24]
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	071a      	lsls	r2, r3, #28
 8004a46:	d52e      	bpl.n	8004aa6 <__swbuf_r+0x82>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	b363      	cbz	r3, 8004aa6 <__swbuf_r+0x82>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	6963      	ldr	r3, [r4, #20]
 8004a54:	b2f6      	uxtb	r6, r6
 8004a56:	4283      	cmp	r3, r0
 8004a58:	4637      	mov	r7, r6
 8004a5a:	dc04      	bgt.n	8004a66 <__swbuf_r+0x42>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f7fe fd32 	bl	80034c8 <_fflush_r>
 8004a64:	bb28      	cbnz	r0, 8004ab2 <__swbuf_r+0x8e>
 8004a66:	68a3      	ldr	r3, [r4, #8]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60a3      	str	r3, [r4, #8]
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	6022      	str	r2, [r4, #0]
 8004a72:	701e      	strb	r6, [r3, #0]
 8004a74:	6963      	ldr	r3, [r4, #20]
 8004a76:	3001      	adds	r0, #1
 8004a78:	4283      	cmp	r3, r0
 8004a7a:	d004      	beq.n	8004a86 <__swbuf_r+0x62>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	07db      	lsls	r3, r3, #31
 8004a80:	d519      	bpl.n	8004ab6 <__swbuf_r+0x92>
 8004a82:	2e0a      	cmp	r6, #10
 8004a84:	d117      	bne.n	8004ab6 <__swbuf_r+0x92>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7fe fd1d 	bl	80034c8 <_fflush_r>
 8004a8e:	b190      	cbz	r0, 8004ab6 <__swbuf_r+0x92>
 8004a90:	e00f      	b.n	8004ab2 <__swbuf_r+0x8e>
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <__swbuf_r+0x9c>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	d101      	bne.n	8004a9c <__swbuf_r+0x78>
 8004a98:	68ac      	ldr	r4, [r5, #8]
 8004a9a:	e7d0      	b.n	8004a3e <__swbuf_r+0x1a>
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <__swbuf_r+0xa0>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	bf08      	it	eq
 8004aa2:	68ec      	ldreq	r4, [r5, #12]
 8004aa4:	e7cb      	b.n	8004a3e <__swbuf_r+0x1a>
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 f81f 	bl	8004aec <__swsetup_r>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0cc      	beq.n	8004a4c <__swbuf_r+0x28>
 8004ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aba:	bf00      	nop
 8004abc:	08004e84 	.word	0x08004e84
 8004ac0:	08004ea4 	.word	0x08004ea4
 8004ac4:	08004e64 	.word	0x08004e64

08004ac8 <_write_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4c07      	ldr	r4, [pc, #28]	; (8004ae8 <_write_r+0x20>)
 8004acc:	4605      	mov	r5, r0
 8004ace:	4608      	mov	r0, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	6022      	str	r2, [r4, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fb ffb1 	bl	8000a3e <_write>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_write_r+0x1e>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_write_r+0x1e>
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	2000029c 	.word	0x2000029c

08004aec <__swsetup_r>:
 8004aec:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <__swsetup_r+0xcc>)
 8004aee:	b570      	push	{r4, r5, r6, lr}
 8004af0:	681d      	ldr	r5, [r3, #0]
 8004af2:	4606      	mov	r6, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	b125      	cbz	r5, 8004b02 <__swsetup_r+0x16>
 8004af8:	69ab      	ldr	r3, [r5, #24]
 8004afa:	b913      	cbnz	r3, 8004b02 <__swsetup_r+0x16>
 8004afc:	4628      	mov	r0, r5
 8004afe:	f7fe fd5f 	bl	80035c0 <__sinit>
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <__swsetup_r+0xd0>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d10f      	bne.n	8004b28 <__swsetup_r+0x3c>
 8004b08:	686c      	ldr	r4, [r5, #4]
 8004b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	0715      	lsls	r5, r2, #28
 8004b12:	d42c      	bmi.n	8004b6e <__swsetup_r+0x82>
 8004b14:	06d0      	lsls	r0, r2, #27
 8004b16:	d411      	bmi.n	8004b3c <__swsetup_r+0x50>
 8004b18:	2209      	movs	r2, #9
 8004b1a:	6032      	str	r2, [r6, #0]
 8004b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	e03e      	b.n	8004ba6 <__swsetup_r+0xba>
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <__swsetup_r+0xd4>)
 8004b2a:	429c      	cmp	r4, r3
 8004b2c:	d101      	bne.n	8004b32 <__swsetup_r+0x46>
 8004b2e:	68ac      	ldr	r4, [r5, #8]
 8004b30:	e7eb      	b.n	8004b0a <__swsetup_r+0x1e>
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <__swsetup_r+0xd8>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	bf08      	it	eq
 8004b38:	68ec      	ldreq	r4, [r5, #12]
 8004b3a:	e7e6      	b.n	8004b0a <__swsetup_r+0x1e>
 8004b3c:	0751      	lsls	r1, r2, #29
 8004b3e:	d512      	bpl.n	8004b66 <__swsetup_r+0x7a>
 8004b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b42:	b141      	cbz	r1, 8004b56 <__swsetup_r+0x6a>
 8004b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d002      	beq.n	8004b52 <__swsetup_r+0x66>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7fe fe49 	bl	80037e4 <_free_r>
 8004b52:	2300      	movs	r3, #0
 8004b54:	6363      	str	r3, [r4, #52]	; 0x34
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	b94b      	cbnz	r3, 8004b86 <__swsetup_r+0x9a>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7c:	d003      	beq.n	8004b86 <__swsetup_r+0x9a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7fe fde7 	bl	8003754 <__smakebuf_r>
 8004b86:	89a2      	ldrh	r2, [r4, #12]
 8004b88:	f012 0301 	ands.w	r3, r2, #1
 8004b8c:	d00c      	beq.n	8004ba8 <__swsetup_r+0xbc>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60a3      	str	r3, [r4, #8]
 8004b92:	6963      	ldr	r3, [r4, #20]
 8004b94:	425b      	negs	r3, r3
 8004b96:	61a3      	str	r3, [r4, #24]
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	b953      	cbnz	r3, 8004bb2 <__swsetup_r+0xc6>
 8004b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ba4:	d1ba      	bne.n	8004b1c <__swsetup_r+0x30>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	0792      	lsls	r2, r2, #30
 8004baa:	bf58      	it	pl
 8004bac:	6963      	ldrpl	r3, [r4, #20]
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	e7f2      	b.n	8004b98 <__swsetup_r+0xac>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e7f7      	b.n	8004ba6 <__swsetup_r+0xba>
 8004bb6:	bf00      	nop
 8004bb8:	20000010 	.word	0x20000010
 8004bbc:	08004e84 	.word	0x08004e84
 8004bc0:	08004ea4 	.word	0x08004ea4
 8004bc4:	08004e64 	.word	0x08004e64

08004bc8 <_close_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4c06      	ldr	r4, [pc, #24]	; (8004be4 <_close_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4605      	mov	r5, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	f7fb ff4f 	bl	8000a76 <_close>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_close_r+0x1a>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_close_r+0x1a>
 8004be0:	602b      	str	r3, [r5, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	2000029c 	.word	0x2000029c

08004be8 <_fstat_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4c07      	ldr	r4, [pc, #28]	; (8004c08 <_fstat_r+0x20>)
 8004bec:	2300      	movs	r3, #0
 8004bee:	4605      	mov	r5, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	f7fb ff4a 	bl	8000a8e <_fstat>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	d102      	bne.n	8004c04 <_fstat_r+0x1c>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	b103      	cbz	r3, 8004c04 <_fstat_r+0x1c>
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	bd38      	pop	{r3, r4, r5, pc}
 8004c06:	bf00      	nop
 8004c08:	2000029c 	.word	0x2000029c

08004c0c <_isatty_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4c06      	ldr	r4, [pc, #24]	; (8004c28 <_isatty_r+0x1c>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4605      	mov	r5, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	f7fb ff49 	bl	8000aae <_isatty>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_isatty_r+0x1a>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_isatty_r+0x1a>
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	2000029c 	.word	0x2000029c

08004c2c <__locale_ctype_ptr_l>:
 8004c2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004c30:	4770      	bx	lr
	...

08004c34 <__locale_ctype_ptr>:
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <__locale_ctype_ptr+0x14>)
 8004c36:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <__locale_ctype_ptr+0x18>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf08      	it	eq
 8004c40:	4613      	moveq	r3, r2
 8004c42:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004c46:	4770      	bx	lr
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	20000074 	.word	0x20000074

08004c50 <_lseek_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4c07      	ldr	r4, [pc, #28]	; (8004c70 <_lseek_r+0x20>)
 8004c54:	4605      	mov	r5, r0
 8004c56:	4608      	mov	r0, r1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	6022      	str	r2, [r4, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fb ff30 	bl	8000ac4 <_lseek>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_lseek_r+0x1e>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_lseek_r+0x1e>
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	2000029c 	.word	0x2000029c

08004c74 <__ascii_mbtowc>:
 8004c74:	b082      	sub	sp, #8
 8004c76:	b901      	cbnz	r1, 8004c7a <__ascii_mbtowc+0x6>
 8004c78:	a901      	add	r1, sp, #4
 8004c7a:	b142      	cbz	r2, 8004c8e <__ascii_mbtowc+0x1a>
 8004c7c:	b14b      	cbz	r3, 8004c92 <__ascii_mbtowc+0x1e>
 8004c7e:	7813      	ldrb	r3, [r2, #0]
 8004c80:	600b      	str	r3, [r1, #0]
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	1c10      	adds	r0, r2, #0
 8004c86:	bf18      	it	ne
 8004c88:	2001      	movne	r0, #1
 8004c8a:	b002      	add	sp, #8
 8004c8c:	4770      	bx	lr
 8004c8e:	4610      	mov	r0, r2
 8004c90:	e7fb      	b.n	8004c8a <__ascii_mbtowc+0x16>
 8004c92:	f06f 0001 	mvn.w	r0, #1
 8004c96:	e7f8      	b.n	8004c8a <__ascii_mbtowc+0x16>

08004c98 <memcpy>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	1e43      	subs	r3, r0, #1
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	bd10      	pop	{r4, pc}
 8004ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cac:	e7f7      	b.n	8004c9e <memcpy+0x6>

08004cae <__malloc_lock>:
 8004cae:	4770      	bx	lr

08004cb0 <__malloc_unlock>:
 8004cb0:	4770      	bx	lr

08004cb2 <_realloc_r>:
 8004cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	460e      	mov	r6, r1
 8004cba:	b921      	cbnz	r1, 8004cc6 <_realloc_r+0x14>
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cc2:	f7fe bddd 	b.w	8003880 <_malloc_r>
 8004cc6:	b922      	cbnz	r2, 8004cd2 <_realloc_r+0x20>
 8004cc8:	f7fe fd8c 	bl	80037e4 <_free_r>
 8004ccc:	4625      	mov	r5, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd2:	f000 f834 	bl	8004d3e <_malloc_usable_size_r>
 8004cd6:	42a0      	cmp	r0, r4
 8004cd8:	d20f      	bcs.n	8004cfa <_realloc_r+0x48>
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7fe fdcf 	bl	8003880 <_malloc_r>
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0f2      	beq.n	8004cce <_realloc_r+0x1c>
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4622      	mov	r2, r4
 8004cec:	f7ff ffd4 	bl	8004c98 <memcpy>
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	f7fe fd76 	bl	80037e4 <_free_r>
 8004cf8:	e7e9      	b.n	8004cce <_realloc_r+0x1c>
 8004cfa:	4635      	mov	r5, r6
 8004cfc:	e7e7      	b.n	8004cce <_realloc_r+0x1c>
	...

08004d00 <_read_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4c07      	ldr	r4, [pc, #28]	; (8004d20 <_read_r+0x20>)
 8004d04:	4605      	mov	r5, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fb fe78 	bl	8000a04 <_read>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_read_r+0x1e>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_read_r+0x1e>
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	2000029c 	.word	0x2000029c

08004d24 <__ascii_wctomb>:
 8004d24:	b149      	cbz	r1, 8004d3a <__ascii_wctomb+0x16>
 8004d26:	2aff      	cmp	r2, #255	; 0xff
 8004d28:	bf85      	ittet	hi
 8004d2a:	238a      	movhi	r3, #138	; 0x8a
 8004d2c:	6003      	strhi	r3, [r0, #0]
 8004d2e:	700a      	strbls	r2, [r1, #0]
 8004d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d34:	bf98      	it	ls
 8004d36:	2001      	movls	r0, #1
 8004d38:	4770      	bx	lr
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	4770      	bx	lr

08004d3e <_malloc_usable_size_r>:
 8004d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d42:	1f18      	subs	r0, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfbc      	itt	lt
 8004d48:	580b      	ldrlt	r3, [r1, r0]
 8004d4a:	18c0      	addlt	r0, r0, r3
 8004d4c:	4770      	bx	lr
	...

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
